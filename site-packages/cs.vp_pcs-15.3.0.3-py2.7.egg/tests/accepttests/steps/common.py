#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
from cs.pcs.checklists import Checklist
from cs.pcs.issues import Issue
from cs.pcs.projects import ProjectCategory, Project
from cdb.validationkit import operation

__docformat__ = "restructuredtext en"
__revision__ = "$Id: common.py 124458 2015-05-06 06:52:53Z wen $"


project_category = ProjectCategory.Query()[0]


class Project(Project):
    def __eq__(self, other):
        if hasattr(other, "cdb_project_id"):
            return self.cdb_project_id == other.cdb_project_id
        else:
            return False


class Checklist(Checklist):
    def __eq__(self, other):
        if hasattr(other, "cdb_project_id") and hasattr(other, "checklist_id"):
            return (self.cdb_project_id == other.cdb_project_id and
                    self.checklist_id == other.checklist_id)
        else:
            return False


class Issue(Issue):
    def __eq__(self, other):
        if hasattr(other, "cdb_project_id") and hasattr(other, "issue_id"):
            return (self.cdb_project_id == other.cdb_project_id and
                    self.issue_id == other.issue_id)
        else:
            return False


def generateProject(presets_custom={}, user_input_custom={}):
    preset = {"category": project_category.name}
    preset.update(presets_custom)
    user_input = {"project_name": "project name", "template": 0}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Project,
                     user_input=user_input, preset=preset)


def generateChecklist(project, presets_custom={}, user_input_custom={}):
    preset = {"cdb_project_id": project.cdb_project_id,
              "subject_id": "somebody"}
    preset.update(presets_custom)
    user_input = {"checklist_name": "Checklist"}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Checklist,
                     user_input=user_input,
                     preset=preset)


def generateProjectIssue(project, presets_custom={}, user_input_custom={}):
    preset = {"cdb_project_id": project.cdb_project_id}
    preset.update(presets_custom)
    user_input = {"issue_name": "Test"}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Issue,
                     user_input=user_input,
                     preset=preset)
