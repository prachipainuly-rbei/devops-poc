#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import run_with_added_roles, operation, given, \
    when, then, log
from common import generateChecklist, generateProject, generateProjectIssue
from cs.vp.items import Item
from cs.vp_pcs.checklists_items import PartReference
from cs.vp_pcs.issues_items import IssuePartReference


# -----------------------------------------------------------------------
# Scenario Outline: Delete restriction for items with related checklists
#
# -----------------------------------------------------------------------
@given("^An item exists$")
def step(context):
    @run_with_added_roles(["Administrator"])
    def create(context):
        user_input = {}
        preset = {"benennung": "Motor", "eng_benennung": "Motor", "t_kategorie": "Baugruppe",
                  "t_bereich": "IT", "gebrauchsstand": "aktiv", "mengeneinheit": "Stk"}
        context.item = operation("CDB_Create", Item, preset=preset)
    create(context)


@given("^a checklist exists$")
def step(context):
    def create(context):
        context.project = generateProject()
        context.cl = generateChecklist(context.project)
    create(context)


@given("^item and checklist are (?P<relation>.*?)$")
def step(context, relation):
    context.rel = True

    def create(context):
        if relation == "related":
            preset = {"cdb_project_id": context.project.cdb_project_id, "checklist_id": context.cl.checklist_id,
                      "teilenummer": context.item.teilenummer}
            context.reference = operation("CDB_Create", PartReference, preset=preset)
        if relation == "unrelated":
            context.rel = False
    create(context)


@when("^User tries to delete an item$")
def step(context):
    if not context.rel:
        try:
            operation("CDB_Delete", context.item)
        except Exception, e:
            log("Item can not be deleted, details: %s" % e)


@then("^the item is (?P<delete_state>.*?)$")
def step(context, delete_state):
    context.success = True
    if (context.rel is False and delete_state == "not deleted") or (context.rel and delete_state == "deleted"):
        context.success = False
    assert context.success, "Item can not be deleted because a relation to a checklist exists."


# -----------------------------------------------------------------------
# Scenario Outline: Delete restriction for items related to issues
#
# -----------------------------------------------------------------------
@given("^an issue exists$")
def step(context):
    def create(context):
        context.project = generateProject()
        context.iss = generateProjectIssue(context.project)
    create(context)


@given("^item and issue are (?P<relation>.*?)$")
def step(context, relation):
    context.rel = True

    def create(context):
        if relation == "related":
            preset = {"cdb_project_id": context.project.cdb_project_id, "issue_id": context.iss.issue_id,
                      "teilenummer": context.item.teilenummer}
            context.reference = operation("CDB_Create", IssuePartReference, preset=preset)
        if relation == "unrelated":
            context.rel = False
    create(context)


# -----------------------------------------------------------------------
# Scenario Outline: Delete restriction for projects with related item(s)
#
# -----------------------------------------------------------------------
@given("^a project exists$")
def step(context):
    def create(context):
        context.project = generateProject()
    create(context)


@given("^item and project are (?P<relation>.*?)$")
def step(context, relation):
    context.rel = True

    @run_with_added_roles(["Administrator"])
    def create(context):
        if relation == "related":
            preset = {"cdb_t_project_id": context.project.cdb_project_id, "t_bereich": "IT"}
            context.reference = operation("CDB_Modify", context.item, preset=preset)
        if relation == "unrelated":
            context.rel = False
    create(context)


@when("^User tries to delete the project$")
def step(context):
    if not context.rel:
        try:
            operation("CDB_Delete", context.project)
        except Exception, e:
            log("Item can not be deleted, details: %s" % e)


@then("^the project is (?P<delete_state>.*?)$")
def step(context, delete_state):
    context.success = True
    if (context.rel is False and delete_state == "not deleted") or (context.rel and delete_state == "deleted"):
        context.success = False
    assert context.success, "Item can not be deleted because a relation to a checklist exists."
