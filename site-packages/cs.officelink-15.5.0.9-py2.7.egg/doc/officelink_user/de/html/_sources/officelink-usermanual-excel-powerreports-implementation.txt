.. _`officelink-usermanual-excel-powerreports-implementation`:

Implementierung eigener Provider
################################

Eigene Datenprovider können in einem beliebigen Python Kundenmodul abgelegt werden.
Damit eigene Datenprovider zu einer Datenquelle zugeordnet werden können, müssen die jeweiligen 
Python Module in der dem jeweiligen Kundenmodul zugehörigen :file:`default.conf` eingetragen werden. 
Befinden sich die Implementierungen eigener Datenprovider beispielsweise in dem Python Modul 
:file:`my_namespace/my_module/PowerReportsCodeSamples.py` , so muss die Zeile
my_namespace.my_module.PowerReportsCodeSamples zur Datei :file:`my_namespace/my_module/default.conf`
hinzugefügt werden. Der Eintrag bewirkt, dass die enthaltenen Providerklassen bei der Zuordnung zur
Datenquelle zur Auswahl stehen.

.. _`officelink-usermanual-excel-powerreports-implementation-selectionlist`:

.. figure:: images/excel_powerreports_implementation_selectionlist.png
   :align: center

   Excel: PowerReports - Auswahlkatalog für eigene Providerimplementierungen

Die Implementierung eigener Datenprovider erfolgt durch Ableitung von der Basisklasse 
:file:`contact.PowerReports.CustomDataProvider` .

.. code-block:: python

    from cdb.objects.PowerReports import *
    class ProjectsProvider(CustomDataProvider):
        ...

Für einen Datenprovider müssen zwei Kardinalitäten angegeben werden. Die Kardinalität der Ergebnismenge und die Kardinalität 
für den Aufruf. Die Definition dieser Kardinalitäten erfolgt durch die zwei Klassenvariablen CARD und CALL_CARD.

- :guilabel:`CARD`   

  Gibt die Ergebniskardinalität eines Datenproviders an. Gültige Werte sind:

  - :guilabel:`CARD_1`   

    Für Datenprovider, die ein einzelnes Datenobjekt als Ergebnismenge liefern.
  
  - :guilabel:`CARD_N`   

    Für Datenprovider, die Listen als Ergebnismenge liefern.

- :guilabel:`CALL_CARD`   

  Die Aufrufkardinalität legt u.a. fest, ob ein Datenprovider die Ergebnismenge kontextfrei oder kontextbezogen ermittelt. 
  Kontextbezogene Datenprovider werden immer als Subprovider zu einem übergeordneten Provider zugeordnet und erhalten zur 
  Ermittlung der eigenen Ergebnismenge das Ergebnis des übergeordneten Providers als ersten Parameter.

  - :guilabel:`CARD_0`   

    Für Datenprovider, deren Ergebnismenge kontextfrei ermittelt wird. Beispielsweise ein Datenprovider, der alle laufenden 
    Projekte liefert. Datenprovider mit der Aufrufkardinalität CARD_0 können nicht als Subprovider zugeordnet werden, sondern 
    werden immer Top-Level zur Datenquelle zugeordnet. 
  
  - :guilabel:`CARD_1`   

    Für Datenprovider, die zur Ermittlung der eigenen Ergebnismenge genau ein Datenobjekt des übergeordneten Providers benötigen. 
    Beispielsweise ein Datenprovider, der zu einem Projekt den Projektfortschritt und weitere Kennzahlen berechnet. Datenprovider 
    mit der Kardinalität CARD_1 werden immer als Subprovider zu einem übergeordneten Provider zugeordnet. Liefert der übergeordnete 
    Provider als Ergebnis eine Liste, wird der Subprovider mehrfach mit jedem Listenelement einzeln aufgerufen. Diese Kombination 
    aus Ergebniskardinalität des übergeordneten Providers und Aufrufkardinalität des untergeordneten Providers erfordert die Erstellung 
    eines besonderen Template Sheets in der Excel Vorlage. Weitere Informationen zur Erstellung derartiger Vorlagen finden Sie in 
    :ref:`officelink-usermanual-excel-powerreports-creation` .
  
  - :guilabel:`CARD_N`   

    Für Datenprovider, die zur Ermittlung der Ergebnismenge eine Ergebnisliste vom übergeordneten Datenprovider erwarten. 
    Beispielsweise ein Provider, der über eine Liste von Projekten, die vom übergeordneten Provider geliefert wird, aggregierte 
    Informationen liefert.

Folgendes Codebeispiel zeigt einen Datenprovider, der eine Liste von Projekten liefern soll und dafür keinen Kontext benötigt.

.. code-block:: python
    :emphasize-lines: 2,3

    class ProjectsProvider(CustomDataProvider):
        CARD      = CARD_N
        CALL_CARD = CARD_0
        ...

Im Gegensatz zum vorherigen Beispiel kann der im folgenden Codebeispiel dargestellte Datenprovider ausschließlich als Subprovider 
verwendet werden, da zur Ergebnisermittlung ein Ergebnisobjekt des übergeordneten Providers benötigt wird. Ein derartiger Provider 
könnte beispielsweise alle laufenden Projekte zu einem Kunden liefern. Der Kunde ist dabei das Ergebnis des übergeordneten Providers.

.. code-block:: python
    :emphasize-lines: 2,3

    class ProjectsProvider(CustomDataProvider):
        CARD      = CARD_N
        CALL_CARD = CARD_1
        ...

Aus den Kardinalitäten ergibt sich, wie Datenprovider miteinander verkettet werden können. Die Kardinalität der Ergebnismenge 
muss zur Aufrufkardinalität des Subproviders passen.

- :guilabel:`CARD 1 --> CALL_CARD 1`   

  Der übergeordnete Provider liefert beispielsweise ein Projekt, welches vom Subprovider als Parameter zur Berechnung seiner 
  eigenen Ergebnismenge verwendet wird. Dieser könnte beispielsweise den Projektfortschritt und weitere Kennzahlen zum Projekt 
  berechnen.

- :guilabel:`CARD N --> CALL_CARD N`   

  Beispielsweise zur Berechnung aggregierter Daten über die Ergebnisliste des übergeordneten Providers. Der Subprovider kann 
  keine Daten liefern, die sich auf einzelne Listenelemente des übergeordneten Ergebnisses beziehen, da dieser Zusammenhang 
  beim Export und Import verloren geht und in Excel nicht darstellbar ist. In diesem Fall muss eine Multi-Export Konfiguration 
  verwendet werden.

- :guilabel:`CARD N --> CALL_CARD 1` (Sonderfall Multi-Export)  

  Der Subprovider wird für jedes Ergebnisobjekt des übergeordneten Providers einzeln aufgerufen und exportiert. Mit einer 
  Multi-Export Konfiguration können geschachtelte Listen und komplexe Zeilen in Excel dargestellt werden. Die Excel Datenbindung 
  für Daten, die via Multi-Export exportiert werden, muss bei der Vorlagenerstellung auf einem speziellen Template Sheet erfolgen. 
  Weitere Informationen zur Erstellung derartiger Vorlagen finden Sie in
  :ref:`officelink-usermanual-excel-powerreports-creation-multiexport` .

Die Implementierung eines Datenproviders besteht im Wesentlichen aus zwei Methoden. Eine Methode zur Definition des XML Schemas 
und eine Methode zur Ermittlung der Ergebnismenge.

.. code-block:: python
    :emphasize-lines: 4,6

    class ProjectsProvider(CustomDataProvider):
        CARD      = CARD_N
        CALL_CARD = CARD_1
        def getSchema(self):
            ...
        def getData(self, parent_result, source_args, **kwargs):
            ...

.. _`officelink-usermanual-excel-powerreports-implementation-getschema`:

getSchema(self)
===============

Liefert das XML Schema zur Herstellung der Datenbindung in Excel. Das XML Schema muss zu den durch die Methode 
:file:`getData` gelieferten Daten passen. Das Schema wird durch die Konstruktion eines Objekts vom Typ 
:file:`XSDType` beschrieben. Als Konstruktorparameter wird die Kardinalität angegeben, die mit der 
Ergebniskardinalität des Providers identisch sein muss.  Mit der Methode :file:`add_attr` können anschließend 
zu dem Schemaobjekt beliebig viele Attribute hinzugefügt werden. Der Datentyp wird dabei als zweiter Parameter in Form 
eines cdb.sqlapi Datentypen angegeben. Die hinzugefügten Attribute muss es in der Datenbank nicht zwingend geben, sondern 
können auch durch den Provider berechnet sein, jedoch dürfen deren Attributnamen keine Großbuchstaben enthalten.

.. code-block:: python
    :emphasize-lines: 5,6,7,8,10

    class ProjectsProvider(CustomDataProvider):
        CARD      = CARD_N
        CALL_CARD = CARD_1
        def getSchema(self):
            schema = XSDType(self.CARD)
            schema.add_attr('cdb_project_id', sqlapi.SQL_CHAR)
            schema.add_attr('project_name', sqlapi.SQL_CHAR)
            schema.add_attr('calculated', sqlapi.SQL_INTEGER)
            ...
            return schema

Als zweiter Parameter kann im XSDType Konstruktor optional ein Relationsname oder eine cdb.objects Klasse angegeben werden. 
Das Schemaobjekt enthält dann automatisch alle in der Relation enthaltenen Attribute. Im Falle einer cdb.objects Klasse
sind anschließend zusätzlich alle MappedAttributes im Schemaobjekt enthalten.

.. code-block:: python
    :emphasize-lines: 3

    ...
    def getSchema(self):
        schema = XSDType(self.CARD, 'cdbpcs_project')
        schema.add_attr('calculated', sqlapi.SQL_INTEGER)
        ...
        return schema

Basiert das Schema auf genau einer Datenbankrelation oder cdb.objects Klasse, kann getSchema auch direkt einen Relationsnamen 
oder eine cdb.objects Klasse zurückliefern. Das XML Schema wird in diesem Fall vollständig automatisch aus dem Datenbankschema 
erzeugt. Im Falle einer cdb.objects Klasse sind wiederum zusätzlich alle MappedAttributes im XML Schema enthalten.

.. code-block:: python
    :emphasize-lines: 3

    ...
    def getSchema(self):
        return "cdbpcs_project"

Für zeilenweise kombinierte Daten kann das Schema mit dem Plus-Operator aus den zugrundeliegenden Typen konstruiert werden. 
Bei namensgleichen Attributen in den beteiligten Relationen muss als dritter Parameter ein Präfix angegeben werden, der die 
Eindeutigkeit der Attributbezeichner in dem XML Schema sicherstellt. Dieser Präfix ist auch in der Implementierung von 
:file:`getData` bei der Konstruktion der Ergebnisobjekte zu verwenden.

Folgendes Beispiel zeigt die Konstruktion eines Schemas für Artikel, erweitert um das Schema für die zugehörige Projekte:

.. code-block:: python
    :emphasize-lines: 3,4

    ...
    def getSchema(self):
        schema = XSDType(self.CARD,'teile_stamm')
        schema += XSDType(self.CARD, 'cdbpcs_project', 'Project_')
        ...
        return schema

.. _`officelink-usermanual-excel-powerreports-implementation-getdata`:

getData(self, parent_result, source_args, \**kwargs)
====================================================

Liefert die Reportdaten beim Aufruf eines Reports. Zur Ermittlung der Ergebnismenge werden dem Provider folgende Argumente übergeben:

:guilabel:`parent_result`
   Ergebnismenge des übergeordneten Providers. Ist der übergeordnete Provider der Kontextprovider, enthält
   :file:`parent_result` die Objekte, auf denen der Report aufgerufen wurde. In Abhängigkeit von der Ergebniskardinalität
   des übergeordneten Providers ist :file:`parent_result` entweder vom Typ :file:`ReportDataList` oder
   :file:`ReportData` . Für Top-Level Provider ist dieser Parameter immer :file:`None` .

:guilabel:`source_args`
   Ein Dictionary mit alle Argumenten aus dem optional vorgeschalteten Reportdialog. Die Schlüssel des Dictionaries entsprechen
   den Attributnamen der zugrundeliegenden Maskenkonfiguration, jedoch bestehen sie in diesem Moment immer nur aus Kleinbuchstaben,
   selbst wenn sie in der Maske teilweise mit Grossbuchstaben (im Providernamen) definiert wurden. Die Attributnamen in der
   Maskenkonfiguration folgen zur Zuordnung der Parameter zu den Datenprovidern dem Namensschema <Providername>-<Attributname>.

:guilabel:`kwargs`
   Alle Argumente aus dem optional vorgeschalteten Reportdialog, die durch die Namenskonvention <Providername>-
   <Attributname> an den Datenprovider adressiert sind. Die Adressierung an den Provider ist aus den Argumentnamen entfernt,
   so dass die Argumente direkt via Attributname verwendet werden können. Wie oben erwähnt, enthalten die Atttributnamen
   an dieser Stelle stets nur Kleinbuchstaben.

Die Rückgabe der Reportdaten erfolgt in Abhängigkeit von der Ergebniskardinalität (CARD) des Providers. Für die Ergebniskardinalität 
CARD_1 muss ein :file:`ReportData` Objekt, für die Ergebniskardinalität CARD_N eine :file:`ReportDataList` 
zurückgeliefert werden. Die Konstruktion dieser Ergebnisobjekte wird im Folgenden beschrieben.

.. _`officelink-usermanual-excel-powerreports-implementation-reportdata`:

ReportData
==========

Ergebnisobjekt für Datenprovider mit der Ergebniskardinalität CARD_1.

Die Konstruktion von :file:`ReportData` Objekten erfolgt immer durch Angabe des konstruierenden Providers als 1.Parameter. 
Es wird also immer :file:`self` als ersten Parameter übergeben. Folgendes Beispiel konstruiert ein leeres 
:file:`ReportData` Objekt und gibt dieses als Ergebnis zurück.

.. code-block:: python
    :emphasize-lines: 5

    class SampleProvider(CustomDataProvider):
        CARD = CARD_1
        ...
        def getData(self,parent_result,source_args,**kwargs):
            return ReportData(self)

Der Zugriff auf die Elemente eines :file:`ReportData` Objekts entspricht den üblichen Zugriffsmethoden auf Python 
Dictionaries. Verfügbar sind die Methoden :file:`keys, values` und :file:`items` . Das Setzen und Lesen 
einzelner Attribute erfolgt durch den Indexoperator.

.. code-block:: python
    :emphasize-lines: 3,4

    def getData(self,parent_result,source_args,**kwargs):
        data = ReportData(self)
        data["cdb_project_id"] = "4711"
        data["project_name"] = "Test project"
        return data

Die Konstruktion von :file:`ReportData` Objekten kann direkt aus einem cdb.objects-Objekt oder sqlapi.Record 
erfolgen. Hierfür wird das Objekt bzw. der Record als zweiter Parameter an den Konstruktor übergeben.

.. code-block:: python
    :emphasize-lines: 2,3

    def getData(self,parent_result,source_args,**kwargs):
        project = pcs.Project.ByKeys('P000001')
        data = ReportData(self, project)
        return data

Zusätzlich können weitere beliebige Felder hinzugefügt werden.

.. code-block:: python
    :emphasize-lines: 4

    def getData(self,parent_result,source_args,**kwargs):
        project = pcs.Project.ByKeys('P000001')
        data = ReportData(self, project)
        data["calculated_attribute"] = 42
        return data

:file:`ReportData` Objekte, die aus cdb.objects Objekten konstruiert werden, können auch die zum Objekt gehörigen 
Langtexte als Ergebnis zurückliefern. Hierfür kann als dritter Parameter eine Liste von Langtextrelationen angegeben werden.

.. code-block:: python
    :emphasize-lines: 3

    def getData(self,parent_result,source_args,**kwargs):
        project = pcs.Project.ByKeys('P000001')
        data = ReportData(self, project, ['cdbpcs_proj_txt'])
        return data

Für zeilenweise kombinierte Daten, beispielsweise Artikel mit zugehörigem Projekt, können :file:`ReportData` Objekte 
mit dem Plus-Operator verknüpft werden. Bei namensgleichen Attributen in den beteiligten Relationen muss als dritter Parameter ein 
Präfix angegeben werden, der die Eindeutigkeit der Attributbezeichner sicherstellt. Dabei ist derselbe Präfix zu verwenden, der auch 
bei der Schemaerstellung in der Implementierung von :file:`getSchema` verwendet wurde. Folgendes Beispiel zeigt die 
Erstellung eines :file:`ReportData` Objektes aus einem Artikel mit anschließender Erweiterung um das zugehörige Projekt. 

.. code-block:: python
    :emphasize-lines: 3,4

    def getData(self,parent_result,source_args,**kwargs):
        item = pdd.Item.ByKeys('4711', '')
        data = ReportData(self, item)
        data += ReportData(self, item.Project, prefix="Project_")
        return data

.. _`officelink-usermanual-excel-powerreports-implementation-reportdatalist`:

ReportDataList
==============

Ergebnisobjekt für Datenprovider mit der Ergebniskardinalität CARD_N.

Die Konstruktion von :file:`ReportDataList` Objekten erfolgt immer durch Angabe des konstruierenden Providers als 
ersten Parameter. Folgendes Beispiel konstruiert eine leere :file:`ReportDataList` und gibt diese als Ergebnis zurück.

.. code-block:: python
    :emphasize-lines: 5

    class SampleProvider(CustomDataProvider):
        CARD = CARD_N
        ...
        def getData(self):
            return ReportDataList(self)

:file:`ReportDataList` Objekte bestehen aus einer Liste von :file:`ReportData` Objekten und bieten zum 
Zugriff auf Listenelemente die üblichen Zugriffsmethoden für Python Listen: :file:`append, count, extend, index, insert, pop, remove, reverse` und :file:`sort` . Darüberhinaus können alle Listenoperatoren verwendet werden. Folgendes 
Beispiel zeigt, wie mit dem Plus-Operator zwei Listenelemente hinzugefügt werden, die jeweils ein Projekt enthalten.

.. code-block:: python
    :emphasize-lines: 3,4

    def getData(self,parent_result,source_args,**kwargs):
        data = ReportDataList(self)
        data += ReportData(self, pcs.Project.ByKeys('P000001'))
        data += ReportData(self, pcs.Project.ByKeys('P000002'))
        return data

Mit den Plus-Operator kann als verkürzte Schreibweise auch direkt ein sqlapi.Record oder cdb.objects Objekt hinzugefügt werden, 
ohne erst selbst ein ReportData Objekt zu konstruieren.

.. code-block:: python
    :emphasize-lines: 3,4

    def getData(self,parent_result,source_args,**kwargs):
        data = ReportDataList(self)
        data += pcs.Project.ByKeys('P000001')
        data += pcs.Project.ByKeys('P000002')
        return data

ReportDataList Objekte können direkt aus einer Liste von cdb.objects Objekten oder einem sqlapi.RecordSet2 konstruiert werden. 
Dabei werden automatisch für jedes Listenelement ReportData Objekte konstruiert und hinzugefügt.

.. code-block:: python
    :emphasize-lines: 2,3

    def getData(self,parent_result,source_args,**kwargs):
        projects = pcs.Project.Query("status>0")
        data = ReportDataList(self, projects)
        return data

Als dritter Parameter kann bei der Konstruktion aus cdb.objects Objekten eine Liste von einzubeziehenden Langtextrelationen 
angegeben werden. 

.. code-block:: python
    :emphasize-lines: 3

    def getData(self,parent_result,source_args,**kwargs):
        projects = pcs.Project.Query("status>0")
        data = ReportDataList(self, projects, ['cdbpcs_proj_txt'])
        return data

Bei der Konstruktion von Ergebnislisten ist zu berücksichtigen, dass die Listenelemente nicht heterogen sein dürfen. Es ist 
also beispielsweise nicht möglich, Projekte und Dokumente gemischt in einer ReportDataList zurückzugeben.

.. _`officelink-usermanual-excel-powerreports-implementation-getclass`:

getClass(self)
==============

Gibt die cdb.objects Klasse der gelieferten Daten zurück, wenn der Provider Daten in Form von cdb.objects Objekten liefert. 
Werden die Daten nicht aus cdb.objects Objekten konstruiert, wird diese Methode nicht implementiert. Folgendes Beispiel zeigt 
die Implementierung für einen Provider, der Projekte als Ergebnis liefert.

.. code-block:: python

    def getClass():
        return pcs.Projects.Project

Liefert ein eigener Provider kombinierte Daten, beispielsweise Artikel mit Projekt, so ist der Typ des Primärobjekts anzugeben. 
Das Primärobjekt ist das initiale Objekt, dass zur ReportData Konstruktion verwendet wurde.

.. code-block:: python
    :emphasize-lines: 3,7

    def getData(self,parent_result,source_args,**kwargs):
        item = pdd.Item.ByKeys('4711', '')
        data = ReportData(self, item) # <- Primary object
        data += ReportData(self, item.Project, prefix="Project_")
        return data
    def getClass(self):
        return pdd.Item # <- Primary object

Die Implementierung von :file:`getClass` ermöglicht die Verwendung von Relationship-Providern als Subprovider an 
eigenen Providern. Eigene Provider lassen sich somit direkt in das Objektmodell des cdb.objects Frameworks integrieren. 
Liefert beispielsweise ein eigener Provider Projekte, so können alle von Projekten ausgehende Beziehungen als Subprovider 
an den eigenen Provider angehängt werden. Auf diese Weise können also zu den selbst ermittelten Projekten beispielsweise Offenen 
Punkte, Aufgaben oder Dokumente ohne weitere Programmierung in die Datenquelle integriert werden.

Darüberhinaus erkennt das Report Framework an dieser Methode cdb.objects basierte Provider, so dass bei fehlender Implementierung 
beispielsweise die in :ref:`officelink-usermanual-excel-powerreports-source-and-provider-provider-parameter` 
beschriebenen Parameter nicht automatisch angelegt werden.

.. _`officelink-usermanual-excel-powerreports-implementation-getdefaultparameters`:

getDefaultParameters(self)
==========================

Gibt ein Dictionary mit Parameternamen und Defaultwerten zurück, die bei der Neuanlage eines Providers dieses Typs automatisch 
angelegt werden und anschließend im Register 'Parameter' des Providers angepasst werden können. Die durch diese Methode 
zurückgelieferten Parameternamen können in der Implementierung des Providers verwendet werden, um den Provider im Verwendungskontext 
konfigurierbar zu machen. Auf diese Art und Weise lassen sich universelle und konfigurierbare Datenprovider selbst implementieren.

.. code-block:: python

    def getDefaultParameters():
        return {"My Parameter" : "My Value"}

cdb.objects basierte Datenprovider erhalten zusätzlich automatisch immer folgende Defaultparameter, sofern die 
:file:`getClass` Methode implementiert wurde.

.. _`officelink-usermanual-excel-powerreports-implementation-defaultparameters`:

.. figure:: images/excel_powerreports_implementation_defaultparameters.png
   :align: center

   Excel: PowerReports - Defaultparameters

Die Auswertung dieser Parameter erfolgt automatisch und muss für eigene Provider nicht selbst implementiert werden. 

Der Zugriff auf eigene Parameter eines Providers erfolgt durch die Methode :file:`getParameter(name)` .

.. code-block:: python
    :emphasize-lines: 2,3

    def getData(self,parent_result,source_args,**kwargs):
        param = self.getParameter("My Parameter")
        if param == "My Value":
            ...
        else:
            ...
            ...

.. _`officelink-usermanual-excel-powerreports-implementation-getargumentdefinitions`:

getArgumentDefinitions(self)
============================

Die Ergebnismenge von Datenprovidern kann durch einen vorgeschalteten Reportdialog beeinflusst werden (siehe auch
:ref:`officelink-usermanual-excel-powerreports-creation-dialogs` ). Üblicherweise werden dabei zusätzliche
einschränkende Suchbedingungen interaktiv vom Anwender abgefragt. Damit auch zu einem späteren Zeitpunkt nachvollziehbar
ist, welche Daten in einem Report dargestellt werden, welche Abfrageparameter also zu dem speziellen Ergebnis geführt
haben, ist es häufig sinnvoll, die verwendeten Abfrageparameter in dem Report mit darzustellen.

Zu diesem Zweck kann die Methode :guilabel:`getArgumentDefinitions` implementiert werden. Die Methode gibt
ein Dictionary mit Parameternamen und den zugehörigen Datentypen zurück. Die zurückgelieferten Argumentnamen werden
automatisch mit dem angegebenen Datentyp in das XML Schema unter dem Schemanamen :guilabel:`Arguments` 
hinzugefügt und beim Datenexport mit exportiert.

Die Argumentnamen werden dabei automatisch um den Providernamen erweitert, so dass eine eindeutige Zuordnung zum Datenprovider
sichergestellt ist (analog zur Dialogkonfiguration wie in :ref:`officelink-usermanual-excel-powerreports-creation-dialogs` 
beschrieben).

.. important:: 

   Die Attributnamen dürfen keine Großbuchstaben enthalten.

Die Verwendung im Detail am Beispiel eines Reports über Projekte mit einem vorgeschalteten Dialog zur optionalen Einschränkung
auf eine bestimmte Kategorie (der Dialog enthält das Attribut :guilabel:`projekte-category` , ermöglicht also die
Eingabe einer Kategorie, die von dem Datenprovider :guilabel:`projekte` ausgewertet wird):

.. _`officelink-usermanual-excel-powerreports-implementation-getargumentdefinitions-dlg`:

.. figure:: images/excel_powerreports_implementation_getargumentdefinitions_dlg.png
   :align: center

   Excel: PowerReports - Reportdialog am Beispiel Abfrage der Projektkategorie

Die im folgenden Codebeispiel dargestellte Implementierung des Datenproviders wertet die abgefragte Kategorie aus und schränkt
so die Ergebnismenge ein. Die Methode :guilabel:`getArgumentDefinitions` liefert das Attribut :guilabel:`category` 
und teilt dem PowerReports Framework damit mit, dass dieses Argument mit exportiert werden soll.

.. code-block:: python
    :emphasize-lines: 5,10,11

    class Projekte(CustomDataProvider):
        def getSchema(self):
            return "cdbpcs_project"
        def getData(self,parent_result,source_args,**kwargs):
            category = kwargs["category"] # Parameter from dialog
            cond = ""
            if category:
                cond = "category='%s'" % category
            return ReportDataList(self, pcs.Projects.Project.Query(cond))
        def getArgumentDefinitions(self):
            return {"category" : sqlapi.SQL_CHAR}

Aufgrund der obigen Implementierung von :guilabel:`getArgumentDefinitions` ist das in dem Reportdialog verwendete
Attribut unter :guilabel:`Arguments` verfügbar und kann in der Datenbindung der Excel Vorlage verwendet werden.

.. _`officelink-usermanual-excel-powerreports-implementation-getargumentdefinitions-schematree`:

.. figure:: images/excel_powerreports_implementation_getargumentdefinitions_schematree.png
   :align: center

   Excel: PowerReports - XML Schema für Argumente

Nach Herstellung der Datenbindung enthalten Reports die verwendete Suchbedingung für die Projektkategorie.

.. _`officelink-usermanual-excel-powerreports-implementation-getargumentdefinitions-result1`:

.. figure:: images/excel_powerreports_implementation_getargumentdefinitions_result1.png
   :align: center

   Excel: PowerReports - Report mit einschränkender Suchbedingung (1)

Die Suchbedingung kann direkt in dem Report geändert werden und anschließend die Kopplungsfunktion
:guilabel:`Report aktualisieren` aufgerufen werden. 

Der Report wird mit den geänderten Suchbedingungen aktualisiert, ohne diesen neu aus dem System aufrufen zu müssen.

.. _`officelink-usermanual-excel-powerreports-implementation-getargumentdefinitions-result2`:

.. figure:: images/excel_powerreports_implementation_getargumentdefinitions_result2.png
   :align: center

   Excel: PowerReports - Report mit einschränkender Suchbedingung (2)

.. _`officelink-usermanual-excel-powerreports-implementation-hyperlinks`:

Hinzufügen weiterer Hyperlinks
==============================

Hyperlinks werden abhängig von der Providerkonfiguration automatisch für die durch einen Provider gelieferten Objekte erzeugt. 
Sollen diese Objekte weitere Links zu referenzierten Objekten enthalten, müssen diese explizit hinzugefügt werden. Dabei ist zu 
beachten, dass das XSD Schema entsprechend erweitert werden muss. Die Erstellung von Hyperlinks erfolgt mit der Methode 
:file:`MakeReportURL` . Folgendes Beispiel zeigt das Hinzufügen eines Hyperlinks für das zugeordnete Projekt eines 
Artikels. 

.. code-block:: python
    :emphasize-lines: 3,8

    def getSchema(self):
        t = XSDType(1,'teile_stamm')
        t.add_attr("project_hyperlink", sqlapi.SQL_CHAR)
        return t
    def getData(self,parent_result,source_args,**kwargs):
        item = pdd.Item.ByKeys('4711', '')
        data = ReportData(self, item)
        data["project_hyperlink"]=MakeReportURL(item.Project)
        return data	

Im obigen Beispiel wird der Hyperlink mit der Default Aktion CDB_ShowObject und der konfigurierten Objektschreibung aus dem 
Klassenverzeichnis erzeugt.

Als zweiter und dritter Parameter kann der :file:`MakeReportURL` Methode eine beliebige andere Aktion und eine 
anzuzeigende Beschriftung übergeben werden. Wird als Beschriftung ein Attributbezeichner des Objekts angegeben, wird der Wert 
dieses Attributes verwendet. Ansonsten wird als Beschriftung die angegebene Zeichenkette konstant verwendet.

.. code-block:: python
    :emphasize-lines: 4

    def getData(self,parent_result,source_args,**kwargs):
        item = pdd.Item.ByKeys('4711', '')
        data = ReportData(self, item)
        data["project_hyperlink"] = MakeReportURL(item.Project, "CDB_Modify", "project_name")
        return data

Bei kombinierten Daten werden Hyperlinks grundsätzlich nur für das Primärobjekt automatisch erzeugt. Das folgende Beispiel 
zeigt Reportdaten für einen Artikel, erweitert um die Daten des zugehörigen Projekts. Für das Projektobjekt wird in diesem 
Fall kein Hyperlink automatisch angelegt. Soll ein Hyperlink auf das Projekt enthalten sein, muss dieser wie zuvor beschrieben 
manuell hinzugefügt werden.

.. code-block:: python
    :emphasize-lines: 3

    def getData(self,parent_result,source_args,**kwargs):
        item = pdd.Item.ByKeys('4711', '')
        data = ReportData(self, item)  # <- Primary object
        data += ReportData(self, item.Project, prefix="Project_") 
        data["project_hyperlink"] = MakeReportURL(item.Project)
        return data

.. _`officelink-usermanual-excel-powerreports-implementation-images`:

Hinzufügen von Bilddateien
==========================

Soll ein Datenprovider dynamische Bildinhalte liefern (siehe auch
:ref:`officelink-usermanual-excel-powerreports-creation-dynamic_images` ), dann muss zunächst wie im vorigen Kapitel
das XSD Schema entsprechend erweitert werden.

.. code-block:: python
    :emphasize-lines: 3

    def getSchema(self):
        schema = XSDType(CARD_N, ''teile_stamm')
        schema.add_attr('cdbxml_image_preview', sqlapi.SQL_CHAR)
        return schema

Das Hinzufügen von sogenannten Imagelinks erfolgt über die Methode :guilabel:`add_image` .

.. rubric:: add_image(self, image=None, attr_name='cdbxml_image', hyperlink='openfile', **args**)

:guilabel:`image`
   Mögliche Werte:

   - CDB_File-Objekt:    

     - z.B. CDB_File.ByKeys(cdb_object_id='...')
     - Die Datei wird zusammen mit den anderen Report-Daten übergeben.

   - Objekt-ID eines CDB_File-Objektes:    

     - z.B. some_preview_file_obj.cdb_object_id
     - Die Datei wird zusammen mit den anderen Report-Daten übergeben.

   - Einfacher Pfad:    

     - z.B. "C:\\temp\\bild.jpg"
     - Die Datei wird zusammen mit den anderen Report-Daten übergeben.

   - Absoluter URI Pfad:    

     - z.B. "file:///C:\\temp\\bild.jpg"
     - Die Datei wird :guilabel:`nicht` den anderen Report-Daten übergeben, sondern später direkt  bei der Reportgenerierung von der Kopplung importiert. Dabei ist natürlich zu beachten, dass die jeweilige Maschine,
       welche den Report zusammenstellt, Zugriff auf diesen (z.B. Netzwerk-)Pfad hat.

   - HTTP Pfad:    

     - z.B. "http://local.myserver.de/bild.jpg"
     - Die Datei wird :guilabel:`nicht` den anderen Report-Daten übergeben, sondern später direkt  bei der Reportgenerierung von der Kopplung importiert. Dabei ist natürlich wiederum zu beachten, dass die jeweilige
       Maschine, welche den Report zusammenstellt, Zugriff auf diesen Internet-Pfad hat.

:guilabel:`attr_name`
   Das Attribut mit welchem zuvor an anderer Stelle das XSD Schema erweitert wurde (siehe :guilabel:`add_attr`).

:guilabel:`hyperlink`
   Standardmäßig wird jedes Bild im PowerReport mit einem Hyperlink verknüpft, welcher direkt auf die lokale Bilddatei zeigt.
   Dadurch sieht man das Bild in der Regel beim Anklicken im Internet-Explorer im (vergrößerten) Originalzustand.

Folgendes Beispiel zeigt das Hinzufügen einer Bilddatei.

.. code-block:: python
    :emphasize-lines: 6

    def getData(self, parent_result, source_args, **kwargs):
        item = pdd.Item.ByKeys('4711', '')
        data = ReportData(self, item)
        filename = _getPreviewImageFile(item)  # some custom method for retrieving regarding preview images
        data.add_image(filename, 'cdbxml_image_preview')
        return data

Ein weiteres Beispiel zeigt, wie man zusätzlich eigene Hyperlinks einbauen könnte.

.. code-block:: python
    :emphasize-lines: 6,7

    def getData(self, parent_result, source_args, **kwargs):
        item = pdd.Item.ByKeys('4711', '')
        data = ReportData(self, item)
        filename = _getPreviewImageFile(item)  # some custom method for retrieving regarding preview images
        hyperlink = item.MakeURL(None, plain=2)
        data.add_image(filename, 'cdbxml_image_preview', hyperlink)
        return data

.. important:: 

   Beim Aktualisieren eines PowerReports werden Bilddateien :guilabel:`nicht` mit aktualisiert.

.. _`officelink-usermanual-excel-powerreports-implementation-indentation`:

Hinzufügen von Hierarchieinformationen bei hierarchischen Daten
===============================================================

Hierarchische Daten, wie beispielsweise Produktstrukturen oder Aufgabenstrukturen, können in PowerReports entsprechend 
dargestellt werden. Hierarchieebenen sind in PowerReports auf- und zu klappbar und  können für eine bessere Übersicht 
farblich codiert und eingerückt werden.

.. _`officelink-usermanual-excel-powerreports-implementation-indentation-pic`:

.. figure:: images/excel_powerreports_implementation_indentation.png
   :align: center

   Excel: PowerReports - Hierarchische Darstellung am Beispiel Produktstruktur

Zur Darstellung hierarchischer Daten benötigt die Excel Kopplung Informationen über die Hierarchietiefe. Diese Information 
wird der Kopplung durch ein weiteres Attribut mit dem festen Namen :file:`cdbxml_level` mitgeteilt.

Folgender Code zeigt am Beispiel Produktstruktur, wie :file:`cdbxml_level` zum Schema hinzugefügt wird und beim 
Datenexport gesetzt werden kann. Bitte beachten Sie, dass die in dem Beispiel verwendete Methode :file:`getComponents2` 
zur Ermittlung der Produktstruktur nicht Bestandteil einer System-Standarddistribution ist.  Der Code kann daher nicht ohne 
weitere Anpassungen für einen eigenen Provider kopiert werden.

.. code-block:: python
    :emphasize-lines: 3,12

    def getSchema(self):
        t = XSDType(N, "einzelteile")
        t.add_attr("cdbxml_level", sqlapi.SQL_INTEGER)
        return t
    def getData(self, parent_result, source_args, **kwargs):
        item = parent_result.getObject()
        result = ReportDataList(self)
        # Custom method getComponents2 provides product structure tuples containing item and depth
        for lev, obj in item.getComponents2()
            d = ReportData(self, obj)
            d["cdbxml_level"] = lev
            result.append(d)
        return result

Die Beschreibung zur Erstellung von Excelvorlagen mit Darstellung hierarchischer Daten finden Sie in
:ref:`officelink-usermanual-excel-powerreports-creation-indentation` .