# !/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

from __future__ import unicode_literals

__docformat__ = "restructuredtext en"
__revision__ = "$Id: document_operations.py 174308 2018-03-09 13:48:45Z kbu $"

import os
import sys
import time

from cdb.validationkit import given, then, when

from cs.documents import Document

import common


@given("^a (?P<application_name>.*?) file (?P<source_file>.*?) locally exists$")  # noqa
def step(context, application_name, source_file):
    context.application_name = application_name
    files_dir = os.path.join(
        os.path.dirname(__file__.decode(sys.getfilesystemencoding())), "..", "files")
    context.source_file = os.path.join(files_dir, source_file)
    assert os.path.exists(context.source_file)


@given("^a (?P<application_name>.*?) file (?P<source_file>.*?) exists as a document in CDB$")  # noqa
def step(context, application_name, source_file):
    context.application_name = application_name
    files_dir = os.path.join(
        os.path.dirname(__file__.decode(sys.getfilesystemencoding())), "..", "files")
    context.old_docs_len = len(Document.Query())
    context.cdb_document = common.create_cdb_document(context)
    assert len(Document.Query()) > context.old_docs_len
    context.cdb_file = common.create_cdb_file(context.cdb_document,
                                              os.path.join(files_dir, source_file))
    context.old_file_versions_len = len(context.cdb_file.Versions)
    assert context.old_file_versions_len == 0


@when("^the document gets loaded from CDB$")  # noqa
def step(context):
    try:
        common.close_office_app(context)
        common.open_office_app(context)
        time.sleep(2)
        kwargs = {"z_nummer": context.cdb_document.z_nummer,
                  "z_index": context.cdb_document.z_index}
        common.call_officelink_method(context, "IOfficeLink", "LoadCDBDocuments", **kwargs)
        if context.application_name == "project":
            time.sleep(7)  # E029181
        try:
            common.get_active_office_file(context)
        except:
            common.close_office_app(context, kill_all=False)
            time.sleep(3)
            common.get_active_office_file(context)
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@when("^the file gets modified$")  # noqa
def step(context):
    try:
        common.modify_office_file(context)
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@when("^the file gets saved to CDB$")  # noqa
def step(context):
    try:
        common.call_officelink_method(context, "IOfficeLink", "SaveCDBDocument")
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@when("^the file gets created as a document in CDB$")  # noqa
def step(context):
    try:
        common.close_office_app(context)
        common.open_office_app(context)
        common.open_office_file(context, context.source_file)
        kwargs = {"z_categ1": "142",  # Allgemeines
                  "z_categ2": "153",  # Besuchsbericht
                  "z_art": "doc_standard",
                  "vorlagen_kz": "1",
                  "src_fname": os.path.basename(context.source_file)}
        common.call_officelink_method(context, "IOfficeLink", "CreateCDBDocument", **kwargs)
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@when("^a new index gets created in CDB$")  # noqa
def step(context):
    try:
        context.cdb_file.Reload()
        locked_by = context.cdb_file.cdb_lock
        context.cdb_file.cdb_lock = ""
        context.cdb_document.ChangeState(200)
        context.cdb_file.cdb_lock = locked_by
        common.call_officelink_method(context, "IOfficeLink", "CreateCDBDocumentIndex")
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@when("^the document status gets changed in Office$")  # noqa
def step(context):
    try:
        common.cdb_doc_new_status = 200
        kwargs = {"cdb::argument.cadtalknewintstate": common.cdb_doc_new_status}
        common.call_officelink_method(context, "IOfficeLink", "SaveDocument")
        common.call_officelink_method(context, "IOfficeLink", "ChangeCDBDocumentStatus", **kwargs)
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@when("^the document information tab gets opened in Win/CDB$")  # noqa
def step(context):
    try:
        common.call_officelink_method(context, "IOfficeLink", "ShowCDBDocumentProperties")
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@when("^the document modification dialog gets opened in Win/CDB$")  # noqa
def step(context):
    try:
        common.call_officelink_method(context, "IOfficeLink", "ChangeCDBDocumentProperties")
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@then("^a new Office file is opened$")  # noqa
def step(context):
    try:
        if context.application_name == "project":
            assert context.cdb_file.cdbf_name.startswith(context.application_document.Name), \
                "context.application_document.Name!=context.cdb_file.cdbf_name (%s, %s)" \
                % (context.application_document.Name, context.cdb_file.cdbf_name)
        else:
            assert context.application_document.Name == context.cdb_file.cdbf_name, \
                "context.application_document.Name!=context.cdb_file.cdbf_name (%s, %s)" \
                % (context.application_document.Name, context.cdb_file.cdbf_name)
    finally:
        common.close_office_app(context)


@then("^the file is updated in CDB$")  # noqa
def step(context):
    try:
        context.cdb_file.Reload()
        assert len(context.cdb_file.Versions) > context.old_file_versions_len
    finally:
        common.close_office_app(context)


@then("^an Office document is created in CDB$")  # noqa
def step(context):
    try:
        docs = Document.Query("cdb_cpersno='behave_test' AND "
                              "erzeug_system LIKE '%s%%' AND "
                              "src_fname='%s'" %
                              (common.OFFICE_APPLICATION[context.application_name]["erzeug_system"],
                               os.path.basename(context.source_file)))
        assert len(docs) == 1
    finally:
        common.close_office_app(context)


@then("^a new index is created in CDB$")  # noqa
def step(context):
    try:
        docs = Document.Query("cdb_cpersno='behave_test' AND "
                              "z_nummer='%s' AND "
                              "z_index='a'" %
                              (context.cdb_document.z_nummer))
        assert len(docs) == 1
    finally:
        common.close_office_app(context)


@then("^the document status is changed in CDB$")  # noqa
def step(context):
    try:
        context.cdb_document.Reload()
        assert context.cdb_document.status == common.cdb_doc_new_status
    finally:
        common.close_office_app(context)


@then("^the document information tab has been opened in Win/CDB$")  # noqa
def step(context):
    # no way to check if the tab has really been opened, but
    # at least no exception occurred if we reach this point
    common.close_office_app(context)


@then("^the document modification dialog has been opened in Win/CDB$")  # noqa
def step(context):
    # no way to check if the dialog has really been opened, but
    # at least no exception occurred if we reach this point
    common.close_office_app(context)


if __name__ == "__main__":
    pass
