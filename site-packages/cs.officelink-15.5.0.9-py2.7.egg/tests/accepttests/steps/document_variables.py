# !/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

from __future__ import unicode_literals

__docformat__ = "restructuredtext en"
__revision__ = "$Id: document_variables.py 179205 2018-06-19 09:40:12Z kbu $"

import time


from cdb import sqlapi
from cdb.validationkit import then, when

import common


@given("^the document has multiple status protocol entries$")  # noqa
def step(context):
    context.cdb_document_states = [200, 170]  # ==> freigegeben ==> gesperrt
    for status in context.cdb_document_states:
        context.cdb_document.ChangeState(status)
    context.cdb_document.status = 0  # make it editable (loadable) again
    t = sqlapi.SQLselect("COUNT(*) FROM cdb_z_statiprot WHERE z_nummer='%s' AND z_index='%s'"
                         % (context.cdb_document.z_nummer, context.cdb_document.z_index))
    count = sqlapi.SQLinteger(t, 0, 0)
    assert count == 2


@when("^the metadata of the document gets updated with values from CDB$")  # noqa
def step(context):
    try:
        if context.application_name == "word":
            time.sleep(1)
        common.call_officelink_method(context, "ICDBMetaData", "UpdateCDBDocumentVariables")
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@when("^the metadata of the document gets transfered to CDB$")  # noqa
def step(context):
    try:
        common.call_officelink_method(context, "ICDBMetaData", "SynchronizeCDBDocumentVariables")
    except Exception as ex:
        common.close_office_app(context)
        raise ex


@then("^the metadata is updated in the document$")  # noqa
def step(context):
    try:
        src = "%s%sbehave_test" % (context.cdb_document.keywords, context.cdb_document.z_bemerkung)
        if context.application_name == "excel":
            dst = "".join([c[0] for c in context.application.Range("A1:A3").Formula])
        elif context.application_name == "powerpoint":
            dst = "".join([s.TextFrame.TextRange.Text
                           for s in context.application_document.Slides(1).Shapes])
        elif context.application_name == "visio":
            dst = "".join([s.Text for s in context.application_document.Pages(1).Shapes])
        elif context.application_name == "word":
            dst = context.application_document.Content().replace("\r", "")
        assert src == dst
    finally:
        common.close_office_app(context)


@then("^the metadata is updated in CDB$")  # noqa
def step(context):
    try:
        context.cdb_document.Reload()
        assert context.cdb_document.keywords == "my_keyword"
    finally:
        common.close_office_app(context)


@then("^the metadata is updated in the table in the document$")  # noqa
def step(context):
    try:
        if context.application_name == "excel":
            for list_object in context.application_document.ActiveSheet.ListObjects:
                rows = list_object.ListRows
                assert rows.Count == len(context.cdb_document_states)
                for row in rows:
                    assert row.Range(1).Text == context.cdb_document.z_nummer
                    assert row.Range(2).Text == context.cdb_document.z_index
                    assert int(row.Range(3).Text) in context.cdb_document_states
        elif context.application_name == "word":
            for table in context.application_document.Tables:
                rows = table.Rows
                assert rows.Count == len(context.cdb_document_states) + 1
                for i in range(2, rows.Count + 1):
                    assert rows(i).Range.Cells(1).Range.Text.replace("\r\x07", "") \
                        == context.cdb_document.z_nummer
                    assert rows(i).Range.Cells(2).Range.Text.replace("\r\x07", "") \
                        == context.cdb_document.z_index
                    assert int(rows(i).Range.Cells(3).Range.Text.replace("\r\x07", "")) \
                        in context.cdb_document_states
    finally:
        common.close_office_app(context)


if __name__ == "__main__":
    pass
