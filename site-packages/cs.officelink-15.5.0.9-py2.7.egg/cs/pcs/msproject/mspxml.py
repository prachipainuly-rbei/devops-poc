#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module mspxml

This is the documentation for the mspxml module.
"""

from __future__ import unicode_literals

import io
import os
import sys
from xml.sax.handler import ContentHandler

from cdb import cdbtime, ue
from cdb.comparch.packages import Package
from cdb.objects.cdb_file import CDB_File

from cs.pcs.msproject.misc import report
from cs.pcs.msproject.nodes import Project, Task


MSP_CAD_SYSTEM = "MS-Project"
MSPXML_FILE_EXT = ".mspxml"
MSPXML_FILE_TYPE = "MS-Project:MSPXML"


def export_project_to_xml_file(ctx, msp_fields, proj, xml_fname):
    ctx.log("Exporting to: %s" % xml_fname)
    assert isinstance(xml_fname, unicode)
    xml_file = io.open(xml_fname, 'w', encoding='utf-8')
    xmlDumper = XMLPrettyDumper(xml_file)
    xmlDumper.writeHead()
    proj.dumpToXML(msp_fields, xmlDumper)
    xml_file.close()


def checkin_xml_file(ctx, doc, xml_fname):
    ctx.log("Trying to check in: %s" % (xml_fname))
    xml_basename = os.path.basename(xml_fname)
    additional_args = {"cdb::argument.activecad": MSP_CAD_SYSTEM,
                       "cdb_file.cdbf_type": MSPXML_FILE_TYPE}
    for fobj in doc.Files:
        if fobj.cdbf_name == xml_basename:
            fobj.checkin_file(xml_fname, additional_args)
            break
    else:
        CDB_File.NewFromFile(doc.cdb_object_id, xml_fname, primary=False,
                             additional_args=additional_args)
    os.remove(xml_fname)


class XMLDumper:
    """This class is a simple, SaX-Like, XML writer interface"""
    def __init__(self, out=sys.__stdout__):
        self.out = out

    def mangleXML(self, strng):
        """convert a string to an XML quoted string"""
        result = ""
        for a in strng:
            if a == '"':
                result = result + '&quot;'
            elif a == '<':
                result = result + '&lt;'
            elif a == '>':
                result = result + '&gt;'
            elif a == '&':
                result = result + '&amp;'
            else:
                result = result + a
        return result

    def writeHead(self):
        """Write the XML head line"""
        self.out.write('<?xml version="1.0" encoding="UTF-8" ?>\n')
        self.out.write('<!-- Created by cs.officelink %s [%s] -->\n' %
                       (Package.ByKeys("cs.officelink").version,
                        cdbtime.now("%d.%m.%Y %H:%M:%S")))

    def writeAttribList(self, attribs):
        """Write a list of attributes to the output stream, internal method."""
        for key in attribs.keys():
            val = "%s" % attribs[key]
            val = self.mangleXML(val)
            self.out.write('%s="%s" ' % (key, val))

    def startTag(self, name, attribs={}):
        """Write a start tag definition"""
        space = ""
        if len(attribs) > 0:
            space = " "
        self.out.write('<%s%s' % (name, space))
        self.writeAttribList(attribs)
        self.out.write('>')

    def write(self, strng):
        """Write CDATA to the XML stream"""
        val = "%s" % strng
        val = self.mangleXML(val)
        self.out.write(val)

    def endTag(self, name):
        """Write an end tag definition"""
        self.out.write('</%s>' % name)

    def tag(self, name, attribs={}):
        """Write a tag definition (without content)"""
        space = ""
        if len(attribs) > 0:
            space = " "
        self.out.write('<%s%s' % (name, space))
        self.writeAttribList(attribs)
        self.out.write('/>')


class XMLPrettyDumper(XMLDumper):
    """This class implements a pretty printed, readable XML file"""

    def __init__(self, out=sys.__stdout__):
        XMLDumper.__init__(self, out)
        self.indent = 0

    def startTag(self, name, attribs={}):
        """Write a start tag definition"""
        self.out.write("  " * self.indent)
        XMLDumper.startTag(self, name, attribs)
        self.out.write("\n")
        self.indent += 1

    def write(self, strng):
        """Write CDATA to the XML stream"""
        self.out.write("  " * self.indent)
        XMLDumper.write(self, strng)
        self.out.write("\n")

    def endTag(self, name):
        """Write an end tag definition"""
        self.indent -= 1
        self.out.write("  " * self.indent)
        XMLDumper.endTag(self, name)
        self.out.write("\n")

    def tag(self, name, attribs={}):
        """Write a tag definition (without content)"""
        self.out.write("  " * self.indent)
        XMLDumper.tag(self, name, attribs)
        self.out.write("\n")


class XMLError(ue.Exception):
    """Exception that signals wrong use / values of xml entities."""
    def __init__(self, reason):
        """Init of the exception"""
        ue.Exception.__init__(self, 9602, reason)
        self.reason = reason

    def __str__(self):
        """Return the reason string"""
        return self.reason

    def __repr__(self):
        """Return the reason string"""
        return self.reason


class XMLProject(Project):
    """This is the XML implementation for a project, just a derivation from a Project"""

    def __init__(self, ctx):
        Project.__init__(self, ctx, "ROOT")
        self.uuidParentList = {}

    def addTask(self, task):
        """Add a task to the task list. Maintain parent index"""
        Project.addTask(self, task)
        olchild = task.attributes["OutlineChildren"]
        outlineChildren = olchild.split(";")
        for child in outlineChildren:
            self.uuidParentList[child] = task

    def addSubProject(self, subproject):
        """Add a subproject to the subproject list"""
        Project.addSubProject(self, subproject)


class XMLTask(Task):
    """This is the XML implementation for a Task, just a derivation from a Task"""

    def __init__(self, ctx, project, taskid):
        """Create an XML Task with the given id."""
        Task.__init__(self, ctx, project, taskid)


class XMLContentHandler(ContentHandler):
    """This class implements the SAX event handler for parsing the XML file"""

    def __init__(self, ctx, fields, syncrel):
        ContentHandler.__init__(self)
        self.ctx = ctx
        self.fields = fields
        self.syncrel = syncrel
        self.attributes = {}

    def startDocument(self):
        """Start a document"""
        self.attributes = {}

    def endDocument(self):
        """End the document"""
        pass

    def startElement(self, name, attrs):
        """Start an element"""

        # add an attribute
        if name == "Attr":
            attrName = attrs["Name"]
            attrValue = attrs["Value"]
            # check string value meets the db defaultencoding requirements
            try:
                "%s" % attrValue
            except UnicodeError, e:
                attrValue = unicode(attrValue).encode('utf-8', "replace")
                self.ctx.log("Unicode Error converting value: %s (%s)" % (attrValue, e))
                report(self.ctx, "w_removed_invalid_chars", [attrValue])

            self.attributes[attrName] = attrValue

        # start a Task (save attributes to project)
        elif name == "Task":
            self.project.attributes.update(self.attributes)
            self.attributes = {}

        # start a project
        elif name == "CDBProject":
            self.attributes = {}
            self.project = XMLProject(self.ctx)

        # ignore custom entries
        elif name == "Custom":
            pass

        else:
            self.ctx.log("Unknown entity %s parsed." % name)
            raise XMLError("Unknown entity %s parsed." % name)

    def endElement(self, name):
        """End an element"""

        # finish an attribute
        if name == "Attr":
            pass

        # finish a Task
        elif name == "Task":
            # is subproject?
            subprojectAttr = self.attributes.get("isSubProject", "")
            if subprojectAttr != "":
                subprojectId = self.attributes["UUID"]
                subproject = XMLTask(self.ctx, self.project, subprojectId)
                subproject.attributes.update(self.attributes)
                self.project.addSubProject(subproject)
                self.attributes = {}
                return

            taskId = self.attributes["UUID"]
            task = XMLTask(self.ctx, self.project, taskId)
            task.attributes.update(self.attributes)
            self.project.addTask(task)
            # find parent
            parent = self.project.uuidParentList.get(task.cdb_id, None)
            if parent is None:
                parent = self.project
            parent.addChild(task)
            # update parent list
            olchild = self.attributes.get("OutlineChildren", "")
            if olchild != "":
                for child in olchild.split(";"):
                    self.project.uuidParentList[child] = task
            # clear attribure set for next task
            self.attributes = {}

        # finish a project
        elif name == "CDBProject":
            self.project.attributes.update(self.attributes)
            self.project.recalcParent()
            proj_id_field = self.syncrel["cdbpcs_project"]["cdb_project_id"]["pcs_field"]
            self.project.cdb_id = self.project.attributes[proj_id_field]  # formerly Proj_UUID
            self.attributes = {}

        # ignore custom entries
        elif name == "Custom":
            pass

        else:
            raise XMLError("Unknown entity %s parsed." % name)

    def characters(self, content):
        """Handle arbitrary characters (for us, this is whitespace from pretty printed docs)"""
        pass


if __name__ == "__main__":
    pass
