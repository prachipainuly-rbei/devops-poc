#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

from __future__ import unicode_literals

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 120183 2015-02-05 12:48:45Z kbu $"

__all__ = ['post',
           'pre']


class UpdatePcsMspRelations(object):
    """Updates 'cdbpcs_msp_fields' and 'cdbpcs_msp_syncrel'"""

    def run(self):
        from cs.pcs.msproject.synchronization import MSPField, MSPSyncRelation

        # for easier migration to default sync behavior with PCS 2.0 ensure the existence of
        # "Manual", but don't force its activation because it only exists since MS Project 2010
        MANUAL = {"pcs_field": "Manual",
                  "descr": "Vorgangsmodus (manuell/automatisch)",
                  "name": "Manual",
                  "gruppe": "TASK",
                  "field_enabled": "0"}
        if not MSPField.ByKeys(MANUAL["pcs_field"]):
            MSPField.Create(**MANUAL)

        # ensure the existence of "Number17" (or update it if not enabled)
        NUMBER17 = {"pcs_field": "Number17",
                    "descr": "In early position (Milestone)",
                    "name": "Number17",
                    "gruppe": "TASK",
                    "field_enabled": "1"}
        field = MSPField.ByKeys(NUMBER17["pcs_field"])
        if not field:
            MSPField.Create(**NUMBER17)
        elif field.field_enabled != "1":
            field.Update(**NUMBER17)

        # for easier migration to default sync behavior with PCS 2.0 ensure the sync entry for
        # "auto_update_time", but don't force sync'ing it in either direction because the used MSP
        # field "Manual" only exists since MS Project 2010
        AUTO_UPDATE_TIME = {"cdb_relation": "cdbpcs_task",
                            "cdb_column": "auto_update_time",
                            "pcs_field": MANUAL["pcs_field"],
                            "del_key": "0",
                            "cdb_std": "1",
                            "cdb_std_msp": "0",
                            "cdb_from_msp": "0"}
        if not MSPSyncRelation.ByKeys(cdb_relation=AUTO_UPDATE_TIME["cdb_relation"],
                                      cdb_column=AUTO_UPDATE_TIME["cdb_column"],
                                      pcs_field=AUTO_UPDATE_TIME["pcs_field"]):
            MSPSyncRelation.Create(**AUTO_UPDATE_TIME)

        # for easier migration to default sync behavior with PCS 2.0 ensure the sync entry for
        # "early_position", but don't force sync'ing it in either direction
        EARLY_POSITION = {"cdb_relation": "cdbpcs_task",
                          "cdb_column": "early_position",
                          "pcs_field": NUMBER17["pcs_field"],
                          "del_key": "0",
                          "cdb_std": "1",
                          "cdb_std_msp": "0",
                          "cdb_from_msp": "0"}
        if not MSPSyncRelation.ByKeys(cdb_relation=EARLY_POSITION["cdb_relation"],
                                      cdb_column=EARLY_POSITION["cdb_column"],
                                      pcs_field=EARLY_POSITION["pcs_field"]):
            MSPSyncRelation.Create(**EARLY_POSITION)

        # Convert following sync entries and disable the old ones (also see relnotes):
        # - cdbpcs_project.end_time_plan -> cdbpcs_project.end_time_fcast
        # - cdbpcs_project.start_time_plan -> cdbpcs_project.start_time_fcast
        # - cdbpcs_task.duration -> cdbpcs_task.duration_fcast
        # - cdbpcs_task.end_time_plan -> cdbpcs_task.end_time_fcast
        # - cdbpcs_task.start_time_plan -> cdbpcs_task.start_time_fcast
        ATTRS_TO_FCAST_ATTRS = {"start_time_plan": "start_time_fcast",
                                "end_time_plan": "end_time_fcast",
                                "duration": "duration_fcast"}
        for old_attr, new_attr in ATTRS_TO_FCAST_ATTRS.items():
            for old_sync in MSPSyncRelation.KeywordQuery(cdb_column="%s" % old_attr):
                new_sync = {"cdb_relation": old_sync["cdb_relation"],
                            "cdb_column": new_attr,
                            "pcs_field": old_sync["pcs_field"],
                            "del_key": old_sync["del_key"],
                            "cdb_std": old_sync["cdb_std"],
                            "cdb_std_msp": old_sync["cdb_std_msp"],
                            "cdb_from_msp": old_sync["cdb_from_msp"]}
                if not MSPSyncRelation.ByKeys(cdb_relation=new_sync["cdb_relation"],
                                              cdb_column=new_sync["cdb_column"],
                                              pcs_field=new_sync["pcs_field"]):
                    MSPSyncRelation.Create(**new_sync)
                    old_sync.cdb_std_msp = "0"
                    old_sync.cdb_from_msp = "0"


pre = []
post = [UpdatePcsMspRelations]

if __name__ == "__main__":
    UpdatePcsMspRelations().run()
