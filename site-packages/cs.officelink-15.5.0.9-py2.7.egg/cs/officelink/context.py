#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module context

This is the documentation for the context module.
"""

from __future__ import unicode_literals

__docformat__ = "restructuredtext en"
__revision__ = "$Id: context.py 146566 2016-09-20 13:42:15Z kbu $"

import json
import sys
import traceback

from cdb import auth, misc, ue
from cdb.objects.org import CommonRole
from cdb.platform.mom import Component


class Context(ue.Context):
    """
    Context adapter for component calls triggered by the MS Office interface. All incoming values
    (via SDTIN) are expected to be JSONed and are each unJSONed and added to self. Outgoing values
    (via STDOUT) are JSONed again. On success the interface receives a (not JSONed) "0".
    """

    def __init__(self, name="cs.officelink.context"):
        """
        Initializes the context by reading the information. Do not call this constructor directly.
        """
        ue.Context.__init__(self, name)
        self._returned_result = []
        for line in self._data:
            if line:
                d = json.loads(line)
                for k, v in d.iteritems():
                    setattr(self, k, v)

    def log(self, msg, level=7, channel=None, trace=False):
        if level == 0:
            channel = misc.kLogErr
        elif not channel:
            channel = misc.kLogMsg
        if trace:
            msg = 'OfficeLink: %s\n%s' % (msg, traceback.format_exc())
        else:
            msg = 'OfficeLink: %s' % msg
        misc.cdblogv(channel, level, msg)

    def add_result(self, value):
        """
        Add a result value for the interface. Internally all values are JSONed before sending them
        to the interface.
        """
        self._returned_result.append(value)

    def get_component_activations(self):
        """
        Returns a list of component activations to the interface. The interface should gather this
        initially before calling any component activation.
        """
        all_comp_activs = []

        def _get_activations(comp, all_activs):
            del all_activs[:]
            for comp_activ in comp.Activations:
                all_activs.append("%s_%s" % (comp_activ.action_what, comp_activ.action_when))

        for comp in Component.KeywordQuery(name="officelink", active=1):
            if comp.role_id == "public":
                # lowest priority (don't overwrite "real" roles)
                if not all_comp_activs:
                    _get_activations(comp, all_comp_activs)
            else:
                role = CommonRole.ByKeys(comp.role_id)
                if role:
                    for role_assignment in role.RoleAssignment:
                        for person in role_assignment.Subject.getPersons():
                            if person.personalnummer == auth.persno:
                                # middle priority (if multiple exist, last one wins)
                                _get_activations(comp, all_comp_activs)
                                break

        self.add_result(all_comp_activs)

    def handle_success(self):
        """
        This method is called by the destructor (`__del__`) in the event of a successful run of the
        user exit and is reserved exclusively for internal usage. If necessary, this method can be
        further specialised by treatment in the inheriting context adapter.
        """
        misc.log(7, "OfficeLink.Context.handle_success called")
        ue.Context.handle_success(self)
        # first "0" written in method above gets read and cut internally
        self._print("0")  # second "0" gets received by interface
        for value in self._returned_result:
            self._print(json.dumps(value))

    def handle_exception(self, ex=None, after_errcode=None):
        """
        This method is used to handle exceptions which occur in user exits and is reserved solely
        for internal usage. If necessary, this method can be further specialized by treatment in
        the inheriting context adapter.
        """
        _, ex, ex_tb = sys.exc_info()
        misc.log_error("OfficeLink.Context.handle_exception: %s" % ex)
        if isinstance(ex, SoftException):
            self._state = Context.EXCEPTION
            self._print("1")  # first "1" gets read and cut internally
            self._print("2")  # second "2" gets received by interface
            for value in self._returned_result:
                self._print(json.dumps(value))
        else:
            self._print("1")  # first "1" gets read and cut internally
            if isinstance(ex, ue.Exception):
                ex = None  # E028654
                ue.Context.handle_exception(self, ex, after_errcode)
            else:
                misc.log_error("OfficeLink.Context.handle_exception: %s" %
                               ''.join(traceback.format_tb(ex_tb)))
                self._state = Context.EXCEPTION
                self._print("1")  # second "1" gets received by interface
                self._print("%s" % ex)


class SoftException(Exception):
    """
    Special exception type for signaling to the client side component that:
    - server side errors occurred
    - the client side component must/should/could continue as if nothing happened
    """
    pass
