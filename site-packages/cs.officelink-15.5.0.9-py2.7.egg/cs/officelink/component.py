#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module component

This is the documentation for the component module.
"""

from __future__ import unicode_literals

from distutils.version import LooseVersion
import json
import os

from cdb import auth, ue, util
from cdb.comparch.packages import Package
from cdb.objects.cdb_file import CDB_File
from cdb.sig import emit

from cs.officelink.documentvariables import DocumentVariables

__docformat__ = "restructuredtext en"
__revision__ = "$Id: component.py 179872 2018-07-03 09:15:20Z kbu $"


class OfficeLinkComponent:

    context_name = "cs.officelink.context"

    # Required version number of OfficeLink.dll:
    minimal_required_interface_versions = {
        "Excel": "15.5.0.5",
        "Outlook": "15.3.0.0",
        "PowerPoint": "15.5.0.5",
        "Project": "15.5.0.0",
        "Visio": "15.3.0.0",
        "Word": "15.5.0.5"
    }

    def __call__(self, ctx):
        self.ctx = ctx
        if ctx.action == "get_component_activations":
            ctx.get_component_activations()
        else:
            fn_name = "on_%s_%s" % (ctx.action, ctx.mode)
            getattr(self, fn_name)(ctx)

    def on_version_check(self, ctx):
        """
        Verifies whether the version of this package is lower than required by the interface, or if
        the interface version (OfficeLink.dll) is lower than required by this package.
        Raises exceptions on failed version checks.
        """
        ctx.log("OfficeLinkComponent.on_version_check: -start-")

        pkg_version = Package.ByKeys("cs.officelink").version
        ctx.log("pkg_version: %s" % pkg_version)
        req_pkg_version = ctx.minimal_required_package_version
        ctx.log("req_pkg_version: %s" % req_pkg_version)
        if LooseVersion(pkg_version.replace("dev", "9999")) < LooseVersion(req_pkg_version):
            raise Exception(util.get_label("officelink_package_version_too_old") %
                            (pkg_version, req_pkg_version))

        interface_version = ctx.interface_version
        ctx.log("interface_version: %s" % interface_version)
        req_interface_version = self.minimal_required_interface_versions[ctx.interface_host]
        ctx.log("req_interface_version: %s" % req_interface_version)
        if LooseVersion(interface_version) < LooseVersion(req_interface_version):
            raise Exception(util.get_label("officelink_interface_version_too_old") %
                            (interface_version, req_interface_version))

        ctx.log("OfficeLinkComponent.on_version_check: -stop-")

    # Documents

    def on_document_created(self, ctx):
        """
        Currently called after a MS Outlook mail or mail attachment has been created as a document.
        """
        ctx.log("OfficeLinkComponent.on_document_created: -start-")

        # Example code:
        # if ctx.interface_host == "Outlook":
        #     cdb_object_id = ctx.object["cdb_object_id"]
        #     from cs.documents import Document
        #     doc = Document.ByKeys(cdb_object_id=cdb_object_id)
        #     doc.ChangeState(200)

        # Example error (displayed in interface gui):
        # raise Exception("Invalid operation")  # or "ue.Exception" for multilingual exceptions

        ctx.log("OfficeLinkComponent.on_document_created: -stop-")

    # Metadata Sync

    def on_metadata_read(self, ctx):
        """
        Called after "Metadata > Transfer [read]" has been pressed.
        """
        ctx.log("OfficeLinkComponent.on_metadata_read: -start-")

        ctx.document_variables = json.loads(ctx.document_variables)
        emit("officelink_metadata_read")(self, ctx)
        DocumentVariables.auto_fill(ctx, auth.persno)
        DocumentVariables.prepare_result(ctx)
        ctx.add_result({"document_variables": json.dumps(ctx.document_variables)})

        ctx.log("OfficeLinkComponent.on_metadata_read: -stop-")

    def on_metadata_write(self, ctx):
        """
        Called after "Metadata > Transfer [write]" has been pressed.
        """
        ctx.log("OfficeLinkComponent.on_metadata_write: -start-")

        ctx.document_variables = json.loads(ctx.document_variables)
        emit("officelink_metadata_write")(self, ctx)

        ctx.log("OfficeLinkComponent.on_metadata_write: -stop-")

    # Projects

    # Legacy attribute (E045993): Don't overwrite this,
    # but cs.pcs.msp.exports.XmlExport.TASK_UPDATABLE_MSP_ATTRS instead!
    MSP_UPDATABLE_ATTRIBUTES = ["Number10", "Text12", "Text14", "Text15"]

    def on_project_config(self, ctx):
        """
        Currently this method gets called right after opening an mpp document (which is associated
        with a system project) in edit mode, and is used to transfer general project data between
        server and client components.
        """
        from cs.documents import Document
        from cs.pcs.projects import Project
        ctx.log("OfficeLinkComponent.on_project_config: -start-")

        cdb_project_id = ""
        sync_is_allowed = False
        doc = Document.ByKeys(z_nummer=ctx.object["z_nummer"],
                              z_index=ctx.object["z_index"])
        if doc.cdb_project_id:
            cdb_project_id = doc.cdb_project_id
            proj = Project.ByKeys(doc.cdb_project_id)
            sync_is_allowed = (proj.msp_active == 1) and (doc == proj.getLastPrimaryMSPDocument())

        ctx.add_result({
            "cdb_project_id": cdb_project_id,
            "sync_is_allowed": sync_is_allowed
            })

        ctx.log("OfficeLinkComponent.on_project_config: -stop-")

    def on_project_export_xml(self, ctx):
        """Export a project into MSP's XML format."""
        ctx.log("OfficeLinkComponent.on_project_export_xml: -start-")

        from cs.documents import Document
        from cs.pcs.projects import Project
        doc = Document.ByKeys(ctx.object["z_nummer"], ctx.object["z_index"])
        proj = Project.ByKeys(cdb_project_id=ctx.object["cdb_project_id"])
        # TODO: proj.CheckAccess("read")

        if ctx.object["reset_ids"] == "1":
            # For safe (re-)importing tasks with matching UIDs between MSP and CDB afterwards:
            # 1. Force re-generating all UIDs in the DB, from 1 to N and without any gaps, because
            #    this is what MSP does when copying tasks from one plan to another
            # 2. Remove all GUIDs in the DB, because MSP always generates a new GUID when
            #    importing a task or when copying it from another plan
            proj.Tasks.Update(msp_uid='', msp_guid='')

        xml_filename = proj.XML_EXPORT_CLASS.generate_xml_from_project(proj)
        try:
            xml_basename = doc.getExternalFilename(".xml")
            xml_basename = os.path.basename(xml_basename)
            additional_args = {"cdb::argument.activecad": "MS-Project"}
            for fobj in doc.Files:
                if fobj.cdbf_name == xml_basename:
                    fobj.checkin_file(xml_filename, additional_args)
                    break
            else:
                mpp_fobj = doc.PrimaryFiles.KeywordQuery(
                    cdbf_name=doc.getExternalFilename(".mpp"))[0]
                additional_args.update({"cdb_file.cdbf_name": xml_basename,
                                        "cdb_file.cdbf_original_name": xml_basename,
                                        "cdb_file.cdbf_derived_from": mpp_fobj.cdb_object_id,
                                        "cdb_file.cdbf_type": "XML"})
                CDB_File.NewFromFile(doc.cdb_object_id, xml_filename, primary=False,
                                     additional_args=additional_args)
        finally:
            if os.path.exists(xml_filename):
                os.remove(xml_filename)

        # Some legacy handling of a attribute which moved from cs.officelink to cs.pcs (E045993):
        legacy_attr_std = set(OfficeLinkComponent.MSP_UPDATABLE_ATTRIBUTES)
        legacy_attr_rte = set(self.MSP_UPDATABLE_ATTRIBUTES)
        legacy_attr_is_customized = (legacy_attr_std != legacy_attr_rte)
        moved_attr_exists = hasattr(proj.XML_EXPORT_CLASS, "TASK_UPDATABLE_MSP_ATTRS")
        if legacy_attr_is_customized or not moved_attr_exists:
            if moved_attr_exists:
                ctx.log("Starting with cs.pcs 15.4.2 'TASK_UPDATABLE_MSP_ATTRS' is deprecated! "
                        "Please use cs.pcs.msp.exports.XML_EXPORT_CLASS.TASK_UPDATABLE_MSP_ATTRS "
                        "instead.", 0)
            ctx.add_result(self.MSP_UPDATABLE_ATTRIBUTES)
        else:
            ctx.add_result(proj.XML_EXPORT_CLASS.TASK_UPDATABLE_MSP_ATTRS)

        ctx.log("OfficeLinkComponent.on_project_export_xml: -stop-")

    def on_project_export(self, ctx):
        """
        Export a project cdb server-side to xml, which gets imported into MS Project afterwards.
        """
        ctx.log("OfficeLinkComponent.on_project_export: -start-")
        ctx.log("'OfficeLinkComponent.on_project_export' is deprecated", 0)
        from cs.pcs.msproject.synchronization import Synchronization
        sync = Synchronization(ctx)

        # Example code for adding a custom hook:
        # from cs.pcs.msproject.hooks import DB_FieldHook
        # class MyFieldHook(DB_FieldHook):
        #     def transform_from_db(self, value, obj):
        #         return value.upper()
        #     def transform_to_db(self, value, obj):
        #         return value.lower()
        # sync.field_hooks.addHook(MyFieldHook("cdbpcs_task", "task_name"))

        sync.export_project()
        ctx.log("OfficeLinkComponent.on_project_export: -stop-")

    def on_project_import(self, ctx):
        """
        Import a project cdb server-side from xml, which got exported from MS Project before.
        """
        ctx.log("OfficeLinkComponent.on_project_import: -start-")
        ctx.log("'OfficeLinkComponent.on_project_import' is deprecated", 0)
        from cs.pcs.msproject.synchronization import Synchronization
        sync = Synchronization(ctx)

        # Example code for adding a custom field hook:
        # from cs.pcs.msproject.hooks import DB_FieldHook
        # class MyFieldHook(DB_FieldHook):
        #     def transform_from_db(self, value, obj):
        #         return value.upper()
        #     def transform_to_db(self, value, obj):
        #         return value.lower()
        # sync.field_hooks.addHook(MyFieldHook("cdbpcs_task", "task_name"))

        # Example code for adding a custom constraint hook:
        # from cs.pcs.msproject.hooks import ConstraintHook
        # class MyConstraintHook(ConstraintHook):
        #     def checkConstraint(self, xmlProj, dbProj):
        #         return "Exception because of..."
        # sync.constraint_hooks.addHook(MyConstraintHook())

        sync.import_project()
        ctx.log("OfficeLinkComponent.on_project_import: -stop-")


if __name__ == "__main__":
    ue.run(OfficeLinkComponent)
