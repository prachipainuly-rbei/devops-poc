#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2015 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module project

This is the documentation for the project module.
"""

from __future__ import unicode_literals

__docformat__ = "restructuredtext en"
__revision__ = "$Id: project.py 134918 2015-12-01 17:45:49Z kbu $"

import sys
import traceback

from cdb import misc

from cs.officelink.converter import pdfconverter


class ProjectConverterBase(object):
    """Base class for MS-Project converters"""

    __application_name__ = "MS-Project"
    __conversions__ = ['.mpp',
                       '.mpt']

    # minimum required Project and type library version
    __application_version_str__ = "Project 2003"
    __application_version__ = 11
    __tlb_clsid__ = "{A7107640-94DF-1068-855E-00DD01075445}"
    __tlb_lcid__ = 0
    __tlb_major_version__ = 4
    __tlb_minor_version__ = 5

    def __init__(self, filename, **kwargs):
        super(ProjectConverterBase, self).__init__(filename, **kwargs)

        self.project_application = None
        self.project_plan = None

        # overwrite default parameters, if defined
        try:
            self.window_timeout = self.conf_dict["projectconverter_window_timeout"]
        except Exception:
            pass
        try:
            self.conversion_timeout = self.conf_dict["projectconverter_conversion_timeout"]
        except Exception:
            pass
        # Dialog robot configuration
        if self.window_timeout != 0:
            self.application_name = self.get_conf_param("projectconverter_application_name", "")
            self.auto_confirmations = self.get_conf_param(
                "projectconverter_dialog_confirmations", {})

    def setup_application(self, application):
        application.Visible = self.get_conf_param("projectconverter_visible", False)

    def open_doc(self):
        import win32com.client
        if self.get_conf_param("projectconverter_shellexecute", False):
            self.project_application, self.project_plan = self.open_office_file_indirectly(
                self.filename, "MSProject.Application", "ActiveProject")
        else:
            self.project_application = win32com.client.DispatchEx('MSProject.Application')
            self.setup_application(self.project_application)
            if self.project_application.FileOpen(Name=self.filename):
                self.project_plan = self.project_application.ActiveProject

    def cleanup(self):
        try:
            if not self.project_plan.Saved:
                # close without ever asking to save changes
                self.project_application.FileSave()
            self.project_plan.Close()
        except Exception:
            pass
        try:
            self.project_application.Quit()
        except Exception:
            pass
        if self.project_plan is not None:
            del self.project_plan
        if self.project_application is not None:
            del self.project_application

    def handle_timeout(self):
        # Kill Project Process
        self.kill_app("WINPROJ.EXE")


class Project2K10Converter(ProjectConverterBase, pdfconverter.O2K7PDFConverter):
    """Project 2010 built-in PDF converter"""

    # minimum required Project and type library version
    __application_version_str__ = "Project 2010"
    __application_version__ = 14
    __tlb_major_version__ = 4
    __tlb_minor_version__ = 7

    # Note:
    # For some reason python's win32com can't generate a type lib from project 2013 (minor
    # version = 8), when the minimum minor version is defined with 7, so we can't use any project
    # api constants!

    def __init__(self, filename, **kwargs):
        super(Project2K10Converter, self).__init__(filename, **kwargs)

    def create_pdf(self):
        import pywintypes
        # first kill running Project processes
        self.kill_app("WINPROJ.EXE")
        try:
            create_pdf_a = self.get_conf_param("projectconverter_create_pdf_a", False)
            self.open_doc()
            # Actually we would have called "self.project_plan.ExportAsFixedFormat()", but it always
            # fails with an exception (0x80020009: "Invalid argument"). Although calling
            # "self.project_application.DocumentExport" with the same arguments succeeds!
            self.project_application.DocumentExport(
                Filename=self.targetfile,
                FileType=0,  # pjPDF
                # Setting following 2 arguments to False doesn't seem to work anyway, since the
                # properties and markups are always displayed nevertheless. So we don't export these
                # arguments into the .conf file.
                # IncludeDocumentProperties=True,
                # IncludeDocumentMarkup=True,
                ArchiveFormat=create_pdf_a,
                # Always display the whole plan, so don't set following 2 arguments
                # FromDate=,
                # ToDate=,
                )
        except pywintypes.com_error, exc:
            if hasattr(self, "log") and self.log:
                self.log("ERROR: %s on %s" % (exc, self.filename))
            else:
                misc.log_error("%s on %s" % (exc, self.filename))
            return False
        except Exception, exc:
            if hasattr(self, "log") and self.log:
                self.log("%s" % "\n".join(traceback.format_exception(*sys.exc_info())))
            else:
                misc.log_traceback("%s on %s" % (exc, self.filename))
            return False
        finally:
            self.cleanup()
        return True
