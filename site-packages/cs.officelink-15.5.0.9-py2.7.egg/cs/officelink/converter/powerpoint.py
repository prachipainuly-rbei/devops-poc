#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2015 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module powerpoint

This is the documentation for the powerpoint module.
"""

from __future__ import unicode_literals

__docformat__ = "restructuredtext en"
__revision__ = "$Id: powerpoint.py 181338 2018-07-30 16:38:44Z kbu $"

import sys
import traceback

from cdb import misc

from cs.officelink.converter import pdfconverter


class PowerPointConverterBase(object):
    """
    Base class for MS-PowerPoint converters
    """
    __conversions__ = ['.ppt', '.pptx', '.pptm', '.pot']
    __application_name__ = "MS-PowerPoint"

    # minimum required PowerPoint and type library version
    __application_version_str__ = "PowerPoint 2003"
    __application_version__ = 11
    __tlb_clsid__ = "{91493440-5A91-11CF-8700-00AA0060263B}"
    __tlb_lcid__ = 0
    __tlb_major_version__ = 2
    __tlb_minor_version__ = 8

    def __init__(self, filename, **kwargs):
        super(PowerPointConverterBase, self).__init__(filename, **kwargs)

        # overwrite default parameters, if defined
        try:
            self.conversion_timeout = self.conf_dict["powerpointconverter_conversion_timeout"]
        except Exception:
            pass
        # Dialog robot configuration
        if self.window_timeout != 0:
            self.application_name = self.get_conf_param("powerpointconverter_application_name", "")
            self.auto_confirmations = self.get_conf_param(
                "powerpointconverter_dialog_confirmations", {})

    def setup_application(self, application):
        if not self.get_conf_param("powerpointconverter_shellexecute", False):
            _visible = self.get_conf_param("powerpointconverter_visible", False)
            if application.Visible and not _visible:
                application.Visible = 0
            elif not application.Visible and _visible:
                application.Visible = -1  # Office.MsoTriState.msoTrue = -1

    def open_doc(self):
        import win32com.client
        if self.get_conf_param("powerpointconverter_shellexecute", False):
            self.office_app_obj, self.office_doc_obj = self.open_office_file_indirectly(
                self.filename, "Powerpoint.Application", "ActivePresentation")
        else:
            self.office_app_obj = win32com.client.DispatchEx('Powerpoint.Application')
            self.setup_application(self.office_app_obj)
            self.office_doc_obj = self.office_app_obj.Presentations.Open(
                self.filename, False, False, False)

    def get_document_variables(self):
        doc_vars = {}
        # For PowerPoint updating the document variables doesn't work
        # when starting PowerPoint as a service process!
        if self.get_conf_param("powerpointconverter_shellexecute", False):
            shapes = []
            for slide in self.office_doc_obj.Slides:
                shapes.extend(slide.Shapes)
            for design in self.office_doc_obj.Designs:
                shapes.extend(design.SlideMaster.Shapes)
                for layout in design.SlideMaster.CustomLayouts:
                    shapes.extend(layout.Shapes)
            for shape in shapes:
                if shape.HasTextFrame == -1:  # MsoTriState.msoTrue
                    name = shape.Tags.Item("cdb_docvar")
                    if name and self.is_reading_document_variable(name):
                        doc_vars[name] = None
        return doc_vars

    def cleanup(self):
        try:
            self.office_doc_obj.Saved = True  # close without ever asking to save changes
            self.office_doc_obj.Close()
        except Exception:
            pass
        try:
            self.office_app_obj.Quit()
        except Exception:
            pass
        if self.office_doc_obj is not None:
            del self.office_doc_obj
        if self.office_app_obj is not None:
            del self.office_app_obj

    def handle_timeout(self):
        # Kill PowerPoint Process
        self.kill_app("POWERPNT.EXE")


class PowerPoint2K7Converter(PowerPointConverterBase, pdfconverter.O2K7PDFConverter):
    """
    PowerPoint 2007 built-in PDF converter
    """
    # minimum required PowerPoint and type library version
    __application_version_str__ = "PowerPoint 2007"
    __application_version__ = 12
    __tlb_major_version__ = 2
    __tlb_minor_version__ = 9

    def __init__(self, filename, **kwargs):
        super(PowerPoint2K7Converter, self).__init__(filename, **kwargs)

    def create_pdf(self):
        import pywintypes
        import win32com.client
        # first kill running PowerPoint processes
        self.kill_app("POWERPNT.EXE")
        try:
            create_pdf_a = self.get_conf_param("powerpointconverter_create_pdf_a", False)
            self.open_doc()
            if self.update_document_variables():
                self.store_source_file_changes = True
                self.office_doc_obj.Save()
            self.office_doc_obj.ExportAsFixedFormat(
                Path=self.targetfile,
                FixedFormatType=win32com.client.constants.ppFixedFormatTypePDF,
                Intent=win32com.client.constants.ppFixedFormatIntentPrint,
                UseISO19005_1=create_pdf_a,
                PrintRange=None)
        except pywintypes.com_error, exc:
            if hasattr(self, "log") and self.log:
                self.log("ERROR: %s on %s" % (exc, self.filename))
            else:
                misc.log_error("%s on %s" % (exc, self.filename))
            return False
        except Exception, exc:
            if hasattr(self, "log") and self.log:
                self.log("%s" % "\n".join(traceback.format_exception(*sys.exc_info())))
            else:
                misc.log_traceback("%s on %s" % (exc, self.filename))
            return False
        finally:
            self.cleanup()
        return True


class PowerPointConverter(PowerPointConverterBase, pdfconverter.PDFConverter):
    def __init__(self, filename, **kwargs):
        pdfconverter.PDFConverter.__init__(self, filename, **kwargs)
        if not self.valid:
            return
        self.handle_bookmarks = self.get_conf_param("powerpointconverter_handle_bookmarks", 0)

        # cdb attribute used as bookmarks text for slides without title
        self.bookmark_attr = self.get_conf_param("powerpointconverter_bookmark_attribute", "")
        self.static_bookmark_prefix = self.get_conf_param("powerpointconverter_bookmark_prefix",
                                                          "Slide")

    def convert_to_postscript(self):
        import pywintypes
        try:
            # first kill running PowerPoint processes
            self.kill_app("POWERPNT.EXE")
            self.open_doc()

            self.office_doc_obj.PrintOptions.PrintInBackground = 0
            self.office_doc_obj.PrintOptions.ActivePrinter = self.printer
            self.office_doc_obj.Saved = 1
            misc.log(5, "PowerPointConverter::convert_to_postscript: Printing Document")
            self.office_doc_obj.PrintOut(1, 5000, self.psprintfile, 0, False)
            bookmarks_doc_view = False
            if self.handle_bookmarks:
                try:
                    bookmarks = self.create_bookmarks()
                    self.append_to_psfile(bookmarks)
                    if len(bookmarks) > 0:
                        bookmarks_doc_view = True
                except Exception:
                    misc.log_traceback(
                        "PowerPointConverter::convert_to_postscript: Error creating bookmarks - "
                        "PDF will be created without bookmarks")
            if not self.merge_mode:
                self.append_to_psfile(self.create_doc_view(bookmarks_doc_view))
        except pywintypes.com_error, exc:
            misc.log_error("%s on %s" % (exc, self.filename))
            return False
        except Exception, exc:
            misc.log_traceback("%s on %s" % (exc, self.filename))
            return False
        finally:
            self.cleanup()
        return True

    def create_bookmarks(self):
        page = 1
        bookmarks = []
        bookmark_prefix = self.__get_bookmark_prefix()
        for slide in self.office_doc_obj.Slides:
            text = ""
            try:
                text = slide.Shapes.Title.TextFrame.TextRange.Text
            except Exception:
                text = "%s (%s)" % (bookmark_prefix, page)
            bookmarks.append(pdfconverter.Bookmark(0, page, text, 1, page))
            page += 1
        result = u""
        for bookmark in bookmarks:
            result += bookmark.to_ps(self.page_offset)
        return result

    def __get_bookmark_prefix(self):
        bookmark_prefix = ""
        if (self.bookmark_attr != "") and \
           (self.doc_z_nummer is not None) and \
           (self.doc_z_index is not None):
            # if no relation is specified in bookmark_attr, relation zeichnung
            # will be used
            cdb_relation = None
            cdb_attribute = None
            tokens = self.bookmark_attr.split('.')
            if len(tokens) == 2:
                cdb_relation = tokens[0]
                cdb_attribute = tokens[1]
            else:
                cdb_relation = "zeichnung"
                cdb_attribute = tokens[0]
            if cdb_relation is not None and cdb_attribute is not None:
                from cdb import util
                from cdb import sqlapi
                attr_exists = 1
                try:
                    ti = util.tables[cdb_relation]
                    if not ti.exists(cdb_attribute):
                        attr_exists = 0
                except Exception:
                    # column or table does not exist
                    attr_exists = 0
                if attr_exists:
                    t = sqlapi.SQLselect("%s from %s where z_nummer = '%s' and z_index = '%s'"
                                         % (cdb_attribute, cdb_relation, self.doc_z_nummer,
                                            self.doc_z_index))
                    if sqlapi.SQLrows(t) > 0:
                        bookmark_prefix = sqlapi.SQLstring(t, 0, 0)
                else:
                    misc.log(1, "PowerPointConverter::__get_bookmark_prefix: "
                                "Configured bookmark attribute '%s' "
                                "does not exist. " % self.bookmark_attr)

        # Use static bookmark prefix as fallback
        if bookmark_prefix == "":
            bookmark_prefix = self.static_bookmark_prefix
        return bookmark_prefix
