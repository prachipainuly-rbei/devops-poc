#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2015 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

from __future__ import unicode_literals

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 126530 2015-06-15 14:53:58Z kbu $"

import os

from cdb import misc

# find and import available converters
_GS_CONVERTERS = {}
_O2K7_CONVERTERS = {}
_APPLICATION_NAMES = {}


def _register(mod):
    from cs.officelink.converter import pdfconverter
    for item in [(myname, value, "%s.%s" % (__name__, myname))
                 for myname, value in mod.__dict__.items()
                 if hasattr(value, "__module__")]:
        if hasattr(item[1], "__conversions__"):
            # currently two converter types are supported:
            # PostScript Converters based on pdfconverter.PDFConverter and Office Addin Converters
            # based on pdfconverter.O2K7PDFConverter.
            if pdfconverter.PDFConverter in item[1].__mro__:
                for c in getattr(item[1], "__conversions__"):
                    _GS_CONVERTERS[c] = item[1]
                    _APPLICATION_NAMES[c] = getattr(item[1], "__application_name__")
            elif pdfconverter.O2K7PDFConverter in item[1].__mro__:
                for c in getattr(item[1], "__conversions__"):
                    _O2K7_CONVERTERS[c] = item[1]
                    _APPLICATION_NAMES[c] = getattr(item[1], "__application_name__")

for fname in os.listdir(os.path.dirname(__file__)):
    name, ext = os.path.splitext(fname)
    try:
        if ext == ".py" and not name.find("__init__") == 0:
            _register(__import__("%s.%s" % (__name__, name), globals(), locals(), ['*']))
    except ImportError:
        # import errors can occur becuase of win32 imports...
        misc.log_traceback("Failed to import module %s:" % name)


def GetConverter(suffix, use_o2k7_converter_applications=[]):
    application_name = _APPLICATION_NAMES.get(suffix, "")
    if application_name in use_o2k7_converter_applications:
        return _O2K7_CONVERTERS.get(suffix, None)
    else:
        return _GS_CONVERTERS.get(suffix, None)


def RegisterCustomConverter(fqpyname):
    try:
        _register(__import__(fqpyname, globals(), locals(), ['*']))
    except ImportError:
        # import errors can occur becuase of win32 imports...
        misc.log_traceback("Failed to import module %s" % fqpyname)
