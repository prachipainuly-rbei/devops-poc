#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2015 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module excel

This is the documentation for the excel module.
"""

from __future__ import unicode_literals

__docformat__ = "restructuredtext en"
__revision__ = "$Id: excel.py 173986 2018-03-02 15:19:55Z kbu $"

import sys
import traceback

from cdb import misc

from cs.officelink.converter import pdfconverter


class ExcelConverterBase(object):
    """
    Base class for MS-Excel converters
    """
    __conversions__ = ['.xls', '.xlsx', '.xlsm', '.xlsb',
                       '.xlt', '.xltx', '.xltm',
                       '.csv', '.xml', '.ods']
    __application_name__ = "MS-Excel"

    # minimum required excel and type library versions
    __application_version_str__ = "Excel 2003"
    __application_version__ = 11
    __tlb_clsid__ = "{00020813-0000-0000-C000-000000000046}"
    __tlb_lcid__ = 0
    __tlb_major_version__ = 1
    __tlb_minor_version__ = 5

    def __init__(self, filename, **kwargs):
        super(ExcelConverterBase, self).__init__(filename, **kwargs)

        # overwrite default parameters, if defined
        try:
            self.conversion_timeout = self.conf_dict["excelconverter_conversion_timeout"]
        except Exception:
            pass

        # Dialog robot configuration
        if self.window_timeout != 0:
            self.application_name = self.get_conf_param("excelconverter_application_name", "")
            self.auto_confirmations = self.get_conf_param("excelconverter_dialog_confirmations", {})

    def setup_application(self, application):
        if not self.get_conf_param("excelconverter_shellexecute", False):
            application.Visible = self.get_conf_param("excelconverter_visible", False)
        application.AskToUpdateLinks = 0
        application.Interactive = 0
        application.DisplayAlerts = 0

    def open_doc(self):
        import win32com.client
        if self.get_conf_param("excelconverter_shellexecute", False):
            self.office_app_obj, self.office_doc_obj = self.open_office_file_indirectly(
                self.filename, "Excel.Application", "ActiveWorkbook")
        else:
            self.office_app_obj = win32com.client.DispatchEx('Excel.Application')
            self.setup_application(self.office_app_obj)
            self.office_doc_obj = self.office_app_obj.Workbooks.Open(self.filename, 0, False, 2)

    def get_document_variables(self):
        doc_vars = {}
        for name in self.office_doc_obj.Names:
            name = name.Name.split("!")[-1]  # remove sheet name prefix
            if self.is_reading_document_variable(name):
                doc_vars[name] = None
        return doc_vars

    def cleanup(self):
        try:
            self.office_doc_obj.Close(False)  # False => Don't ask to save changes
        except Exception:
            pass
        try:
            self.office_app_obj.Quit()
        except Exception:
            pass
        if self.office_doc_obj is not None:
            del self.office_doc_obj
        if self.office_app_obj is not None:
            del self.office_app_obj

    def handle_timeout(self):
        # Kill Excel Process
        self.kill_app("EXCEL.EXE")


class Excel2K7Converter(ExcelConverterBase, pdfconverter.O2K7PDFConverter):
    """
    Excel 2007 built-in PDF converter
    """
    # minimum required excel and type library versions
    __application_version__ = 12
    __application_version_str__ = "Excel 2007"
    __tlb_major_version__ = 1
    __tlb_minor_version__ = 6

    def __init__(self, filename, **kwargs):
        super(Excel2K7Converter, self).__init__(filename, **kwargs)
        self.ignore_print_areas = self.get_conf_param("excelconverter_ignore_print_areas", 1)

    def create_pdf(self):
        import pywintypes
        import win32com.client
        self.kill_app("EXCEL.EXE")
        try:
            self.open_doc()
            if self.update_document_variables():
                self.store_source_file_changes = True
                self.office_doc_obj.Save()
            self.office_doc_obj.ExportAsFixedFormat(
                Type=win32com.client.constants.xlTypePDF,
                Filename=self.targetfile,
                Quality=win32com.client.constants.xlQualityStandard,
                IncludeDocProperties=True,
                IgnorePrintAreas=self.ignore_print_areas,
                OpenAfterPublish=False)
        except pywintypes.com_error, exc:
            if hasattr(self, "log") and self.log:
                self.log("ERROR: %s on %s" % (exc, self.filename))
            else:
                misc.log_error("%s on %s" % (exc, self.filename))
            return False
        except Exception, exc:
            if hasattr(self, "log") and self.log:
                self.log("%s" % "\n".join(traceback.format_exception(*sys.exc_info())))
            else:
                misc.log_traceback("%s on %s" % (exc, self.filename))
            return False
        finally:
            self.cleanup()
        return True


class ExcelConverter(ExcelConverterBase, pdfconverter.PDFConverter):
    def __init__(self, filename, **kwargs):
        super(ExcelConverter, self).__init__(filename, **kwargs)
        if not self.valid:
            return
        self.clear_printarea = self.get_conf_param("excelconverter_clear_printarea", 0)
        self.handle_bookmarks = self.get_conf_param("excelconverter_handle_bookmarks", 0)

    def convert_to_postscript(self):
        import pywintypes
        try:
            # first kill running excel processes
            self.kill_app("EXCEL.EXE")
            self.open_doc()
            if self.update_document_variables():
                self.store_source_file_changes = True
                self.office_doc_obj.Save()
            if self.clear_printarea:
                misc.log(5, "ExcelConverter::convert_to_postscript: "
                            "Clearing print areas of all sheets.")
                for sheet in self.office_doc_obj.Worksheets:
                    sheet.PageSetup.PrintArea = ""
            self.office_doc_obj.Saved = 1
            misc.log(5, "ExcelConverter::convert_to_postscript: Printing Document")
            self.office_doc_obj.PrintOut(From=None,
                                         To=None,
                                         Copies=1,
                                         Preview=False,
                                         ActivePrinter=self.printer,
                                         PrintToFile=True,
                                         Collate=False,
                                         PrToFileName=self.psprintfile)
            bookmarks_doc_view = False
            if self.handle_bookmarks:
                try:
                    bookmarks = self.create_bookmarks()
                    self.append_to_psfile(bookmarks)
                    if len(bookmarks) > 0:
                        bookmarks_doc_view = True
                except Exception:
                    misc.log_traceback(
                        "ExcelConverter::convert_to_postscript: Error creating bookmarks - "
                        "PDF will be created without bookmarks")
            if not self.merge_mode:
                self.append_to_psfile(self.create_doc_view(bookmarks_doc_view))
        except pywintypes.com_error, exc:
            misc.log_error("%s on %s" % (exc, self.filename))
            return False
        except Exception, exc:
            misc.log_traceback("%s on %s" % (exc, self.filename))
            return False
        finally:
            self.cleanup()
        return True

    def create_bookmarks(self):
        import win32com.client
        page = 1
        bookmarks = []
        for sheet in self.office_doc_obj.Sheets:
            try:
                stype = sheet.Type
            except Exception:
                # unknown sheet object, e.g. Macro Sheet
                continue
            if stype == win32com.client.constants.xlWorksheet:
                sheet.DisplayAutomaticPageBreaks = True
                HorizBreaks = sheet.HPageBreaks.Count
                HPages = HorizBreaks + 1
                VertBreaks = sheet.VPageBreaks.Count
                VPages = VertBreaks + 1
                pages = HPages * VPages
                sheet.DisplayAutomaticPageBreaks = False
            else:
                pages = 1
            bookmarks.append(pdfconverter.Bookmark(0, page, sheet.Name, 1, page))
            page += pages
        bookmarks.sort(pdfconverter.compareBookmarkStartPosition)
        result = u""
        for bookmark in bookmarks:
            result += bookmark.to_ps(self.page_offset)
        self.office_doc_obj.Saved = 1
        return result
