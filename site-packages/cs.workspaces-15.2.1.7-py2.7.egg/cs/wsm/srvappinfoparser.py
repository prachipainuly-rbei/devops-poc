#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
# $Id: srvappinfoparser.py 121835 2015-03-13 09:56:29Z wme $
#
# Copyright (C) 1990 - 2007 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
# File:     appinfoparser.py
# Author:   ws
# Creation: 26.07.07
# Purpose: Parses "appinfo" files


__docformat__ = "restructuredtext en"


import sys
import traceback
import StringIO

from xml.etree import cElementTree as ElementTree

from cdb.misc import cdblogv
from cdb import misc
from cs.wsm import srvappinfoitems


class logClasses(object):
    kLogErr = misc.kLogErr
    kLogMsg = misc.kLogMsg


class WsItemFactory(object):
    def __init__(self):
        self._itemNameToType = dict()
        validNames = dir(srvappinfoitems)
        for clname, cl in srvappinfoitems.__dict__.iteritems():
            if clname in validNames:
                try:
                    if issubclass(cl, srvappinfoitems.AppinfoItem):
                        xmlTag = cl.xmlTag
                        self._itemNameToType[xmlTag] = cl
                except TypeError:
                    # ALle INTS, usw. ausschliessen
                    pass

    def getWsItemClass(self, wsItemType):
        if wsItemType is not None:
            wsItemType.strip()

        nodeClass = self._itemNameToType.get(wsItemType, None)
        if nodeClass is None:
            cdblogv(logClasses.kLogMsg, 7,
                    "WsItemFactory: no class registered for appinfo tag '%s'; "
                    "using default item class instead" % wsItemType)
            nodeClass = srvappinfoitems.AppinfoItem

        return nodeClass


class AppinfoParseError(Exception):
    """
    Represents a parse error while parsing an appinfo file
    """
    pass


class NoAppinfoContentError(Exception):
    """
    Error indicating a trial to parse an empty appinfo file
    """
    pass


class AppInfoParser(object):
    """
    Parser for appinfo-files

    The appinfo-file determines the structure of the docObjects in the workspace

    """

    def __init__(self):
        self._wsItemFactory = WsItemFactory()

    def parseAppInfo(self, appinfoContent):
        """
        Parses the given appinfo file following the RNC, creates and returns an WsItem tree
        representing the content ot the appinfo file

        :Parameters:
             appInfoContent :String

        :raises AppinfoParseError if the appinfo file could not be parsed
        :raises NoAppinfoContentError if the appinfo file to parse is emtpy

        :returns: WsItem: The root of the WsItem tree representing the content of the appinfo file
        """
        cdblogv(logClasses.kLogMsg, 9, "*** start parsing appinfo")

        fd = StringIO.StringIO(appinfoContent)
        wsItem = None
        tree = None
        try:
            tree = ElementTree.parse(fd)
        except:
            excStr = "".join(traceback.format_exception(*sys.exc_info()))
            cdblogv(logClasses.kLogErr, 0, "unable to parse appinfo file: , details:%s" % excStr)
        finally:
            fd.close()
        if tree is not None:
            root = tree.getroot()  # <appinfo>
            if len(root):
                wsItem = self._processTree(root)
            else:
                cdblogv(logClasses.kLogErr, 0, "unable to parse appinfo file: no content")
        cdblogv(logClasses.kLogMsg, 9, "*** end parsing appinfo")
        return wsItem

    def _processTree(self, node):
        nodeType = node.tag

        wsItem = self._wsItemFactory.getWsItemClass(nodeType)(nodeType, node.attrib)
        if wsItem:
            for subNode in node:
                subTree = self._processTree(subNode)
                if subTree:
                    wsItem.appendChild(subTree)
        else:
            cdblogv(logClasses.kLogErr, 0, u"cannot get a WsItem from the factory, tag '%s'" % nodeType)

        return wsItem
