#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
# $Id: cdbwsmcommands.py 175677 2018-04-10 08:23:17Z hth $
#
# Copyright (C) 1990 - 2009 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
# File:     cdbwsmcommands.py
# Author:   ws
# Creation: 01.12.09
# Purpose:

"""
Module cdbwsmcommands.py

This is the documentation for the cdbwsmcommands.py module.
"""

__docformat__ = "restructuredtext en"

import os
import sys
import traceback

from cdb import misc, rte
from cdb import ue


def setupImportPath(wsmVersion):
    """
    Sets import path for wsm version specific server components.

    WARNING: This is a dangerous operation, potentially opening the door to
             remote code execution. Make sure paths to set are always sanitized!
    """
    base = misc.getConfigValue("CADDOK_BASE")
    if base:
        wsmPath = misc.jail_filename(base, "pkgs", "wsm", wsmVersion)
        if os.path.isdir(wsmPath):
            if wsmPath not in sys.path:
                sys.path.insert(0, wsmPath)
            misc.cdblogv(misc.kLogMsg, 5, "wsm import path set to '%s'" % wsmPath)
        else:
            misc.cdblogv(misc.kLogErr, 0, "wsm import path '%s' does not exist" % wsmPath)
    else:
        misc.cdblogv(misc.kLogErr, 0, "CADDOK_BASE not set")


class KnownException(Exception):
    """
    Specialization of exception where traceback should not need to be printed.
    """


class cdbwsmcommandsadapter:
    """
    Operation to handle XML communication between WSM and CDB server.
    """
    context_name = "cadtalkstdinout"

    def impl(self, ctx):
        misc.cdblogv(misc.kLogMsg, 7, "-----start cdbwsmcommandsadapter.impl(...)")

        # Use wsm version from environment:
        # Fallback to version 2.3 to support older versions like
        # 2.1, 2.2 (which do not transmit WS_VERSION).
        wsmVersion = rte.environ.get("WS_VERSION", "2.3")
        setupImportPath(wsmVersion)

        try:
            from wsmcommandprocessor import WsmCommandProcessor, CompressStream
            from cmdprocessorbase import WsmCmdErrCodes
        except ImportError:
            misc.cdblogv(misc.kLogErr, 0, "importing wsm module failed: %s" %
                         traceback.format_exc())
            ctx.writeln("WSM_IMPORT_ERROR")
        else:
            returnCode = WsmCmdErrCodes.unknownProcessingError
            resultLines = []
            try:
                cmdProcessor = WsmCommandProcessor(ctx.stdin)
                returnCode, resultLines = cmdProcessor.process()
            except KnownException, e:
                misc.cdblogv(misc.kLogErr, 0, "An exception occured calling UE cdbwsmcommands")
                misc.cdblogv(misc.kLogErr, 0, unicode(e))
                misc.cdblogv(misc.kLogErr, 0, traceback.format_exc())
                resultStream = CompressStream()
                resultStream.write(unicode(e))
                resultLines = resultStream.lines()
            except Exception, e:
                misc.cdblogv(misc.kLogErr, 0, "An exception occured calling UE cdbwsmcommands")
                misc.cdblogv(misc.kLogErr, 0, unicode(e))
                misc.cdblogv(misc.kLogErr, 0, traceback.format_exc())
                resultStream = CompressStream()
                resultStream.write(traceback.format_exc())
                resultLines = resultStream.lines()
            finally:
                ctx.writeln(unicode(returnCode))
                for line in resultLines:
                    ctx.writeln(line)
        misc.cdblogv(misc.kLogMsg, 7, "-----end cdbwsmcommandsadapter.impl(...)")


if "__main__" == __name__:
    ue.run(cdbwsmcommandsadapter)
