#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"

from cdb import misc
from cdb import sqlapi
from cdb import util
from cdb import ue

from cdb.objects import Object
from cdb.objects import Reference_N
from cdb.objects import Forward
from cdb.objects.cdb_file import CDB_File
from cdb.objects.operations import operation

fWsmSettings = Forward("cs.wsm.wsm_settings.WsmSettings")


class WsmSettings(Object):
    __maps_to__ = "wsm_settings"
    __classname__ = "wsm_settings"

    Files = Reference_N(CDB_File, CDB_File.cdbf_object_id == fWsmSettings.cdb_object_id)

    @staticmethod
    def find_valid_settings(wsm_context, wsm_version):
        """
        :param wsm_context: string
        :param wsm_version: string (for example "3.6")
        :return: WsmSettings object or None
        """
        misc.cdblogv(misc.kLogMsg, 5, "WsmSettings: looking for readable settings container for WSM %s, using context %s" % (wsm_version, wsm_context))
        result = None
        releasedSettings = WsmSettings._get_sorted_settings(wsm_context, wsm_version, [200])
        if releasedSettings:
            result = releasedSettings[0]
            misc.cdblogv(misc.kLogMsg, 5, "WsmSettings: Found existing settings container with index %s." % result.s_index)
        else:
            misc.cdblogv(misc.kLogMsg, 5, "WsmSettings: found no settings container.")
        return result

    @staticmethod
    def find_settings_to_update(wsm_context, wsm_version):
        """
        Finds or creates a settings object that is in state "editing".
        :param wsm_context: string
        :param wsm_version: string (for example "3.6")
        :return: WsmSettings object
        """
        misc.cdblogv(misc.kLogMsg, 5, "WsmSettings: looking for writable settings container for WSM %s, using context %s" % (wsm_version, wsm_context))
        # check if the highest valid settings object is in state 'editing';
        # if yes, use it for saving
        nonInvalidSettings = WsmSettings._get_sorted_settings(wsm_context, wsm_version, [0, 200])
        if nonInvalidSettings:
            highest = nonInvalidSettings[0]
            if highest.status == 0:
                misc.cdblogv(misc.kLogMsg, 5, "WsmSettings: Found existing settings container with index %s." % highest.s_index)
                return highest

        # otherwise create a new settings object with the right "index" value
        newSettings = None
        misc.cdblogv(misc.kLogMsg, 5, "Creating new index with context: '%s', wsm_version: '%s'" % (wsm_context, wsm_version))
        keys = {'context': wsm_context, 'wsm_version': wsm_version}
        if util.check_access("wsm_settings", keys, "create"):
            args = {'context': wsm_context, 'wsm_version': wsm_version, 'status': 0}
            newSettings = operation("CDB_Create", WsmSettings, **args)
            misc.cdblogv(misc.kLogMsg, 5, "WsmSettings: created new settings container with index %s." % newSettings.s_index)
        else:
            misc.cdblogv(misc.kLogErr, 0, "WsmSettings: can't create settings container because of missing 'create' right.")

        return newSettings

    @staticmethod
    def _get_sorted_settings(context, wsm_version, stati=None):
        query = "context = '%s' AND wsm_version = '%s'"\
                % (sqlapi.quote(context),
                   sqlapi.quote(wsm_version))
        if stati is not None:
            query += " AND status IN (%s)" % ",".join(str(s) for s in stati)
        return WsmSettings.Query(query, "s_index DESC")

    def on_create_pre_mask(self, ctx):
        ctx.set("status", 0)
        ctx.set("s_index", 0)
        ctx.set_writeable("context")
        ctx.set_writeable("wsm_version")

    def on_create_pre(self, ctx):
        ctx.set("s_index", WsmSettings._find_lowest_free_index(self.context, self.wsm_version))

    def on_copy_pre_mask(self, ctx):
        ctx.set_writeable("context")
        ctx.set_writeable("wsm_version")

    def on_copy_pre(self, ctx):
        ctx.set("s_index", WsmSettings._find_lowest_free_index(self.context, self.wsm_version))

    @staticmethod
    def _find_lowest_free_index(context, wsm_version):
        res = 0
        existing = WsmSettings._get_sorted_settings(context, wsm_version)
        if existing:
            res = existing[0].s_index + 1
        return res

    def on_state_change_post(self, ctx):
        # changed state from "in Arbeit" or "ungueltig" to "freigegeben"
        if ctx.old.status in ['0', '180'] and ctx.new.status == '200':
            # set all other versions to "ungueltig"
            allForContext = self._get_sorted_settings(self.context, self.wsm_version, [0, 200])
            for settings in allForContext:
                if settings.s_index != self.s_index:
                    oldState = settings.status
                    try:
                        settings.ChangeState(180)
                    except RuntimeError, e:
                        raise ue.Exception("cdb_konfstd_008", '%s' % oldState, '%s' % 180, e)
