#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
Supports declarative description of workspace structures as test fixtures.
"""
import uuid

from cdb.storage.exceptions import UnknownObjectError
from cdb.objects import ByID
from cdb.objects.pdd import Sandbox
from cdb.objects.cdb_file import cdb_link_item
from cs.documents import Document
from cs.vp.items import Item
from cs.vp.cad import CADVariant
from cdb.objects.cdb_file import cdb_folder_item

prefix = "WSMBOM"

itemCounter = 0


def createItem(**kwargs):
    global itemCounter
    itemCounter += 1
    attrs = {'benennung': "",
             'teilenummer': "%s %s" % (prefix, itemCounter),
             't_index': "",
             'mengeneinheit': 'Stk'}
    attrs.update(kwargs)
    return Item.Create(**attrs)


docCounter = 0


class Doc(object):
    def __init__(self, item, *filesAndDocs, **kwargs):
        self.item = item
        self.filesAndDocs = filesAndDocs
        self.documentAttributes = kwargs

    def create(self, parents):
        parent = None
        if parents is None:
            parents = []
        else:
            parent = parents[0]

        global docCounter
        docCounter += 1
        kwargs = {'z_nummer': "%s %s" % (prefix, docCounter),
                  'z_index': '',
                  'erzeug_system': "ProE",
                  }
        kwargs.update(self.documentAttributes)
        if self.item:
            kwargs['teilenummer'] = self.item.teilenummer
            kwargs['t_index'] = self.item.t_index
        res = Document.Create(**kwargs)

        for f in self.filesAndDocs:
            f.create([res] + parents)

        # set again because may be changed by files
        res.erzeug_system = kwargs['erzeug_system']

        if parent is not None:
            cdb_link_item.Create(
                cdbf_object_id=parent.cdb_object_id,
                cdb_wspitem_id=uuid.uuid4(),
                cdb_folder="",
                cdb_link=res.cdb_object_id,
                cdbf_blob_id="",
                cdb_link_condition="")

        return res


class Directory(object):
    def __init__(self, name, *files):
        self.name = name
        self.files = files

    def create(self, parents):
        doc = parents[0]

        wspitemid = "%s" % uuid.uuid4()

        folder = cdb_folder_item.Create(cdbf_object_id=doc.cdb_object_id,
                                        cdbf_name=self.name,
                                        cdb_wspitem_id=wspitemid)

        for f in self.files:
            f.folderId = folder.cdb_wspitem_id
            f.create(parents)

        return True


class File(object):
    def __init__(self, filename, appInfoContent=None, isPrimary=False):
        self.filename = filename
        self.appInfoContent = appInfoContent
        self.isPrimary = isPrimary
        self.folderId = None

    def create(self, parents):
        doc = parents[0]
        ws = Sandbox()

        p = ws.create(doc, self.filename, "unknown", primary=self.isPrimary)
        with open(p, 'w') as fd:
            fd.write("dummy content")

        if self.appInfoContent is not None:
            p = ws.create(doc, self.filename + ".appinfo", "Appinfo")
            with open(p, 'w') as fd:
                content = self.appInfoContent
                if "<appinfo" not in content:
                    content = "<appinfo>%s</appinfo>" % self.appInfoContent
                fd.write(content)
        ws.commit()

        # reget object to get a fresh "Files" field
        doc = ByID(doc.cdb_object_id)

        if self.appInfoContent is not None:
            wspitemid = "%s" % uuid.uuid4()
            ok1, ok2 = False, False
            for f in doc.Files:
                if f.cdbf_name == self.filename:
                    f.cdb_wspitem_id = wspitemid
                    if self.folderId:
                        f.cdb_folder = self.folderId
                    ok1 = True
                elif f.cdbf_name == self.filename + ".appinfo":
                    f.cdb_belongsto = wspitemid
                    if self.folderId:
                        f.cdb_folder = self.folderId
                    ok2 = True
            assert ok1 and ok2


class PrimaryFile(File):
    def __init__(self, filename, appInfoContent=None):
        File.__init__(self, filename, appInfoContent, isPrimary=True)


class PrimaryFileWithReplicationError(File):
    def __init__(self, filename, appInfoContent=None):
        File.__init__(self, filename, appInfoContent, isPrimary=True)

    def create(self, parents):
        File.create(self, parents)
        doc = parents[0]
        for f in doc.Files:
            if f.cdbf_name == self.filename + ".appinfo":
                def get_content():
                    raise UnknownObjectError("message", "blobid")
                f.get_content = get_content


variantCounter = 0


class Variant(object):
    def __init__(self, item, variantId, teilenummer=None, t_index=None):
        self.item = item
        self.variantId = variantId
        self.teilenummer = teilenummer
        self.t_index = t_index

    def create(self, parents):
        global variantCounter
        name = "%s %s" % (prefix, variantCounter)
        if parents:
            doc = parents[0]
        else:  # we don't care about the document, but we need SOME doc
            doc = Document.Create(z_nummer="docfor" + name, z_index="", erzeug_system="ProE")
        variantCounter += 1
        if self.item:
            res = CADVariant.Create(z_nummer=doc.z_nummer, z_index=doc.z_index,
                                    teilenummer=self.item.teilenummer, t_index=self.item.t_index,
                                    variant_name=name, variant_id=self.variantId)
        elif self.teilenummer:
            res = CADVariant.Create(z_nummer=doc.z_nummer, z_index=doc.z_index,
                                    teilenummer=self.teilenummer, t_index=self.t_index,
                                    variant_name=name, variant_id=self.variantId)
        else:
            res = CADVariant.Create(z_nummer=doc.z_nummer, z_index=doc.z_index,
                                    variant_name=name, variant_id=self.variantId)
        return res


class Uplink(object):
    """
    Create a link items that links back to a parent or grand parent ...
    """
    def __init__(self, levels=1):
        self.levels = levels

    def create(self, parents):
        src = parents[0]
        dst = parents[self.levels]
        cdb_link_item.Create(
            cdbf_object_id=src.cdb_object_id,
            cdb_wspitem_id=uuid.uuid4(),
            cdb_folder="",
            cdb_link=dst.cdb_object_id,
            cdbf_blob_id="",
            cdb_link_condition="")


class LinkItem(object):
    """
    Creates a link item from the parent document to some cdb_object_id.
    (Normally not needed)
    """
    def __init__(self, dest):
        self.dest = dest

    def create(self, parents):
        src = parents[0]
        cdb_link_item.Create(
            cdbf_object_id=src.cdb_object_id,
            cdb_wspitem_id=uuid.uuid4(),
            cdb_folder="",
            cdb_link=self.dest,
            cdbf_blob_id="",
            cdb_link_condition="")


def createDocumentStructure(workspace):
    """
    :param workspace list of Doc descriptions
    """
    results = [doc.create(None) for doc in workspace]
    return results[0]
