#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
# Author:   wme
# Creation: 03.05.12


import unittest
from cdb.testcase import run_level_setup

from cdb.objects.cdb_file import CDB_File, cdb_file_record, cdb_link_item, cdb_folder_item
from cs.documents import Document
from cs.vp.items import Item
from cs.platform.cad import Frame
from cdb import sqlapi, cdbuuid, util
from cdb.objects import OBJECT_STORE, ByID

from cs.wsm.wsobjectcache import WsObjectCache, MAX_IN_ELEMENTS

PREFIX = 'CDBWSM_WSOCTEST'


def setUp():
    run_level_setup()


class Test_WsObjectCache(unittest.TestCase):
    def setUp(self):
        self.cleanUp()
        self._cache = WsObjectCache(simplifiedRightsCheck=True)

    def tearDown(self):
        self.cleanUp()

    def cleanUp(self):
        sqlapi.SQLdelete("FROM zeichnung WHERE z_nummer LIKE '%s%%'" % PREFIX)
        sqlapi.SQLdelete("FROM teile_stamm WHERE teilenummer LIKE '%s%%'" % PREFIX)
        sqlapi.SQLdelete("FROM cdb_file WHERE cdbf_name LIKE '%s%%'" % PREFIX)
        OBJECT_STORE.set_dirty()

    def createDocs(self, count, withFiles=False, withIndexes=False):
        ids = []
        docs = []
        for c in range(count):
            d = Document.Create(z_nummer=PREFIX + str(c), z_index='')
            docs.append(d)
            ids.append(d.cdb_object_id)
        if withFiles:
            for id in ids:
                # some files
                for c in range(3):
                    CDB_File.Create(cdbf_object_id=id, cdbf_name=PREFIX + str(c), cdb_wspitem_id=cdbuuid.create_uuid())
                # a file record
                c += 1
                cdb_file_record.Create(cdbf_object_id=id, cdbf_name=PREFIX + str(c), cdb_wspitem_id=cdbuuid.create_uuid())
                # a link
                c += 1
                cdb_link_item.Create(cdbf_object_id=id,
                                     cdbf_name=PREFIX + str(c),
                                     cdb_link="unknown",
                                     cdb_wspitem_id=cdbuuid.create_uuid())
                # a folder
                c += 1
                cdb_folder_item.Create(cdbf_object_id=id, cdbf_name=PREFIX + str(c), cdb_wspitem_id=cdbuuid.create_uuid())
        if withIndexes:
            numIndexesPerDoc = 0
            for d in docs:
                for i in reversed(range(ord('a'), ord('a') + numIndexesPerDoc)):
                    Document.Create(z_nummer=d.z_nummer, z_index=chr(i))
                numIndexesPerDoc += 1
        OBJECT_STORE.set_dirty()
        return ids

    def createAndRetrieveDocs(self, count):
        ids = self.createDocs(count)
        docs = self._cache.getObjectsByID(ids)
        assert len(docs) == count
        for c, id in enumerate(ids):
            d = self._cache.getCachedObject(id)
            assert d is not None
            assert d.z_nummer == PREFIX + str(c)

    def test_retrieveAFewDocs(self):
        self.createAndRetrieveDocs(43)

    def test_retrieveManyDocs(self):
        self.createAndRetrieveDocs(MAX_IN_ELEMENTS + 1)

    def test_retrieveAllFrames(self):
        frames = Frame.Query()
        frameIds = [f.cdb_object_id for f in frames]
        OBJECT_STORE.set_dirty()
        frames2 = self._cache.getObjectsByID(frameIds)
        assert len(frames2) == len(frames)

    def test_retrieveMixed(self):
        """
        Test that retrieving a mixed collection of frames and documents works.
        """
        docs = self.createDocs(10)
        frames = [f.cdb_object_id for f in Frame.Query()][:10]
        OBJECT_STORE.set_dirty()
        ids = docs + frames
        objs = self._cache.getObjectsByID(ids)
        assert len(objs) == len(docs) + len(frames)
        retrievedIds = set(o.cdb_object_id for o in objs)
        assert set(frames) <= retrievedIds
        assert set(docs) <= retrievedIds

    def test_rightsMixed(self):
        # GIVEN: some documents and frames
        docs = self.createDocs(10)
        frames = [f.cdb_object_id for f in Frame.Query()][:10]
        # (by default, there are no frames in a CDB 11 instance)
        OBJECT_STORE.set_dirty()
        ids = docs + frames

        # WHEN: I try to get the access rights of these objects
        rights, status = self._cache.getCdbObjectRightsAndStatusTextByID(ids)

        # THEN: the result contains entries for every document and frame
        assert len(rights) == len(docs) + len(frames)
        retrievedIds = set(rights)
        assert set(frames) <= retrievedIds
        assert set(docs) <= retrievedIds
        #  AND: the result contains a status for every doc (but not for frames)
        assert len(status) == len(docs)

    def test_lockInfo(self):
        # GIVEN: two documents with 3 files each
        #        (and some file record and link items)
        docs = self.createDocs(2, withFiles=True)
        #  AND: one of the files is derived
        doc0 = ByID(docs[0])
        doc0.Files[1].cdb_belongsto = doc0.Files[0].cdb_wspitem_id

        # WHEN: I retrieve the lock info for the files of these documents
        lockInfos = self._cache.getLockInfoOfNonDerivedFiles(ids=docs, wspLockId=None)

        # THEN: each non-derived file has a lockinfo
        assert len(lockInfos) == 2
        #  AND: the lockinfo has the required infos
        lockInfoOfDoc = lockInfos.values()[0]
        firstLockInfo = lockInfoOfDoc.values()[0]
        assert firstLockInfo['status'] == u"not"
        assert firstLockInfo['locker'] == u""

    def test_someWorkspaceItems(self):
        # Tests that workspaceItemsOf retrieves the same objects as the the
        # relation workspaceItems.
        # Also checks that ordering by cdb_object_id works in both.
        self.createAndRetrieveFiles(13)

    def test_manyWorkspaceItems(self):
        self.createAndRetrieveFiles(200)  # 200*6=1200 file-like objects

    def createAndRetrieveFiles(self, numDocs):
        docIds = self.createDocs(numDocs, withFiles=True)
        docs = self._cache.getObjectsByID(docIds)
        OBJECT_STORE.set_dirty()
        for d in docs:
            items = list(d.WorkspaceItems)
            items = sorted(items, key=lambda f: f.cdb_object_id)
            items2 = self._cache.workspaceItemsOf(d.cdb_object_id)
            items2 = sorted(items2, key=lambda f: f.cdb_object_id)
            assert len(items) == len(items2)
            for i1, i2 in zip(items, items2):
                if i1.__class__ != i2.__class__:
                    print "Class of item retrieved by 'WorkspaceItems' relationship: %s" % i1.__class__
                    print "Class of item constructed from RecordSet2: %s" % i2.__class__
                assert i1.__class__ == i2.__class__
                attrs = i1._fields.keys()
                for a in attrs:
                    assert i1[a] == i2[a]

    def test_uncachedObject(self):
        [id] = self.createDocs(1)
        assert self._cache.getCachedObject(id) is None

    def test_cachedObject(self):
        [id] = self.createDocs(1)
        docs = self._cache.getObjectsByID([id])
        assert self._cache.getCachedObject(id) == docs[0]

    def test_fetchMultiple(self):
        [id] = self.createDocs(1)
        docs = self._cache.getObjectsByID([id])
        docs2 = self._cache.getObjectsByID([id])
        assert docs[0] == docs2[0]
        assert self._cache.getCachedObject(id) == docs[0]

    def test_unknownObject(self):
        docs = self._cache.getObjectsByID(['nonexistingid'])
        assert len(docs) == 0

    def test_rightsOfUncached(self):
        [id] = self.createDocs(1, withFiles=True)
        doc = ByID(id)
        aFileOfDoc = doc.WorkspaceItems[0]
        rights = self._cache.rightsOfBusinessObject(doc)
        assert "get" in rights
        assert "save" in rights
        assert "delete" in rights
        assert "index" in rights
        fileRights = self._cache.rightsOfFile(aFileOfDoc)
        assert "get" in fileRights
        assert "save" in fileRights
        assert "delete" in fileRights
        assert "index" in fileRights

    def test_rightsOf(self):
        [id] = self.createDocs(1, withFiles=True)
        [doc] = self._cache.getObjectsByID([id])
        rights = self._cache.rightsOfBusinessObject(doc)
        assert "get" in rights
        assert "save" in rights
        assert "delete" in rights
        assert "index" in rights
        aFileOfDoc = doc.WorkspaceItems[0]
        fileRights = self._cache.rightsOfFile(aFileOfDoc)
        assert "get" in fileRights
        assert "save" in fileRights
        assert "delete" in fileRights
        assert "index" in fileRights


class Test_WsObjectCacheFullRightsCheck(Test_WsObjectCache):
    """
    Do the same checks again, without simplifiedRightsCheck.
    """
    def setUp(self):
        self.cleanUp()
        self._cache = WsObjectCache(simplifiedRightsCheck=False)


class Test_WsObjectCacheExtendedCaching(Test_WsObjectCache):
    """
    Do basic tests and additional tests mit extended caching.
    """
    def setUp(self):
        self.cleanUp()
        self._cache = WsObjectCache(simplifiedRightsCheck=True,
                                    extendedCaching=True)

    def test_retrieveIndexes(self):
        # given: some documents with a variable number of indexes
        docIds = self.createDocs(10, withIndexes=True)

        # when: accessing the documents by WsObjectCache
        self._cache.getObjectsByID(docIds)

        # then: the indexes are in the WsObjectCache, too
        expectedNumIndexes = 1
        for docId in docIds:
            doc = self._cache.getCachedObject(docId)
            indexes = self._cache.indexesOfDocument(doc)
            assert len(indexes) == expectedNumIndexes
            expectedNumIndexes += 1

    def test_retrieveFileAttributes(self):
        # given: some documents with files and special wsm attributes on the files
        docIds = self.createDocs(401, withFiles=True)
        for docId in docIds:
            doc = ByID(docId)
            for f in doc.WorkspaceItems:
                dbi = util.DBInserter("cdb_file_wsm")
                dbi.add("cdbf_object_id", f.cdbf_object_id)
                dbi.add("file_wspitem_id", f.cdb_wspitem_id)
                dbi.add("wsm_manual_assigned", "1")
                dbi.insert()

        # when: accessing the documents by WsObjectCache
        self._cache.getObjectsByID(docIds)

        # then: the wsm file attributes can be accessed by WsObjectCache
        for docId in docIds:
            for f in self._cache.workspaceItemsOf(docId):
                attrs = self._cache.wsmAttributesOfFile(docId, f.cdb_wspitem_id)
                assert attrs['wsm_manual_assigned'] == 1

    def test_retrieveLinkStatus(self):
        # given: some documents with link items and a link status on the items
        docIds = self.createDocs(10, withFiles=True)
        for docId in docIds:
            doc = ByID(docId)
            for f in doc.WorkspaceItems:
                dbi = util.DBInserter("cdb_file_links_status")
                dbi.add("cdbf_object_id", f.cdbf_object_id)
                dbi.add("file_wspitem_id", f.cdb_wspitem_id)
                dbi.add("link_id", "id1")
                dbi.add("relevant", "1")
                dbi.insert()
                dbi = util.DBInserter("cdb_file_links_status")
                dbi.add("cdbf_object_id", f.cdbf_object_id)
                dbi.add("file_wspitem_id", f.cdb_wspitem_id)
                dbi.add("link_id", "id2")
                dbi.add("relevant", "0")
                dbi.insert()

        # when: accessing the documents by WsObjectCache
        self._cache.getObjectsByID(docIds)

        # then: the link status can be accessed by WsObjectCache
        for docId in docIds:
            for f in self._cache.workspaceItemsOf(docId):
                attrs = self._cache.linkStatusOf(docId, f.cdb_wspitem_id)
                assert attrs == {'id1': 1, 'id2': 0}

    def test_itemsAreInCache(self):
        # given: some documents and an item for every document
        docIds = self.createDocs(10)
        c = 0
        itemIds = []
        for docId in docIds:
            doc = ByID(docId)
            d = Item.Create(teilenummer=PREFIX + str(c), t_index='')
            c += 1
            itemIds.append(d.cdb_object_id)
            doc.teilenummer = d.teilenummer
            doc.t_index = d.t_index

        OBJECT_STORE.clear()

        # when: accessing documents by WsObjectCache
        self._cache.getObjectsByID(docIds)

        # then: items are in object frameworks cache
        try:
            weakRefs = OBJECT_STORE._dict.valuerefs()
        except:
            weakRefs = OBJECT_STORE._dict.values()

        for i in itemIds:
            for wr in weakRefs:
                o = wr()
                if o and getattr(o, 'cdb_object_id', None) == i:
                    break
            else:
                assert False, "item not found in cache"

    def test_linkedDocsAreFetched(self):
        # given: two documents that are linked in a cycle
        d1 = Document.Create(z_nummer=PREFIX + "1", z_index='')
        d2 = Document.Create(z_nummer=PREFIX + "2", z_index='')
        l1 = cdb_link_item.Create(cdbf_object_id=d1.cdb_object_id,
                                  cdbf_name=PREFIX + "1",
                                  cdb_link=d2.cdb_object_id,
                                  cdb_wspitem_id=cdbuuid.create_uuid())
        l2 = cdb_link_item.Create(cdbf_object_id=d2.cdb_object_id,
                                  cdbf_name=PREFIX + "1",
                                  cdb_link=d1.cdb_object_id,
                                  cdb_wspitem_id=cdbuuid.create_uuid())

        # when: pre-fetching d1 with WsObjectCache
        self._cache.prefetchObjects([d1.cdb_object_id])

        # then: d2 is cached, too
        cachedD2 = self._cache.getCachedObject(d2.cdb_object_id)
        assert cachedD2 is not None

    def test_linkedDocsAreNotFetched(self):
        # given: two documents that are linked in a cycle
        d1 = Document.Create(z_nummer=PREFIX + "1", z_index='')
        d2 = Document.Create(z_nummer=PREFIX + "2", z_index='')
        l1 = cdb_link_item.Create(cdbf_object_id=d1.cdb_object_id,
                                  cdbf_name=PREFIX + "1",
                                  cdb_link=d2.cdb_object_id,
                                  cdb_wspitem_id=cdbuuid.create_uuid())
        l2 = cdb_link_item.Create(cdbf_object_id=d2.cdb_object_id,
                                  cdbf_name=PREFIX + "1",
                                  cdb_link=d1.cdb_object_id,
                                  cdb_wspitem_id=cdbuuid.create_uuid())

        # when: pre-fetching d1 with WsObjectCache
        self._cache.prefetchObjects([d1.cdb_object_id], alsoFetchLinkedObjects=False)

        # then: d2 is cached, too
        cachedD2 = self._cache.getCachedObject(d2.cdb_object_id)
        assert cachedD2 is None


if "__main__" == __name__:
    suite1 = unittest.makeSuite(Test_WsObjectCache)
    suite2 = unittest.makeSuite(Test_WsObjectCacheFullRightsCheck)
    suite3 = unittest.makeSuite(Test_WsObjectCacheExtendedCaching)
    alltests = unittest.TestSuite([suite1, suite2, suite3])
    runner = unittest.TextTestRunner()
    runner.run(alltests)
