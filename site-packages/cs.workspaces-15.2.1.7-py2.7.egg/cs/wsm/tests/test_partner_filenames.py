#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/


import unittest

from cdb import cdbuuid
from cdb.objects.org import Organization
import cdbwrapc
from cdb import constants
from cdb.platform import mom
from cdb.objects.cdb_file import CDB_File
from cdb.testcase import RollbackTestCase

from cs.documents import Document
from cs.wsm.partnerexport import PartnerFilename


class Test_PartnerFilenames(RollbackTestCase):
    def setUp(self):
        RollbackTestCase.setUp(self)
        self.z_nummer = "test_partnerexport"
        # GIVEN: a document with a simple file and a file group
        self.doc = Document.Create(z_nummer=self.z_nummer, z_index="")
        self.simple = CDB_File.Create(cdbf_object_id=self.doc.cdb_object_id,
                                      cdbf_name="simplefile.txt",
                                      cdbf_original_name="simplefile_original",
                                      cdb_wspitem_id=cdbuuid.create_uuid())
        self.model = CDB_File.Create(cdbf_object_id=self.doc.cdb_object_id,
                                     cdbf_name="model.txt",
                                     cdbf_original_name="",  # empty!
                                     cdb_wspitem_id=cdbuuid.create_uuid())
        self.appinfo = CDB_File.Create(cdbf_object_id=self.doc.cdb_object_id,
                                       cdbf_name="appinfo.txt",
                                       cdbf_original_name="appinfo_original",
                                       cdb_belongsto=self.model.cdb_wspitem_id,
                                       cdb_wspitem_id=cdbuuid.create_uuid())

    def _create_partner_filenames(self):
        # shortcut: create partner filenames for our doc with some existing organization
        org = Organization.Query()[0]
        org_id = org.cdb_object_id
        self.doc.create_partner_filenames(org_id)
        return org_id

    def test_beforeCall(self):
        # GIVEN: there are no partner names yet
        # THEN: there is no default partner for subsequent calls
        generated_orgs = Document.find_export_partners([self.doc.cdb_object_id], only_generated=True)
        assert not generated_orgs

    def test_ignoreManualEntries(self):
        # GIVEN: there are only manually created partner names
        org = Organization.Query()[0]  # use some existing organization
        org_id = org.cdb_object_id
        PartnerFilename.Create(document_id=self.doc.cdb_object_id,
                               file_id=self.simple.cdb_object_id,
                               organization_id=org_id,
                               partner_filename="manually_entered")
        # THEN: there is no default partner for subsequent calls
        generated_orgs = Document.find_export_partners([self.doc.cdb_object_id], only_generated=True)
        assert not generated_orgs

    def test_initialCall(self):
        # WHEN: I try to create partner filenames for our document
        org_id = self._create_partner_filenames()
        # THEN: there is an entry for the simple file with the correct content
        simple = PartnerFilename.ByKeys(self.simple.cdb_object_id, org_id)
        assert simple
        assert simple.partner_filename == self.simple.cdbf_original_name
        # AND: there is an entry for the filegroup with the correct content
        model = PartnerFilename.ByKeys(self.model.cdb_object_id, org_id)
        assert model
        assert model.partner_filename == "model"
        # AND: there is NO entry for files which belong to a filegroup
        appinfo = PartnerFilename.ByKeys(self.appinfo.cdb_object_id, org_id)
        assert not appinfo
        # AND: we remember which partner was used for creating the initial entries
        generated_orgs = Document.find_export_partners([self.doc.cdb_object_id], only_generated=True)
        assert generated_orgs == [org_id]

    def test_repeatedCall(self):
        # GIVEN: partner filenames were created before
        org_id = self._create_partner_filenames()
        # AND: the original filename of a file was changed
        simplefile_original = self.simple.cdbf_original_name
        self.simple.cdbf_original_name = "simplefile_changed"
        # AND: a file was added
        new = CDB_File.Create(cdbf_object_id=self.doc.cdb_object_id,
                              cdbf_name="new.txt",
                              cdbf_original_name="new_original",
                              cdb_wspitem_id=cdbuuid.create_uuid())
        self.doc.Reload()
        # WHEN: I create partner filenames again
        self.doc.create_partner_filenames(org_id)
        # THEN: existing entries are unchanged
        simple = PartnerFilename.ByKeys(self.simple.cdb_object_id, org_id)
        assert simple.partner_filename == simplefile_original
        # AND: there is an entry for the new file
        new_pf = PartnerFilename.ByKeys(new.cdb_object_id, org_id)
        assert new_pf

    def test_partnerFilenamesAreDeleted(self):
        # GIVEN: partner filenames were created before
        org_id = self._create_partner_filenames()
        simple_id = self.simple.cdb_object_id
        # WHEN: I delete a file with partner filename
        operation = cdbwrapc.Operation(constants.kOperationDelete, self.simple.ToObjectHandle(), mom.SimpleArguments())
        operation.run()
        # THEN: the partner filename was deleted, too
        simple = PartnerFilename.ByKeys(simple_id, org_id)
        assert not simple


if "__main__" == __name__:
    suite = unittest.makeSuite(Test_PartnerFilenames)
    runner = unittest.TextTestRunner()
    runner.run(suite)
