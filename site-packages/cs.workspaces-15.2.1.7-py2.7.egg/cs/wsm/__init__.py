#!/usr/bin/env powerscript
# -*- python -*- coding: iso-8859-1 -*-
#

import os
import io

from cdb import ue, CADDOK
from cdb.classbody import classbody
from cs.documents import Document  # needed for classbody extension
from cdb.objects.cdb_file import CDB_File
from cdb.objects import NULL
from cdb.sig import connect


# Immediately unlock cdb_belongsto files after lock
@connect(CDB_File, "CDB_Lock", "post")
def _unlockBelongstoFiles(self, ctx):
    if self.cdb_belongsto:
        pObj = self.getPersistentObject()
        pObj.Update(cdb_lock="", cdb_lock_date=NULL, cdb_lock_id=NULL)


# provide "Open in CAD" operation for CAD documents
@classbody
class Document(object):
    def open_cad_file(self, ctx=None):
        numPrimaryFiles = len(self.PrimaryFiles)
        if numPrimaryFiles == 1:
            open_with_cdbwscall(ctx, self.cdb_object_id,
                                _CDBWSCALL_LOAD_AND_OPEN_CAD_DOCUMENT_FILE)
        elif numPrimaryFiles == 0:
            raise ue.Exception('cdb_cad_wsm_no_anchor_file')
        else:
            raise ue.Exception('cdb_cad_wsm_no_unique_anchor_file')

    event_map = {("cdb_cad_wsm_edit", "now"): "open_cad_file"}


def open_with_cdbwscall(ctx, cdb_object_id, file_template):
    filename = os.path.join(CADDOK.TMPDIR, "command.cdbwscall")
    f = io.open(filename, "w", encoding="utf-8")
    f.write(file_template.format(cdb_object_id=cdb_object_id))
    f.close()
    if ctx is not None:
        ctx.file(filename,
                 delete_file_after_view=True,
                 view_extern=True)


_CDBWSCALL_LOAD_AND_OPEN_CAD_DOCUMENT_FILE = u"""<?xml version="1.0"?>
<cdbwsinfo>
   <command>loadandopencaddocument</command>
   <options>
      <pdmadapter>CDB 10.1</pdmadapter>
      <requiredversion>3.2.0</requiredversion>
   </options>
   <parameters>
       <parameter>{cdb_object_id}</parameter>
   </parameters>
</cdbwsinfo>
"""
