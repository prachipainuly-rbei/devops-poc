#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
from lxml import etree as ElementTree

from cs.documents import Document, DocumentReference
from cs.vp.items import Item
from cs.vp.bom import AssemblyComponent
from cdb.objects.pdd import Sandbox
from cdb.testcase import RollbackTestCase

import os
import sys

from cs.cad_wsm_synchronizer.create_appinfo import getAppinfoWriter

parentDir = os.path.join(os.path.dirname(__file__), "..")
sys.path.append(parentDir)

__docformat__ = "restructuredtext en"


class Test_BomWriting(RollbackTestCase):
    PREFIX = "APPINF_42"
    CAD = "CatiaV5"
    Filetype = "Unknown"

    def setUp(self):
        RollbackTestCase.setUp(self)
        self.assembly = Item.Create(teilenummer=self.PREFIX + "0", t_index="")
        self.doc = Document.Create(z_nummer=self.PREFIX + "0", z_index="",
                                   teilenummer=self.assembly.teilenummer,
                                   t_index=self.assembly.t_index,
                                   erzeug_system=self.CAD)

        self.component1 = Item.Create(teilenummer=self.PREFIX + "1", t_index="")
        self.componentDoc1 = Document.Create(z_nummer=self.PREFIX + "1", z_index="",
                                             teilenummer=self.component1.teilenummer,
                                             t_index=self.component1.t_index,
                                             erzeug_system=self.CAD)
        ws = Sandbox()
        p = ws.create(self.componentDoc1, self.PREFIX + ".catpart", self.Filetype, primary=True)
        with open(p, 'w') as fd:
            fd.write("dummy content")
        ws.commit()

        assert(len(self.componentDoc1.Files) == 1)
        self.writer = getAppinfoWriter("CatiaV5:Prod")
        assert self.writer

    def tearDown(self):
        RollbackTestCase.tearDown(self)

    def test_emptyBom(self):
        # given: a document without references and without existing BOM
        # then: an empty BOM is created in the appinfo
        self.runBomTest(expected='<bom partno="%s" partver="" />' % self.doc.teilenummer)

    def test_bomWithoutExistingComponents(self):
        # given: an assembly document with an item with empty BOM
        #        and a reference to a document of a component
        self.createReference(self.doc, self.componentDoc1, cdb_link="0")
        # then: a BOM with an entry for the reference is created,
        #       with quantity 1 and no position number
        expected = """<bom partno="%s" partver="">
        <bomposition id="001" partno="%s" partver="" quantity="1.0" />
        </bom>""" % (self.assembly.teilenummer, self.component1.teilenummer)
        self.runBomTest(expected)

    def test_bomWithExistingComponents(self):
        # given: an assembly document with existing BOM
        #        and a doc ref referencing the same component as the BOM
        self.createReference(self.doc, self.componentDoc1, cdb_link="0")
        AssemblyComponent.Create(baugruppe=self.assembly.teilenummer, b_index=self.assembly.t_index,
                                 teilenummer=self.component1.teilenummer, t_index=self.component1.t_index,
                                 variante="", auswahlmenge=0.0,
                                 cadsource=self.CAD,
                                 position="42", menge="2.0")
        # then: a BOM entry is created in the appinfo with the same quantity
        #       and position as in the database
        expected = """<bom partno="%s" partver="">
        <bomposition id="001" partno="%s" partver="" posno="42" quantity="2.0" />
        </bom>""" % (self.assembly.teilenummer, self.component1.teilenummer)
        self.runBomTest(expected)

    def test_bomWithMultipleExistingComponents(self):
        # given: an assembly document with existing BOM with multiple entries
        #        for the same component
        #        and a doc ref referencing the same component as the BOM
        self.createReference(self.doc, self.componentDoc1, cdb_link="0")
        AssemblyComponent.Create(baugruppe=self.assembly.teilenummer, b_index=self.assembly.t_index,
                                 teilenummer=self.component1.teilenummer, t_index=self.component1.t_index,
                                 variante="", auswahlmenge=0.0,
                                 cadsource=self.CAD,
                                 position="11", menge="2.0")
        AssemblyComponent.Create(baugruppe=self.assembly.teilenummer, b_index=self.assembly.t_index,
                                 teilenummer=self.component1.teilenummer, t_index=self.component1.t_index,
                                 variante="", auswahlmenge=0.0,
                                 cadsource=self.CAD,
                                 position="22", menge="3.0")
        # then: a BOM entry is created in the appinfo
        #       for every existing entry in the database
        expected = """<bom partno="%s" partver="">
        <bomposition id="001" partno="%s" partver="" posno="11" quantity="2.0" />
        <bomposition id="002" partno="%s" partver="" posno="22" quantity="3.0" />
        </bom>""" % (self.assembly.teilenummer, self.component1.teilenummer,
                     self.component1.teilenummer)
        self.runBomTest(expected)

    def test_bomWithOtherCadComponents(self):
        # given: an assembly document with existing BOM with a different cadsource
        #        and a doc ref referencing the same component as the BOM
        self.createReference(self.doc, self.componentDoc1, cdb_link="0")
        AssemblyComponent.Create(baugruppe=self.assembly.teilenummer, b_index=self.assembly.t_index,
                                 teilenummer=self.component1.teilenummer, t_index=self.component1.t_index,
                                 variante="", auswahlmenge=0.0,
                                 cadsource="ProE",
                                 position="42", menge="2.0")
        # then: a BOM entry is created in the appinfo with default quantity
        #       and no position number
        expected = """<bom partno="%s" partver="">
        <bomposition id="001" partno="%s" partver="" quantity="1.0" />
        </bom>""" % (self.assembly.teilenummer, self.component1.teilenummer)
        self.runBomTest(expected)

    def test_nonOccurrenceDocRel(self):
        # given: an assembly document with an item with empty BOM
        #        and a reference with cdb_link=1 (i.e. cyclic/non-occurrence)
        self.createReference(self.doc, self.componentDoc1, cdb_link="1")
        # then: a an empty BOM is created in the appinfo
        expected = """<bom partno="%s" partver="" />""" % self.assembly.teilenummer
        self.runBomTest(expected)

    def runBomTest(self, expected):
        path = self.writer.writeFile(self.doc, self.PREFIX)

        # extract BOM from written appinfo
        tree = ElementTree.parse(path)
        root = tree.getroot()
        boms = root.findall('.//bom')
        assert len(boms) == 1
        bom = boms[0]
        found = ElementTree.tostring(bom, encoding="utf-8")
        found = normalizeXML(found)

        expected = normalizeXML(expected)

        if found != expected:
            print "expected:\n%s" % expected
            print "found:\n%s" % found
        assert found == expected

    def createReference(self, src, dst, cdb_link):
        DocumentReference.Create(z_nummer=src.z_nummer,
                                 z_index=src.z_index,
                                 z_nummer2=dst.z_nummer,
                                 z_index2=dst.z_index,
                                 cdb_link=cdb_link, logischer_name="",
                                 owner_application="WSM", reltype="WSM")


def normalizeXML(inputStr):
    from lxml import etree
    p = etree.XMLParser(remove_blank_text=True)
    root = etree.XML(inputStr, p)
    return etree.tostring(root, encoding="utf-8")


if __name__ == "__main__":
    import nose
    nose.runmodule(argv=sys.argv[:1])
