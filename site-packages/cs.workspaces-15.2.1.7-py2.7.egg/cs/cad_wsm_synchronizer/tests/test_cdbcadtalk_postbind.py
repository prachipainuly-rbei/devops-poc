#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

import unittest
import io

from cdb.objects.cdb_file import cdb_folder_item
from cdb.objects.pdd import Sandbox
from cdb.objects.operations import operation, system_args
from cdb.platform.mom import operations
from cs.documents import Document
from cs.documents import DocumentReference

from cdb.testcase import RollbackTestCase

from testsupport_cadwsm import patchGetCADConfValue, unpatchGetCADConfValue


__docformat__ = "restructuredtext en"

PREFIX = "TCPB"


class Test_CdbcadtalkPostbind(RollbackTestCase):
    """
    This tests can only run if the operation definition "cdbcadtalk_postbind"
    is activated manually.
    """
    def setUp(self):
        # we call the cdbcadtalk_postbind UE by the operation defined on
        # model; in the standard config, the operation is inactive
        op = operations.Operation.ByKeys("cdbcadtalk_postbind")
        if op.inactive:
            raise unittest.SkipTest("Skipped because cdbcadtalk_postbind is inactive in database.")

        RollbackTestCase.setUp(self)
        self.oldGetCADConfValue = patchGetCADConfValue(
            "ZVS Post Bind Structure Check",
            "",  # for all CAD systems
            "TRUE")

    def tearDown(self):
        unpatchGetCADConfValue(self.oldGetCADConfValue)
        RollbackTestCase.tearDown(self)

    def test_conformant_doc(self):
        doc = Model.Create(z_nummer=PREFIX + "002", z_index="")
        createFile(doc, "test.CATProduct", "CatiaV5:Prod")
        doc.erzeug_system = "CatiaV5:Prod"

        success = self.callPostbind(doc)
        assert success

    def test_doc_with_folders(self):
        doc = Model.Create(z_nummer=PREFIX + "003", z_index="")
        createFolder(doc, "testdir")
        doc.erzeug_system = "CatiaV5:Prod"

        success = self.callPostbind(doc)
        assert not success

    def test_linked_doc_with_folders(self):
        partDoc = Model.Create(z_nummer=PREFIX + "fp001", z_index="",
                               erzeug_system=u"CatiaV5:Part")
        partDoc.erzeug_system = "CatiaV5:Part"
        createFolder(partDoc, "testdir")

        assemblyDoc = Model.Create(z_nummer=PREFIX + "fp002", z_index="",
                                   erzeug_system=u"CatiaV5:Prod")
        assemblyDoc.erzeug_system = "CatiaV5:Prod"
        DocumentReference.Create(z_nummer=assemblyDoc.z_nummer,
                                 z_index=assemblyDoc.z_index,
                                 reltype=u"Catia:Ref",
                                 z_nummer2=partDoc.z_nummer,
                                 z_index2=partDoc.z_index,
                                 logischer_name=PREFIX)

        success = self.callPostbind(assemblyDoc)
        assert not success

    def test_with_deactivated_check(self):
        with patchedGetCADConfValue(
                "ZVS Post Bind Structure Check",
                "",  # for all CAD systems
                "False"):
            try:
                self.test_doc_with_multiple_files()
                assert False, "Not expected to succeed"
            except AssertionError:
                pass  # expected

    def callPostbind(self, doc):
        try:
            operation("cdbcadtalk_postbind", doc,
                      system_args(active_integration="CatiaV5"))
            return True
        except Exception:
            return False


class Model(Document):
    __maps_to__ = "zeichnung"
    __classname__ = "model"


def createFile(doc, filename, filetype):
    sb = Sandbox()
    primaryFile = sb.create(doc, filename, "Unknown", primary=True)
    with io.open(primaryFile, 'w', encoding="utf-8") as fd:
        fd.write(u"This is the main file.")
    sb.commit()
    for f in doc.Files:
        if f.cdbf_name == filename:
            f.cdbf_type = filetype


def createFolder(doc, foldername):
    cdb_folder_item.Create(cdbf_object_id=doc.cdb_object_id,
                           cdbf_name=foldername)


if __name__ == "__main__":
    import nose
    import sys
    nose.runmodule(argv=sys.argv[:1])
