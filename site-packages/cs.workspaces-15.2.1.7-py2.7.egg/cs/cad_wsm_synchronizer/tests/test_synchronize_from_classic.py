#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from time import sleep
import datetime
import io

from xml.etree.ElementTree import XML

from cdb.objects.pdd import Sandbox
from cdb.objects.cdb_file import cdb_link_item
from cdb.testcase import RollbackTestCase, without_error_logging
from testsupport_cadwsm import patchedGetCADConfValue
from cs.documents import Document
from cs.documents import DocumentReference

from cs.cad_wsm_synchronizer.synchronize_from_classic import synchronizeDocuments

from nose.plugins.attrib import attr

__docformat__ = "restructuredtext en"

PREFIX = "TSFC"


@attr(interactive=True)
class Test_SynchronizeFromClassic(RollbackTestCase):
    def setUp(self):
        RollbackTestCase.setUp(self)

    def tearDown(self):
        RollbackTestCase.tearDown(self)

    def test_freshPartGetsAppInfo(self):
        partDoc = Document.Create(z_nummer=PREFIX + "fp001", z_index="",
                                  erzeug_system=u"CatiaV5:Part")
        createFile(partDoc, "test.CATPart", "CatiaV5:Part")

        synchronizeDocuments([(partDoc.z_nummer, partDoc.z_index)])

        assert getFile(partDoc, "test.CATPart.appinfo") is not None
        assert len(linksFrom(partDoc)) == 0

    def test_existingAppInfoIsUpdated(self):
        partDoc = Document.Create(z_nummer=PREFIX + "fp001", z_index="",
                                  erzeug_system=u"CatiaV5:Part")
        primFile = createFile(partDoc, "test.CATPart", "CatiaV5:Part")

        synchronizeDocuments([(partDoc.z_nummer, partDoc.z_index)])
        firstFileData = getFile(partDoc, "test.CATPart.appinfo").cdb_mdate

        sleep(1.1)
        primFile.cdbf_fdate = datetime.datetime.now()

        synchronizeDocuments([(partDoc.z_nummer, partDoc.z_index)])

        secondFileData = getFile(partDoc, "test.CATPart.appinfo").cdb_mdate
        print firstFileData
        print secondFileData
        assert secondFileData > firstFileData

    def test_simpleAssembly(self):
        partDoc = Document.Create(z_nummer=PREFIX + "fp001", z_index="",
                                  erzeug_system=u"CatiaV5:Part")
        createFile(partDoc, "test.CATPart", "CatiaV5:Part")
        assemblyDoc = Document.Create(z_nummer=PREFIX + "fp002", z_index="",
                                      erzeug_system=u"CatiaV5:Prod")
        createFile(assemblyDoc, "test.CATProduct", "CatiaV5:Prod")
        DocumentReference.Create(z_nummer=assemblyDoc.z_nummer,
                                 z_index=assemblyDoc.z_index,
                                 reltype=u"Catia:Ref",
                                 z_nummer2=partDoc.z_nummer,
                                 z_index2=partDoc.z_index,
                                 logischer_name=PREFIX)

        synchronizeDocuments([(assemblyDoc.z_nummer, assemblyDoc.z_index)])

        # appinfo contents
        e = fileAsXml(getFile(assemblyDoc, "test.CATProduct.appinfo"))
        occurrences = e.find("occurrences")
        occurrences = occurrences.findall("occurrence")
        assert len(occurrences) == 1
        cadref = occurrences[0].find("cadreference")
        assert cadref.get('path') == "test.CATPart"

        links = linksFrom(assemblyDoc)
        assert len(links) == 1
        assert links[0].LinkedObject.cdb_object_id == partDoc.cdb_object_id

    def test_simpleDrawing(self):
        assemblyDoc = Document.Create(z_nummer=PREFIX + "fp001", z_index="",
                                      erzeug_system=u"CatiaV5:Prod")
        createFile(assemblyDoc, "test.CATProduct", "CatiaV5:Prod")
        drawingDoc = Document.Create(z_nummer=PREFIX + "fp002", z_index="",
                                     erzeug_system=u"CatiaV5:Drawing")
        createFile(drawingDoc, "test.CATDrawing", "CatiaV5:Drawing")

        # set erzeug_system AGAIN (CDB messes with it when creating the file...)
        drawingDoc.erzeug_system = u"CatiaV5:Drawing"

        DocumentReference.Create(z_nummer=drawingDoc.z_nummer,
                                 z_index=drawingDoc.z_index,
                                 reltype=u"Catia:Ref",
                                 cad_link_bez=U"DRW->ASM",
                                 z_nummer2=assemblyDoc.z_nummer,
                                 z_index2=assemblyDoc.z_index,
                                 logischer_name=PREFIX)

        synchronizeDocuments([(drawingDoc.z_nummer, drawingDoc.z_index)])

        # appinfo contents
        e = fileAsXml(getFile(drawingDoc, "test.CATDrawing.appinfo"))
        sheets = e.find("sheets")
        sheets = sheets.findall("sheet")
        assert len(sheets) == 1
        views = sheets[0].find("views")
        views = views.findall("view")
        assert len(views) == 1
        cadref = views[0].find("cadreference")
        assert cadref.get('path') == "test.CATProduct"

        links = linksFrom(drawingDoc)
        assert len(links) == 1
        assert links[0].LinkedObject.cdb_object_id == assemblyDoc.cdb_object_id

    def test_appInfoPropertyConfig(self):
        filename = "test.CATPart"
        partDoc = Document.Create(z_nummer=PREFIX + "fp002", z_index="")
        createFile(partDoc, filename, "CatiaV5:Part")

        with patchedGetCADConfValue(u"CAD WSM AppInfo Config",
                                    "CatiaV5:Part",
                                    "z_nummer:CDB_ZNUMMER;"
                                    "z_index:CDB_ZINDEX"):
            synchronizeDocuments([(partDoc.z_nummer, partDoc.z_index)])

        e = fileAsXml(getFile(partDoc, filename + ".appinfo"))
        properties = e.find("properties")
        properties = properties.findall("property")
        assert len(properties) == 2
        assert properties[0].get('id') == 'CDB_ZINDEX'
        assert properties[0].get('value') == partDoc.z_index
        assert properties[1].get('id') == 'CDB_ZNUMMER'
        assert properties[1].get('value') == partDoc.z_nummer

    @without_error_logging
    def test_appInfoPropertyConfig_wrongConfig1(self):
        filename = "test.CATPart"
        partDoc = Document.Create(z_nummer=PREFIX + "fp003", z_index="")
        createFile(partDoc, filename, "CatiaV5:Part")

        with patchedGetCADConfValue(u"CAD WSM AppInfo Config",
                                    "CatiaV5:Part",
                                    "z_nummer:CDB_ZNUMMER;"
                                    "z_index=CDB_ZINDEX"):
            synchronizeDocuments([(partDoc.z_nummer, partDoc.z_index)])

        e = fileAsXml(getFile(partDoc, filename + ".appinfo"))
        properties = e.find("properties")
        properties = properties.findall("property")
        assert len(properties) == 1
        assert properties[0].get('id') == 'CDB_ZNUMMER'
        assert properties[0].get('value') == partDoc.z_nummer

    @without_error_logging
    def test_appInfoPropertyConfig_wrongConfig2(self):
        filename = "test.CATPart"
        partDoc = Document.Create(z_nummer=PREFIX + "fp003", z_index="")
        createFile(partDoc, filename, "CatiaV5:Part")

        with patchedGetCADConfValue(u"CAD WSM AppInfo Config",
                                    "CatiaV5:Part",
                                    "z_nummer:CDB_ZNUMMER;"
                                    "z_nummer:CDB_ZINDEX"):
            synchronizeDocuments([(partDoc.z_nummer, partDoc.z_index)])

        e = fileAsXml(getFile(partDoc, filename + ".appinfo"))
        properties = e.find("properties")
        properties = properties.findall("property")
        assert len(properties) == 1
        assert properties[0].get('id') == 'CDB_ZINDEX'
        assert properties[0].get('value') == partDoc.z_nummer


def createFile(doc, filename, filetype):
    sb = Sandbox()
    primaryFile = sb.create(doc, filename, filetype, primary=True)
    with io.open(primaryFile, 'w', encoding="utf-8") as fd:
        fd.write(u"This is the main file.")
    sb.commit()
    for f in doc.Files:
        if f.cdbf_name == filename:
            f.cdbf_type = filetype
            break
    doc.Reload()
    return f


def getFile(doc, filename):
    for f in doc.Files:
        if f.cdbf_name == filename:
            return f
    return None


def linksFrom(doc):
    return filter(lambda i: isinstance(i, cdb_link_item), doc.WorkspaceItems)


def fileAsXml(f):
    s = Sandbox()
    s.checkout(f)
    with io.open(s.pathname(f.cdbf_name), encoding="utf-8") as fd:
        contents = fd.read()
        return XML(contents)


if __name__ == "__main__":
    import nose
    import sys
    nose.runmodule(argv=sys.argv[:1])
