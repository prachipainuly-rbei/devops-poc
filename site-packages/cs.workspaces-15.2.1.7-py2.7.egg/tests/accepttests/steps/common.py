#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
import uuid

from cdb import misc, sqlapi
from cdb.objects.cdb_file import cdb_link_item
from cdb.platform.olc import StateDefinition
from cdb.validationkit import operation
from cs.documents import Document, DocumentCategory, DocumentReference
from cs.vp.items import Item, ItemCategory
from cs.workspaces import Workspace

__docformat__ = "restructuredtext en"
__revision__ = "$Id: common.py 131736 2015-09-30 10:21:43Z khi $"


item_categ = ItemCategory.Query()[0]
doc_maincateg = "144"  # "Produkt/Teil"
doc_categ = "177"  # "CAD-Zeichnung"


class LinkItem(object):
    """
    Creates a link item from the parent document to some cdb_object_id.
    """
    def __init__(self, dest):
        self.dest = dest

    def create(self, src):
        """
        self.link = operation("CDB_Create", cdb_link_item,
                              preset={"cdbf_object_id": src.cdb_object_id,
                                      "cdb_wspitem_id": uuid.uuid4(),
                                      "cdb_link": self.dest},
                              user_input={})
        """
        chg_ctrl = cdb_link_item.MakeChangeControlAttributes()
        self.link = cdb_link_item.Create(cdbf_object_id=src.cdb_object_id,
                                         cdb_wspitem_id=uuid.uuid4(),
                                         cdb_folder="",
                                         cdb_link=self.dest.cdb_object_id,
                                         cdbf_blob_id="",
                                         cdb_link_condition="",
                                         cdb_cdate=chg_ctrl.get('cdb_cdate', ""),
                                         cdb_mdate=chg_ctrl.get('cdb_mdate', ""))

        r = sqlapi.Record("cdb_doc_rel",
                          z_nummer=src.z_nummer,
                          z_index=src.z_index,
                          z_nummer2=self.dest.z_nummer,
                          z_index2=self.dest.z_index,
                          t_nummer2="", t_index2="",
                          logischer_name="", reltype="WSM",
                          owner_application="WSM",
                          cdb_link="0", classname="",
                          cad_link="", cad_link_bez="",
                          checkoutname="")
        try:
            r.insert()
        except:
            misc.log_traceback("Error while inserting data into cdb_doc_rel")


class Model(Document):
    __classname__ = "model"


def generateCADDocument(item, presets_custom={}, user_input_custom={}):
    preset = {"teilenummer": item.teilenummer,
              "t_index": item.t_index,
              "z_categ1": doc_maincateg,
              "z_categ2": doc_categ}
    preset.update(presets_custom)
    user_input = {}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Model,
                     preset=preset,
                     user_input=user_input)


def generateItem(presets_custom={}, user_input_custom={}):
    preset = {"benennung": "Blech",
              "t_kategorie": item_categ.kategorie,
              "mengeneinheit": "qm"}
    preset.update(presets_custom)
    user_input = {}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Item,
                     preset=preset,
                     user_input=user_input)


def generateWorkspace(context):
    """
    Generates a workspace with structure:
        Workspace
            Dok1
                Dok1a
            Dok2
    """
    wsp = operation("CDB_Create", Workspace,
                     user_input={"titel": "WorkspaceTest"})

    # Create first document and create link from workspace to this document
    doc1 = operation("CDB_Create", Document,
                     user_input={"titel": "Document1"},
                     preset={"z_categ1": doc_maincateg,
                             "z_categ2": doc_categ})
    linkWspToDoc1 = LinkItem(doc1)
    linkWspToDoc1.create(wsp)

    # Create a child document for the first document and create link
    doc1a = operation("CDB_Create", Document,
                      user_input={"titel": "Document1"},
                      preset={"z_categ1": doc_maincateg,
                              "z_categ2": doc_categ})
    linkDoc1ToDoc1a = LinkItem(doc1a)
    linkDoc1ToDoc1a.create(doc1)

    # Create second document and create link from workspace to this document
    doc2 = operation("CDB_Create", Document,
                     user_input={"titel": "Document2"},
                     preset={"z_categ1": doc_maincateg,
                             "z_categ2": doc_categ})
    linkWspToDoc2 = LinkItem(doc2)
    linkWspToDoc2.create(wsp)

    # build the context
    context.workspace = wsp
    context.doc1 = doc1
    context.doc1Link = linkWspToDoc1
    context.doc1a = doc1a
    context.doc1aLink = linkDoc1ToDoc1a
    context.doc2 = doc2
    context.doc2Link = linkWspToDoc2
    return wsp


def getWorkspaceAttributesToChange():
    return {"titel": "WorkspaceChanged"}


def getStateName(objektart, statename_en):
    state = StateDefinition.KeywordQuery(objektart=objektart,
                                         statusbez_en=statename_en)
    assert len(state) > 0, \
        "no german statename found for %s/%s" % (objektart, statename_en)
    return state[0].statusbez_de
