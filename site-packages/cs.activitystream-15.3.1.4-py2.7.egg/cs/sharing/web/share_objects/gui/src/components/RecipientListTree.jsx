/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RecipientListTree.jsx 178292 2018-06-04 09:51:12Z yzh $"
 */

import React from 'react';  // eslint-disable-line no-unused-vars
import Immutable from 'immutable';
import {TreeModule, postJSON, notifyError} from 'cs-web-components-base';
import {connect, PropTypes} from 'cs-web-components-externals';
import * as constants from '../constants';
import {RecipientTreeNodeRenderer} from './renderer/RecipientTreeNodeRenderer';

class RecipientListTreeComponent extends TreeModule.Tree {
    constructor(props) {
        super(props);
        this._bindInterface({
            fetchNodeChildren: this.fetchNodeChildren.bind(this)
        });
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.rootNode !== nextProps.rootNode) {
            this.setState({
                rootNode: nextProps.rootNode
            });
        }
    }

    fetchNodeChildren(node) {
        const group = node.get('content').toJS();
        const groupIndex = node.get('groupIndex');

        const data = {
            group: group,
            index: groupIndex
        };

        return postJSON(constants.URL_GET_GROUP_MEMBERS, data).then((data) => {
            if (data.error) {
                this.props.notifyError(data.error.statusText, "", data.error.message);
                return null;
            } else {
                const updatedNode = node.set('children', data.members.map((recipient, idx) => {
                    return Immutable.fromJS({
                        id: node.get('id') + "_" + idx,
                        content: recipient,
                        parentGroup: node.get('content'),
                        expanded: false,
                        children: [],
                        has_children: false
                    });
                }));

                return super.updateTreeNode(updatedNode);
            }
        });
    }
}

RecipientListTreeComponent.propTypes = Object.assign(
    {}, TreeModule.Tree.propTypes, {
        notifyError: PropTypes.func
    }
);

RecipientListTreeComponent.defaultProps = Object.assign(
    {}, TreeModule.Tree.defaultProps, {
        TreeRenderer: TreeModule.ModalTreeContainer.DefaultRenderer,
        NodeRenderer: RecipientTreeNodeRenderer,
        hideRoot: true
    }
);

const actions = {notifyError};
const RecipientListTree = connect(undefined, actions)(RecipientListTreeComponent);
export default RecipientListTree;
