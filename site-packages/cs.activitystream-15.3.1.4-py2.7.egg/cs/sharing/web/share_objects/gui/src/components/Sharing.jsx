/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Sharing.jsx 174894 2018-03-22 14:27:29Z gwe $"
 */

import React from 'react';
import {MenuItem} from 'react-bootstrap';
import {FormControl, DropdownIconButton, SVGIcon} from 'cs-web-components-base';
import {connect, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import FloatingLabel from './FloatingLabel';
import AppRow from './AppRow';
import SearchRecipients from './SearchRecipients';
import {formatStr} from '../i18n';
import {prefixNS} from '../helpers';
import {getSelectedRecipients} from '../reducers/sharing-store';
import {setShowSaveRecipientModal, setShowAddUserModal,
        setSelectedRecipients} from '../actions/sharing-actions';
import * as constants from '../constants';

class SharingComponent extends React.Component {

    constructor(props) {
        super(props);
        this.showAddUserModal = this.showAddUserModal.bind(this);
        this.showSaveRecipientsModal = this.showSaveRecipientsModal.bind(this);
        this.state = {
            message: ""
        };
    }

    setMessage(e) {
        this.setState({
            message: e.target.value
        });
        this.props.messageChanged(e.target.value);
    }

    showAddUserModal() {
        this.props.setShowAddUserModal(true);
    }

    showSaveRecipientsModal() {
        this.props.setShowSaveRecipientModal(true);
    }

    render() {
        if (this.props.success) {
            return (
                <div id="sharing-block-success" className={prefixNS("sharing-block-success")}>
                    <div className="text-muted">
                        {formatStr(constants.RECIPIENTS_PLACEHOLDER)}
                    </div>
                    <div>
                        {this.props.selectedRecipients
                            .map(x => x[constants.DESC]).join(", ")}
                    </div>

                    <div id="sharing-message-row">
                        <div className="text-muted">
                            {formatStr(constants.MESSAGE_PLACEHOLDER)}
                        </div>
                        <pre className={prefixNS("unstyled")}>
                            {this.props.submitMessage}
                        </pre>
                    </div>
                </div>
            );
        }
        /*const {recipients, save_recipients} = this.props
        let confirmModal = null

        if (recipients.group_size.group && recipients.group_size.size > -1) {
            if (recipients.group_size.size >= constants.GROUP_LIMIT) {
                confirmModal = (
                    <ConfirmResolutionModal
                        {...this.props}
                        group={recipients.group_size.group} />
                )
            }
        }*/

        const disableSaveRecipients = this.props.selectedRecipients.size === 0;

        const messageInputPlaceholder = formatStr(constants.MESSAGE_PLACEHOLDER);
        const messageInput = (
            <FormControl.TextArea id={"sharing-message"}
                                name={"sharing-message"}
                                rows="4"
                                placeholder={messageInputPlaceholder}
                                onChange={(e) => {this.setMessage(e)}}
                                value={this.state.message} />
        );

        const recipientMenu = (
            <DropdownIconButton iconName="cdb_common_role_61"
                                size="sm"
                                buttonStyle="success"
                                id={prefixNS("recipient-actions")}
                                className={prefixNS("recipient-actions")}
                                title={formatStr(constants.MANAGE_RECIPIENTS)}
                                noCaret>
                <MenuItem onSelect={this.showAddUserModal}>
                    {formatStr(constants.RESOLVE_USERS)}
                </MenuItem>
                <MenuItem divider={true} />
                <MenuItem onSelect={this.showSaveRecipientsModal}
                          disabled={disableSaveRecipients}>
                    {formatStr(constants.SAVE_RECIPIENTS_DESC)}
                </MenuItem>
                <MenuItem onSelect={() => {
                    this.props.setSelectedRecipients([]);
                }}
                          disabled={disableSaveRecipients}>
                    {formatStr(constants.CLEAR_USER_LIST)}
                </MenuItem>
            </DropdownIconButton>
        );

        return (
            <div id="sharing-block" className={prefixNS("sharing-block")}>
                {null/*confirmModal*/}
                <AppRow {...this.props}
                        left={<SVGIcon src={constants.ICON_PERSON}
                                    size="md"
                                    title={formatStr(constants.RECIPIENTS_PLACEHOLDER)}
                                    className={prefixNS("app-block-icon")} />}
                        center={<SearchRecipients {...this.props} />}
                        right={recipientMenu} />

                <AppRow {...this.props}
                        id="sharing-message-row"
                        left={<SVGIcon src={constants.ICON_COMMENT}
                                    size="md"
                                    title={formatStr(constants.MESSAGE_PLACEHOLDER)}
                                    className={prefixNS("app-block-icon")} />}
                        center={
                            <FloatingLabel input={messageInput}
                                        id="sharing-message"
                                        placeholder={messageInputPlaceholder} />
                        } />
            </div>
        );
    }
}

SharingComponent.propTypes = {
    selectedRecipients: ImmutablePropTypes.list,
    setShowSaveRecipientModal: PropTypes.func.isRequired,
    setShowAddUserModal: PropTypes.func.isRequired,
    messageChanged: PropTypes.func,
    setSelectedRecipients: PropTypes.func,
    success: PropTypes.bool,
    submitMessage: PropTypes.string
};

function mapStateToProps(state) {
    return {
        selectedRecipients: getSelectedRecipients(state),
    };
}

const actions = {setShowSaveRecipientModal, setShowAddUserModal, setSelectedRecipients};
const Sharing = connect(mapStateToProps, actions)(SharingComponent);
export default Sharing;
