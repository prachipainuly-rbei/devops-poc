/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: sharing-store.js 154082 2017-02-17 11:57:18Z sla $"
 */

import Immutable from 'immutable';
import {INIT_SHARING_STATE,
        GET_DIRTY_STATE,
        SET_DIRTY_STATE,
        SET_SELECTED_RECIPIENTS,
        SET_SHOW_SAVE_RECIPIENTS_MODAL,
        SET_SHOW_ADD_USER_MODAL,
        MY_SHARING_GROUPS_REFETCHED,
        ATTACHMENT_ADDED,
        ATTACHMENT_REMOVED,
        ATTACHMENTS_CLEARED,
        RECIPIENT_ADDED,
        SUCCESS_STATE_MODIFIED} from '../actions/sharing-actions';

export default function sharing(state = Immutable.Map(), action) {
    switch (action.type) {
        case INIT_SHARING_STATE:
            return state.withMutations(map => {
                map.set('attachments', Immutable.List(action.payload.attachments));
                map.set('selectedRecipients', Immutable.fromJS(action.payload.selectedRecipients));
                map.set('showSaveRecipientsModal', action.payload.showSaveRecipientsModal);
                map.set('showAddUserModal', action.payload.showAddUserModal);
                map.set('groups', action.payload.groups);
                map.set('dirtyState', Immutable.fromJS(action.payload.dirtyState));
            });
        case GET_DIRTY_STATE:
            return state;
        case SET_DIRTY_STATE:
            return state.set('dirtyState', state.get('dirtyState').set('isDirty',
                action.payload.isDirty));
        case SUCCESS_STATE_MODIFIED:
            return state.set('dirtyState', state.get('dirtyState').set('success',
                action.payload.success));
        case SET_SELECTED_RECIPIENTS:
            return state.set('selectedRecipients',
                Immutable.List(action.payload.selectedRecipients));
        case SET_SHOW_SAVE_RECIPIENTS_MODAL:
            return state.set('showSaveRecipientsModal', action.payload.showSaveRecipientsModal);
        case SET_SHOW_ADD_USER_MODAL:
            return state.set('showAddUserModal', action.payload.showAddUserModal);
        case MY_SHARING_GROUPS_REFETCHED:
            return state.set('groups', action.payload.groups);
        case ATTACHMENT_REMOVED: {
            const attachments = state.get('attachments', Immutable.List()).filter((entry) => {
                return entry !== action.payload.removedObject;
            });
            return state.set('attachments', attachments);
        }
        case ATTACHMENT_ADDED: {
            const attachment = action.payload.attachment;
            const attachmentExists = state.get('attachments',
                Immutable.List()).find((val) => {
                    return val.cdb_object_id === attachment.cdb_object_id;
                });

            if (attachmentExists) {
                return state;
            }

            return state.set('attachments', state.get('attachments',
                Immutable.List()).push(attachment));
        }
        case ATTACHMENTS_CLEARED:
            return state.set('attachments', Immutable.List());
        case RECIPIENT_ADDED: {
            const recipient = action.payload.recipient;
            const recipientExists = state.get('selectedRecipients',
                Immutable.List()).find((val) => {
                    return val.cdb_object_id === recipient.cdb_object_id;
                });

            if (recipientExists) {
                return state;
            }

            return state.set('selectedRecipients', state.get('selectedRecipients',
                Immutable.List()).push(recipient));
        }
        default:
            return state;
    }
}

export function getDirtyState(state) {
    return (
        (state.sharing.get('dirtyState', Immutable.fromJS({isDirty: false})).get('isDirty') ||
        state.sharing.get('selectedRecipients', Immutable.List()).count() !== 0) &&
        !state.sharing.get('dirtyState', Immutable.fromJS({success: false})).get('success')
    );
}

export function getAttachments(state) {
    return state.sharing.get('attachments', Immutable.List()).toJS();
}

export function getSelectedRecipients(state) {
    return state.sharing.get('selectedRecipients', Immutable.List());
}

export function getShowSaveRecipientsModal(state) {
    return state.sharing.get('showSaveRecipientsModal', false);
}

export function getShowAddUserModal(state) {
    return state.sharing.get('showAddUserModal', false);
}

export function getSharingGroups(state) {
    return state.sharing.get('groups', []);
}

export function getDirtyInfo(state) {
    return state.sharing.get('dirtyState', Immutable.fromJS({
        isDirty: false,
        isInitialized: false
    }));
}
