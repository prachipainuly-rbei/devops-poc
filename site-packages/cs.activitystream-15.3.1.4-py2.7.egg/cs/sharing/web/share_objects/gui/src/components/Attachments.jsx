/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Attachments.jsx 174894 2018-03-22 14:27:29Z gwe $"
 */

import React from 'react';
import {connect, PropTypes} from 'cs-web-components-externals';
import {SVGIcon} from 'cs-web-components-base';
import {Alert, Grid, Row} from 'react-bootstrap';
import AppRow from './AppRow';
import AttachedObject from './AttachedObject';
import DeleteAllAttachments from './DeleteAllAttachments';
import SearchBox from './SearchBox';
import * as constants from '../constants';
import {prefixNS} from '../helpers';
import {formatStr} from '../i18n';
import {getAttachments, getDirtyInfo} from '../reducers/sharing-store';

class AttachmentsComponent extends React.Component {

    renderAttachmentSection() {
        const row = this.props.success ? null : (
            <Row id="attachments-row" className={prefixNS("attachments-row")}>
                <SearchBox {...this.props} />
            </Row>
        );

        return (
            <div id="attachments-block">
                <AppRow {...this.props} center={null} />

                {this.props.attachments.map((a, i) => (
                    <AttachedObject {...this.props}
                                    attachment={a}
                                    attachment_index={i}
                                    key={"attachment-" + i} />
                ))}
                {
                    this.props.attachments.length === 0 ?
                    (
                        <AppRow {...this.props} left={
                            <SVGIcon className={prefixNS("app-block-icon")}
                                    size="md"
                                    title={formatStr(constants.SHARED_OBJECTS)}
                                    name={constants.ICON_ATTACHMENT} />
                        }
                        center={
                            <Grid fluid={true} id="attachments-grid"
                                className={prefixNS("attachments-alert")}>
                                <Alert bsStyle="info">
                                    { this.props.isInitialized ?
                                        formatStr("no_entries") :
                                        formatStr(constants.FETCHING)}
                                </Alert>
                            </Grid>
                        } />
                    ) : null
                }

                <AppRow {...this.props} center={
                    <Grid fluid={true} id="attachments-grid">
                        {row}
                    </Grid>
                } right={
                    this.props.success ? null : <DeleteAllAttachments />
                }/>
            </div>
        );
    }

    renderSuccessMessage() {
        return (
            <div id="attachments-block">
                <div className="text-muted">
                    {formatStr(constants.SHARED_OBJECTS)}
                </div>
                {this.renderAttachmentSection()}
            </div>
        );
    }

    render() {
        if (this.props.success) {
            return this.renderSuccessMessage();
        }
        return this.renderAttachmentSection();
    }
}

AttachmentsComponent.propTypes = {
    success: PropTypes.bool,
    isInitialized: PropTypes.bool,
    attachments: PropTypes.array.isRequired
};

function mapStateToProps(state) {
    return {
        attachments: getAttachments(state),
        isInitialized: getDirtyInfo(state).get('isInitialized')
    };
}

const Attachments = connect(mapStateToProps)(AttachmentsComponent);
export default Attachments;
