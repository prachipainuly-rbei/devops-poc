/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ExistingLists.jsx 174894 2018-03-22 14:27:29Z gwe $"
 */

import React from 'react';
import Immutable from 'immutable';
import RecipientListTree from './RecipientListTree';
import {connect, PropTypes} from 'cs-web-components-externals';
import {formatStr} from '../i18n';
import {prefixNS} from '../helpers';
import {getSharingGroups} from '../reducers/sharing-store';
import * as constants from '../constants';

class ExistingListsComponent extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            treeData: Immutable.fromJS({
                id: "groupsRootNode",
                content: null,
                expanded: true,
                children: this.convertPoolToNodes(this.props.pool),
                has_children: true
            })
        };
    }

    convertPoolToNodes(pool) {
        return pool.map((entry, idx) => {
            return {
                id: "groupsNode_" + idx,
                groupIndex: idx,
                content: entry,
                expanded: false,
                children: [],
                has_children: true
            };
        });
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.pool !== nextProps.pool) {
            this.setState({
                treeData: Immutable.fromJS({
                    id: "groupsRootNode",
                    content: null,
                    expanded: true,
                    children: this.convertPoolToNodes(nextProps.pool),
                    has_children: true
                })
            });
        }
    }

    render() {
        return (
            <div className={prefixNS("existing-lists")}>
                {
                    this.props.pool.length !== 0 ? (
                        <div className={prefixNS("spaced-tree")}>
                            <RecipientListTree title={formatStr(constants.EXISTING_LISTS)}
                                            rootNode={this.state.treeData}
                                             />
                        </div>
                    ) : (
                        <div className={prefixNS("spaced-tree")}>
                            <h3>{formatStr(constants.EXISTING_LISTS)}:</h3>
                            <div className={prefixNS("empty-existing-list")}>
                                {formatStr(constants.NO_ENTRIES)}
                            </div>
                        </div>
                    )
                }
            </div>
        );
    }
}

ExistingListsComponent.propTypes = {
    pool: PropTypes.array.isRequired
};

function mapStateToProps(state) {
    return {
        pool: getSharingGroups(state)
    };
}

const actions = undefined;
const ExistingLists = connect(mapStateToProps, actions)(ExistingListsComponent);
export default ExistingLists;
