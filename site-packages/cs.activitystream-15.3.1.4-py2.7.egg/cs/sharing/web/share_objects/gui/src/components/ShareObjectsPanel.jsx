/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ShareObjectsPanel.jsx 174894 2018-03-22 14:27:29Z gwe $"
 */

import React from 'react';
import {Grid} from 'react-bootstrap';
import {connect, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {Button, Throbber, postJSON} from 'cs-web-components-base';
import {prefixNS} from '../helpers';
import {formatStr} from '../i18n';
import {setDirtyState, setSuccessState} from '../actions/sharing-actions';
import * as constants from '../constants';
import Attachments from './Attachments';
import Sharing from './Sharing';
import Success from './Success';
import AppRow from './AppRow';
import {getAttachments, getSelectedRecipients} from '../reducers/sharing-store';
import {closeTab} from '../helpers';

/**
 * TODO: Add some documentation...
 */
class Panel extends React.Component {

    constructor(props) {
        super(props);
        this.is_cdbpc = window.appSetup['cs-sharing'].is_cdbpc;
        this.state = {
            submitMessage: "",
            busy: false,
            success: false
        };
    }

    cancel() {
        if (this.is_cdbpc) {
            this.props.setDirtyState(false);
            closeTab();
        } else {
            window.close();
        }
    }

    submit() {
        this.setState({busy: true});

        const data = {
            attachments: this.props.attachments,
            recipients: this.props.selectedRecipients,
            message: this.state.submitMessage
        };

        postJSON(constants.URL_SHARE, data).then(() => {
            this.setState({
                busy: false,
                success: true
            }, () => {
                if (this.is_cdbpc) {
                    closeTab();
                }
                this.props.setDirtyState(false);
                this.props.setSuccessState(true);
            });
        });
    }

    messageChanged(txt) {
        if (this.state.submitMessage === "" && txt !== "") {
            this.props.setDirtyState(true);
        }

        this.setState({
            submitMessage: txt
        });
    }

    getFooter() {
        if (this.state.success) {
            if (!this.is_cdbpc) {
                return (
                    <div className={prefixNS("share-objects-app-footer-buttons")}>
                        <Button.TextButton bsStyle="primary"
                                onClick={() => {window.close()}}
                                title={formatStr(constants.CLOSE)} />
                    </div>
                );
            }
            return null;
        } else {
            const submitDisabled = !(
                this.props.attachments.length !== 0 &&
                this.props.selectedRecipients.size !== 0
            );

            const backTitle = this.is_cdbpc ? formatStr(constants.CANCEL) :
                                              formatStr(constants.CLOSE);

            return (
                <AppRow {...this.props}
                        additionalClassNames={prefixNS(
                            "share-objects-app-footer-buttons")}
                        center={
                            <div className={prefixNS("app-separate-btns")}>
                                <Button.TextButton buttonStyle="primary"
                                        onClick={() => {this.submit()}}
                                        disabled={submitDisabled}
                                        title={formatStr(constants.SUBMIT)} />
                                <Button.TextButton buttonStyle="default"
                                        onClick={() => {this.cancel()}}
                                        title={backTitle} />
                            </div>
                        } />
            );
        }
    }

    renderProgressIndicator() {
        return (
            <div className={prefixNS("detail-loading")}>
                <Throbber />
            </div>
        );
    }

    renderApplicationPanel() {
        return (
            <Grid>
                {this.state.success ? <Success /> : null}
                <Attachments {...this.props} key={constants.ATTACHMENT_BLOCK}
                    success={this.state.success} />
                <Sharing {...this.props} key={constants.SHARING_BLOCK}
                    messageChanged={(txt) => this.messageChanged(txt)}
                    success={this.state.success}
                    submitMessage={this.state.submitMessage} />
                {this.getFooter()}
            </Grid>
        );
    }

    render() {
        if (this.state.busy) {
            return this.renderProgressIndicator();
        }

        return this.renderApplicationPanel();
    }
}

Panel.propTypes = {
    busy: PropTypes.bool,
    setDirtyState: PropTypes.func,
    setSuccessState: PropTypes.func,
    attachments: PropTypes.array.isRequired,
    selectedRecipients: ImmutablePropTypes.list
};

function mapStateToProps(state) {
    return {
        attachments: getAttachments(state),
        selectedRecipients: getSelectedRecipients(state)
    };
}

const ShareObjectsPanel = connect(mapStateToProps, {setDirtyState, setSuccessState})(Panel);
export default ShareObjectsPanel;
