/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: sharing-actions.js 154082 2017-02-17 11:57:18Z sla $"
 */

import {getJSON, notifyError} from 'cs-web-components-base';
import * as constants from '../constants';

export const INIT_SHARING_STATE = `${componentNameSpace}-INIT_SHARING_STATE`;
export const GET_DIRTY_STATE = `${componentNameSpace}-GET_DIRTY_STATE`;
export const SET_DIRTY_STATE = `${componentNameSpace}-SET_DIRTY_STATE`;
export const SET_SELECTED_RECIPIENTS = `${componentNameSpace}-SET_SELECTED_RECIPIENTS`;
export const SET_SHOW_SAVE_RECIPIENTS_MODAL =
    `${componentNameSpace}-SET_SHOW_SAVE_RECIPIENTS_MODAL`;
export const SET_SHOW_ADD_USER_MODAL =
    `${componentNameSpace}- SET_SHOW_ADD_USER_MODAL`;
export const MY_SHARING_GROUPS_REFETCHED =
    `${componentNameSpace}-MY_SHARING_GROUPS_REFETCHED`;
export const ATTACHMENT_ADDED = `${componentNameSpace}-ATTACHMENT_ADDED`;
export const ATTACHMENT_REMOVED = `${componentNameSpace}-ATTACHMENT_REMOVED`;
export const ATTACHMENTS_CLEARED = `${componentNameSpace}-ATTACHMENTS_CLEARED`;
export const RECIPIENT_ADDED = `${componentNameSpace}-RECIPIENT_ADDED`;
export const SUCCESS_STATE_MODIFIED = `${componentNameSpace}-SUCCESS_STATE_MODIFIED`;

function dirtyStateModified(isDirty) {
    return {
        type: SET_DIRTY_STATE,
        payload: {
            isDirty: isDirty
        }
    };
}

function sharingInitialized(attachments, groups) {
    return {
        type: INIT_SHARING_STATE,
        payload: {
            isDirty: false,
            attachments: attachments,
            selectedRecipients: [],
            showSaveRecipientsModal: false,
            showAddUserModal: false,
            groups: groups,
            dirtyState: {
                isDirty: false,
                isInitialized: true,
                success: false
            }
        }
    };
}

function mySharingGroupsRecieved(groups) {
    return {
        type: MY_SHARING_GROUPS_REFETCHED,
        payload: {
            groups: groups
        }
    };
}

function selectedRecipientsUpdated(recipients) {
    return {
        type: SET_SELECTED_RECIPIENTS,
        payload: {
            selectedRecipients: recipients
        }
    };
}

function recipientAdded(recipient) {
    return {
        type: RECIPIENT_ADDED,
        payload: {
            recipient: recipient
        }
    };
}

function showSaveRecipientsModalUpdated(visible) {
    return {
        type: SET_SHOW_SAVE_RECIPIENTS_MODAL,
        payload: {
            showSaveRecipientsModal: visible
        }
    };
}

function showAddUserModalUpdated(visible) {
    return {
        type: SET_SHOW_ADD_USER_MODAL,
        payload: {
            showAddUserModal: visible
        }
    };
}

function attachmentAdded(object) {
    return {
        type: ATTACHMENT_ADDED,
        payload: {
            attachment: object
        }
    };
}

function attachmentRemoved(object) {
    return {
        type: ATTACHMENT_REMOVED,
        payload: {
            removedObject: object
        }
    };
}

function attachmentsCleared() {
    return {
        type: ATTACHMENTS_CLEARED,
        payload: {}
    };
}

function successStateModified(success) {
    return {
        type: SUCCESS_STATE_MODIFIED,
        payload: {
            success: success
        }
    };
}

export function setSuccessState(success) {
    return (dispatch) => {
        dispatch(successStateModified(success));
    };
}

export function setDirtyState(isDirty) {
    return (dispatch) => {
        dispatch(dirtyStateModified(isDirty));
    };
}

export function clearAttachments() {
    return (dispatch) => {
        dispatch(attachmentsCleared());
    };
}

export function addAttachment(object) {
    return (dispatch) => {
        dispatch(attachmentAdded(object));
    };
}

export function removeAttachment(object) {
    return (dispatch) => {
        dispatch(attachmentRemoved(object));
    };
}

export function setSelectedRecipients(recipients) {
    return (dispatch) => {
        dispatch(selectedRecipientsUpdated(recipients));
    };
}

export function addRecipient(recipient) {
    return (dispatch) => {
        dispatch(recipientAdded(recipient));
    };
}

export function setShowSaveRecipientModal(visible) {
    return (dispatch) => {
        dispatch(showSaveRecipientsModalUpdated(visible));
    };
}

export function setShowAddUserModal(visible) {
    return (dispatch) => {
        dispatch(showAddUserModalUpdated(visible));
    };
}

export function refetchMySharingGroups() {
    return (dispatch) => {
        getJSON(constants.URL_MY_SHARING_GROUPS).then(
            (my_groups) => {
                if (my_groups.error) {
                    dispatch(notifyError(
                        my_groups.error.statusText, "", my_groups.error.message));
                } else {
                    const groups = my_groups.objects.filter(
                        r => (
                            r[constants.CLASS].indexOf(
                                "cdb_personal_sharing_group") > -1 &&
                            r.subject_id === window.appSetup['cs-sharing'].user_id
                        )
                    );
                    dispatch(mySharingGroupsRecieved(groups));
                }
            }
        );
    };
}

export function initSharingState() {
    return (dispatch) => {
        return getJSON(constants.URL_ATTACHMENTS + window.location.search).then(
            (data) => {
                if (data.error) {
                    dispatch(notifyError(data.error.statusText, "", data.error.message));
                } else {
                    getJSON(constants.URL_MY_SHARING_GROUPS).then(
                        (my_groups) => {
                            if (my_groups.error) {
                                dispatch(notifyError(
                                    my_groups.error.statusText, "", my_groups.error.message));
                            } else {
                                const groups = my_groups.objects.filter(
                                    r => (
                                        r[constants.CLASS].indexOf(
                                            "cdb_personal_sharing_group") > -1 &&
                                        r.subject_id === window.appSetup['cs-sharing'].user_id
                                    )
                                );
                                dispatch(sharingInitialized(data.attachments, groups));
                            }
                        }
                    );
                }
            }
        );
    };
}
