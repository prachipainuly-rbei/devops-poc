/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RecipientTreeNodeRenderer.jsx 174894 2018-03-22 14:27:29Z gwe $"
 */

import Immutable from 'immutable';
import React from 'react';
import {TreeModule, SVGIcon, postJSON, notifyError} from 'cs-web-components-base';
import {refetchMySharingGroups} from '../../actions/sharing-actions';
import {connect, PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers';
import {formatStr} from '../../i18n';
import * as constants from '../../constants';

const WithDeleteButton = NodeRenderer => {
    class _WithDeleteButton extends React.Component {

        constructor(props) {
            super(props);
            this.state = {
                isLinkVisible: false
            };
        }

        setLinkVisible(visible) {
            this.setState({
                isLinkVisible: visible
            });
        }

        deleteEntry(parentGroup, entry) {
            let data;
            if (parentGroup) {
                data = {
                    group: parentGroup.toJS(),
                    member: entry.toJS(),
                    error: null
                };
            } else {
                data = {
                    group: entry.toJS(),
                    error: null
                };
            }

            postJSON(constants.URL_DELETE_OBJECT, data).then((data) => {
                if (data.error) {
                    this.props.notifyError(data.error.statusText, "", data.error.message);
                } else {
                    this.props.refetchMySharingGroups();
                }
            });
        }

        render() {
            const iconClassName = classNames(
                prefixNS("svg-tree-button"),
                {
                    ['cs-web-components-base-tree-node-renderer-link-unselected']:
                    !(this.state.isLinkVisible || this.props.node.get('is_selected'))
                }
            );
            return (
                <span onMouseEnter={this.setLinkVisible.bind(this, true)}
                      onMouseLeave={this.setLinkVisible.bind(this, false)}
                      className="cs-web-components-base-tree-node-renderer-component">
                    <NodeRenderer {...this.props} />
                    <SVGIcon className={iconClassName}
                             name="csweb_remove" size="sm"
                             onClick={() => {
                                 const entry = this.props.node.get('content');
                                 const parent = this.props.node.get('parentGroup');
                                 this.deleteEntry(parent, entry);
                             }}
                             alt={formatStr(constants.REMOVE)}
                             title={formatStr(constants.REMOVE)} />
                </span>
            );
        }
    }

    _WithDeleteButton.propTypes = {
        refetchMySharingGroups: PropTypes.func,
        notifyError: PropTypes.func,
        node: ImmutablePropTypes.map
    };

    const actions = {refetchMySharingGroups, notifyError};
    const __WithDeleteButton = connect(undefined, actions)(_WithDeleteButton);

    return __WithDeleteButton;
};

export const RecipientTreeNodeRenderer = TreeModule.NodeRenderer.create(
    TreeModule.NodeRenderer.NodeRenderer(['content', 'system:description']), // eslint-disable-line
    TreeModule.NodeRenderer.WithIcons((node) => {
        return Immutable.fromJS([{
            url: node.getIn(['content', 'system:icon_link']),
            title: node.getIn(['content', 'system:description'])
        }]);
    }),
    WithDeleteButton
);
