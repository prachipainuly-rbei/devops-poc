/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: AttachedObject.jsx 174894 2018-03-22 14:27:29Z gwe $"
 */

import React from 'react';
import {MenuItem, Row} from 'react-bootstrap';
import {SVGIcon, IconButton, DropdownIconButton} from 'cs-web-components-base';
import {connect, PropTypes} from 'cs-web-components-externals';
import AppRow from './AppRow';
import {prefixNS} from '../helpers';
import {formatStr} from '../i18n';
import {addRecipient, removeAttachment, setDirtyState} from '../actions/sharing-actions';
import * as constants from '../constants';

class AttachedObjectComponent extends React.Component {

    constructor(props) {
        super(props);
        this.helpURL = window.appSetup['cs-sharing'].helpURL;
        this.language = window.appSetup['cs-sharing'].language;
    }

    removeAttachment() {
        this.props.removeAttachment(this.props.attachment);
        this.props.setDirtyState(true);
    }

    addGroup(group) {
        this.props.addRecipient(group);
    }

    getAttachmentActions(attachment_index) {
        const {object_groups} = this.props.attachment;

        if (object_groups && object_groups.length !== 0) {
            const dropdownID = "attachments-add-group-dropdown-" + attachment_index;
            return (
                <DropdownIconButton iconSrc={constants.ICON_RECIPIENTS_LIST_S}
                                    size="sm"
                                    buttonStyle="success"
                                    id={dropdownID}
                                    title={formatStr(constants.ADD_GROUP)}
                                    noCaret>
                        {object_groups.map((group, i) => {
                            return (
                                <MenuItem eventKey={group}
                                        onSelect={(group) => {
                                            this.addGroup(group);
                                        }}
                                        key={"object-group-" + i}>
                                    {group["name_" + this.language]}
                                </MenuItem>
                            );
                        })}
                </DropdownIconButton>
            );
        }

        return null;
    }

    getAttachmentRow(success) {
        const {attachments, attachment, attachment_index} = this.props;
        const remove = formatStr(constants.REMOVE);

        if (success) {
            return (
                <Row className={prefixNS("attachments-attachment-success")}>
                    <SVGIcon className={prefixNS("app-object-icon")}
                         src={attachment[constants.OBJECT_ICON]} />
                    <span className={prefixNS("attachments-desc")}>
                        {attachment[constants.DESC]}
                    </span>
                </Row>
            );
        }
        let removeButton = (
            <IconButton buttonStyle="danger"
                    iconName="csweb_remove"
                    title={formatStr(constants.CANNOT_REMOVE)}
                    disabled={true} />
        );
        if (attachments && attachments.length > 0) {
            removeButton = (
                <IconButton buttonStyle="danger"
                        iconName="csweb_remove"
                        title={remove}
                        onClick={() => {this.removeAttachment()}} />
            );
        }
        return (
            <Row className={prefixNS("attachments-attachment ") +
                            prefixNS("attachments-attachment-inner")}>
                <span className={prefixNS("flex-container")}>
                    <span className={prefixNS("attachments-icon-flex")}>
                        <SVGIcon className={prefixNS("app-object-icon")}
                            src={attachment[constants.OBJECT_ICON]} />
                    </span>
                    <span className={prefixNS("attachments-desc")}>
                        <span className={prefixNS("attachments-text-wrapping-container")}>
                            {attachment[constants.DESC]}
                        </span>
                    </span>
                    <span className={prefixNS("attachments-btns")}>
                        {removeButton}
                        {this.getAttachmentActions(attachment_index)}
                    </span>
                </span>
            </Row>
        );
    }

    render() {
        if (this.props.success) {
            return this.getAttachmentRow(true);
        }

        const {attachment_index} = this.props;

        return (
            <AppRow {...this.props}
                    additionalClassNames={prefixNS("attachments-attachment")}
                    left={attachment_index === 0 ? (
                        <SVGIcon className={prefixNS("app-block-icon")}
                                title={formatStr(constants.SHARED_OBJECTS)}
                                size="md"
                                name={constants.ICON_ATTACHMENT} />
                        ) : undefined
                    }
                    center={this.getAttachmentRow()}
                    right={null} />
        );
    }
}

AttachedObjectComponent.propTypes = {
    attachment_index: PropTypes.number.isRequired,
    attachments: PropTypes.array.isRequired,
    attachment: PropTypes.object.isRequired,
    success: PropTypes.bool.isRequired,
    removeAttachment: PropTypes.func.isRequired,
    addRecipient: PropTypes.func.isRequired,
    setDirtyState: PropTypes.func.isRequired
};

const actions = {removeAttachment, addRecipient, setDirtyState};
const AttachedObject = connect(undefined, actions)(AttachedObjectComponent);
export default AttachedObject;
