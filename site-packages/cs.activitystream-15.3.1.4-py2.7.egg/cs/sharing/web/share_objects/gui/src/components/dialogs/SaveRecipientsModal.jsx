/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SaveRecipientsModal.jsx 174894 2018-03-22 14:27:29Z gwe $"
 */

import React from 'react';
import {Alert} from 'react-bootstrap';
import {Dialog, FormControl, postJSON} from 'cs-web-components-base';
import {connect, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {formatStr} from '../../i18n';
import {getSelectedRecipients} from '../../reducers/sharing-store';
import {setShowSaveRecipientModal, refetchMySharingGroups} from '../../actions/sharing-actions';
import FloatingLabel from '../FloatingLabel';
import ExistingLists from '../ExistingLists';
import {stopPropagation} from '../../helpers';
import * as constants from '../../constants';


class SaveRecipientsModalComponent extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            name: "",
            errorMessage: ""
        };
    }

    updateValue() {
        const input = document.getElementById("save-recipients-modal-group-name");

        if (input) {
            const name = input.value;
            this.setState({
                name: name
            });
        }
    }

    keyHandler(e) {
        const input = document.getElementById("save-recipients-modal-group-name");
        const input_focused = document.activeElement === input;

        if (input_focused && e.key === "Enter") {
            stopPropagation(e);
            this.submit();
        }
    }

    close() {
        this.props.setShowSaveRecipientModal(false);
    }

    submit() {
        const data = {
            name: this.state.name,
            recipients: this.props.recipients.toJS()
        };

        postJSON(constants.URL_SAVE_RECIPIENTS, data).then((response) => {
            if (response.error) {
                this.setState({
                    errorMessage: response.error.message + " " + response.error.statusText
                });
            } else {
                this.props.refetchMySharingGroups();
                this.close();
            }
        });
    }

    render() {
        const groupNameInputPlaceholder = formatStr(constants.NAME_GROUP);

        const groupNameInput = (
            <FormControl.TextInput id={"save-recipients-modal-group-name"}
                                name={"save-recipients-modal-group-name"}
                                autoComplete="off"
                                placeholder={groupNameInputPlaceholder}
                                onChange={() => {this.updateValue()}}
                                onKeyUp={(e) => {this.keyHandler(e)}} />
        );

        return (
            <Dialog.Dialog onHide={() => {this.close()}}
                           show={true}
                           showCancel
                           buttons={[<Dialog.Buttons.Ok
                                         key="ok"
                                         onClick={() => {this.submit()}} />,
                                     <Dialog.Buttons.Cancel
                                         key="cancel"
                                         onClick={() => {this.close()}} />]}
                           title={formatStr(constants.SAVE_RECIPIENTS)}>
                {
                    this.state.errorMessage !== "" ? (
                        <Alert bsStyle="danger">
                            {this.state.errorMessage}
                        </Alert>
                    ) : null
                }
                <FloatingLabel input={groupNameInput}
                        id={"save-recipients-modal-group-name"}
                        placeholder={groupNameInputPlaceholder} />

                {<ExistingLists {...this.props} />}
            </Dialog.Dialog>
        );
    }
}

SaveRecipientsModalComponent.propTypes = {
    setShowSaveRecipientModal: PropTypes.func.isRequired,
    refetchMySharingGroups: PropTypes.func.isRequired,
    recipients: ImmutablePropTypes.list
};

function mapStateToProps(state) {
    return {
        recipients: getSelectedRecipients(state)
    };
}

const actions = {setShowSaveRecipientModal, refetchMySharingGroups};
const SaveRecipientsModal = connect(mapStateToProps, actions)(SaveRecipientsModalComponent);
export default SaveRecipientsModal;
