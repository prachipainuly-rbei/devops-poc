/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: AddUserModal.jsx 174894 2018-03-22 14:27:29Z gwe $"
 */

import React from 'react';
import Immutable from 'immutable';
import {connect, PropTypes} from 'cs-web-components-externals';
import {Dialog, FormControl, getAppSetup, postJSON} from 'cs-web-components-base';
import {formatStr} from '../../i18n.js';
import {setShowAddUserModal, addRecipient} from '../../actions/sharing-actions';
import * as constants from '../../constants';

class AddUserModalComponent extends React.Component {
    constructor(props) {
        super(props);

        this.close = this.close.bind(this);
        this.onSelectionChanged = this.onSelectionChanged.bind(this);
        this.onDoSelect = this.onDoSelect.bind(this);
        this.state = {
            selectedIDs: Immutable.List()
        };
    }

    onDoSelect() {
        const appSetup = getAppSetup();
        postJSON(
            appSetup.getIn(['cs-sharing', 'user_catalog', 'select_url']),
            {
                catalog_field: 'angestellter.name',
                selected_ids: this.state.selectedIDs.toArray(),
                form_data: {
                    personalnummer: '',
                    cdb_object_id: '',
                    name: '',
                    ['system:description']: '',
                    ['cdb::argument.catalogcall_cldef']: 'angestellter',
                    ['cdb::argument.catalogfieldactivelang']: 'de'
                }
            }
        ).then(result => {
            const objects = [];
            for (const key in result.selected_values) {
                if (result.selected_values.hasOwnProperty(key)) {
                    const objectValues = result.selected_values[key].split(';');
                    for (let i = 0; i < objectValues.length; i++) {
                        if (!objects[i]) {
                            objects.push({['@type']: 'angestellter'});
                        }
                        objects[i][key] = objectValues[i];
                    }
                }
            }

            objects.forEach(object => {
                this.props.addRecipient(object);
            });
        });
        this.props.setShowAddUserModal(false);
    }

    onSelectionChanged(selected) {
        this.setState({
            selectedIDs: selected
        });
    }

    close() {
        this.props.setShowAddUserModal(false);
    }

    render() {
        const appSetup = getAppSetup();
        const formData = {
            form_data: {
                name: '*' + this.props.searchTerm + '*',
            },
            catalog_field: 'name'
        };

        return (
            <Dialog.Dialog onHide={this.close}
                           show={true}
                           showCancel
                           buttons={[<Dialog.Buttons.Ok
                                         key="ok"
                                         onClick={this.onDoSelect} />,
                                     <Dialog.Buttons.Cancel
                                         key="cancel"
                                         onClick={this.close} />]}
                           title={formatStr(constants.RESOLVE_USERS)}>
                <FormControl.TableCatalogWrapper
                    tabdefURL={appSetup.getIn(['cs-sharing', 'user_catalog', 'tabdef_url'])}
                    onSelectionChanged={this.onSelectionChanged}
                    formData={formData}
                    height={300} />
            </Dialog.Dialog>
        );
    }
}

AddUserModalComponent.propTypes = {
    setShowAddUserModal: PropTypes.func,
    addRecipient: PropTypes.func,
    searchTerm: PropTypes.string
};

const actions = {setShowAddUserModal, addRecipient};
const AddUserModal = connect(undefined, actions)(AddUserModalComponent);
export default AddUserModal;
