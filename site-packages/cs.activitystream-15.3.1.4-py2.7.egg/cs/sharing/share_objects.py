#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#
"""
"Share" context operation for business objects

example usage:

.. code-block:: python

    from cs.sharing.share_objects import WithSharing
    from cdb.objects.org import Organization

    class MyOrg(Organization, WithSharing):
        pass

"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: share_objects.py 167389 2017-10-27 10:32:51Z yzh $"

from cdb import sig
from cs.sharing.groups import RecipientCollection

OP_NAME = "cdb_share_objects"
OP_URL = "/share_objects"


class WithSharing(object):
    # basic support
    def on_cdb_share_objects_now(self, ctx):
        show_dialog(self, ctx)

    def getSubject(self, sharingGroup=None):
        return getSubject(self, sharingGroup)

    # ObjectSharingGroups
    def getProjectTeamSubjects(self, sharingGroup):
        "support for ObjectSharingGroup 'Project Team'"
        if self.GetClassname() == "cdbpcs_project":
            project = self
        else:
            project = getattr(self, "Project", None)
        if project:
            team = [(tm.cdb_person_id, "Person") for tm in project.TeamMembers]
            return RecipientCollection(subjects=team).subjects
        else:
            return []

    def _getProjectSubjects(self, role_name):
        if self.GetClassname() == "cdbpcs_project":
            project = self
        else:
            project = getattr(self, "Project", None)
        if project:
            role = project.RolesByID[role_name]
            if role:
                managers = [
                    (p.personalnummer, "Person") for p in role.getPersons()]
                return RecipientCollection(subjects=managers).subjects
        return []

    def getProjectManagerSubjects(self, sharingGroup):
        "support for ObjectSharingGroup 'Project Managers'"
        return self._getProjectSubjects("Projektleiter")

    def getProjectMemberSubjects(self, sharingGroup):
        "support for ObjectSharingGroup 'Project Members'"
        return self._getProjectSubjects("Projektmitglied")

    def getResponsibleSubjects(self, sharingGroup):
        "support for ObjectSharingGroup 'Responsible'"
        return RecipientCollection(objects=self.Subject.getPersons()).subjects


def show_dialog(obj, ctx):
    objects = [o.cdb_object_id for o in obj.PersistentObjectsFromContext(ctx)]
    ctx.url(
        OP_URL + "?attachments=%s" % (",".join(objects)),
        icon="elements_share")


def getSubject(obj, sharingGroup=None):
    return [(obj.subject_id, obj.subject_type)]
