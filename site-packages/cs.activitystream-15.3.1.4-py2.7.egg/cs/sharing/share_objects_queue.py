#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: share_objects_queue.py 162507 2017-08-01 13:38:12Z yzh $"

import os
import sys
import time
import traceback
from cdb import CADDOK
from cdb import ddl
from cdb import mail
from cdb import mq
from cdb import rte
from cdb import ue
from cdb import util
from cdb.objects import Forward
from cdb.plattools import killableprocess

__all__ = ["NotificationJob", "share_objects_queue"]

fUser = Forward("cdb.objects.org.User")
fSharing = Forward("cs.sharing.Sharing")

JOB_ID_PREFIX = "job_id_"


def get_traceback():
    return "".join(traceback.format_exception(*sys.exc_info()))


class NotificationJob(mq.Job):

    def getEnqUser(self):
        login = self.get("cdbmq_enquser").split("@")[0]
        for user in fUser.KeywordQuery(login=login):
            return user

    def log(self, txt):
        now = time.strftime("%d.%m.%Y %H:%M:%S", time.gmtime())
        util.text_append("mq_share_objects_queue_txt",
                         ["cdbmq_id"], ["%s" % self.id()],
                         "[%s] %s\n" % (now, txt))

    def run(self):
        """
        does not actually run the job, but starts a new subprocess running as
        the job's cdbmq_enquser.
        """
        user = self.getEnqUser()
        if user:
            cmd = [
                rte.runtime_tool("powerscript"),
                "--user=%s" % user.login
            ]
            from cs.sharing.share_objects_server import ShareObjectsServer
            language = ShareObjectsServer.get_service_language()
            if language:
                cmd.append("--language=%s" % language)
            killableprocess.check_call(cmd + [
                __file__,
                "%s%s" % (JOB_ID_PREFIX, self.id())])

    def runAsEnqUser(self):
        """
        actually run the job
        """
        try:
            if self.state() != "P":
                raise ue.Exception("cdb_sharing_inactive_job", self.id())

            sharing = fSharing.ByKeys(self.sharing_object_id)
            if self.properties:
                sharing.addSubscriptions(self.properties)
                # if successful, prevent redundant subscription
                self.setProperties(None)

            self.sendNotification(sharing)
            self.done()
        except Exception, e:
            tb_str = get_traceback()
            self.log(tb_str)
            self.fail(1, tb_str)

    def sendNotification(self, sharing, ctx=None):
        """
        copied from cdb.objects.common.WithEmailNotification, but losing the
        try/except, so jobs will actually fail if emails cannot be sent properly
        """
        from cdb import elink
        req = elink.DummyRequest(None)
        templ_file = sharing._getNotificationTemplateFile(ctx)
        if not templ_file:
            raise ue.Exception("cdb_sharing_no_template",
                               sharing.getNotificationTemplateName(ctx))

        from simpletal import simpleTALES, simpleTALUtils
        templ_cache = simpleTALUtils.TemplateCache()
        mail_templ = templ_cache.getTemplate(templ_file, 'utf-8')
        sc = elink.SimpleContext()
        sc.obj = sharing
        talctx = simpleTALES.Context(allowPythonPath=1)
        talctx.addGlobal("context", sc)
        sharing.setNotificationContext(sc, ctx)
        mail_templ.expand(talctx, req, outputEncoding="utf-8")
        msg = mail.Message()
        # pylint: disable-msg=E0611
        from email import Header
        msgheader = Header.Header(
            sharing.getNotificationTitle(ctx), 'utf8').encode()
        msg.Subject(msgheader)
        msg.body(req.text(), mimetype="text/html")
        (sender_addr, sender_name) = sharing.getNotificationSender(ctx)
        # notification emails must be sent by valid sender
        if not sender_addr:
            raise ue.Exception(
                "cdb_sharing_invalid_address", sender_name, sender_addr)

        msg.From(sender_addr, sender_name)
        msg._addheader("Date", time.strftime("%a, %d %b %Y %H:%M:%S +0000",
                                             time.gmtime()))
        for maddr in sharing.getNotificationReceiver(ctx):
            self.log("{}".format(maddr))
            for toaddr in maddr.get("to", []):
                msg.To(toaddr[0], toaddr[1])
            for toaddr in maddr.get("cc", []):
                msg.Cc(toaddr[0], toaddr[1])
            for toaddr in maddr.get("bcc", []):
                msg.Bcc(toaddr[0])

        if msg.to_addrs:
            msg.send()


def ensure_payload_dir():
    if not share_objects_queue.payloaddir:
        share_objects_queue.payloaddir = os.path.join(
            CADDOK.TMPDIR, u"share_objects_queue_payload")


share_objects_queue = mq.Queue(
    "share_objects_queue",
    NotificationJob,
    fieldlist=[
        ddl.Char("sharing_object_id", 40, True),
    ])
ensure_payload_dir()


if __name__ == "__main__":
    job_id = None
    for arg in sys.argv:
        try:
            job_id = int(arg.split(JOB_ID_PREFIX, 1)[1])
            break
        except:
            pass

    if isinstance(job_id, int):
        job = share_objects_queue.job_by_id(job_id)
        job.runAsEnqUser()
    else:
        sys.exit(share_objects_queue.cli(sys.argv))
