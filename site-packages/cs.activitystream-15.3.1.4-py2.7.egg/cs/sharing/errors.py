#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__revision__ = "$Id: errors.py 141772 2016-05-31 08:22:46Z cso $"

from cdb import CADDOK
from cdb import i18n
from cdb import misc
from cdb.platform.gui import Message


DEBUG = False  # set to True to raise Exceptions server-side instead of serving the client user-readable messages (will make unit tests fail!)


class ServerResult():
    """
    Context manager for less boilerplate when catching server exceptions in a
    client-friendly way.

    CAUTION: ServerResult swallows any Exception raised in its context. It is
    only to be used for client-side error display!

    Usage:

    with ServerResult(error_cls=CreateSharingFailed,
                      default={"sharing": None}) as server:
        server.result["sharing"] = _createSharing(values)

    server.result may now contain an error object:
    {
        "statusText": "Python exception's message",
        "message": "user-readable error message generated by server.error_cls"
    }

    """
    __logerr__ = ("Exception in cs.sharing.errors.ServerResult context:"
                  "\n\t{}\n\t{}\n\t{}")

    def __init__(self, error_cls, default=None):
        self.default = default if default else {}
        self.result = {"error": None}
        self.error = False
        self.error_cls = error_cls

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        result = dict(self.default)
        result.update(self.result)
        self.result = result

        if type:
            misc.cdblogv(misc.kLogErr, 0, self.__logerr__.format(
                type, value, traceback))
            self.error = True
            self.result.update({"error": dict(self.error_cls(value))})
            return not DEBUG


def getMessage(message_id):
    message = Message.ByKeys(message_id)

    if not message:
        return None

    result = getattr(message, CADDOK.LANGUAGE, None)
    if result:
        return result

    for fala in i18n.FallbackLanguages():
        result = getattr(message, i18n._to_cdb(fala), None)
        if result:
            return result


class Error(object):
    __message_id__ = None

    def __init__(self, exception):
        self.exception = exception

    def __iter__(self):
        return {
            "message": getMessage(self.__message_id__),
            "statusText": "{}".format(self.exception)
        }.iteritems()


class EmptyRecipientsList(Error):
    __message_id__ = "share_objects.empty_group"


class GetRecipientsFailed(Error):
    __message_id__ = "share_objects.get_recipients_failed"


class CreateSharingFailed(Error):
    __message_id__ = "share_objects.create_sharing_failed"


class GetObjectGroupFailed(Error):
    __message_id__ = "share_objects.get_object_group_failed"


class ResolveGroupFailed(Error):
    __message_id__ = "share_objects.resolve_group_failed"


class GetAttachmentsFailed(Error):
    __message_id__ = "share_objects.get_attachments_failed"


class SaveRecipientsFailed(Error):
    __message_id__ = "share_objects.save_recipients_failed"


class FulltextSearchFailed(Error):
    __message_id__ = "share_objects.fulltext_search_failed"


class DeleteFailed(Error):
    __message_id__ = "share_objects.delete_failed"
