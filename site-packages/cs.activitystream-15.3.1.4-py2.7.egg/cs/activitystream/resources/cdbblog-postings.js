/**
 * CDBBlog Posting Application
 * @param appContext: the selector of the context element for this
 *                application.
 */
function cdbElinkBlogPosting(appContext) {
  // Application Name
  this.appName = 'BlogPosting';
  // Application event namespace
  this.eventNS = '.blogposting.cdbelink';
  // URL for standard ajax calls
  this.ajaxRootURL = cdb.elink.baseURL + 'powerscript/cs.activitystream/';
  // URL to reload postings, must be set by the caller application if
  // reloading required.
  this.reloadPostingURL = '';
  // The default url to reload postings. Can be used to assign to
  // reloadPostingURL
  this.defaultReloadPostingURL = this.ajaxRootURL + 'postings';
  // URL to check new postings, if it is not set, no check will be done.
  this.checkNewPostingURL = '';
  this.newPostingClass = 'cdbblog_user_posting';
  this.labelTexts = {};
  // Event names that would be triggered for changes
  this.postingChangedEvent = 'cdbblogpostingchanged';
  this.commentChangedEvent = 'cdbblogcommentchanged';
};

//Inherites elinkBase
cdbElinkBlogPosting.prototype = new cdbElinkBase();

/**
 * Gets the container of the posting list
 */
cdbElinkBlogPosting.prototype.getPostingContainer = function() {
  container = this.context;
  if (!container.is('.cdbblog-postinglist')) {
    container = $('.cdbblog-postinglist', this.context).first();
  }
  return container;
}

/**
 * Gets the posting object, which is the context of the given element.
 */
cdbElinkBlogPosting.prototype.getPostingFor = function(elem) {
  return elem.closest('.cdbblog-posting[data-elink-cdb_object_id]');
}

/**
 * Loads more text.
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkBlogPosting.prototype.loadMoreText = function(event) {
  event.preventDefault();
  var target = $(event.currentTarget);
  var parent = target.closest('.posting-detail[data-elink-cdb_object_id]');
  var objID = parent.data('elink-cdb_object_id');
  $.ajax({
    url: this.ajaxRootURL + 'get_more_text',
    data: {'cdb_object_id': objID,
           'cutoff': 0},
    dataType: 'JSON',
    type: 'POST',
    success: function(data) {
      if (data.success=='1') {
        parent.children(".posting-text").first()
              .children("p.text-para").empty()
              .html(data.text);
        target.hide();
      } else {
        cdb.elink.alertCDBMessage(data.message);
      }
    },
    error: function(jqXHR, textStatus, errorThrown) {
     cdb.elink.alert(textStatus);
    }
  });
};

/**
 * Highlight the referred comment
 */
cdbElinkBlogPosting.prototype.highlightReferredComment = function(event) {
  var target = $(event.currentTarget);
  var referrer = target.attr('data-elink-cdbblog-in_reply_to');
  //$('#' + referrer, this.context).parent().effect('highlight', {}, 1000);
};

/**
 * Show the input form.
 */
cdbElinkBlogPosting.prototype.showInputForm = function(inputForm) {
  inputForm.siblings('.input-trigger').hide();
  inputForm.show();
  // Fixes IE focus bug: buys some time until the DOM element is ready
  setTimeout(function() {
    inputForm.find('textarea.posting-text-field').focus();
  }, 0);
};

/**
 * hide the input form.
 */
cdbElinkBlogPosting.prototype.hideInputForm = function(inputForm) {
  inputForm.siblings('.input-trigger').val('').show();
  inputForm.hide();
  var textArea = inputForm.find('textarea.posting-text-field')
  textArea.css('height', textArea.css('min-height'));
  this.checkPublishButton(
      textArea.val(''));
};

/**
 * Prepare and show the text form.
 */
cdbElinkBlogPosting.prototype._showTextForm = function(formDiv, replyTo) {
  if (formDiv.length) {
    // Is it replying to someone?
    var lbl = formDiv.first().children('.label-reply-to');
    if (lbl.length > 0) {
      var replyTitle = replyTo ?
            replyTo.find('.replyto-title').first() : null;
      if (! replyTitle || replyTitle.text() == "")
      {
        var phText = formDiv.closest('.cdbblog-posting-input')
                      .find('.input-trigger[placeholder]')
                      .attr('placeholder');
        if (phText) {
          lbl.text(phText);
        } else {
          lbl.text(this.labelTexts['cdbblog_writing_comment_title']);
        }
      }
      else
      {
        var replaceTo = replyTitle.data('elink-cdbblog-username');
        if (replaceTo == undefined) {
          replaceTo = '[' + replyTitle.text() +  ']';
        }
        lbl.text(this.labelTexts[lbl.data('elink-cdbblog-label')].replace('#NAME#', replaceTo));
      }
      formDiv.find('textarea.posting-text-field')
             .data('elink-posting-reply-to', replyTo.data('elink-cdb_object_id'));
    }
  }
  this.showInputForm(formDiv);
};

/**
 * Show the input form to reply.
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkBlogPosting.prototype.openReplyForm = function(event) {
  event.preventDefault();
  var target = $(event.currentTarget);
  var replyTo = target.closest('.cdbblog-entity[data-elink-cdb_object_id]');
  var posting = this.getPostingFor(target);
  var formDiv = posting.find('.posting-input-form');
  this._showTextForm(formDiv, replyTo);
};

/**
 * Show the input form.
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkBlogPosting.prototype.triggerInputForm = function(event) {
  event.preventDefault();
  var target = $(event.currentTarget);
  var formDiv = target.siblings('.posting-input-form');
  var posting = this.getPostingFor(target);
  this._showTextForm(formDiv, posting);
};

/**
 *  Checks content of text input
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkBlogPosting.prototype.textFieldChanged = function(event) {
  var target = $(event.currentTarget);
  this.checkPublishButton(target);
};

/**
 *  Checks publish-button according to content of textarea
 */
cdbElinkBlogPosting.prototype.checkPublishButton = function(textField) {
  var publishBtn = textField.closest('.posting-input-form')
                            .find('.posting-publish').first();
  if (textField.val().length > 0) {
    publishBtn.removeAttr('disabled');
  } else {
    publishBtn.attr('disabled', 'disabled');
  }
};

/**
 *  Cancel-button
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkBlogPosting.prototype.cancelInputForm = function(event) {
  var target = $(event.currentTarget);
  var formDiv = target.closest('.posting-input-form');
  this.hideInputForm(formDiv);
};

/**
 *  Publish-button
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkBlogPosting.prototype.submitInputForm = function(event) {
  var target = $(event.currentTarget);
  var formDiv = target.closest('.posting-input-form');
  var inputDiv = formDiv.closest('.cdbblog-posting-input');
  var textField = formDiv.find('textarea.posting-text-field');
  var isPosting = false;
  var data = {'text': textField.val()};
  if (target.hasClass('create-posting')) {
    isPosting = true;
    data['cdb_classname'] = this.newPostingClass;
    var topicId = formDiv.closest('[data-elink-cdbblog-posting-topic-id]');
    if (topicId.length > 0) {
      data['topic_id'] = topicId.data('elink-cdbblog-posting-topic-id');
    }
  } else {
    data['in_reply_to'] = textField.data("elink-posting-reply-to");
    var posting = this.getPostingFor(formDiv);
    if (posting.length > 0) {
      data['posting_id'] = posting.data('elink-cdb_object_id');
    }
  }
  this.hideInputForm(formDiv);
  var app = this;
  $.ajax({
    url: app.ajaxRootURL + (isPosting ? 'create_posting' : 'add_comment'),
    data: data,
    dataType: 'html',
    type: 'POST',
    success: function(html) {
      if (isPosting) {
        inputDiv.after(html);
        var newPost = inputDiv.next();
        app.checkReplyTitles(newPost);
        app.activatePlaceholder(newPost);
        newPost.trigger(app.postingChangedEvent);
      } else {
        inputDiv.before(html);
        var newComm = inputDiv.prev();
        app.checkReplyTitles(newComm);
        app.activatePlaceholder(newComm);
        newComm.trigger(app.commentChangedEvent);
      }
    },
    error: function(jqXHR, textStatus, errorThrown) {
     cdb.elink.alert(textStatus);
    }
  });

};

/**
 *  Reformat the title of comments on comment.
 *  e.g. activates the tooltip.
 */
cdbElinkBlogPosting.prototype.checkReplyTitles = function(container) {
  var app = this;
  $('a.reply-to-comment', container).each(function() {
    var posting = app.getPostingFor($(this));
    var replyToID = $(this).data('elink-cdbblog-in_reply_to');
    var replyTo = $('[data-elink-cdb_object_id=' + replyToID + ']', posting);
    if (replyTo.length < 1) {
      $(this).data('elink-cdbblog-get_title_url', app.ajaxRootURL+'get_more_text');
    }
    $(this).tooltip({title: app.getReplyTitle, html: true});
  });
};

/**
 * Generate the reply title from the loaded comment.
 * Use 'this' to reference the element, which has tooltip.
 */
cdbElinkBlogPosting.prototype.getReplyTitle = function() {
  var elem = $(this);
  var tipText = '';
  if (elem.data('elink-cdbblog-title_text') != undefined) {
    tipText = elem.data('elink-cdbblog-title_text');
  } else {
    //There is no application context bound with 'this' because Bootstrap calls
    //it with own scope. So the app.getPostingFor() function cannot be called.
    var posting = elem.closest('.cdbblog-posting[data-elink-cdb_object_id]');
    var replyToID = $(this).data('elink-cdbblog-in_reply_to');
    var replyTo = $('[data-elink-cdb_object_id=' + replyToID + ']', posting);
    if (replyTo.length > 0) {
      tipText = $('.text-para', replyTo).text();
    } else {
      tipText = "";
      if (elem.data('elink-cdbblog-get_title_url')) {
        $.ajax({
          url: elem.data('elink-cdbblog-get_title_url'),
          data: {'cdb_object_id': replyToID,
                 'cutoff': true},
          dataType: 'JSON',
          type: 'POST',
          async: false,
          success: function(data) {
            if (data.success=='1') {
              tipText = data.text;
              elem.removeData('elink-cdbblog-get_title_url');
            }
          },
          error: function(jqXHR, textStatus, errorThrown) {
          }
        });
      }
    }
    elem.data('elink-cdbblog-title_text', tipText);
  }
  return tipText;
};

/**
 * Loads all comments.
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkBlogPosting.prototype.loadAllComments = function(event) {
  event.preventDefault();
  var target = $(event.currentTarget);
  var posting = this.getPostingFor(target);
  var postingID = posting.data('elink-cdb_object_id');
  var app = this;
  $.ajax({
    url: app.ajaxRootURL + 'load_all_comments',
    data: {'posting_id': postingID},
    dataType: 'html',
    type: 'POST',
    success: function(html) {
      var container = target.closest('.posting-comments');
      container.children().not('.cdbblog-posting-input').remove();
      var newComm = $(html).prependTo(container);
      if (newComm.length == 0) {
        container.addClass('no-comments');
      } else {
        app.checkReplyTitles(container);
        newComm.trigger(app.commentChangedEvent);
      }
    },
    error: function(jqXHR, textStatus, errorThrown) {
     cdb.elink.alert(textStatus);
    }
  });
};

/**
 * Reads the label texts
 */
cdbElinkBlogPosting.prototype.readLabels = function(container) {
  var app = this;
  if (container == undefined) {
    container = app.context;
  }
  $('.cdbblog-label-texts input[data-elink-label]',
      container).each(function() {
        app.labelTexts[$(this).data('elink-label')] = $(this).val();
    });
}

/**
 * Cleans up the container, removes all loaded postings.
 */
cdbElinkBlogPosting.prototype.removePostings = function() {
  container = this.getPostingContainer();
  // removes posting divs
  $('.cdbblog-posting[data-elink-cdb_object_id]', container).remove();
  // removes posting sections
  $('[data-elink-layout-element=posting]', container).remove();
}

/**
 * Appends the reloaded postings into container.
 */
cdbElinkBlogPosting.prototype.appendPostings = function(postings) {
  container = this.getPostingContainer();
  // removes the 'more' button
  $('.more-postings-button', container).remove();
  // appends postings
  postings.appendTo(container);
  // activates the 'more' button
  this.activeMorePostingsButton();
  // Generate reply titles
  this.checkReplyTitles(postings);
  //Activates the Placeholder polyfill for IE
  this.activatePlaceholder(postings);
  postings.trigger(this.postingChangedEvent);
}

/**
 * Activates the more postings button.
 */
cdbElinkBlogPosting.prototype.activeMorePostingsButton = function() {
  if (this.reloadPostingURL) {
    $('.more-postings-button', this.context).removeClass('hide');
  }
}

/**
 * Triggers posting reloading.
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkBlogPosting.prototype.triggerPostingReloading = function(event) {
  if (this.reloadPostingURL) {
    event.preventDefault();
    var target = $(event.currentTarget);
    var lastDate = target.data('elink-cdbblog-last_date');
    var lastID = target.data('elink-cdbblog-last_id');
    this.loadMorePostings(lastDate, lastID);
  }
};

/**
 * Loads more postings.
 */
cdbElinkBlogPosting.prototype.loadMorePostings = function(lastDate, lastID) {
  if (this.reloadPostingURL) {
    var app = this;
    var container = this.getPostingContainer();
    var cnt = container.data('elink-cdbblog-cnt');
    var noChannels = container.data('elink-cdbblog-no-channels');
    var data = {};
    data['topic_id'] = container.data('elink-cdbblog-posting-topic-id');
    if (cnt != undefined) {
      data['cnt'] = cnt;
    }
    if (noChannels != undefined) {
      data['no_channels'] = noChannels;
    }
    var refreshing = true;
    if (lastDate != undefined) {
      data['last_comment_date'] = lastDate;
      refreshing = false;
    }
    if (lastID != undefined) {
      data['last_object_id'] = lastID;
      refreshing = false;
    }
    this.getPostingFilters(data);
    $.ajax({
      url: app.reloadPostingURL,
      data: data,
      dataType: 'html',
      type: 'POST',
      success: function(html) {
        app.appendPostings($(html));
        if (!refreshing) {
          app.checkNewPostings();
        }
      },
      error: function(jqXHR, textStatus, errorThrown) {
       cdb.elink.alert(textStatus);
      }
    });
  }
};

/**
 * Resets the topic id.
 */
cdbElinkBlogPosting.prototype.resetTopicID = function(topic_id) {
  this.getPostingContainer().data('elink-cdbblog-posting-topic-id', topic_id);
}


/**
 * Reloads the posting list(refreshes it).
 */
cdbElinkBlogPosting.prototype.refreshPostingList = function() {
  this.removePostings();
  this.loadMorePostings();
  this.checkUpdateTime();
}

/**
 * Remembers when the list is updated to check new postings.
 */
cdbElinkBlogPosting.prototype.checkUpdateTime = function() {
  var container = this.getPostingContainer();
  var lastUpdated = container.find('.cdbblog-posting[data-elink-cdb_object_id]')
                      .first().data('elink-last_comment_date');
  container.data('elink-last-updated', lastUpdated);
}

/**
 * Checks whether there are new postings since last update.
 */
cdbElinkBlogPosting.prototype.checkNewPostings = function() {
  if(this.checkNewPostingURL) {
    var container = this.getPostingContainer();
    var lastUpdated = container.data('elink-last-updated');
    var app = this;
    var data = {};
    data['topic_id'] = container.data('elink-cdbblog-posting-topic-id');
    if (lastUpdated != undefined) {
      data['last_updated'] = lastUpdated;
    }
    var filters = this.getPostingFilters();
    if (filters) {
      data['filters'] = filters;
    }
    $.ajax({
      url: app.checkNewPostingURL,
      data: data,
      dataType: 'json',
      type: 'POST',
      success: function(data) {
        if (data.success=='1') {
          var newPostings = parseInt(data.result);
          if (newPostings > 0) {
            $('.new-postings-button', container).removeClass('hide');
          }
        } else {
          cdb.elink.alertCDBMessage(data.message);
        }
      },
      error: function(jqXHR, textStatus, errorThrown) {
       cdb.elink.alert(textStatus);
      }
    });
  }
}

/**
 * Loads new postings, refresh the list.
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkBlogPosting.prototype.loadNewPostings = function(event) {
  if (this.checkNewPostingURL) {
    event.preventDefault();
    var target = $(event.currentTarget);
    target.addClass('hide');
    this.refreshPostingList();
  }
};

/**
 *  Activates the Placeholder polyfill for IE
 */
cdbElinkBlogPosting.prototype.activatePlaceholder = function(container) {
  $('input[placeholder]', container).placeholder();
};

/**
 * Interface to load a posting list into a container via ajax load.
 */
cdbElinkBlogPosting.prototype.loadPostingListInto = function($container, data, callback) {
  var app = this;
  $container.load(
      app.ajaxRootURL + "postinglist",
      data,
      function(responseText, textStatus, XMLHttpRequest) {
        if(callback) {
          callback(responseText, textStatus, XMLHttpRequest);
        }
        app.activatePlaceholder($container);
      });
};

/**
 * Interface to set the filters while loading postings.
 * Should be implemented by the caller.
 */
cdbElinkBlogPosting.prototype.getPostingFilters = function(data) {
}

cdbElinkBlogPosting.prototype.start = function() {
  var app = this;
  // Reads the label texts
  this.readLabels(this.context);

  // Binds handler to 'more' button
  $(this.context).on(
      this.nsEvents('click'),
      '.cdbblog-posting .button-more-text',
      this.appEventHandler('loadMoreText'));

  // Binds handler to 'reply' button
  $(this.context).on(
      this.nsEvents('click'),
      '.cdbblog-posting .button-reply',
      this.appEventHandler('openReplyForm'));

  // Activates input form trigger
  $(this.context).on(
      this.nsEvents('focus'),
      '.cdbblog-posting-input .input-trigger',
      this.appEventHandler('triggerInputForm'));

  // Activates cancel button
  $(this.context).on(
      this.nsEvents('click'),
      '.cdbblog-posting-input .posting-cancel',
      this.appEventHandler('cancelInputForm'));

  // Toggles publish button
  $(this.context).on(
      this.nsEvents('keyup'),
      '.cdbblog-posting-input textarea.posting-text-field',
      this.appEventHandler('textFieldChanged'));

  // Activates publish button
  $(this.context).on(
      this.nsEvents('click'),
      '.cdbblog-posting-input .posting-publish:enabled',
      this.appEventHandler('submitInputForm'));

  // Generate reply titles
  this.checkReplyTitles(this.context);

  // Activates the show all comments button
  $(this.context).on(
      this.nsEvents('click'),
      '.cdbblog-posting .posting-comments .more-comments',
      this.appEventHandler('loadAllComments'));

  // Add visual effects to referrer links
  $(this.context).on(
      this.nsEvents('click'),
      '.cdbblog-posting .reply-to-comment',
      this.appEventHandler('highlightReferredComment'));

  // Activates the more postings button
  $(this.context).on(
      this.nsEvents('click'),
      '.more-postings-button',
      this.appEventHandler('triggerPostingReloading'));
  this.activeMorePostingsButton();
  // Sets the time for latest update.
  this.checkUpdateTime();

  // Activates the button to load new postings
  $(this.context).on(
      this.nsEvents('click'),
      '.new-postings-button',
      this.appEventHandler('loadNewPostings'));

  // Activates the Placeholder polyfill for IE
  this.activatePlaceholder(this.context);

  // Set auto sizer to all posting text fields
  $('.posting-text-field').autosize();
};
