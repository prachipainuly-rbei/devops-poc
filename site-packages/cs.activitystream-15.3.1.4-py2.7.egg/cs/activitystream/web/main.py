#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2015 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: main.py 165923 2017-09-27 09:47:00Z yzh $"

import os
import urllib

from cdb import rte
from cdb import sig
from cdb import util

from cs.platform.web import static
from cs.platform.web.root import Root, get_root
from cs.platform.web.rest import CollectionApp

from cs.activitystream.objects import Posting
from cs.activitystream.objects import Comment
from cs.activitystream.rest_app.model import PostingCollection
from cs.activitystream.rest_app.model import ChannelCollection
from cs.activitystream.rest_app.model import SubscriptionCollection
from cs.activitystream.rest_app.model import ObjectPostings
from cs.activitystream.rest_app.model import PersonSearchModel
from cs.activitystream.rest_app.main import get_activitystream

from cs.web.components.base.main import BaseApp
from cs.web.components.base.main import BaseModel
from cs.web.components.base.main import GLOBAL_APPSETUP_HOOK


COMPONENTNAME = "cs-activitystream-web"


class ASApp(BaseApp):
    client_favicon = "cdb_elink_activity"


class ASModel(BaseModel):
    def __init__(self, absorb=""):
        super(ASModel, self).__init__()
        self.absorb = absorb


@Root.mount(app=ASApp, path="activitystream")
def _mount_app():
    return ASApp()


@ASApp.path(model=ASModel, path="/", absorb=True)
def get_app_model(absorb):
    return ASModel(absorb)


@ASApp.view(model=ASModel, name="document_title", internal=True)
def default_document_title(self, request):
    return util.get_label("cdbblog_elink_title_activities")


@ASApp.view(model=ASModel, name="app_component", internal=True)
def _setup(self, request):
    request.app.include(COMPONENTNAME, "15.1.0")
    return "%s-App" % COMPONENTNAME


@ASApp.view(model=ASModel, name="base_path", internal=True)
def get_base_path(self, request):
    return "/activitystream"


@ASApp.path(model=Posting, path="posting/{cdb_object_id}")
def _get_posting(cdb_object_id):
    """
    Only to generate the link to posting thread. Should be handled by
    client side routes.
    """
    return Posting.ByKeys(cdb_object_id)


@sig.connect(GLOBAL_APPSETUP_HOOK)
def update_app_setup(app_setup, request):
    postings = PostingCollection({})
    channels = ChannelCollection()
    subscriptions = SubscriptionCollection()
    topic_base = ObjectPostings(None, {})
    excl_topic_classes = [Posting._getClassname()] + \
                         list(Posting._getClassDef().getSubClassNames(True)) + \
                         [Comment._getClassname()] + \
                         list(Comment._getClassDef().getSubClassNames(True))
    app_setup.merge_in([COMPONENTNAME], {
        "dataURL": request.link(postings, app=get_activitystream(request)),
        "channelURL": request.link(channels, app=get_activitystream(request)),
        "subscriptionURL": request.link(subscriptions, app=get_activitystream(request)),
        "topicURL": request.link(topic_base, app=get_activitystream(request)),
        "personSearchURL": request.link(
            PersonSearchModel(None), app=get_activitystream(request)),
        "excludeTopicClasses": excl_topic_classes
    })


@sig.connect(rte.APPLICATIONS_LOADED_HOOK)
def _register_libraries():
    lib = static.Library(COMPONENTNAME, "15.1.0", os.path.join(os.path.dirname(__file__), 'js', 'build'))
    lib.add_file("%s.js" % COMPONENTNAME)
    lib.add_file("%s.js.map" % COMPONENTNAME)
    static.Registry().add(lib)

    stories = COMPONENTNAME + "-stories"
    lib = static.Library(stories, "15.1.0", os.path.join(os.path.dirname(__file__), 'js', 'build'))
    lib.add_file("%s.js" % stories)
    lib.add_file("%s.js.map" % stories)
    static.Registry().add(lib)

    from cs.web.components.storybook.main import add_stories
    add_stories((COMPONENTNAME, "15.1.0"), (stories, "15.1.0"))


# register UI link for posting objects by REST API
@CollectionApp.view(model=Posting, name="ui_link", internal=True)
def _get_posting_ui_link(posting, request):
    return urllib.unquote(
        request.link(posting, app=get_root(request).child("activitystream")))
