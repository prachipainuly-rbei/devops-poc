/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Comment.jsx 162376 2017-07-28 13:55:03Z yzh $"
 */

import React from 'react';
import {Popover, Overlay} from 'react-bootstrap';
import {formatStr} from '../i18n';
import {prefixNS} from '../helpers';
import PostingLayout from './PostingLayout';
import PostingAuthor from './PostingAuthor';
import ActivityText from './ActivityText';
import {Comment as CommentAction, Share} from './Actions';
import {ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import ActivityDate from './ActivityDate';
import FileViewer from './FileViewer';

class ReplyToTitle extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showReplyTo: false
        };
        this.showTarget = this.showTarget.bind(this);
        this.hideTarget = this.hideTarget.bind(this);
        this.navigateToTarget = this.navigateToTarget.bind(this);
        this._replyTarget = null;
    }

    showTarget() {
        this.setState({
            showReplyTo: true
        });
    }

    hideTarget() {
        this.setState({
            showReplyTo: false
        });
    }

    navigateToTarget(event) {
        event.preventDefault();
        const {replyTo, scrollToTarget} = this.props;
        if (scrollToTarget) {
            scrollToTarget(replyTo);
        }
    }

    render() {
        const {replyTo, comment} = this.props;
        return (
            <div className={prefixNS('comment-reply-to')}>
                <PostingAuthor posting={comment}/>
                <span>:</span>
                <span className={prefixNS('comment-reply-to-label')}>{formatStr('answer-to')}</span>
                <a onMouseOver={this.showTarget}
                   onMouseOut={this.hideTarget}
                   ref={c => this._replyTarget = c}
                   href="#"
                   onClick={this.navigateToTarget}>
                    {replyTo.getIn(['author', 'name'])}
                </a>
                <Overlay placement="top"
                         show={this.state.showReplyTo}
                         target={this._replyTarget}>
                    <Popover id={`replyToText-${replyTo.get('cdb_object_id')}`}>
                        <ActivityText activityEntry={replyTo} />
                    </Popover>
                </Overlay>
            </div>
        );
    }
}

ReplyToTitle.propTypes = {
    comment: ImmutablePropTypes.map.isRequired,
    replyTo: ImmutablePropTypes.map.isRequired,
    scrollToTarget: PropTypes.func
};

export default class Comment extends React.Component {
    constructor(props) {
        super(props);
        this.onComment = this.onComment.bind(this);
    }

    onComment() {
        this.props.onComment(this.props.comment);
    }

    render() {
        const {posting, comment, replyTo, scrollToTarget, ...others} = this.props;
        delete others.onComment;
        return (
            <PostingLayout {...others}
                           className={prefixNS('comment')}
                           posting={comment}>
                <PostingLayout.Title>
                    {replyTo === undefined ?
                        <PostingAuthor posting={comment} /> :
                        <ReplyToTitle comment={comment}
                                      replyTo={replyTo}
                                      scrollToTarget={scrollToTarget} />
                    }
                </PostingLayout.Title>
                <PostingLayout.Nav>
                    <ActivityDate activityEntry={comment} className="text-muted" />
                </PostingLayout.Nav>
                <ActivityText activityEntry={comment} />
                <FileViewer activityEntry={comment}
                            reloadEntry={false}
                            onSubmit={this.onUpload}/>
                <PostingLayout.Footer activityEntry={comment}>
                    <CommentAction onClick={this.onComment}/>
                    <Share activityEntry={posting}/>
                </PostingLayout.Footer>
            </PostingLayout>
      );
    }
}

Comment.propTypes = {
    posting: ImmutablePropTypes.map.isRequired,
    comment: ImmutablePropTypes.map.isRequired,
    replyTo: ImmutablePropTypes.map,
    onComment: PropTypes.func,
    scrollToTarget: PropTypes.func
};
