/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: FileViewer.jsx 163928 2017-08-24 12:53:01Z yzh $"
 */

import React from 'react';
import Immutable from 'immutable';
import {Dialog,
    isSupportedImageType, isSupportedVideoType} from 'cs-web-components-base';
import {Label, Carousel} from 'react-bootstrap';
import {prefixNS} from '../helpers';
import {formatStr} from '../i18n';
import {ImmutablePropTypes, classNames, PropTypes} from 'cs-web-components-externals';

function getType(file) {
    return file.get('system:content_type');
}

class Renderer extends React.PureComponent {
    render() {
        const {file} = this.props;
        const isVideo = isSupportedVideoType(getType(file));
        const src = file.get('@id');
        if (isVideo) {
            return (
                <video src={src} controls />
            );
        } else {
            return (
                <img src={src} />
            );
        }
    }
}

Renderer.propTypes = {
    file: ImmutablePropTypes.map.isRequired
};

export default class FileViewer extends React.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            lightBox: false,
            showing: 0,
            direction: null
        };
        this.closeLightBox = this.closeLightBox.bind(this);
        this.openLightBox = this.openLightBox.bind(this);
        this.selectItem = this.selectItem.bind(this);
        this.dialogSizes = Immutable.List([Dialog.SIZE_MEDIUM, Dialog.SIZE_LARGE]);
    }

    openLightBox() {
        this.setState({
            lightBox: true,
            showing: 0,
            direction: null
        });
    }

    closeLightBox() {
        this.setState({
            lightBox: false
        });
    }

    selectItem(selectedIndex, e) {
        this.setState({
            showing: selectedIndex,
            direction: e.direction
        });
    }

    renderLightBox(files) {
        const imgCls = prefixNS('file-viewer-lightbox__image');
        const capCls = prefixNS('file-viewer-lightbox__caption');
        const dialogCls = classNames(
            prefixNS('file-viewer-lightbox'),
            {
                [prefixNS('file-viewer-lightbox--single')]: files.count() <= 1
            });
        return (
            <Dialog.Dialog show={true}
                           hideFooter={true}
                           showCancel={true}
                           sizes={this.dialogSizes}
                           dialogClassName={dialogCls}
                           onHide={this.closeLightBox}
                           title={formatStr('images')}>
                <Carousel activeIndex={this.state.showing}
                          direction={this.state.direction}
                          onSelect={this.selectItem}>
                    {files.map((file) => (
                        <Carousel.Item key={file.get('@id')}>
                            <div className={imgCls}>
                                <Renderer file={file}/>
                            </div>
                           <span className={capCls}>{file.get('cdbf_name')}</span>
                        </Carousel.Item>
                    ))}
                </Carousel>
            </Dialog.Dialog>
        );
    }

    render() {
        const {activityEntry} = this.props;
        const files = activityEntry.getIn(
            ['relship:files', 'targets'], Immutable.List());
        const viewable = files.filter(file =>
            isSupportedImageType(getType(file)) ||
            isSupportedVideoType(getType(file))
        );
        if (viewable.count() < 1) {
            return null;
        }
        const lightBox = this.state.lightBox ? this.renderLightBox(viewable) : null;
        return (
            <div className={prefixNS('file-viewer')}>
                {lightBox}
                <div className={prefixNS('file-viewer-preview')}>
                    <div className={prefixNS('file-viewer-preview-image')}
                         onClick={this.openLightBox}>
                        <Renderer file={viewable.get(0)}/>
                        <Label bsStyle="default"
                               className={prefixNS('file-viewer-preview-counter')}>
                            {formatStr('one-of', {n: viewable.count()})}
                        </Label>
                    </div>
                </div>
            </div>
        );
    }
}

FileViewer.propTypes = {
    activityEntry: ImmutablePropTypes.map.isRequired,
    onSubmit: PropTypes.func
};
