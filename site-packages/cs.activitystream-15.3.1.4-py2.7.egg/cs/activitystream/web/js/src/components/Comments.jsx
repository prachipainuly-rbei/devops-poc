/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Comments.jsx 162376 2017-07-28 13:55:03Z yzh $"
 */

import React from 'react';
import ReactDOM from 'react-dom';
import {formatStr} from '../i18n';
import {prefixNS} from '../helpers';
import Comment from './Comment';
import {ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {Button} from 'cs-web-components-base';

const INITCOMMENTSCOUNT = 3;
const findComment = (comments, id) => comments.find(
    (comment) => comment.get('@id') === id);

export const findCommentToPosting = (posting, cID) =>
    findComment(posting.getIn(['comments', 'comments']), cID);

export default class Comments extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            showAll: false
        };
        this.showMore = this.showMore.bind(this);
        this.scrollToTarget = this.scrollToTarget.bind(this);
        this._comments = {};
    }

    showMore() {
        this.setState({
            showAll: true
        });
    }

    scrollToTarget(comment) {
        const comp = this._comments[comment.get('cdb_object_id')];
        if (comp) {
            const el = ReactDOM.findDOMNode(comp);  // eslint-disable-line react/no-find-dom-node
            el.scrollIntoView(true);
        } else if (!this.state.showAll) {
            this.setState({showAll: true}, () => this.scrollToTarget(comment));
        }
    }

    render() {
        const {posting, onComment, instanceName} = this.props;
        const comments = posting.getIn(['comments', 'comments']);
        const commentsAmount = comments.count() ? comments.count() : 0;
        const showAll = commentsAmount <= INITCOMMENTSCOUNT || this.state.showAll ?
            null : (
            <Button.TextButton
                className={prefixNS('show-all-comments')}
                buttonStyle="link"
                onClick={this.showMore}
                label={formatStr('show-all-comments', {commentsAmount})} />
        );
        const showing = this.state.showAll ?
            comments : comments.takeLast(INITCOMMENTSCOUNT);
        return (
            <div className={prefixNS('comments')}>
                {showAll}
                {showing.map(comment =>
                    <Comment key={comment.get('cdb_object_id')}
                             instanceName={instanceName}
                             posting={posting}
                             comment={comment}
                             replyTo={findComment(comments, comment.get('reply_to'))}
                             onComment={onComment}
                             ref={(c) => this._comments[comment.get('cdb_object_id')] = c}
                             scrollToTarget={this.scrollToTarget}/>
                )}
            </div>
        );
    }
}

Comments.propTypes = {
    instanceName: PropTypes.string.isRequired,
    posting: ImmutablePropTypes.map.isRequired,
    onComment: PropTypes.func
};
