/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Posting.jsx 168213 2017-11-10 10:00:44Z yzh $"
 */

import React from 'react';
import SystemPosting from './SystemPosting';
import UserPosting from './UserPosting';
import Comments, {findCommentToPosting} from './Comments';
import CreateForm from './CreateForm';
import {connect, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {createComment, assignTopics} from '../actions/actions';
import {formatStr} from '../i18n';
import {prefixNS} from '../helpers';

export class Posting extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            replyingTo: null
        };
        this.createComment = this.createComment.bind(this);
        this.onComment = this.onComment.bind(this);
        this.onCommentPosting = this.onCommentPosting.bind(this);
        this.onCloseForm = this.onCloseForm.bind(this);
    }

    onComment(entry) {
        this.setState({
            replyingTo: entry ? entry.get('@id') : null
        }, () => this.refs['commentForm'].expandForm());
    }

    onCommentPosting() {
        this.onComment(null);
    }

    onCloseForm() {
        this.setState({
            replyingTo: null
        });
    }

    createComment(text, attachments, files) {
        const {posting, createComment} = this.props;
        const replyTo = this.state.replyingTo ?
            this.state.replyingTo : posting.get('comments').get('@id');
        return createComment(replyTo, text, attachments, files);
    }

    isSystemPosting() {
        const {posting} = this.props;
        if (posting === undefined) {
            return false;
        }
        return posting.get('is_system_posting');
    }

    render() {
        const {posting, instanceName} = this.props;
        const PostingComponent = this.isSystemPosting() ? SystemPosting : UserPosting;
        const replyTo = this.state.replyingTo ?
            findCommentToPosting(posting, this.state.replyingTo) : posting;
        const replyToAuthor = replyTo.getIn(['author', 'name']);
        return (
            <PostingComponent
                {...this.props}
                className={prefixNS('posting')}
                onComment={this.onCommentPosting}>
                <Comments posting={posting} onComment={this.onComment} instanceName={instanceName}/>
                <CreateForm
                    label={formatStr('new-comment', {name: replyToAuthor})}
                    placeholder={formatStr('write-answer')}
                    createEntry={this.createComment}
                    onClose={this.onCloseForm}
                    ref="commentForm"/>
            </PostingComponent>
        );
    }
}

Posting.propTypes = {
    instanceName: PropTypes.string.isRequired,
    createComment: PropTypes.func.isRequired,
    assignTopics: PropTypes.func.isRequired,
    lastUpdatedAt: PropTypes.string,
    posting: ImmutablePropTypes.map.isRequired
};

function mapDispatchToProps(dispatch, ownProps) {
    const {instanceName, posting} = ownProps;
    return {
        createComment: (url, text, attachments, files) =>
            dispatch(createComment(
                instanceName, url, {posting, text, attachments, files})),
        assignTopics: (topics) =>
            dispatch(assignTopics(instanceName, posting, topics))
    };
}

export default connect(() => ({}), mapDispatchToProps)(Posting);
