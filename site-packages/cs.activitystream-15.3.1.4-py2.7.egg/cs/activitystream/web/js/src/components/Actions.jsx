/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Actions.jsx 174199 2018-03-08 08:59:24Z vov $"
 */

import React from 'react';
import {formatStr} from '../i18n';
import {prefixNS, convertSearchResultItem} from '../helpers';
import {FormControl, Button, getAppSetup, DataType,
    Dialog, ObjectWidgets} from 'cs-web-components-base';
import {ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import Immutable from 'immutable';
import Attachments from './Attachments';
import ReferenceObject from './ReferenceObject';
import {EXCLUDE_TOPIC_CLASSES} from '../constants';

export const Comment = (props) => (
    <Button.IconButton
        buttonStyle="success"
        size="sm"
        className={prefixNS('actions-comment')}
        title={formatStr('answer')}
        iconName="cs_activitystream_web_comment"
        {...props}/>
);

export class Share extends React.PureComponent {
    render() {
        const {activityEntry, ...others} = this.props;
        const shareLink = getAppSetup().getIn(
            ['cs-sharing-web-share_objects', 'objectsSharing']);
        const shareURL = shareLink.get('URL') + activityEntry.get('cdb_object_id');
        return (
            <Button.IconButton
                buttonStyle="primary"
                size="sm"
                title={shareLink.get('label')}
                iconName={shareLink.get('iconName')}
                className={prefixNS('actions-share')}
                {...others}
                href={shareURL}
                target="_blank"/>
        );
    }
}

Share.propTypes = {
    activityEntry: ImmutablePropTypes.map.isRequired
};

export class AssignAttachments extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showForm: false,
            entry: Immutable.Map(props.activityEntry)
        };
        this.showForm = this.showForm.bind(this);
        this.closeForm = this.closeForm.bind(this);
        this.submitForm = this.submitForm.bind(this);
        this.onSelectItem = this.onSelectItem.bind(this);
        this.onDeleteItem = this.onDeleteItem.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.activityEntry !== this.props.activityEntry) {
            this.setState({entry: Immutable.Map(nextProps.activityEntry)});
        }
    }

    showForm() {
        this.setState({
            showForm: true
        });
    }

    closeForm() {
        this.setState({
            showForm: false
        });
    }

    submitForm() {
        const {assignAttachments} = this.props;
        if (assignAttachments) {
            assignAttachments(
                this.state.entry.getIn(['attachments', 'attachments']));
        }
        this.closeForm();
    }

    onSelectItem(item) {
        const {entry} = this.state;
        const attachments = entry.getIn(
            ['attachments', 'attachments']);
        const found = attachments.find(
            sItem => sItem.get('cdb_object_id') === item.get('cdb_object_id'));
        if (!found) {
            const newAttchm = convertSearchResultItem(item);
            this.setState({
                entry: entry.setIn(
                    ['attachments', 'attachments'], attachments.push(newAttchm))
            });
        }
    }

    onDeleteItem(item) {
        const {entry} = this.state;
        const attachments = entry.getIn(
            ['attachments', 'attachments']);
        const idx = attachments.indexOf(item);
        if (idx > -1) {
            this.setState({
                entry: entry.setIn(
                    ['attachments', 'attachments'], attachments.delete(idx))
            });
        }
    }

    renderDialog() {
        const {entry} = this.state;
        const dlgClass = prefixNS('object-search-dialog');
        return (
            <Dialog.Dialog title={formatStr('assign-attachments')}
                           buttons={[<Dialog.Buttons.Select
                                        key="select"
                                        onClick={this.submitForm} />,
                                     <Dialog.Buttons.Cancel
                                         key="cancel"
                                         onClick={this.closeForm}/>]}
                           show={true}
                           showCancel={true}
                           onHide={this.closeForm}
                           dialogClassName={dlgClass}>
                <Attachments activityEntry={entry} onDelete={this.onDeleteItem}/>
                <ObjectWidgets.ObjectSearch
                    id={prefixNS('attachment-search')}
                    onSelectItem={this.onSelectItem}
                    searchPlaceholder={formatStr('search-object')}/>
            </Dialog.Dialog>
        );
    }

    render() {
        const {activityEntry, ...others} = this.props;
        if (!activityEntry.getIn(['attachments', 'addable'])) {
            return null;
        }
        delete others.assignAttachments;
        return (
            <div className={prefixNS('actions-assign-attachments')}>
                <Button.TextButton
                    label={formatStr('assign-attachments')}
                    onClick={this.showForm}
                    {...others} />
                {this.state.showForm ?
                    this.renderDialog() : null
                }
            </div>
        );
    }
}

AssignAttachments.propTypes = {
    activityEntry: ImmutablePropTypes.map.isRequired,
    assignAttachments: PropTypes.func
};

export class AssignTopics extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showForm: false,
            selected: Immutable.List()
        };
        this.showForm = this.showForm.bind(this);
        this.closeForm = this.closeForm.bind(this);
        this.submitForm = this.submitForm.bind(this);
        this.onSelectItem = this.onSelectItem.bind(this);
        this.onDeleteItem = this.onDeleteItem.bind(this);
    }

    showForm() {
        this.setState({
            showForm: true,
            selected: this.state.selected.clear()
        });
    }

    closeForm() {
        this.setState({
            showForm: false
        });
    }

    submitForm() {
        const {activityEntry, assignTopics} = this.props;
        const selected = this.state.selected.map(item => item.get('cdb_object_id'));
        const oldIDs = activityEntry.getIn(['topics', 'topics'])
            .map(item => item.get('cdb_object_id'));
        const newIDs = selected.filter(nid => !oldIDs.contains(nid));
        if (assignTopics) {
            assignTopics(newIDs);
        }
        this.closeForm();
    }

    onSelectItem(item) {
        const {selected} = this.state;
        const found = selected.find(
            sItem => sItem.get('cdb_object_id') === item.get('cdb_object_id'));
        if (!found) {
            this.setState({
                selected: selected.push(convertSearchResultItem(item))
            });
        }
    }

    onDeleteItem(item) {
        const {selected} = this.state;
        const idx = selected.indexOf(item);
        if (idx > -1) {
            this.setState({
                selected: selected.delete(idx)
            });
        }
    }

    renderDialog() {
        const dlgClass = prefixNS('object-search-dialog');
        const {selected} = this.state;
        return (
            <Dialog.Dialog title={formatStr('assign-topics')}
                           buttons={[<Dialog.Buttons.Select
                                        key="select"
                                        onClick={this.submitForm} />,
                                     <Dialog.Buttons.Cancel
                                         key="cancel"
                                         onClick={this.closeForm}/>]}
                           show={true}
                           showCancel={true}
                           onHide={this.closeForm}
                           dialogClassName={dlgClass}>
                {selected.map(item => (
                    <ReferenceObject
                        key={item.get('cdb_object_id')}
                        referenceObject={item}
                        onDelete={this.onDeleteItem}/>
                ))}
                <ObjectWidgets.ObjectSearch
                    id={prefixNS('topic-search')}
                    onSelectItem={this.onSelectItem}
                    searchPlaceholder={formatStr('search-object')}
                    excludeClasses={EXCLUDE_TOPIC_CLASSES.toArray()}/>
            </Dialog.Dialog>
        );
    }

    render() {
        const {...others} = this.props;
        delete others.activityEntry;
        delete others.assignTopics;
        return (
            <div className={prefixNS('actions-assign-topics')}>
                <Button.IconButton
                    buttonStyle="success"
                    size="sm"
                    title={formatStr('assign-topics')}
                    iconName="cs_activitystream_web_tags"
                    onClick={this.showForm}
                    {...others} />
                {this.state.showForm ?
                    this.renderDialog() : null
                }
            </div>
        );
    }
}

AssignTopics.propTypes = {
    activityEntry: ImmutablePropTypes.map.isRequired,
    assignTopics: PropTypes.func
};

export const SystemPostingFilter = ({filterState, onChange}) => (
    <div className={prefixNS('systemposting-filter')}>
        <FormControl.CheckBox
            checked={filterState !== 'off'}
            onChange={onChange}
            label={formatStr('systempostings')}
            name="systemPostingFilter"/>
    </div>
);

SystemPostingFilter.propTypes = {
    filterState: PropTypes.string,
    onChange: PropTypes.func
};

SystemPostingFilter.toggleFilterState = (prevState) =>
    prevState === 'off' ? undefined : 'off';

const CE_DATEFORMAT = 'DD.MM.YYYY';

export class DateFilter extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            dateFormat: getAppSetup().getIn(['formats', 'dateFormat'])
        };
    }

    ignoreInvalidDate() {
    }

    render() {
        const {onFilterChange, value, ...others} = this.props;
        return (
            <FormControl.Calendar
                {...others}
                name={prefixNS('date-filter')}
                value={value}
                allowExpression={true}
                dateConverter={DataType.CalendarSimpleConverter}
                dateOnlyFormat={this.state.dateFormat}
                displayFormat={this.state.dateFormat}
                valueFormat={CE_DATEFORMAT}
                onDateChange={onFilterChange}
                onInvalidInput={this.ignoreInvalidDate}
                placeholder={formatStr('filter_by_date')}/>
        );
    }
}

DateFilter.propTypes = {
    value: PropTypes.string,
    onFilterChange: PropTypes.func
};
