/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Subscriptions.jsx 168151 2017-11-09 14:47:33Z yzh $"
 */

import React from 'react';
import {prefixNS, filterChannels} from '../helpers';
import {Collapsible} from 'cs-web-components-base';
import {connect, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {fetchSubscriptions} from '../actions/actions';
import Channel from './Channel';

class Subscriptions extends React.Component {
    constructor(props) {
        super(props);
        this.renderEntries = this.renderEntries.bind(this);
    }

    componentDidMount() {
        this.props.fetchSubscriptions();
    }

    renderGroups() {
        const {subscriptions} = this.props;
        if (!subscriptions) {
            return null;
        }
        const groups = subscriptions.get('subscriptions');
        if (!groups) {
            return null;
        }
        return groups.map(this.renderEntries);
    }

    renderEntries(group) {
        const {currentTopic, location, filter} = this.props;
        let channels = group.get('subscriptions');
        if (!channels) {
            return null;
        }
        channels = filterChannels(channels, filter);
        const isActive = filter || channels.find(
            channel => channel.get('cdb_object_id') === currentTopic);
        const desc = group.get('description');
        return (
            <div className={prefixNS('subscriptions-group')}
                 key={desc}>
                <Collapsible
                    initialCollapsed={!isActive}
                    header={desc}>
                    {channels.map(channel => (
                        <Channel
                            key={channel.get('cdb_object_id')}
                            channel={channel}
                            currentTopic={currentTopic}
                            location={location}/>
                    ))}
                </Collapsible>
            </div>
        );
    }

    render() {
        return (
            <div className={prefixNS('subscriptions')}>
                {this.renderGroups()}
            </div>
        );
    }
}

Subscriptions.propTypes = {
    fetchSubscriptions: PropTypes.func,
    subscriptions: ImmutablePropTypes.map,
    currentTopic: PropTypes.string,
    location: PropTypes.object,
    filter: PropTypes.string
};

function mapStateToProps(state) {
    const subscriptions = state[componentNameSpace].subscriptions;
    return {subscriptions};
}

export default connect(mapStateToProps, {fetchSubscriptions})(Subscriptions);
