/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Channels.jsx 168151 2017-11-09 14:47:33Z yzh $"
 */

import React from 'react';
import {formatStr} from '../i18n';
import {prefixNS, filterChannels} from '../helpers';
import {Collapsible} from 'cs-web-components-base';
import {connect, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {fetchChannels} from '../actions/actions';
import Channel from './Channel';
import Immutable from 'immutable';

class Channels extends React.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            channels: this.getChannels(props)
        };
    }

    componentDidMount() {
        this.props.fetchChannels();
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.filter !== this.props.filter ||
            nextProps.channels !== this.props.channels) {
            this.setState({channels: this.getChannels(nextProps)});
        }
    }

    getChannels(props) {
        const {channels, filter} = props;
        let result = Immutable.OrderedSet();
        if (!channels) {
            return result;
        }
        const predefined = channels.get('predefined');
        if (predefined) {
            result = result.union(predefined);
        }
        const others = channels.get('channels');
        if (others) {
            result = result.union(others);
        }
        return filterChannels(result, filter);
    }

    renderPredefined() {
        const {channels} = this.props;
        if (!channels) {
            return null;
        }
        const predefined = channels.get('predefined');
        if (!predefined) {
            return null;
        }
        return predefined.map(channel => (
            <Channel
                key={channel.get('cdb_object_id')}
                channel={channel}/>
        ));
    }

    renderOthers() {
        const {channels} = this.props;
        if (!channels) {
            return null;
        }
        const others = channels.get('channels');
        if (!others) {
            return null;
        }
        return others.map(channel => (
            <Channel
                key={channel.get('cdb_object_id')}
                channel={channel}/>
        ));
    }

    render() {
        const {location, currentTopic, filter} = this.props;
        const {channels} = this.state;
        const isActive = filter || channels.find(
                channel => channel.get('cdb_object_id') === currentTopic);
        return (
            <div className={prefixNS('channels')}>
                <Collapsible initialCollapsed={!isActive}
                             header={formatStr('channels')}>
                    {channels.map(channel =>
                        <Channel
                            key={channel.get('cdb_object_id')}
                            channel={channel}
                            currentTopic={currentTopic}
                            location={location}/>
                    )}
                </Collapsible>
            </div>
        );
    }
}

Channels.propTypes = {
    channels: ImmutablePropTypes.map,
    fetchChannels: PropTypes.func,
    currentTopic: PropTypes.string,
    location: PropTypes.object,
    filter: PropTypes.string
};

function mapStateToProps(state) {
    const channels = state[componentNameSpace].channels;
    return {channels};
}

export default connect(mapStateToProps, {fetchChannels})(Channels);
