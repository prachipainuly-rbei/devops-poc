#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
Module posting_updater

This is the documentation for the posting_updater module.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: posting_updater.py 141428 2016-05-25 08:18:41Z pko $"


from cdb import misc

from cdb import sig
from cdb import rte
from cdb.platform import mom
from cdb.storage.index.object_updater import ObjectUpdater
from cdb.storage.index import errors
from cdb.storage.index import updaters
from cs.activitystream.objects import Comment
from cs.activitystream.objects import Posting

__all__ = ["PostingUpdater", "CommentUpdater"]


class PostingUpdater(ObjectUpdater):
    """ Update Enterprise-Search index for postings.
        The updater append the indexable comment attributes.
    """

    def _collect_attributes(self):
        # Retrieve the posting
        posting = Posting.ByKeys(self._cdb_object_id)
        if posting:
            # Call super's method to collect the posting's attributes if posting has to index:
            if posting.GetClassDef().is_indexed():
                super(PostingUpdater, self)._collect_attributes()
            # iterate the comments
            for comment in posting.AllComments:
                object_handle = mom.getObjectHandleFromObjectID(comment.cdb_object_id, True)
                if not object_handle:
                    msg = "No object found for cdb_object_id %s" % comment.cdb_object_id
                    raise errors.ObjectNotFound(msg, self._job_id, comment.cdb_object_id)
                cdef = object_handle.getClassDef()
                if cdef.is_indexed():
                    for att in self._search_engine.get_attributes_to_index(cdef.getClassname()):
                        self._add_field(att.ranking_fac, object_handle[att.field_name])


class CommentUpdater(PostingUpdater):
    """ Class to update comment data in the fulltext index.
    """

    def __init__(self, job_id, cdb_object_id, is_deleted):
        """ Ctor. See the base class for the meaning of the
            parameters.
            Create a new index job to update a posting which includes the comment.
        """
        misc.log(5, "CommentUpdater: Creating CommentUpdater for %s" % cdb_object_id)
        self._comment_id = None
        comment = Comment.ByKeys(cdb_object_id)
        if not is_deleted:
            if comment:
                # We reset the cdb_object_id to the object *owning*
                # the given comment object. TES will then write the
                # correct relationship to the index:
                cdb_object_id = comment.posting_id
            else:
                msg = "CommentUpdater: Can't find cdbblog_comment %s. Considering object deleted" % cdb_object_id
                misc.log_error(msg)
                is_deleted = True
        else:
            if comment:
                cdb_object_id = comment.posting_id
                is_deleted = False  # Update posting
        super(CommentUpdater, self).__init__(job_id, cdb_object_id, is_deleted)


@sig.connect(rte.APPLICATIONS_LOADED_HOOK)
def _add_updater_to_index():
    """
    The Index Updater Methods need to be added on startup.
    """
    iuf = updaters.IndexUpdaterFactory()
    iuf.add_updater("cdbblog_comment", CommentUpdater)
    iuf.add_updater("cdbblog_posting", PostingUpdater)
