import time
from cdb import auth
from webtest import TestApp as Client

from cdb.testcase import RollbackTestCase
from cs.platform.web.root import Root

from cdb.constants import kOperationNew
from cdb.objects.operations import operation
from cs.activitystream.objects import Posting
from cs.activitystream.objects import UserPosting
from cs.activitystream.objects import SystemPosting
from cs.activitystream.objects import Channel
from cs.activitystream.objects import Topic2Posting
from cs.activitystream.objects import Subscription
from cdb.objects.cdb_file import CDB_File

from cs.activitystreamtest import DummyWithActivityStream


class TestActivitystream(RollbackTestCase):
    def setUp(self):
        super(TestActivitystream, self).setUp()
        app = Root()
        self.client = Client(app)

    def test_create_posting(self):
        text_posting = 'foo'
        nr_postings = len(Posting.Query())
        response = self.client.post_json(
            '/internal/activitystream/posting/', {'text': text_posting})
        new_posting = response.json
        self.assertEquals(new_posting.get('text'), text_posting)
        self.assertEquals(len(Posting.Query()), 1 + nr_postings)
        self.assertEqual(new_posting.get('comments').get('comments'), [])

    def test_create_lots_of_postings(self):
        text_posting = 'foo'
        nr_postings = len(Posting.Query())
        nr_new_postings = 15
        for i in range(nr_new_postings):
            response = self.client.post_json(
                '/internal/activitystream/posting/',
                {'text': '%s %s' % (text_posting, unicode(i).zfill(2))})
        self.assertEquals(len(Posting.Query()), nr_new_postings + nr_postings)

    def test_create_reply(self):
        text_posting = 'foo'
        text_comment = 'Comment!'
        text_reply = 'Reply!'
        # create a posting
        response = self.client.post_json(
            '/internal/activitystream/posting/', {'text': text_posting})
        posting = response.json
        # create a comment
        response = self.client.post_json('%s/comment/' % posting['@id'],
                                         {'text': text_comment})
        # comment = response.json
        response = self.client.get(posting['@id'])
        comments = response.json.get('comments').get('comments')
        self.assertEquals(len(comments), 1)
        comment = comments[0]
        # reply to that comment
        self.client.post_json('%s' % comment['@id'],
                             {'text': text_reply})
        new_comment_list = self.client.get('%s/comment/' % posting['@id']).json['comments']
        new_reply_list = [c for c in new_comment_list if c['text'] == text_reply]
        self.assertEquals(len(new_reply_list), 1)
        reply = new_reply_list[0]
        self.assertEquals(reply['posting_id'], posting['@id'])
        self.assertEquals(reply['reply_to'], comment['@id'])

    def test_create_comment(self):
        text_posting = 'foo'
        text_comment = 'Comment!'
        response = self.client.post_json(
            '/internal/activitystream/posting/', {'text': text_posting})
        posting = response.json
        # create a comment
        response = self.client.post_json('%s/comment/' % posting['@id'],
                                         {'text': text_comment})
        # comment = response.json
        response = self.client.get(posting['@id'])
        comments = response.json.get('comments').get('comments')
        self.assertEquals(len(comments), 1)
        comment = comments[0]
        self.assertEquals(comment.get('text'), text_comment)

    def test_create_topic(self):
        text_posting = 'foo'
        text_channel = 'foo'
        channel = DummyWithActivityStream.Create(title="text_channel")
        topic_id = channel.cdb_object_id
        response = self.client.post_json(
            '/internal/activitystream/posting/', {'text': text_posting})
        posting = response.json
        prev_topics = response.json.get('topics').get('topics')
        response = self.client.post_json('%s/topic/' % posting['@id'],
                                         {'topic_ids': [topic_id]})
        topics = self.client.get(posting['@id']).json.get('topics').get('topics')
        system_posting = operation(
                                   kOperationNew,
                                   SystemPosting,
                                   **{"title_de": "foo", "context_object_id": topic_id})
        self.assertEquals(len(topics) - len(prev_topics), 1)
        self.assertEquals(topics[-1].get('description'), channel.GetDescription())
        self.assertEquals(len(self.client.get(
            '/internal/activitystream/topic/%s' % topic_id).json.get('postings')), 2)
        self.assertEquals(len(self.client.get(
            '/internal/activitystream/topic/%s?systemposting=off' % topic_id).json.get('postings')), 1)

    def test_create_topic_posting(self):
        text_posting = 'foo'
        text_channel = 'foo'
        channel = operation(kOperationNew, Channel, **{'title': text_channel})
        topic_id = channel.cdb_object_id
        response = self.client.post_json(
            '/internal/activitystream/topic/%s' % topic_id, {'text': text_posting})
        response = self.client.get('/internal/activitystream/topic/%s' % topic_id)
        postings = response.json.get('postings')
        new_posting_list = [p for p in postings if p['text'] == text_posting]
        self.assertEquals(len(new_posting_list), 1)

    def test_systemposting_filter(self):
        text_posting = 'foo'
        nr_new_postings = 20
        for i in range(nr_new_postings):
            response = self.client.post_json(
                '/internal/activitystream/posting/',
                {'text': '%s %s' % (text_posting, unicode(i).zfill(2))})
        time.sleep(1)
        sys_posting = operation(kOperationNew, SystemPosting, title_de=u'foo')
        dummy_foo = DummyWithActivityStream.Create(title="foo1")
        Topic2Posting.Create(posting_id=sys_posting.cdb_object_id, topic_id=dummy_foo.cdb_object_id)
        Subscription.Create(channel_cdb_object_id=dummy_foo.cdb_object_id, personalnummer=auth.persno)
        all_postings = self.client.get('/internal/activitystream/posting').json.get('postings')
        no_system_postings = self.client.get('/internal/activitystream/posting?systemposting=off').json.get('postings')
        diffs = [p for p in all_postings if p not in no_system_postings]
        self.assertEquals(len(diffs), 1)
        self.assertEquals(
            self.client.get('/internal/activitystream/posting?systemposting=on').json.get('postings'),
            all_postings)
        self.assertEquals(
            self.client.get('/internal/activitystream/posting?systemposting=').json.get('postings'),
            all_postings)
        self.assertEquals(
            self.client.get('/internal/activitystream/posting?systemposting=qqq').json.get('postings'),
            all_postings)

    def test_batch_loading_of_postings(self):
        text_posting = 'foo'
        nr_new_postings = 20
        for i in range(nr_new_postings):
            response = self.client.post_json(
                '/internal/activitystream/posting/',
                {'text': '%s %s' % (text_posting, unicode(i).zfill(2))})
        all_postings = self.client.get('/internal/activitystream/posting').json.get('postings')
        all_postings_ids = [p["@id"].split("/")[-1] for p in all_postings]
        postings_batch = self.client.get('/internal/activitystream/posting?posting_count=5').json.get('postings')
        postings_batch_ids = [p["@id"].split("/")[-1] for p in postings_batch]
        self.assertEquals(postings_batch_ids, all_postings_ids[0:5])
        last_comment_date = postings_batch[-1]["last_comment_date"]
        last_object_id = postings_batch_ids[-1]
        postings_batch = self.client.get(
            '/internal/activitystream/posting?posting_count=5&last_comment_date=%s&last_object_id=%s' %
            (last_comment_date, last_object_id)).json.get('postings')
        postings_batch_ids = [p["@id"].split("/")[-1] for p in postings_batch]
        self.assertEquals(postings_batch_ids, all_postings_ids[5:10])
        last_comment_date = postings_batch[-1]["last_comment_date"]
        last_object_id = postings_batch_ids[-1]
        postings_batch = self.client.get(
            '/internal/activitystream/posting?posting_count=5&last_comment_date=%s&last_object_id=%s' %
            (last_comment_date, last_object_id)).json.get('postings')
        postings_batch_ids = [p["@id"].split("/")[-1] for p in postings_batch]
        self.assertEquals(postings_batch_ids, all_postings_ids[10:15])

    def test_load_postings_since(self):
        text_posting = 'foo'
        nr_postings = len(Posting.Query())
        nr_new_postings = 5
        new_postings = []
        for i in range(nr_new_postings):
            response = self.client.post_json(
                '/internal/activitystream/posting/',
                {'text': '%s %s' % (text_posting, unicode(i).zfill(2))})
            new_postings.append(response.json)
            time.sleep(1)
        self.assertEquals(len(Posting.Query()), nr_new_postings + nr_postings)
        since1 = self.client.get(
            '/internal/activitystream/posting?since=%s' %
            (new_postings[0].get('last_comment_date'))).json.get('postings')
        self.assertEquals(len(since1), nr_new_postings - 1)
        since3 = self.client.get(
            '/internal/activitystream/posting?since=%s' %
            (new_postings[2].get('last_comment_date'))).json.get('postings')
        self.assertEquals(len(since3), nr_new_postings - 3)
        since5 = self.client.get(
            '/internal/activitystream/posting?since=%s' %
            (new_postings[4].get('last_comment_date'))).json.get('postings')
        self.assertEquals(len(since5), nr_new_postings - 5)

    def test_create_attachment(self):
        text_posting = 'foo'
        text_obj = 'foo'
        attachment = DummyWithActivityStream.Create(title="text_attachment")
        obj_id = attachment.cdb_object_id
        response = self.client.post_json(
            '/internal/activitystream/posting/', {'text': text_posting})
        posting = response.json
        attachments = posting.get('attachments').get('attachments')
        self.assertEqual(len(attachments), 0)
        response = self.client.post_json('%s/attachment/' % posting['@id'],
                                         {'attachment_ids': [obj_id]})
        attachments = response.json.get('attachments')
        self.assertEquals(len(attachments), 1)
        self.assertEquals(attachments[0].get('description'), attachment.GetDescription())
        response = self.client.get(posting['@id'])
        attachments = response.json.get('attachments').get('attachments')
        self.assertEqual(len(attachments), 1)

    def test_posting_with_files(self):
        text_posting = 'foo'
        response = self.client.post_json(
            '/internal/activitystream/posting/', {'text': text_posting})
        posting = response.json
        files = posting.get('relship:files')['targets']
        self.assertEqual(len(files), 0)
        frec = CDB_File.Create(cdbf_object_id=posting.get("cdb_object_id"),
                               cdbf_name="foo_file",
                               cdbf_type="text/plain")
        response = self.client.get(posting['@id'])
        posting = response.json
        files = posting.get('relship:files')['targets']
        self.assertEqual(len(files), 1, posting)

    def test_comment_with_files(self):
        text_posting = 'foo'
        response = self.client.post_json(
            '/internal/activitystream/posting/', {'text': text_posting})
        posting = response.json
        text_comment = 'Comment!'
        response = self.client.post_json('%s/comment/' % posting['@id'],
                                         {'text': text_comment})
        response = self.client.get(posting['@id'])
        comments = response.json.get('comments').get('comments')
        self.assertEquals(len(comments), 1)
        comment = comments[0]
        files = comment.get('relship:files')['targets']
        self.assertEqual(len(files), 0)
        frec = CDB_File.Create(cdbf_object_id=comment.get("cdb_object_id"),
                               cdbf_name="foo_file",
                               cdbf_type="text/plain")
        response = self.client.get(comment['@id'])
        comment = response.json
        files = comment.get('relship:files')['targets']
        self.assertEqual(len(files), 1)
