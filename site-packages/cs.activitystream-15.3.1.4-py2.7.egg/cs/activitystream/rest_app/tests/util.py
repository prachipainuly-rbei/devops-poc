#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: util.py 146365 2016-09-14 15:20:23Z yzh $"


import random
from cdb import misc, dberrors
from cdb.objects import org
from cdb.objects import cdb_file
from cdb.constants import kOperationNew
from cdb.objects.operations import operation
from cs.activitystream.objects import UserPosting
from cs.activitystream.attachment import Attachment
from cs.activitystream.objects import Channel
from cs.activitystream.objects import Topic2Posting
from cs.activitystream.objects import Comment
from cs.activitystream.objects import Subscription
from cs.activitystreamtest import DummyWithActivityStream


def _log(msg):
    misc.cdblogv(misc.kLogMsg, 0, "\n*** %s\n" % msg)
    print msg


def get_default_user_attrs():
    someorg = org.Organization.Query()[0]
    orgname = someorg.name
    calendar_profile_id = "1cb4cf41-0f40-11df-a6f9-9435b380e702"

    return {
        "active_account": 1,
        "password_rule": "Unsafe",
        "force_pwdchange": 0,
        "orgname": orgname,
        "org_id": someorg.org_id,
        "calendar_profile_id": calendar_profile_id,
        "abt_nummer": "IT"
    }


def gen_user(cnt):
    attrs = get_default_user_attrs()
    done = 0
    for i in range(cnt):
        username = "as_test_user_%d" % i
        attrs.update(personalnummer=username,
                     lastname=username,
                     login=username)
        try:
            user = org.User.Create(**attrs)
            org.CommonRoleSubject.Create(
                role_id="public",
                subject_id=username,
                subject_type="Person",
                exception_id="",
                cdb_classname="cdb_global_subject")
            # assume that each person has one photo
            cdb_file.CDB_File.Create(cdbf_object_id=user.cdb_object_id,
                                     cdbf_name=username)
            done += 1
        except dberrors.DBConstraintViolation:
            pass  # data apparently exists already. which is fine.
    _log("created user #%d" % done)


def gen_channel(cnt):
    attrs = Channel.MakeChangeControlAttributes()
    for i in range(cnt):
        title = "as_test_channel_%d" % i
        attrs.update(title_de=title, title_en=title)
        Channel.Create(**attrs)
    _log("created channel #%d" % cnt)


def gen_attachments(cnt):
    attrs = DummyWithActivityStream.MakeChangeControlAttributes()
    for i in range(cnt):
        title = "as_test_attachment_%d" % i
        attrs.update(title=title)
        DummyWithActivityStream.Create(**attrs)
    _log("created attachments #%d" % cnt)


TEXT = u"""Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt
ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et
ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor
sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam
erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet."""


def gen_postings(cnt):
    pers_ids = org.User.Query().personalnummer
    topic_ids = Channel.Query().cdb_object_id
    attach_ids = DummyWithActivityStream.Query().cdb_object_id
    for i in range(cnt):
        attrs = UserPosting.MakeChangeControlAttributes()
        attrs.update(cdbblog_posting_txt=TEXT)
        # choose random author
        author = random.choice(pers_ids)
        attrs.update(cdb_cpersno=author, cdb_mpersno=author)
        topics = random.sample(topic_ids, 3)
        # 1/2 of postings have context object
        if i % 2 == 1:
            attrs.update(context_object_id=topics[0])
        posting = operation(kOperationNew, UserPosting, **attrs)
        # 1/3 of postings have 2 topics
        if i % 3 == 1:
            add_topics(posting.cdb_object_id, topics[1:])
        # 1/4 of postings have 2 random attachments
        if i % 4 == 1:
            add_attachments(posting.cdb_object_id, random.sample(attach_ids, 2))
        # each posting has 4 comments: 2 comments to posting, 2 comment to comment
        last = None
        for c in range(2):
            last = gen_comment(random.choice(pers_ids), posting.cdb_object_id)
        for c in range(2):
            last = gen_comment(random.choice(pers_ids), posting.cdb_object_id, last.cdb_object_id)
    _log("created postings #%d" % cnt)


def add_topics(posting_id, topics):
    for topic in topics:
        Topic2Posting.createMapping(posting_id, topic)


def add_attachments(entry_id, attachs):
    for attach in attachs:
        Attachment.addAttachment(entry_id, attach)


def gen_comment(author, posting_id, reply_to=None):
    attrs = Comment.MakeChangeControlAttributes()
    attrs.update(cdb_cpersno=author, cdb_mpersno=author)
    attrs.update(cdbblog_comment_txt=TEXT, posting_id=posting_id, in_reply_to=reply_to)
    return operation(kOperationNew, Comment, **attrs)


def subscribe_all():
    all_chs = Channel.Query().cdb_object_id + DummyWithActivityStream.Query().cdb_object_id
    for ch in all_chs:
        Subscription.subscribeToChannel(ch)
