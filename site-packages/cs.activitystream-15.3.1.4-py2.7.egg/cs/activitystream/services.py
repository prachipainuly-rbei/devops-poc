#!/usr/bin/env powerscript
# coding: utf-8
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
AS Services

"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: services.py 148620 2016-10-31 14:37:32Z cso $"

import os
import sched
import time
from cdb import CADDOK
from cdb import misc
from cdb import rte
from cdb import sqlapi
from cdb.objects.org import User
from cdb.plattools import killableprocess
from cs.activitystream.daily_mails import DAILY_AS_SETTING


SVCNAME = "AS Daily Mailer"
_DAY_SECONDS = 86400
scheduler = sched.scheduler(time.time, time.sleep)
update_clocks = None


def seconds_to(starting_time):
    """Returns the number of seconds between the current time starting_time."""
    st = time.strptime(starting_time, "%H:%M")
    st_seconds = st.tm_min * 60 + st.tm_hour * 3600

    lt = time.localtime()
    current_seconds = (lt.tm_hour * 3600 + lt.tm_min * 60 + lt.tm_sec)

    if st_seconds > current_seconds:
        result = st_seconds - current_seconds
    else:
        result = _DAY_SECONDS + st_seconds - current_seconds

    return result


def sendDailyMails():

    def sendToPerson(user):
        if user.getSettingValue(DAILY_AS_SETTING) != "1":
            misc.cdblogv(
                misc.kLogMsg, 1,
                "user '%s' does not want daily AS mails" % user.personalnummer)
            return
        try:
            args = [
                rte.runtime_tool("powerscript"),
                "--user=%s" % user.login,
                "--language=%s" % user.GetPreferredLanguage(),
                os.path.join(os.path.dirname(__file__), "daily_mails.py")]

            sender = CADDOK.get("DAILY_AS_MAIL_SENDER", None)
            if sender:
                args.append("--sender=%s" % sender)

            killableprocess.check_call(args)

        except Exception, e:
            misc.log_traceback(
                "Failed to send daily activities to '%s'" % user.personalnummer)

    # no interface to filter by user settings, so iterate over all users
    users = User.Query("e_mail>'' AND active_account='1' AND visibility_flag=1")

    for user in users:
        sendToPerson(user)


def run_loop(starting_time):
    while True:
        try:
            scheduler.enter(seconds_to(starting_time), 1, sendDailyMails, [])
            scheduler.run()
        except Exception as exc:
            misc.log_traceback(SVCNAME)
        except KeyboardInterrupt:
            misc.cdblogv(misc.kLogMsg, 0, "%s shutting down" % SVCNAME)
            return


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description="Activity Stream Daily Mailer")
    parser.add_argument("-s", "--start", dest="starting_time",
                        action="store", default="00:00",
                        help="when to send daily e-mails (format %H:%M)")

    args = parser.parse_args()
    misc.cdblogv(misc.kLogMsg, 2, "%s: running daily @ %s" % (
        SVCNAME, args.starting_time))
    run_loop(args.starting_time)
