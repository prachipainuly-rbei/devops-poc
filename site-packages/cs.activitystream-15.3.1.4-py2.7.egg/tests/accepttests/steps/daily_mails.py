#!/usr/bin/env python
# coding: utf-8
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

import datetime
from bs4 import BeautifulSoup
from bs4 import SoupStrainer
from cdb import sqlapi
from cdb import ue
from cdb.objects.blog import Channel
from cdb.objects.blog import Comment
from cdb.objects.blog import Subscription
from cdb.objects.blog import UserPosting
from cdb.validationkit import given
from cdb.validationkit import operation
from cdb.validationkit import then
from cdb.validationkit import when
from common import createUserPosting
from common import getNewest
from cs.activitystream.daily_mails import DailyMailer
from cs.sharing import Sharing


DATES = {
    "today": datetime.datetime.today(),
    # since some time will pass between setting and actually checking the dates, subtract one hour
    "yesterday": datetime.datetime.today() - datetime.timedelta(hours=23),
    "two days ago": datetime.datetime.today() - datetime.timedelta(hours=47),
    }


def getContextObject(context, this_object):
    object_attr = this_object.lower().replace("post", "posting").replace(" ", "_")
    obj = getattr(context, object_attr)
    obj.Reload()
    return obj


@given("^no postings and comments exist$")
def step(context):
    UserPosting.KeywordQuery(cdb_cpersno=context.user.personalnummer).Delete()
    Comment.KeywordQuery(cdb_cpersno=context.user.personalnummer).Delete()


@given(u"^user sets setting '(?P<setting_id>.*)' to '(?P<value>.*)'$")
def step(context, setting_id, value):
    tbl = "cdb_usr_setting"
    existing = sqlapi.RecordSet2(
        tbl,
        "personalnummer='%s' AND setting_id='%s'" % (
            sqlapi.quote(context.user.personalnummer),
            sqlapi.quote(setting_id)))
    if existing:
        [e.update(value=value) for e in existing]
    else:
        sqlapi.Record(tbl,
                      personalnummer=context.user.personalnummer,
                      setting_id=setting_id,
                      value=value,
                      setting_id2="",
                      cdb_classname=tbl).insert()


@given(u'^the (?P<post>.*) is from (?P<parsed_date>two days ago|yesterday|today)$')
def step_impl(context, post, parsed_date):
    if post == "comment":
        context.comment.Update(cdb_cdate=DATES[parsed_date])
        context.posting.Update(last_comment_date=max(
            context.posting.last_comment_date, DATES[parsed_date]))
    else:
        posting = getContextObject(context, post)
        posting.Update(last_comment_date=DATES[parsed_date])


@when(u'^daily activities are sent$')
def step_impl(context):
    try:
        context.mailer = DailyMailer(persno=context.user.personalnummer)
    except ue.Exception, uexc:
        context.exception = uexc
    else:
        context.mailer.sendNotification(test=True)


@then(u'^user does not get an email$')
def step(context):
    if hasattr(context, "mailer"):
        assert not hasattr(context.mailer, "html"), "user got an email"


@given(u'^user has an email address$')
def step(context):
    context.user.Update(e_mail="behave_test@contact.de")


@then(u'^user gets an email with (?P<posts>[0-9]+) posts '
       'and (?P<comments>[0-9]+) comments$')
def step_impl(context, posts, comments):
    assert hasattr(context.mailer, "html"), "user did not get an email"
    soup = BeautifulSoup(context.mailer.html, "lxml")

    actual_posts = (
        len(soup.findAll(attrs={"class": "cdbblog_user_posting"})) +
        len(soup.findAll(attrs={"class": "cdbblog_system_posting"})))
    actual_comments = len(soup.findAll(attrs={"class": "cdbblog_comment"}))

    assert int(posts) == actual_posts and int(comments) == actual_comments, (
        "expected: %s posts, %s comments, found %s posts, %s comments"
        % (posts, comments, actual_posts, actual_comments))


@given(u'^a post exists in channel (?P<channel>.*)$')
def step(context, channel):
    channel_obj = Channel.Create(
        cdb_object_id=channel,
        title_de="Test %s" % channel,
        title_en="test %s" % channel,
        )
    setattr(context, "channel_%s" % channel.lower(), channel_obj)

    response = createUserPosting(
        context,
        text="A post in channel %s" % channel,
        topicId=channel)

    try:
        posting = UserPosting.ByKeys(response.json()["cdb_object_id"])
    except ValueError:
        posting = getNewest(UserPosting.KeywordQuery(
            cdb_cpersno=context.user.personalnummer))

    posting.Update(context_object_id=channel)
    posting.addTopic(channel)  # topicId in request is not working

    setattr(context, "posting_in_channel_%s" % channel.lower(), posting)


@given(u'^user is subscribed to (?P<channel>.*)$')
def step(context, channel):
    result = operation("CDB_SubscribeToChannel", getContextObject(context, channel))


@then(u'^user gets an email with (?P<posts>[0-9]+) posts '
       'in channel (?P<channel>.*)$')
def step_impl(context, posts, channel):
    assert hasattr(context.mailer, "html"), "user did not get an email"
    soup = BeautifulSoup(context.mailer.html, "lxml")

    actual_posts = filter(
        lambda x: x.pre.string == "A post in channel %s" % channel,
        (soup.findAll(attrs={"class": "cdbblog_user_posting"}) +
         soup.findAll(attrs={"class": "cdbblog_system_posting"})))

    assert int(posts) == len(actual_posts), (
        "expected: %s posts in channel %s, found %s"
        % (posts, channel, len(actual_posts)))


@given(u'^(?P<user>.*) shared something (?P<parsed_date>.*)$')
def step(context, user, parsed_date):
    user_persno = user if user != "user" else context.user.personalnummer
    sharing = Sharing.createFromObjects(
        objects=[],
        subjects=[],
        text="Test sharing by %s" % user_persno)

    upd_vals = {
        "cdb_cpersno": user_persno,
        "cdb_cdate": DATES[parsed_date],
        "last_comment_date": DATES[parsed_date]}
    sharing.Update(cdb_cpersno=user_persno, cdb_cdate=DATES[parsed_date])
    sharing.Posting.Update(
        cdb_cpersno=user_persno,
        cdb_cdate=DATES[parsed_date],
        last_comment_date=DATES[parsed_date])


@then(u'^user gets an email with (?P<sharings>[0-9]+) sharings$')
def step_impl(context, sharings):
    assert hasattr(context.mailer, "html"), "user did not get an email"
    soup = BeautifulSoup(
        context.mailer.html,
        "lxml",
        parse_only=SoupStrainer(attrs={"class": "cdbblog_user_posting"}))
    actual_sharings = soup.findChildren(name="span", text="Shared")

    assert int(sharings) == len(actual_sharings), (
        "expected: %s sharings, found %s" % (sharings, len(actual_sharings)))
