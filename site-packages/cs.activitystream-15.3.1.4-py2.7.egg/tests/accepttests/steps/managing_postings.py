#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

import time
from cdb.validationkit import given, when, then, operation
from cdb.objects.blog import UserPosting, Comment
from cdb import auth

from common import createUserPosting, get_server_url, \
    addCommentToPosting, addCommentToComment, getNewest

import requests
from cdb.validationkit.SwitchRoles import run_with_added_roles


# -------------------------------------------------------------
# Background: user is logged in the web-client
#
# -------------------------------------------------------------
@given("^user is logged in the web-client$")
@run_with_added_roles(["Administrator"])
def step(context):
    context.server_url = get_server_url()
    context.app_url = context.server_url + \
        "internal/activitystream/"
    context.userposting_len = len(UserPosting.Query())
    r = requests.post(context.server_url + "login",
                      data={"username": auth.persno,
                            "password": "",
                            "language": "D"})
    context.cookies = r.cookies


@given("^no postings and comments for the logged in user exist$")
def step(context):
    postings = UserPosting.KeywordQuery(cdb_cpersno=auth.get_attribute("personalnummer"))
    for posting in postings:
        posting.Delete()
    comments = Comment.KeywordQuery(cdb_cpersno=auth.get_attribute("personalnummer"))
    for comment in comments:
        comment.Delete()


# -------------------------------------------------------------
# Scenario User creates a new post at the Activity-Stream
#
# -------------------------------------------------------------
@when("^user creates a new post$")
def step(context):
    context.userposting_len = len(UserPosting.Query())
    createUserPosting(context)


@then("^a new post exist$")
def step(context):
    assert len(UserPosting.Query()) - context.userposting_len == 1


# -------------------------------------------------------------
# Screnario User comments to a post
#
# -------------------------------------------------------------
@given("^a post exist$")
def step(context):
    context.comment_len = len(Comment.Query())
    createUserPosting(context)


@when("^user comments to the post$")
def step(context):
    posting = getNewest(UserPosting.Query())
    context.new_posting = posting
    context.last_comment_date = posting.last_comment_date
    time.sleep(2)
    addCommentToPosting(context, posting.cdb_object_id)


@then("^a new comment exist$")
def step(context):
    assert len(Comment.Query()) - context.comment_len == 1


@then("^the last_comment_date-attribute is updated$")
def step(context):  # TODO: check for update, not for equal ids
    posting = UserPosting.ByKeys(context.new_posting.cdb_object_id)
    posting.Reload()
    assert not context.last_comment_date == posting.last_comment_date


# -------------------------------------------------------------
# Scenario: User comments to a comment
#
# -------------------------------------------------------------
@given("^post and comment exist$")
def step(context):
    createUserPosting(context)
    context.posting = getNewest(UserPosting.Query())

    addCommentToPosting(context, context.posting.cdb_object_id)
    context.comment = getNewest(Comment.Query())


@when("^user comments to the comment$")
def step(context):
    prev = set(Comment.KeywordQuery(posting_id=context.posting.cdb_object_id))
    addCommentToComment(
        context, context.posting.cdb_object_id, context.comment.cdb_object_id)
    curr = set(Comment.KeywordQuery(posting_id=context.posting.cdb_object_id))
    context.commentComment = (curr - prev).pop()


@then("^the comment stands in relation to other comment and post$")
def step(context):
    assert context.posting.cdb_object_id == context.commentComment.posting_id
    assert context.comment.cdb_object_id == context.commentComment.in_reply_to
