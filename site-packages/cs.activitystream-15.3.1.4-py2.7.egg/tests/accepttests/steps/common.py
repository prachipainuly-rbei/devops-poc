#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

import json
import requests
from cdb import testcase


def get_server_url():
    """Returns the url under which extern (and intern) users can access the portal"""
    srv = testcase.require_service("cdb.uberserver.services.apache.Apache")
    return srv.get_url(withuserandpass=False)


def createUserPosting(context, text="A post", topicId=None):
    """
    creates a new userpost onto the activity-stream, returns request

    :parameters:
        context: given by Validation-Kit, saves cookies...
        text: text you want to have in the posting, default "A post"
    """
    if topicId:
        data = {"cdb_classname": "cdbblog_user_posting",
                "text": text,
                "topicId": topicId}
    else:
        data = {"cdb_classname": "cdbblog_user_posting",
                "text": text}
    r = requests.post(context.app_url + "posting",
                      data=json.dumps(data),
                      cookies=context.cookies,
                      headers=testcase.build_csrf_header(context.cookies))
    return r


def addCommentToPosting(context, postingId, text="A comment"):
    """
    adds a new usercomment onto the activity-stream, returns request

    :parameters:
        context: given by Validation-Kit, saves cookies...
        postingId: cdb_object_id of the original post
        text: text: text you want to have in the posting, default "A comment"
    """
    r = requests.post(context.app_url + "posting/%s/comment" % postingId,
                      data=json.dumps({"text": text}),
                      cookies=context.cookies,
                      headers=testcase.build_csrf_header(context.cookies))
    return r


def addCommentToComment(context, postingId, commentId, text="A comment"):
    """
    adds a new usercomment onto the activity-stream, returns request

    :parameters:
        context: given by Validation-Kit, saves cookies...
        postingId: cdb_object_id of the original post
        commentId: cdb_object_id of the original comment
        text: text: text you want to have in the posting, default "A comment"
    """
    r = requests.post(context.app_url + "posting/%s/comment/%s" % (
                        postingId, commentId),
                      data=json.dumps({"text": text}),
                      cookies=context.cookies,
                      headers=testcase.build_csrf_header(context.cookies))
    return r


def getNewest(things):
    """
    returns the newest post/comment out of the given list. Throws AttributeError,
    if objects in list have no attribute 'cdb_cdate'.

    :parameters:
        things: list of post/comment-objects
    """
    newest = None
    for thing in things:
        if newest != None:
            if newest.cdb_cdate < thing.cdb_cdate:
                newest = thing
        else:
            newest = thing
    return newest
