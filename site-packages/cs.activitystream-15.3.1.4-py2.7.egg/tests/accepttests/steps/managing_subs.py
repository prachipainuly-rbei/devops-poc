#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import given, when, then, operation, run_with_added_roles
from cdb.objects.blog import Channel, Subscription


# -------------------------------------------------------------
# Scenario: User subscribes to a channel
#
# -------------------------------------------------------------
@given("^a channel exists$")
@run_with_added_roles(["Administrator"])
def step(context):
    context.channel = operation("CDB_Create", Channel, user_input={"title_de": "Test", "title_en": "test"})


@when("^user subscribes to this channel$")
def step(context):
    context.subLen = len(Subscription.Query())
    operation("CDB_SubscribeToChannel", context.channel)


@then("^a new subscription exist$")
def step(context):
    assert len(Subscription.Query()) - context.subLen == 1


# -------------------------------------------------------------
# Scenario: User unsubscribes a channel
#
# -------------------------------------------------------------
@given("^another channel exists$")
@run_with_added_roles(["Administrator"])
def step(context):
    context.channel = operation("CDB_Create", Channel, user_input={"title_de": "Test", "title_en": "test"})


@given("^user subscribes to the channel$")
def step(context):
    operation("CDB_SubscribeToChannel", context.channel)
    context.subLen = len(Subscription.Query())


@when("^user unsubscribes the channel$")
def step(context):
    operation("CDB_UnsubscribeFromChannel", context.channel)


@then("^the subscription will be deleted$")
def step(context):
    assert len(Subscription.Query()) - context.subLen == -1
