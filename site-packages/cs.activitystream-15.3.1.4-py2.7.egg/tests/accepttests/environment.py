#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbHfor behave
# All rights reserved.
# http://www.contact.de/
#

import sys
import cdbwrapc
from cdb import util, sqlapi
from cdb.objects import org
from cdb.validationkit import generateUser
from cdb.uberserver import usutil
from cdb.uberserver.management import Management
from cdb.plattools import killableprocess


__docformat__ = "restructuredtext en"
__revision__ = "$Id: environment.py 141772 2016-05-31 08:22:46Z cso $"


def ensure_running_service_daemon(context):
    """If a service daemon isn't already running, then a temporary one gets started"""
    svc = Management()
    if svc._check_if_its_up(usutil.UBERSERVER):
        context.temp_service_daemon = None
    else:
        svc.start()
        context.temp_service_daemon = svc


def terminate_temp_service_daemon(context):
    if context.temp_service_daemon:
        try:
            context.temp_service_daemon.shutdown()
        except Exception as ex:
            print ex
            if sys.platform == "win32":
                # workaround for shutdown method not functioning properly (on
                # windows)
                killableprocess.call([
                    'taskkill', '/f', '/t',
                    '/pid', '%s' % context.temp_service_daemon.cdbsvcd.pid])


class EventListener(util.DBEventListener):
    __listener = None

    def __init__(self):
        super(EventListener, self).__init__()
        self.__events = []

    def notify(self, relation, event):
        self.__events.append(
            (event.m_event,
             relation,
             event.m_keys.items()))

    def rollback(self):
        def generateWhere(keys):
            where = ""
            for key, value in keys:
                where += "%s='%s' AND " % (key, value)
            return where[:-5]
        try:
            self.doUnregister()
            self.__events.reverse()
            for t, relation, keys in self.__events:
                if t == util.kRecordInserted and relation != "cdb_global_subj":
                    sqlapi.SQLdelete("FROM %s where %s" % (relation,
                                                           generateWhere(keys)))
        finally:
            self.clear()
            self.doRegister()

    def clear(self):
        self.__events = []

    @classmethod
    def getListener(cls):
        if not EventListener.__listener:
            EventListener.__listener = EventListener()
        return EventListener.__listener


def before_scenario(context, scenario):
    listener = EventListener.getListener()
    listener.doRegister()
    # clear activity stream (this will be rolled back after the scenario)
    from cdb.objects.blog import Posting
    from cdb.objects.blog import Comment
    vals = {"cdb_cpersno": context.user.personalnummer}
    Posting.KeywordQuery(**vals).Delete()
    Comment.KeywordQuery(**vals).Delete()


def after_scenario(context, scenario):
    listener = EventListener.getListener()
    listener.rollback()
    listener.doUnregister()


def before_all(context):
    # Create a new User to use for testing and login as this one
    users = org.User.KeywordQuery(personalnummer="behave_test")
    if len(users) > 0:
        context.user = users[0]
    else:
        context.user = generateUser("behave_test")

    # workaround until E038433 gets fixed
    context.user.Update(password="")
    try:
        CommonRoleSubject.Create(
            role_id="public",
            subject_id=context.user.personalnummer,
            subject_type="Person",
            cdb_classname="cdb_global_subject")
    except:
        pass

    # Log him in
    assert cdbwrapc.set_user(context.user.personalnummer),\
        "The User couldn't be logged in"

    # run CDB server
    ensure_running_service_daemon(context)


def after_all(context):
    # shutdown CDB server
    terminate_temp_service_daemon(context)

    # Delete the created user and all his postings/comments that may be left over
    if hasattr(context, "user"):
        from cdb.objects.blog import Posting
        from cdb.objects.blog import Comment
        vals = {"cdb_cpersno": context.user.personalnummer}
        Posting.KeywordQuery(**vals).Delete()
        Comment.KeywordQuery(**vals).Delete()
        context.user.Delete()

    # temp. workaround: kill orphaned cdbsrv processes, which
    # the test execution may leak.
    if sys.platform == "win32":
        killableprocess.call(["taskkill", "/IM", "cdbsrv.exe", "/F"])
