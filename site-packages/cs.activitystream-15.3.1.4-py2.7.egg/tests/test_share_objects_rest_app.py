#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_share_objects_rest_app.py 166301 2017-10-06 09:48:58Z sla $"

import json
import unittest
import requests
import sys
import time
from cdb import misc
from cdb import testcase
from cdb.objects import ByID
from cdb.objects import org
from cdb.objects.operations import operation
from cdb.uberserver import usutil
from cdb.uberserver.management import Management
from cs.platform.web.root import get_v1
from cs.sharing import groups


CREATOR_GROUP_ID = "03729880-99aa-11e5-99e8-00aa004d0001"
ORG_ID = None
BASE_URL = None
COOKIES = None
GET = "GET"
POST = "POST"


def setUpModule():
    global ORG_ID
    global BASE_URL
    global COOKIES

    testcase.run_level_setup()
    ORG_ID = org.Organization.ByKeys("131").cdb_object_id

    try:
        testcase.require_uberserver()
        BASE_URL = testcase.require_service(
            "cdb.uberserver.services.apache.Apache").get_url()
        COOKIES = request(
            POST, "login",
            data={"username": "caddok", "password": "", "language": "D"},
            as_json=False).cookies
    except:
        # unittest does not tear down modules whose setup failed - make it
        tearDownModule()
        raise


def tearDownModule():
    request(GET, "server/__quit__")
    testcase.stop_uberserver()


def request(method, url, data=None, as_json=True):
    full_url = BASE_URL + url
    req = testcase.send_http_request(method, full_url, data, as_json, COOKIES)

    assert req.status_code == 200, "failed {} {}: {} (data {})".format(
        method, full_url, req.status_code, data)
    return req


class RestRollbackTestCase(unittest.TestCase):
    """
    Class emulating from cdb.testcase import RollbackTestCase, which cannot be
    used here, since we need backend access to objects we create in tests.
    """
    @classmethod
    def setUpClass(cls):
        cls.ids = []

    @classmethod
    def tearDownClass(cls):
        for id in cls.ids:
            obj = ByID(id)
            if obj:
                operation("CDB_Delete", obj)

    def _req(self, data, as_json=True):
        return request(
            self.__method__,
            self.__url__,
            data=data,
            as_json=as_json)

    def rememberForRollback(self, obj_id):
        self.ids.append(obj_id)

    def assertError(self, req, addtl_msg=None):
        result = req.json()
        self.assertTrue(
            result.get("error", None),
            msg="expected error in JSON: {}\n{}".format(result, addtl_msg))

    def assertNoError(self, req, addtl_msg=None):
        result = req.json()
        self.assertFalse(
            result.get("error", None),
            msg="expected no error in JSON: {}\n{}".format(result, addtl_msg))

    def _createPersonalSharingGroup(self, name):
        result = groups.PersonalSharingGroup.fromSubjectList(
            name=name,
            subject_list=[("caddok", "Person")])
        self.rememberForRollback(result.cdb_object_id)
        return result


class test_share_objects(RestRollbackTestCase):
    """
    Tests `cs.sharing.web.share_objects.rest_app.view.share_objects`.
    """
    __url__ = "internal/share_objects"
    __method__ = POST

    def _expect_success(self, req):
        self.assertNoError(req)
        sharing_id = req.json()["sharing"]["cdb_object_id"]
        self.assertTrue(ByID(sharing_id))
        self.rememberForRollback(sharing_id)

    def test_share_with_person(self):
        self._expect_success(self._req({
            "message": None,
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": [{
                "@type": "angestellter",
                "personalnummer": "caddok"
            }]
        }))

    def test_share_with_message(self):
        req = self._req({
            "message": "We can actually addsome\ttext\tto this.\nEOM",
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": [{
                "@type": "angestellter",
                "personalnummer": "caddok"
            }]
        })
        self._expect_success(req)

    def test_share_with_role(self):
        self._expect_success(self._req({
            "message": None,
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": [{
                "@type": "cdb_global_role",
                "role_id": "Administrator"
            }]
        }))

    def test_share_with_group(self):
        group = self._createPersonalSharingGroup("test_share_objects")
        self._expect_success(self._req({
            "message": None,
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": [{
                "@type": "cdb_personal_sharing_group",
                "cdb_object_id": group.cdb_object_id
            }]
        }))

    def _expect_failure(self, req):
        self.assertError(req)
        try:
            sharing_id = req.json()["sharing"]["cdb_object_id"]
            if ByID(sharing_id):
                self.rememberForRollback(sharing_id)
        except (ValueError, TypeError, KeyError):
            pass

    def test_no_attachments(self):
        self._expect_failure(self._req({
            "message": None,
            "attachments": [],
            "recipients": [{
                "@type": "angestellter",
                "persno": "caddok"
            }]
        }))

    def test_no_recipients(self):
        self._expect_failure(self._req({
            "message": None,
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": []
        }))

    def test_missing_key_message(self):
        self._expect_failure(self._req({
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": [{
                "@type": "angestellter",
                "persno": "caddok"
            }]
        }))

    def test_missing_key_attachments(self):
        self._expect_failure(self._req({
            "message": None,
            "recipients": [{
                "@type": "angestellter",
                "persno": "caddok"
            }]
        }))

    def test_missing_key_recipients(self):
        self._expect_failure(self._req({
            "message": None,
            "attachments": [{"cdb_object_id": ORG_ID}]
        }))

    def test_unknown_recipient_class(self):
        self._expect_failure(self._req({
            "message": None,
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": [{"@type": "spinach"}]
        }))

    def test_person_missing_primary_key(self):
        self._expect_failure(self._req({
            "message": None,
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": [{
                "@type": "angestellter",
                "persno": "caddok"
            }]
        }))

    def test_role_missing_primary_key(self):
        self._expect_failure(self._req({
            "message": None,
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": [{
                "@type": "cdb_global_role",
                "not_role_id": "Administrator"
            }]
        }))

    def test_group_missing_primary_key(self):
        group = self._createPersonalSharingGroup(
            "test_group_missing_primary_key")
        self._expect_failure(self._req({
            "message": None,
            "attachments": [{"cdb_object_id": ORG_ID}],
            "recipients": [{
                "@type": "cdb_personal_sharing_group",
                "not_object_id": group.cdb_object_id
            }]
        }))


class test_get_recipients(RestRollbackTestCase):
    """
    Tests `cs.sharing.web.share_objects.rest_app.view.get_recipients`.
    """
    __url__ = "internal/share_objects/recipients"
    __method__ = GET

    def _expect_success(self, req):
        self.assertNoError(req)
        json = req.json()["recipients"]
        persno = [x.get("personalnummer", None) for x in json]
        self.assertIn("caddok", persno)
        return json

    def test_empty_query(self):
        self._expect_success(self._req({"query": "", "limit": 99}))

    def test_name(self):
        self._expect_success(self._req({"query": "Administrator", "limit": 7}))

    def test_name_like(self):
        self._expect_success(self._req({"query": "dministr", "limit": 7}))

    def test_name_lower(self):
        self._expect_success(self._req({"query": "admin", "limit": 7}))

    def test_query_missing(self):
        self.assertError(self._req({"limit": 7}))

    def test_limit_missing(self):
        self.assertError(self._req({"query": "Administrator"}))


class test_get_object_group(RestRollbackTestCase):
    """
    Tests `cs.sharing.web.share_objects.rest_app.view.get_object_group`.
    """
    __url__ = "internal/share_objects/object_group"
    __method__ = GET

    def test_get_object_group(self):
        print("FIXME needs additional package with sharable objects")
        # req = self._req({"group_id": CREATOR_GROUP_ID, "attachment_id": ORG_ID})
        # self.assertNoError(req)
        # self.assertEqual(req.json()["recipients"][0]["personalnummer"], "caddok")

    def test_fail_get_object_group(self):
        self.assertError(self._req(None))
        self.assertError(self._req({}))
        self.assertError(self._req({"group_id": CREATOR_GROUP_ID}))
        self.assertError(self._req({"attachment_id": ORG_ID}))


class test_get_resolve(RestRollbackTestCase):
    """
    Tests `cs.sharing.web.share_objects.rest_app.view.get_resolve`.
    """
    __url__ = "internal/share_objects/resolve_group"
    __method__ = POST

    def test_resolve_role(self):
        req = self._req({"group": {
            "@type": "cdb_global_role",
            "role_id": "Administrator"
        }})
        self.assertNoError(req)
        self.assertEqual(req.json()["users"][0]["personalnummer"], "caddok")

    def test_resolve_group(self):
        group = self._createPersonalSharingGroup("test_resolve_group")
        req = self._req({"group": {
            "@type": ("anything but *cdb_global_role will be "
                         "interpreted as a PersonalSharingGroup"),
            "cdb_object_id": group.cdb_object_id
        }})
        self.assertNoError(req)
        self.assertEqual(req.json()["users"][0]["personalnummer"], "caddok")

    def test_fail_resolve(self):
        self.assertError(self._req({}))  # no group
        # no @type in group (cdb_global_role or pers sharing group)
        self.assertError(self._req({"group": {}}))
        # cdb_global_role without role_id or unknown role_id
        self.assertError(self._req({"group": {
            "@type": "cdb_global_role"
        }}))
        self.assertError(self._req({"group": {
            "@type": "cdb_global_role",
            "role_id": "this role does not exist"
        }}))
        # sharing group without oid or unknown oid
        self.assertError(self._req({"group": {"@type": "group"}}))
        self.assertError(self._req({"group": {
            "@type": "group",
            "cdb_object_id": "this object id does not exist"
        }}))


class test_get_members(RestRollbackTestCase):
    """
    Tests `cs.sharing.web.share_objects.rest_app.view.get_members`.
    """
    __url__ = "internal/share_objects/get_group_members"
    __method__ = POST

    def test_get_group(self):
        group = self._createPersonalSharingGroup("test_get_group")
        req = self._req({
            "group": {"cdb_object_id": group.cdb_object_id},
            "index": 0
        })
        self.assertNoError(req)
        self.assertEqual(req.json()["members"][0]["subject_id"], "caddok")

    def test_fail_get_group(self):
        # no index
        group = self._createPersonalSharingGroup("test_fail_get_group")
        self.assertError(self._req({
            "group": {"cdb_object_id": group.cdb_object_id}
        }))
        self.assertError(self._req({"index": 0}))  # no group
        self.assertError(self._req({"group": {}, "index": 0}))  # no object id
        self.assertError(self._req({  # unknown cdb_object_id
            "group": {"cdb_object_id": "this-is-no-UUID"},
            "index": 0
        }))
        self.assertError(self._req({  # object of wrong class
            "group": {"cdb_object_id": ORG_ID},
            "index": 0
        }))


class test_get_attachments(RestRollbackTestCase):
    """
    Tests `cs.sharing.web.share_objects.rest_app.view.get_attachments`.
    """
    __url__ = "internal/share_objects/attachments"
    __method__ = GET

    def test_no_attachments(self):
        self.assertNoError(self._req({}))
        self.assertNoError(self._req({"attachments": None}))

    def test_attachment(self):
        self.assertNoError(self._req({"attachments": ORG_ID}))
        self.assertNoError(self._req(
            {"attachments": ",".join([ORG_ID, ORG_ID])}))

    def test_malformed_uuid(self):
        self.assertError(self._req({"attachments": "this-is-no-UUID"}))

    def test_url_too_long(self):
        self.assertTrue(True)
        # maximum URL length is browser dependant (up to 2000 characters should
        # always work, which translates to roughly 53 attachments, so we don't
        # test it)


class test_save_recipients(RestRollbackTestCase):
    """
    Tests `cs.sharing.web.share_objects.rest_app.view.save_recipients`.
    """
    __url__ = "internal/share_objects/save_recipients"
    __method__ = POST

    def _save(self, data):
        req = self._req(data)
        group = req.json().get("sharing_group", None)
        if group:
            self.rememberForRollback(group["cdb_object_id"])
        return req, group

    def _groupExists(self, group_json):
        group_id = group_json.get("cdb_object_id", None)
        return ByID(group_id)

    def _expect_success(self, data):
        req, group = self._save(data)
        self.assertNoError(req)
        self.assertTrue(self._groupExists(group))

    def test_save_from_person(self):
        self._expect_success({
            "name": "test_save_from_person",
            "recipients": [
                {
                    "@type": "angestellter",
                    "personalnummer": "caddok"
                }
            ]
        })

    def test_save_from_role(self):
        self._expect_success({
            "name": "test_save_from_role",
            "recipients": [
                {
                    "@type": "cdb_global_role",
                    "role_id": "Administrator"
                }
            ]
        })

    def test_save_from_group(self):
        first_req, first_group = self._save({
            "name": "test_save_from_group-0",
            "recipients": [
                {
                    "@type": "angestellter",
                    "personalnummer": "caddok"
                }
            ]
        })
        self._expect_success({
            "name": "test_save_from_group-1",
            "recipients": [
                {
                    "@type": "cdb_personal_sharing_group",
                    "cdb_object_id": first_group["cdb_object_id"]
                }
            ]
        })

    def _expect_failure(self, data):
        req, group = self._save(data)
        self.assertError(req, addtl_msg=data)

    def test_missing_name(self):
        self._expect_failure({})

    def test_missing_recipients(self):
        self._expect_failure({"name": None})

    def recipients_not_iterable(self):
        self._expect_failure({"name": None, "recipients": None})

    def missing_recipient_type(self):
        self._expect_failure({"name": None, "recipients": [{"test": "test"}]})

    def unknown_recipient_type(self):
        self._expect_failure(
            {"name": None, "recipients": [{"@type": "spaceship"}]}
        )

    def missing_recipient_key(self):
        self._expect_failure({
            "name": None,
            "recipients": [{"@type": "angestellter", "persno": "caddok"}]
        })


class test_delete_object(RestRollbackTestCase):
    """
    Tests `cs.sharing.web.share_objects.rest_app.view.delete_object`.
    """
    __url__ = "internal/share_objects/delete_object"
    __method__ = POST

    def _groupExists(self, group_id):
        group = ByID(group_id)
        return group

    def _memberExists(self, group_id):
        members = groups.SharingGroupMember.KeywordQuery(group_id=group_id)
        return len(members) == 1

    def test_delete(self):
        group = self._createPersonalSharingGroup("test_delete")
        group_id = group.cdb_object_id
        self.assertNoError(self._req({"group": {"cdb_object_id": group_id}}))
        self.assertFalse(self._groupExists(group_id))
        self.assertFalse(self._memberExists(group_id))

    def test_delete_member(self):
        group = self._createPersonalSharingGroup("test_delete_member")
        group_id = group.cdb_object_id
        self.assertNoError(self._req(
            {"member": {"cdb_object_id": group.Members[0].cdb_object_id}}))
        self.assertTrue(self._groupExists(group_id))
        self.assertFalse(self._memberExists(group_id))

    def test_no_data(self):
        self.assertError(self._req(None))
        self.assertError(self._req({}))

    def test_no_valid_json(self):
        group = self._createPersonalSharingGroup("test_no_valid_json")
        group_id = group.cdb_object_id
        with self.assertRaises(AssertionError):
            req = self._req(
                {
                    "group": {"cdb_object_id": group_id},
                    "member": {"cdb_object_id": group.Members[0].cdb_object_id
                    }
                },
                as_json=False)

    def test_wrong_class(self):
        group = groups.ObjectSharingGroup.Create(name_de="test_delete_object")
        group_id = group.cdb_object_id
        self.rememberForRollback(group_id)
        self.assertError(self._req({"group": {"cdb_object_id": group_id}}))


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
