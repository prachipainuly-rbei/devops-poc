#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2015 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
Test Data
WARNING: not safe for production environments!
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_sharing_data.py 138719 2016-03-18 14:07:06Z cso $"

import os
from collections import defaultdict
from cdb import misc
from cdb import progress
from cdb import sqlapi
from cdb import transaction
from cdb.objects.org import Organization
from cdb.objects.org import User
from cs.sharing import Sharing
from cs.sharing.groups import SharingGroup
from cs.sharing.groups import SharingGroupMember


class DummyContext(object):
    error = 0


class TestDataCreator(object):
    __posting_txt_file__ = os.path.join(
        os.path.dirname(__file__), "test_sharing_posting.txt")
    __posting_txt__ = None

    def __init__(self, user_count, group_count, group_size, sharing_count):
        self.attachments = [o.cdb_object_id for o in Organization.Query()]
        self._loadPostingTxt()
        self.users = []
        self.user_count = user_count
        self.sharing_groups = defaultdict(list)
        self.sharing_group_count = group_count  # per user
        self.sharing_group_size = group_size
        # FIXME creating sharings is expensive, probably due to using cdb.objects
        self.sharing_count = sharing_count  # per user

    def _loadPostingTxt(self):
        with open(self.__posting_txt_file__, "r") as txt:
            self.__posting_txt__ = "".join(txt.readlines())

    def _getUserData(self, i):
        id = "user-%i" % i
        return {
            "personalnummer": id,
            "login": id,
            "name": id,
            "firstname": "",
            "lastname": id,
            "password": "",
            "password_rule": "Unsafe",
            "force_pwdchange": 0,
            "e_mail": "",
            "email_with_task": 0,
            "org_id": "131",
            "active_account": "1",
            "visibility_flag": 1,
            "cdb_classname": User.__classname__,
        }

    def createUsers(self):
        pbar = progress.ProgressBar(maxval=self.user_count)
        pbar.show()
        for i in xrange(self.user_count):
            user = sqlapi.Record("angestellter", **self._getUserData(i))
            user.insert()
            sqlapi.Record(
                "cdb_global_subj",
                cdb_classname="cdb_global_subject",
                role_id="public",
                subject_id=user.personalnummer,
                subject_type="Person",
                exception_id="").insert()
            self.users.append(user)
            pbar += 1
            pbar.show()

    def _getSharingGroupData(self, i, j):
        return {
            "name": "group-%i-%i" % (i, j),
            "subject_id": "user-%i" % i,
            "subject_type": "Person",
            "cdb_object_id": misc.UUID(1),
            "cdb_classname": "cdb_personal_sharing_group",
        }

    def _getMembers(self, group, i, j):
        def member(subject_id, subject_type):
            return {
                "subject_id": subject_id,
                "subject_type": subject_type,
                "group_id": group.cdb_object_id,
                }
        result = [member("Administrator", "Common Role")]
        # the next sharing_group_size -1 users following current user (i)
        # for each group (j), the starting user is increased by one
        for k in xrange(1, self.sharing_group_size):
            user_index = (i + j + k) % self.user_count
            result.append(member("user-%i" % user_index, "Person"))
        return result

    def createSharingGroups(self):
        pbar = progress.ProgressBar(
            maxval=(self.user_count * self.sharing_group_count))
        pbar.show()
        for i in xrange(len(self.users)):
            for j in xrange(self.sharing_group_count):
                group = sqlapi.Record(
                    "cdb_sharing_group", **self._getSharingGroupData(i, j))
                group.insert()
                for member in self._getMembers(group, i, j):
                    sqlapi.Record("cdb_sharing_group_member", **member).insert()
                self.sharing_groups[i].append(group)
                pbar += 1
                pbar.show()

    def createSharings(self):
        pbar = progress.ProgressBar(
            maxval=(self.user_count * self.sharing_count))
        pbar.show()
        ctx = DummyContext()
        vals = Sharing.MakeChangeControlAttributes()
        for i in xrange(len(self.users)):
            recipients = []
            for group in self.sharing_groups[i]:
                members = sqlapi.RecordSet2(
                    "cdb_sharing_group_member",
                    "group_id='%s'" % group.cdb_object_id)
                recipients += [(m.subject_id, m.subject_type) for m in members]
            for j in xrange(self.sharing_count):
                sharing = Sharing.Create(
                    title="sharing-%i-%i" % (i, j),
                    subject_id=self.users[i].personalnummer,
                    subject_type="Person",
                    cdb_cdate=vals["cdb_cdate"],
                    cdb_cpersno=vals["cdb_cpersno"],
                )
                sharing.createPosting(
                    self.attachments,
                    unicode(self.__posting_txt__.format(i, j, recipients)))
                sharing.sendNotificationAsynchronously(recipients)
                pbar += 1
                pbar.show()

    def install(self):
        assert not len(self.users), "can't run install twice"
        with transaction.Transaction():
            self.createUsers()
            self.createSharingGroups()
            self.createSharings()

    def uninstall(self):
        with transaction.Transaction():
            if len(self.users):
                for data in [[x._record for x in Sharing.Query("title LIKE 'sharing-%%'")],
                             self.sharing_groups.values(),
                             [self.users]]:
                    for collection in data:
                        for record in collection:
                            record.delete()
            else:
                # uninstall from new instance
                for user in sqlapi.RecordSet2("angestellter",
                                              "personalnummer LIKE 'user-%%"):
                    user.delete()
                    query = ("subject_id='%s' AND subject_type='Person'"
                             % user.personalnummer)
                    for group in sqlapi.RecordSet2("cdb_sharing_group", query):
                        group.delete()
                    for sharing in sqlapi.RecordSet2("cdb_sharing", query):
                        sharing.delete()

            sqlapi.SQLdelete(
                "FROM cdb_global_subj WHERE subject_type='Person' AND "
                "subject_id NOT IN (SELECT personalnummer FROM angestellter)")
            sqlapi.SQLdelete(
                "FROM cdb_sharing_group_member WHERE group_id NOT IN (SELECT "
                "cdb_object_id FROM cdb_sharing_group)")


if __name__ == "__main__":
    t = TestDataCreator(5000, 3, 20, 1)  # takes about 30 minutes
    t.install()
