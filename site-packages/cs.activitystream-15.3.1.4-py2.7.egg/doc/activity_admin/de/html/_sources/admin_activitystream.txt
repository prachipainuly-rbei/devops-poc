.. _`admin_activitystream`:

Aktivitäten
###########

Themen abonnieren
=================

:guilabel:`Ist Aktivitäten-Kanal`

    Jedes Objekt mit einer ``cdb_object_id`` kann ein Thema sein, dem Beiträge
    zugeordnet werden können. Alternativ zu :emphasis:`Thema` wird auch der Begriff :emphasis:`Kanal`
    verwendet. Im globalen Stream sehen Anwender Beiträge derzeit nur,
    wenn sie das entsprechende Thema abonniert haben. Ist diese
    Checkbox gesetzt, werden die Operationen ``CDB_SubscribeToChannel``
    bzw. ``CDB_UnsubscribeFromChannel`` automatisch der Klasse zugeordnet bzw. entfernt.


.. _`cdbfunctions-cdbblog-system_postings`:

Systembeitrag
=============

Das System ist in der Lage automatisch bei Anlage, Änderung oder
Statusänderung einen Systembeitrag zu erzeugen, die dann in :guilabel:`Aktivitäten` auftaucht. Systembeiträge werden dabei in allen aktiven
Sprachen der Installation erzeugt (siehe :ref:`multilanguage-activate`).

.. note::

  Aus Performancegründen werden Teile des Codes zum Erstellen von Systembeiträgen
  durch einen separaten Dienst durchgeführt. Die Aktivierierung dieses
  Dienstes mit dem Namen ``System Posting Queue`` ist im Installations- und
  Betriebshandbuch beschrieben. Damit Aufträge für die Queue erzeugt werden, muss
  der :py:class:`cs.activitystream.activitylistener` aktiv sein. Dies ist z.B. bei
  reinen Powerscript-Anwendungen nicht automatisch der Fall.

Die Basiskonfiguration wird dabei in den
Klasseneigenschaften vorgenommen (siehe
:ref:`datadict-class-properties` ).

Attribute, die alle Aktionen der Aktivitäten betreffen haben folgende Bedeutung:

.. _`cdb_class_activity_attributes`:

Allgemeine Aktivitätenkonfiguration in der Klassendefinition
------------------------------------------------------------

:guilabel:`Systembeiträge erzeugen`

    Damit für Objekte einer Klasse überhaupt Systembeiträge erzeugt
    werden, muss diese Checkbox aktiviert werden. Ist sie aktiv, gilt
    die Einstellung auch für abgeleitete Klassen. Dies ist unabhängig davon, ob
    die Checkbox dort an- oder abgeschaltet ist. Ist sie deaktiviert
    haben alle anderen Konfigurationen zu den Aktivitäten keine Auswirkung.

    Systembeiträge können nur für Klassen erzeugt werden, die das Attribut
    ``cdb_object_id`` besitzen. Das System überprüft beim Anlegen und Ändern von
    Klassen, ob dieses Attribut vorhanden ist. Ist dies nicht der Fall, wird es
    automatisch ergänzt. Die Klasse muss dann in der Regel noch manuell über
    die Funktion :guilabel:`Compile` erzeugt werden.


:guilabel:`Regel`

    Hier kann
    eine :ref:`Objektregel <cdbpws-api-cdbobjects-rules>`
    referenziert werden, welche die Menge der Objekte, zu denen ein
    Systembeitrag erzeugt werden soll, einschränkt. Beispielsweise
    könnten Sie festlegen, dass nur für Aufgaben einer bestimmten
    Kategorie Beiträge erzeugt werden sollen.

    Ist eine Regel
    angegeben, muss dieses Regel in dieser Klasse und in allen
    abgeleiteten Klassen erfüllt sein, damit ein Beitrag erzeugt
    wird. Wird in einer abgeleiteten Klasse eine Regel definiert, muss
    diese zusätzlich zu allen in Basisklassen dieser Klasse definierten
    Regeln gelten.


Die weiteren Attribute sind in den folgenden Kapiteln beschrieben.


.. _`cdbfunctions-cdbblog-system-postings-create`:

Generierung von Beiträgen bei der Anlage von Objekten
-----------------------------------------------------


Sind die Grundvoraussetzungen für die Generierung von Systembeiträgen
gegeben (siehe :ref:`cdb_class_activity_attributes` ), kann
durch weitere Einstellungen festgelegt werden, ob bei der Anlage eines Objekts ein
Beitrag generiert werden soll. Die Basiskonfiguration wird dabei in den
Klasseneigenschaften vorgenommen (siehe :ref:`datadict-class-properties` ).


.. _`cdb_class_activity_attributes-posting_on_create`:

Aktivitätenkonfiguration für Anlage eines neuen Objekts
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Die relevanten Attribute haben folgende Bedeutung:

:guilabel:`Systembeitrag bei Anlage`

    Ist diese Checkbox gesetzt, wird bei der Anlage eines neuen Objektes
    der Klasse ein Beitrag erzeugt.
    Ist sie aktiv, gilt die Einstellung auch für abgeleitete Klassen.
    Dies ist unabhängig davon, ob die Checkbox dort an- oder abgeschaltet ist.

:guilabel:`Text`

    Hier kann über ein Label eine (Fehler-)Meldung referenziert werden. In dieser Meldung
    wird der Text des Systembeitrags vorgegeben. Die Auswertung
    erfolgt analog zur Konfiguration
    von :ref:`Objektbeschreibung <cdb-objects-description>`
    im Data Dictionary, d.h. es können feste Textbestandteile und
    Attributwerte konkateniert werden. Wird kein Text konfiguriert,
    wird die Meldung ``activity_obj_created``
    verwendet, wobei die im Data Dictionary konfigurierte
    Objektbeschreibung als Replacement verwendet wird.

:guilabel:`Kanal für Anlage-Beiträge`

    Es gibt den Fall, dass sich Anwender mittels der Aktivitäten über die
    Anlage von neuen Objekten informieren lassen wollen. Für Objekte, die keinem
    Thema zugeordnet sind, kann in diesem Fall ein Kanal angelegt werden,
    z.B. der Kanal :emphasis:`Neue Ideen` für das Ideen-Management (siehe :ref:`cdbblog_channel`). Auf diesen Kanal
    kann sich dann ein Anwender, der neue Ideen im globalen Aktivitätenfenster
    sehen will, abonnieren. Wird dieser Kanal in dem hier beschriebenen Feld
    referenziert, wird ein Anlage-Systembeitrag automatisch dem Kanal
    zugeordnet - unabhängig von der Implementierung der |cdbpy|- Methode ``GetActivityStreamTopics``.

.. _`HELPID_cdb_activity_posting_on_update`:
.. _`cdbfunctions-cdbblog-system-postings-update`:
.. _`activity_posting_on_update`:

Generierung von Beiträgen bei Änderungen
----------------------------------------

Sind die Grundvoraussetzungen für die Generierung von Systembeiträgen
gegeben (siehe :ref:`cdb_class_activity_attributes` ), kann
durch weitere Einstellungen festgelegt werden,
ob bei der Änderung von Objekten
ein Beitrag generiert werden soll. Die Konfiguration wird dabei in der
Registerkarte :guilabel:`Aktivitäten` der
Attributeigenschaften im Data-Dictionary vorgenommen
(siehe :ref:`cdb-classdef-attributes`).


.. _`cdb_class_activity_attributes-posting_on_update`:

Aktivitätenkonfiguration für Änderung
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Die Attribute haben folgende Bedeutung:

:guilabel:`Systembeitrag bei Änderung`

    Ist diese Checkbox gesetzt, wird bei der Änderung eines Objektes
    überprüft, ob dieses Attribut geändert wurde. Ist dies der Fall, wird
    ein Beitrag erzeugt.

:guilabel:`Text`

    Hier kann über ein Label eine (Fehler-)Meldung referenziert werden.
    In dieser Meldung
    wird der Text des Systembeitrags vorgegeben. Die Auswertung
    erfolgt analog zur Konfiguration
    von :ref:`Objektbeschreibung <cdb-objects-description>`
    im Data Dictionary, d.h. es können feste Textbestandteile und
    Attributwerte konkateniert werden. Ist ein Text konfiguriert,
    wird ein separater Beitrag mit dem Text erzeugt, d.h. wenn mehrere
    Attribute geändert werden, für die jeweils ein Text konfiguriert
    ist, werden auch mehrere Beiträge erzeugt.

    Wird kein Text konfiguriert,
    wird die Meldung ``activity_obj_modified``
    verwendet. Dabei werden alle geänderten Attribute, deren
    Änderung einen Beitrag verursacht und für die keine spezielle
    Meldung konfiguriert ist, aufgesammelt. Als Replacements für die
    Meldung werden die Objektbeschreibung und die Liste der
    geänderten Attribute mit ihren Werten verwendet.


.. _`cdbfunctions-cdbblog-system-postings-wfstep`:

Generierung von Beiträgen bei Statusänderung
--------------------------------------------

Sind die Grundvoraussetzungen für die Generierung von Systembeiträgen
gegeben (siehe :ref:`cdb_class_activity_attributes`), kann
durch weitere Einstellungen festgelegt werden, ob im Rahmen einer
Statusänderung ein Beitrag generiert werden soll. Die Einstellungen
werden bei der Konfiguration
der :ref:`Statusdefinition <workflow-conf-statusdef>` vorgenommen.


.. _`cdb_class_activity_attributes-posting_on_wfstep`:

Aktivitätenkonfiguration für Statusänderung
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Die Attribute haben folgende Bedeutung:

:guilabel:`Beitrag bei interaktiver Statusänderung generieren`

    Ist diese Checkbox gesetzt, wird bei einer interaktiven
    Statusänderung in diesen Status ein Beitrag generiert.

:guilabel:`Beitrag bei automatischer Statusänderung generieren`

    Ist diese Checkbox gesetzt, wird bei einer automatischen
    Statusänderung in diesen Status ein Beitrag generiert. Dies sind
    die Statusänderungen, die das System z.B. durch den Aufruf von
    Statusänderungen innerhalb von User Exits durchführt.

:guilabel:`Text`

    Hier kann über ein Label eine Meldung aus der
    (Fehler)-meldungsverwaltung referenziert werden. In dieser Meldung
    wird der Text des Systembeitrags vorgegeben. Die Auswertung
    erfolgt analog zur Konfiguration
    von :ref:`Objektbeschreibungen <cdb-objects-description>`
    im Data Dictionary, d.h. es können feste Textbestandteile und
    Attributwerte konkateniert werden.

    Wird kein Text konfiguriert,
    wird die Meldung ``activity_obj_wfstep``
    verwendet. Als Replacements für die
    Meldung werden die Objektbeschreibung und der Zielstatus verwendet.

Zuordnung der Themen
--------------------

Ein Beitrag kann mehreren Themen zugeordnet sein - beispielsweise kann
der Beitrag, dass eine neue Aufgabe angelegt wurde, der Aktivität
des zugeordneten Projekts und der Aktivität der Aufgabe zugeordnet
werden. Zum Zweck der Zuordnung wird die Methode ``GetActivityStreamTopics``
der |cdbpy|-Klasse ``cdb.objects.Object`` verwendet. Details entnehmen Sie
bitte dem |cdbpy|-Handbuch.

.. _`HELPID_cdb_blog_channel`:
.. _`cdbblog_channel`:

Zugriffsrechte für Beiträge
---------------------------

Das read-Recht für Beiträge hängt im Standard am Recht ``read`` des Objeks, auf
dass sich der Beitrag bezieht. Im Kern ist dies ähnlich wie ein
Beziehungsrechteprofil abgebildet, d.h. bei einer Suche über ``CDB_Search``
wird das Recht nicht ausgewertet. An den Stellen, an denen Beiträge
üblicherweise angezeigt werden, also in der |esearch| oder in den Aktivitäten
wird das Recht ausgewertet.

Automatisches Löschen von Beiträgen
-----------------------------------

Wird ein Objekt gelöscht, werden automatisch auch die Beiträge, die diesem
Objekt zugeordnet sind, mitgelöscht.


Anzeige der Aktivitäten als Registerkarte
=========================================

Sie können ein :ref:`cdb-gui-maskconfig-dlgitemtypes-sect-cdbelinkcontrol` einsetzen, um die
Aktivitäten zu einem bestimmten Thema/Kanal anzeigen zu lassen. Das System
besitzt bereits eine vordefinierte Maske, die nur dieses Control enthält. Diese
Maske hat den Namen ``cdb_elink_activitystream``. Sie kann als Registerkarte in
einen :ref:`Maskenverbund <cdb-gui-maskregister-sect-compound>` eingepflegt
werden. Bei der Anlage neuer Objekte und beim Suchen bleibt die |elink|-Anwendung
inaktiv, daher ist es in der Regel sinnvoll, entweder unterschiedliche
Maskenverbünde für die unterschiedlichen Aktionen zu definieren oder die Registerkarte mit Hilfe der
|cdbpy|-Funktion :py:func:`disable_registers` auszublenden. Dies passiert
beispielsweise in der Klasse :py:class:`Channel`: ::

    class Channel(Object):
        __maps_to__ = "cdbblog_channel"
        __classname__ = "cdbblog_channel"

        def _skip_activity_register(cls, ctx):
            if ctx.action != "info" and ctx.action != "modify":
                try:
                    ctx.disable_registers(["cdb_elink_activitystream"])
                except:
                    # Some context adaptors does not support disable_registers
                    pass

        event_map = {("*", "pre_mask"): "_skip_activity_register"}


Kanäle
======

Damit ein Beitrag für den Anwender sichtbar wird, muss es ein Thema geben,
dem der Beitrag zugeordnet ist. In vielen Fällen ist dieses Thema ein
Objekt, z.B. ein Projekt. In manchen Fällen existiert aber kein
geeignetes Objekt. Für diesen Fall können Sie einen Kanal anlegen, dem
Beiträge zugeordnet werden. Ein solcher Kanal könnte beispielsweise der Kanal
:emphasis:`Neue Ideen` sein. Wie in
:ref:`cdb_class_activity_attributes-posting_on_create` beschrieben, können Sie
konfigurativ erreichen, dass die Systembeiträge zur Anlage neuer Objekte einem Kanal
zugeordnet werden.
Den Konfigurationszugang zu  Kanälen erreichen sie im Menübaum über
:menuselection:`Administration/Konfiguration --> Aktivitäten --> Kanäle`.
Im Standard dürfen nur Administratoren neue Kanälen anlegen.


Tägliche Zusammenfassung als E-Mail
###################################

Damit diese optional von jedem Benutzer einstellbare Funktion verwendet werden kann,
muss der Dienst `cs.activitystream.daily_mail_service.DailyMailService` laufen.
Dieser wiederum setzt voraus, dass ein Mailserver konfiguriert ist (üblicherweise in
`$CADDOK_BASE/etc/site.conf`).

Der Dienst verschickt, wenn er aktiv ist, einmal täglich alle Benachrichtigungen. Im
Auslieferungszustand passiert das jeweils um 0 Uhr eines Tages. Sie können die Startzeit
ändern, indem Sie dem Dienst den Parameter "--start" mit einem Wert "20:15" (im Format
"%H:%M") hinzufügen und anschließend neu starten. Bitte beachten Sie, dass Sie so eine
Umstellung ggf. am Wochenende durchführen sollten, da der Dienst immer die innerhalb der
letzten 24 Stunden geänderten Objekte als neu betrachtet. Es kann also bei einer Verschiebung
der Startzeit zu vereinzelten Doppelmeldungen oder fehlenden Aktivitäten in der Zusammenfassung
kommen.

Die Zusammenfassung enthält den vollständigen Text aller Beiträge und Kommentare des letzten
Tages. Falls Sie stattdessen nur Textauszüge anzeigen möchten, kann die Vorlage für die E-Mails
angepasst werden.

Die Vorlage finden Sie im Modulverzeichnis unter `chrome/activity_digest.html`.
Wenn Sie diese anpassen möchten, empfiehlt es sich, die Vorlage in Ihr Kundenmodul zu kopieren
und die Klasse `cs.activitystream.daily_mails.DailyMailer` so zu überschreiben, dass die
neue Vorage verwendet wird. Dazu müssen Sie in Ihrer Klasse den neuen Pfad zur Vorlage
angeben, z.B. so:


.. code-block:: python

    import os
    from cdb import CADDOK
    from cs.activitystream.daily_mails import DailyMailer

    class CustomMailer(DailyMailer):
        __notification_template_folder__ = os.path.join(CADDOK.BASE, "email_templates")
        __notification_template__ = "activity_digest.html"
