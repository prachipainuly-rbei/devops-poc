#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
Module Actions

This is the documentation for the Actions module.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 161605 2017-07-12 13:40:45Z cso $"

# Some imports
from cdb import sig, cdbtime
from cdb import util
from cdb.ddl import Table
from cdb.objects import Forward, Reference_1, Reference_N
from cdb.objects import State
from cdb.objects import ByID
from cdb.objects.org import WithSubject
from cdb.platform.mom import OperationContext
from cs.actions.tasks_plugin import ActionWithCsTasks
from cs.workflow import briefcases
from cs.currency import Currency
from cs.tools import powerreports
from cs.sharing.share_objects import WithSharing

fAction = Forward(__name__ + ".Action")

__all__ = ['Action']


class Action(WithSubject, briefcases.BriefcaseContent, powerreports.WithPowerReports, WithSharing, ActionWithCsTasks):
    __maps_to__ = "cdb_action"
    __classname__ = "cdb_action"

    Subactions = Reference_N(fAction,
                             fAction.parent_object_id == fAction.cdb_object_id)
    Parentaction = Reference_1(
                        fAction,
                        fAction.cdb_object_id == fAction.parent_object_id)
    Currency = Reference_1(Currency, fAction.currency_object_id)

    class EDITING(State):
        status = 0

        def Constraints(state, self):
            return [("MatchStateList",
                     [self.Subactions, [Action.EDITING, Action.DISCARDED],
                      "cdb_action_wf_rej_1"])]

    class IN_WORK(State):
        status = 20

        def Constraints(state, self):
            return [("MatchStateList",
                     [[self.Parentaction] if self.Parentaction else [],
                      [Action.IN_WORK],
                      "cdb_action_wf_rej_1"])]

    class DISCARDED(State):
        status = 100

        def FollowUpStateChanges(state, self):
            return [(Action.DISCARDED,
                     [a for a in self.Subactions
                      if a.status != Action.DISCARDED.status], 0)]

    class FINISHED(State):
        status = 200

        def Constraints(state, self):
            return [("MatchStateList",
                     [self.Subactions,
                      [Action.FINISHED, Action.DISCARDED],
                      "cdb_action_wf_rej_1"])]

        def post(state, self, ctx):
            if not self.end_time_act:
                self.end_time_act = cdbtime.now('%d.%m.%Y %H:%M:%S')

    def setActionId(self, ctx):
        self.id = "%06d" % util.nextval('cdb_action')

    def presetFromRelationship(self, ctx):
        if ctx.relationship_name:
            if ctx.relationship_name == 'cdb_action2subactions':
                parent = Action.ByKeys(ctx.parent.cdb_object_id)
                if parent:
                    if not self.cdb_project_id and parent.cdb_project_id:
                        ctx.set("cdb_project_id", parent.cdb_project_id)
                        if parent.task_id:
                            ctx.set("task_id", parent.task_id)
                    if not self.product_object_id and parent.product_object_id:
                        ctx.set("product_object_id", parent.product_object_id)
                    if not self.teilenummer and parent.teilenummer:
                        ctx.set("teilenummer", parent.teilenummer)
                        if parent.t_index:
                            ctx.set("t_index", parent.t_index)
                    if not self.subject_id and parent.subject_id:
                        ctx.set("subject_id", parent.subject_id)
                        ctx.set("subject_type", parent.subject_type)
                    if parent.currency_object_id:
                        ctx.set("currency_object_id", parent.currency_object_id)
            elif ctx.relationship_name == 'cdb_defect2actions':
                from cs.defects import Defect
                defect = Defect.ByKeys(ctx.parent.cdb_object_id)
                if defect:
                    if not self.cdb_project_id and defect.cdb_project_id:
                        ctx.set("cdb_project_id", defect.cdb_project_id)
                    if not self.product_object_id and defect.product_object_id:
                        ctx.set("product_object_id", defect.product_object_id)
                    if not self.teilenummer and defect.teilenummer:
                        ctx.set("teilenummer", defect.teilenummer)
                        if defect.t_index:
                            ctx.set("t_index", defect.t_index)
            elif ctx.relationship_name == 'cdbpcs_issue2actions':
                from cs.pcs.issues import Issue
                issue = Issue.ByKeys(cdb_project_id=ctx.parent.cdb_project_id, issue_id=ctx.parent.issue_id)
                if issue:
                    if not self.cdb_project_id and issue.cdb_project_id:
                        ctx.set("cdb_project_id", issue.cdb_project_id)
                        if not self.task_id and issue.task_id:
                            ctx.set("task_id", issue.task_id)
                        if not self.subject_id and issue.subject_id:
                            ctx.set("subject_id", issue.subject_id)
                            ctx.set("subject_type", issue.subject_type)
            elif ctx.relationship_name == 'cdbqc_qualitychar2actions' and ctx.parent.cdb_object_id:
                self.presetFromQC(ctx.parent.cdb_object_id, ctx)
        elif ctx.superior_operation_context_id:
            octx = OperationContext(ctx.superior_operation_context_id)
            if octx and octx.getClassname() == 'cdbqc_action2qc':
                self.presetFromQC(octx.getArgumentValueByName(u'cdbqc_action2qc.qc_object_id'), ctx)

    def presetFromQC(self, qc_object_id, ctx):
        qc = ByID(qc_object_id)
        if qc and qc.cdb_classname == 'cdbqc_obj_quality_character':
            f_object = ByID(qc.cdbf_object_id)
            if f_object:
                f_tablename = f_object.GetTableName()
                if f_tablename == 'cdbpcs_project':
                    if not self.cdb_project_id and f_object.cdb_project_id:
                        ctx.set("cdb_project_id", f_object.cdb_project_id)
                elif f_tablename == 'cdbpcs_task':
                    if not self.task_id and f_object.cdb_project_id and f_object.task_id:
                        ctx.set("cdb_project_id", f_object.cdb_project_id)
                        ctx.set("task_id", f_object.task_id)
                        if not self.subject_id and f_object.subject_id:
                            ctx.set("subject_id", f_object.subject_id)
                            ctx.set("subject_type", f_object.subject_type)
                elif f_tablename == 'cdbvp_product':
                    if not self.product_object_id and f_object.cdb_object_id:
                        ctx.set("product_object_id", f_object.cdb_object_id)
                        if not self.subject_id and f_object.subject_id:
                            ctx.set("subject_id", f_object.subject_id)
                            ctx.set("subject_type", f_object.subject_type)
                elif f_tablename == 'teile_stamm':
                    if not self.teilenummer and f_object.teilenummer:
                        ctx.set("teilenummer", f_object.teilenummer)
                        if f_object.t_index:
                            ctx.set("t_index", f_object.t_index)
                elif f_tablename == 'cdbrqm_specification':
                    if not self.product_object_id and f_object.product_object_id:
                        ctx.set("product_object_id", f_object.product_object_id)
                    if not self.cdb_project_id and f_object.cdb_project_id:
                        ctx.set("cdb_project_id", f_object.cdb_project_id)
                elif f_tablename == 'cdbrqm_spec_object':
                    if not self.product_object_id and f_object.Specification:
                        ctx.set("product_object_id", f_object.Specification.product_object_id)
                    if not self.cdb_project_id and f_object.Specification:
                        ctx.set("cdb_project_id", f_object.Specification.cdb_project_id)

    def presetCurrency(self, ctx):
        if not self.currency_object_id:
            dft_curr = Currency.getDefaultCurrency()
            if dft_curr:
                self.currency_object_id = dft_curr.cdb_object_id

    def checkCurrency(self, ctx):
        if self.cost:
            self.presetCurrency(ctx)

    event_map = {
        (('create', 'copy'), 'pre'): 'setActionId',
        (('copy', 'create'), 'pre_mask'): 'presetFromRelationship',
        (('copy', 'create', 'modify'), 'pre_mask'): 'presetCurrency',
        (('copy', 'create', 'modify'), 'pre'): 'checkCurrency',
        }


def generate_cdb_action_resp_brows():
    STATIC_PART = ("SELECT personalnummer AS subject_id, name AS description_de, name AS description_en"
                   ", name AS description_cs, name AS description_es, name AS description_fr"
                   ", name AS description_it, name AS description_ja, name AS description_ko"
                   ", name AS description_pl, name AS description_pt, name AS description_tr"
                   ", name AS description_zh, 'Person' AS subject_type"
                   ", name AS subject_name_de, name AS subject_name_en, name AS subject_name_cs"
                   ", name AS subject_name_es, name AS subject_name_fr, name AS subject_name_it"
                   ", name AS subject_name_ja, name AS subject_name_ko, name AS subject_name_pl"
                   ", name AS subject_name_pt, name AS subject_name_tr, name AS subject_name_zh"
                   ", '' AS cdb_project_id, 1 AS order_by"
                   " FROM angestellter WHERE active_account='1' and visibility_flag='1'"
                   " UNION"
                   " SELECT role_id AS subject_id, description AS description_de, description_ml_en AS description_en,"
                   " description_ml_cs AS description_cs, description_ml_es AS description_es,"
                   " description_ml_fr AS description_fr, description_ml_it AS description_it,"
                   " description_ml_ja AS description_ja, description_ml_ko AS description_ko,"
                   " description_ml_pl AS description_pl, description_ml_pt AS description_pt,"
                   " description_ml_tr AS description_tr, description_ml_zh AS description_zh,"
                   " 'Common Role' AS subject_type, name_de AS subject_name_de, name_en AS subject_name_en,"
                   " name_cs AS subject_name_cs, name_es AS subject_name_es, name_fr AS subject_name_fr,"
                   " name_it AS subject_name_it, name_ja AS subject_name_ja, name_ko AS subject_name_ko,"
                   " name_pl AS subject_name_pl, name_pt AS subject_name_pt, name_tr AS subject_name_tr,"
                   " name_zh AS subject_name_zh, '' AS cdb_project_id, 2 AS order_by"
                   " FROM cdb_global_role where is_org_role = 1")
    PCS_PART = (" UNION"
               " SELECT p.role_id AS subject_id, d.description AS description_de, d.description_ml_en AS description_en"
               ", d.description_ml_cs AS description_cs, d.description_ml_es AS description_es"
               ", d.description_ml_fr AS description_fr, d.description_ml_it AS description_it"
               ", d.description_ml_ja AS description_ja, d.description_ml_ko AS description_ko"
               ", d.description_ml_pl AS description_pl, d.description_ml_pt AS description_pt"
               ", d.description_ml_tr AS description_tr, d.description_ml_zh AS description_zh"
               ", 'PCS Role' AS subject_type, d.name_ml_de AS subject_name_de, d.name_ml_en AS subject_name_en"
               ", d.name_ml_cs AS subject_name_cs, d.name_ml_es AS subject_name_es"
               ", d.name_ml_fr AS subject_name_fr, d.name_ml_it AS subject_name_it"
               ", d.name_ml_ja AS subject_name_ja, d.name_ml_ko AS subject_name_ko"
               ", d.name_ml_pl AS subject_name_pl, d.name_ml_pt AS subject_name_pt"
               ", d.name_ml_tr AS subject_name_tr, d.name_ml_zh AS subject_name_zh"
               ", p.cdb_project_id AS cdb_project_id, 3 AS order_by"
               " FROM cdbpcs_prj_role p, cdbpcs_role_def d"
               " WHERE p.role_id = d.name")

    t = Table('cdbpcs_prj_role')
    return (STATIC_PART + PCS_PART) if t.exists() else STATIC_PART

if __name__ == '__main__':
    pass
