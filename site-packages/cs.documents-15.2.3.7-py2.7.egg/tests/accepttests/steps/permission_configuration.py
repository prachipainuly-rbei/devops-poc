#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#


from cdb.validationkit import run_with_added_roles, operation, when, then, given
from common import doc_approve_categ, doc_approve_maincateg, generateDocument
from cs.documents import Document


# -------------------------------------------------------------
# Scenario A Non-Writer Tries To Create A Document
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) tries to create a document$")
def step(context, role):
    context.document = None
    context.error = None

    @run_with_added_roles([role])
    def createDocument(context):
        try:
            context.document = \
                operation("CDB_Create", Document,
                          user_input={"titel": "Test"},
                          preset={"z_categ1": doc_approve_maincateg,
                                  "z_categ2": doc_approve_categ})
        except RuntimeError, context.error:
            pass
    return createDocument(context)


@then("he's (?P<result>.*) to do so")
def step(context, result):
    assert (
        (result == "permitted" and context.document is not None
         and context.error is None)
        or
        (result == "not permitted" and context.document is None
         and context.error is not None)
        )


# -------------------------------------------------------------
# Scenario A Non-Writer Tries To Handle An Unreleased Document
#
# -------------------------------------------------------------
@when(u"a (?P<role>.*) tries to (?P<action>.*) this document")
def step(context, role, action):
    @run_with_added_roles([role])
    def check():
        return context.document.CheckAccess(action, "behave_test")
    context.right_granted = check()


@then("he's (?P<result>.*) the necessary permissions")
def step(context, result):
    assert(
        (result == "not granted" and not context.right_granted)
        or
        (result == "granted" and context.right_granted)
    )


# -------------------------------------------------------------
# Scenario Writer Tries To Handle A Released Document
#
# -------------------------------------------------------------
@given("^a released document exists$")
def step(context):
    context.document = generateDocument(z_status=200)
    context.doc_len = len(Document.Query())


@when(u"a writer tries to (?P<action>.*) this released document")
def step(context, action):
    @run_with_added_roles(["Documentation"])
    def check():
        return context.document.CheckAccess(action, "behave_test")
    context.right_granted = check()
