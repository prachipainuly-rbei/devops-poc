#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import run_with_added_roles, operation, given, when, then, log
from cs.documents import DocumentCategory
from common import generateDocumentCategory


# -------------------------------------------------------------
# Scenario Create New Document Category
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) creates a new document category$")
def step(context, role):
    @run_with_added_roles([role])
    def create(context):
        try:
            context.doc_categ_len = len(DocumentCategory.Query())
            generateDocumentCategory()
        except Exception, e:
            log("Error creating the document category, details: %s" % e)
    return create(context)


@then("^a new document category is (?P<status>(?:not )?generated)$")
def step(context, status):
    if status == "generated":
        assert len(DocumentCategory.Query()) - context.doc_categ_len == 1,\
            "A new document category has not been created"
    elif status == "not generated":
        assert len(DocumentCategory.Query()) - context.doc_categ_len == 0,\
            "A new document category has been created"


# -------------------------------------------------------------
# Scenario Change Document Category
#
# -------------------------------------------------------------
def getDocCategAttributesToChange():
    return {
        "name_uk": "Changed"
    }


@given("^a document category exists$")
@run_with_added_roles(["Administrator"])
def step(context):
    context.doc_categ = generateDocumentCategory()
    context.doc_categ_len = len(DocumentCategory.Query())


@when("^(?P<role>.*?) changes this category$")
def step(context, role):
    @run_with_added_roles([role])
    def change(context):
        try:
            operation("CDB_Modify",
                      context.doc_categ,
                      user_input=getDocCategAttributesToChange())
        except Exception, e:
            log("Error changing the document category, details: %s" % e)
    return change(context)


@then("^the changed category is (?P<status>(?:not )?saved)$")
def step(context, status):
    context.doc_categ.Reload()
    s_attrs = set(getDocCategAttributesToChange().items())
    if status == "saved":
        assert s_attrs.issubset(set(context.doc_categ.items())),\
            "The attributes differ"
    elif status == "not saved":
        assert not s_attrs.issubset(set(context.doc_categ.items())),\
            "The attributes don't differ"


# -------------------------------------------------------------
# Scenario Copy Document Category
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) copies this category$")
def step(context, role):
    @run_with_added_roles([role])
    def copy(context):
        try:
            operation("CDB_Copy", context.doc_categ,
                      user_input={"name_d": "KopierteTestKategorie"})
        except Exception, e:
            log("Error coping the document category, details: %s" % e)
    return copy(context)


@then("^the category is (?P<status>(?:not )?copied|(?:not )?deleted)$")
def step(context, status):
    if status == "copied":
        assert len(DocumentCategory.Query()) - context.doc_categ_len == 1,\
            "The document category has not been copied"
    elif status == "not copied":
        assert len(DocumentCategory.Query()) - context.doc_categ_len == 0,\
            "The document category has been copied"
    elif status == "deleted":
        assert len(DocumentCategory.Query()) - context.doc_categ_len == -1,\
            "The document category was not deleted"
    elif status == "not deleted":
        assert len(DocumentCategory.Query()) - context.doc_categ_len == 0,\
            "The document category was deleted"


# -------------------------------------------------------------
# Scenario Delete Document Category
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) deletes this category$")
def step(context, role):
    @run_with_added_roles([role])
    def delete(context):
        try:
            operation("CDB_Delete", context.doc_categ)
        except Exception, e:
            log("Error deleting the document category, details: %s" % e)
    return delete(context)
