#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2017 CONTACT Software GmbH
# All rights reserved.
# https://www.contact-software.com/

"""
Test Module test_categories

This is the documentation for the tests.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_categories.py 170775 2017-12-21 16:21:33Z heiko $"

import unittest

from cdb import testcase
from cdb import util
from cdb import ElementsError
from cdb.platform.mom import entities
from cdb.constants import (kOperationNew,
                           kOperationModify,
                           kOperationCopy)
from cdb.objects.operations import operation


class TestCategoryNameUniqueness(testcase.RollbackTestCase):
    """
    Check if the system only permits category names that are unique
    within the subcategories of a category.
    """

    def setUp(self):
        self.cdef = entities.CDBClassDef("cdb_doc_categ")
        super(TestCategoryNameUniqueness, self).setUp()
        self.parent = operation(kOperationNew,
                                self.cdef,
                                categ_id=str(util.nextval("doc_categ_id")),
                                descr="Testkategorie",
                                name_d="Oberkategorie",
                                name_uk="Parent_category")

    def tearDown(self):
        super(TestCategoryNameUniqueness, self).tearDown()

    def test_creation(self):
        """
        Test the creation of a category. The creation should fail if
        the category label already exists.
        """
        test_cases = [
            # All different
            (self.parent.categ_id, "DE", "UK", False),
            # Same name as the parent is ok
            (self.parent.categ_id, self.parent.name_d, "", False),
            # Should fail - we have used DE before
            (self.parent.categ_id, "DE", "", True),
            # Should fali - we have used UK before
            (self.parent.categ_id, "", "UK", True),
            # Ok, the parent category differs
            ("0", "", "UK", False)
        ]
        for parent_id, name_d, name_uk, fails in test_cases:
            if fails:
                with self.assertRaises(ElementsError):
                    operation(kOperationNew,
                              self.cdef,
                              categ_id=str(util.nextval("doc_categ_id")),
                              descr="Testkategorie",
                              name_d=name_d,
                              name_uk=name_uk,
                              parent_id=parent_id)
            else:
                operation(kOperationNew,
                          self.cdef,
                          categ_id=str(util.nextval("doc_categ_id")),
                          descr="Testkategorie",
                          name_d=name_d,
                          name_uk=name_uk,
                          parent_id=parent_id)

    def test_modification(self):
        """
        Test the modification of a category. The modification should fail if
        the category label already exists.
        """
        sub1 = operation(kOperationNew,
                         self.cdef,
                         categ_id=str(util.nextval("doc_categ_id")),
                         descr="Testkategorie",
                         name_d="DE",
                         name_uk="UK",
                         parent_id=self.parent.categ_id)
        sub2 = operation(kOperationNew,
                         self.cdef,
                         categ_id=str(util.nextval("doc_categ_id")),
                         descr="Testkategorie",
                         name_d="DE2",
                         name_uk="UK2",
                         parent_id=self.parent.categ_id)

        test_cases = [
            # No duplicates - OK
            (self.parent.categ_id, "DE3", "UK3", False),
            # DE is already in use
            (self.parent.categ_id, "DE", "UK4", True),
            # UK is already in use
            (self.parent.categ_id, "DE4", "UK", True),
            # Ok, different parent
            (sub1.categ_id, "DE", "UK", False)
        ]

        for parent_id, name_d, name_uk, fails in test_cases:
            if fails:
                with self.assertRaises(ElementsError):
                    operation(kOperationModify,
                              sub2,
                              name_d=name_d,
                              name_uk=name_uk,
                              parent_id=parent_id)
            else:
                operation(kOperationModify,
                          sub2,
                          name_d=name_d,
                          name_uk=name_uk,
                          parent_id=parent_id)

    def test_copying(self):
        """
        Test the modification of a category. The action should fail if
        the category label already exists.
        """
        sub1 = operation(kOperationNew,
                         self.cdef,
                         categ_id=str(util.nextval("doc_categ_id")),
                         descr="Testkategorie",
                         name_d="DE",
                         name_uk="UK",
                         parent_id=self.parent.categ_id)

        test_cases = [
            # No duplicates - OK
            (sub1.parent_id, "DE3", "UK3", False),
            # DE is already in use
            (sub1.parent_id, "DE", "UK4", True),
            # UK is already in use
            (sub1.parent_id, "DE5", "UK", True),
            # Ok, different parent
            (sub1.categ_id, "DE", "UK", False)
        ]

        for parent_id, name_d, name_uk, fails in test_cases:
            if fails:
                with self.assertRaises(ElementsError):
                    operation(kOperationCopy,
                              sub1,
                              categ_id=str(util.nextval("doc_categ_id")),
                              name_d=name_d,
                              name_uk=name_uk,
                              parent_id=parent_id)
            else:
                operation(kOperationCopy,
                          sub1,
                          categ_id=str(util.nextval("doc_categ_id")),
                          name_d=name_d,
                          name_uk=name_uk,
                          parent_id=parent_id)


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
