#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
Register tiles by launchpad.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 127129 2015-06-30 13:25:20Z gwe $"

from cdb import elink
from cdb import sig
from cdb.util import Labels

__all__ = []


@elink.using_template_engine("chameleon")
class LaunchpadPlugin(elink.Application):

    def setup(self):
        self.cssfile = ""
        self.make_tiles()

    def _tile(self, cssid, url, label, count=None):
        return {"cssid": cssid,
                "url": url,
                "label": label,
                "count": count}

    def make_tiles(self):
        from cdb import cmsg
        from cdb import auth
        from cs.documents import Document
        documents = []
        url = cmsg.Cdbcmsg("document", "CDB_Search", False)
        url.add_item("mapped_cpersno_name", "", auth.get_name())
        my_persno = auth.get_attribute("personalnummer")

        def document_amount():
            return len(Document.KeywordQuery(cdb_cpersno=my_persno))

        documents.append(self._tile("document-my",
                                    url.eLink_url(),
                                    Labels()["doc_launchpad_my_documents"],
                                    document_amount))

        url = cmsg.Cdbcmsg("model", "CDB_Search", False)
        url.add_item("mapped_cpersno_name", "", auth.get_name())

        def model_amount():
            return len(Document.KeywordQuery(cdb_cpersno=my_persno,
                                             cdb_classname='model'))

        documents.append(self._tile("cad-my",
                                    url.eLink_url(),
                                    Labels()["doc_launchpad_my_cad_documents"],
                                    model_amount))

        url = cmsg.Cdbcmsg("document", "CDB_Search", True)
        documents.append(self._tile("document-search",
                                    url.eLink_url(),
                                    Labels()["doc_launchpad_search_documents"]))

        url = cmsg.Cdbcmsg("model", "CDB_Search", True)
        documents.append(self._tile("cad-search",
                                    url.eLink_url(),
                                    Labels()["doc_launchpad_search_cad_documents"]))

        url = cmsg.Cdbcmsg("document", "CDB_Create", True)
        documents.append(self._tile("document-add",
                                    url.eLink_url(),
                                    Labels()["doc_launchpad_new_document"]))
        self.category_label = Document._getClassDef().getTitle()
        self.tiles = documents


# lazy initialization
app = None


@sig.connect("cs.launchpad.getplugins")
def get_launchpad_plugin():
    global app
    if app is None:
        app = LaunchpadPlugin()
    # return: (order, plugin-app)
    return (2, app)
