# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_versions.py 178087 2018-05-31 14:17:03Z heiko $"

import unittest
from webtest import TestApp as Client
from cs.platform.web.root import Root
from cdb.testcase import RollbackTestCase, error_logging_disabled


class TestObject(RollbackTestCase):

    def setUp(self):
        """
        Set up the test case
        """
        super(TestObject, self).setUp()

        try:
            from cs.documents import Document
        except ImportError:
            raise unittest.SkipTest("this test needs cs.documents")
        self.created = Document.Create(
            z_nummer="D000009",
            z_index="",
            titel="test",
            z_categ1=142,
            z_categ2=153,
            autoren="Administrator",
            z_bereich="IT",
            erzeug_system="PAPIER",
            z_status_txt='In Progress',
            z_art='doc_standard',
            z_status=0,
            cdb_obsolete=0,
            cdb_mpersno="caddok",
            cdb_mdate="05.12.2014 16:49:58",
            cdb_cpersno="caddok",
            cdb_cdate="05.12.2014 16:49:58"
        )

        app = Root()
        self.c = Client(app)

    def test_document_GET(self):
        oid = self.created.z_nummer
        response = self.c.get(u'/api/v1/collection/document/%s' % oid)
        self.assertEqual(response.json["titel"], "test")
        self.assertEqual(response.json["category1_name"], "Allgemeines")
        self.assertEqual(response.json["category2_name"], "Besuchsbericht")

    def test_document_GET_invalid(self):
        oid = "invalid"
        with error_logging_disabled():
            response = self.c.get(u'/api/v1/collection/document/%s' % oid,
                                  expect_errors=True)
        self.assertEqual(response.status_code, 404)

    def test_versions_GET(self):
        oid = self.created.z_nummer
        response = self.c.get(u'/api/v1/collection/document/%s/versions' % oid)
        self.assertEqual(len(response.json), 1)
        self.assertEqual(response.json[0]["z_index"], "")
        self.assertEqual(response.json[0]["z_status_txt"], "In Progress")
        link = response.json[0]["@id"]
        response = self.c.get(link)
        self.assertEqual(response.json["z_index"], "")

    def test_versions_PUT(self):
        oid = self.created.z_nummer
        with error_logging_disabled():
            response = self.c.put_json(u'/api/v1/collection/document/%s/versions' % oid, {})
        self.assertEqual(len(response.json), 2)
        self.assertEqual(response.json[0]["z_index"], "")
        self.assertEqual(response.json[1]["z_index"], "a")
        link = response.json[1]["@id"]
        response = self.c.get(link)
        self.assertEqual(response.json["z_index"], "a")
        # check GetLatestObjectVersion on 2 non-released docs
        response = self.c.get(u'/api/v1/collection/document/%s' % oid)
        self.assertEqual(response.json["titel"], "test")

    def test_versions_PUT_content(self):
        json = {
            'cdb::argument.z_index_neu': 'b'
        }
        oid = self.created.z_nummer
        with error_logging_disabled():
            response = self.c.put_json(u'/api/v1/collection/document/%s/versions' % oid, json)
        self.assertEqual(len(response.json), 2)
        self.assertEqual(response.json[0]["z_index"], "")
        self.assertEqual(response.json[1]["z_index"], "b")
        link = response.json[1]["@id"]
        response = self.c.get(link)
        self.assertEqual(response.json["z_index"], "b")
