/**
 * Created by cla on 07.04.2016.
 */

import React from 'react';
import {
    ApplicationBar,
    Form,
    PageFrame,
    SinglePage,
    WithOperationTrigger,
    OperationHandlers,
    WizardProgressPanel,
    getAppSetup,
    getJSON,
    addNotification,
    removeNotificationNow,
    parseQuery
} from 'cs-web-components-base';
import {PropTypes, connect} from 'cs-web-components-externals';
import DocTemplateCatalog from '../DocTemplateCatalog';
import Immutable from 'immutable';
import {prefixNS} from '../helpers.js';

const NOTIFICATION_ID = prefixNS('DocTemplateCreate');
const HANDLER_ID = prefixNS('DocTemplateCreate');

/**
 * Internal component that is use for the
 * Create from template application.
 */
class DocTemplateCreate extends React.Component {
    constructor(props) {
        super(props);
        const appSetup = getAppSetup();
        const wiz_labels = appSetup.get('wizard_labels');
        this.steps = Immutable.List([
            Immutable.Map({'label': wiz_labels.get(0)}),
            Immutable.Map({'label': wiz_labels.get(1)})]
        );
        this.template_selected = this.template_selected.bind(this);
        this.items = [
            {
                key: 'app',
                name: appSetup.get('header_title'),
                icon: appSetup.get('header_icon'),
                active: true
            }
        ];
    }

    /**
     * Called after the template has been selected. Retrieves
     * the parameters for the operation to be called from the backend.
     */
    startWebUIOperation(obj) {
        this.props.removeNotificationNow(NOTIFICATION_ID);
        const appSetup = getAppSetup();
        const para_url = appSetup.get('op_para_link');
        const query_args = parseQuery(window.location);
        query_args["template_uuid"] = obj['cdb_object_id'];
        getJSON(para_url, query_args).then(
            (resp) => {
                const errmsg = resp['error'];
                if (errmsg !== undefined) {
                    // Back to template selection
                    this.props.addNotification(
                        NOTIFICATION_ID,
                        resp['error_caption'],
                        errmsg,
                        'danger',
                        1,
                        null,
                        30000
                    );
                } else {
                    this.props.runOperation(
                        Immutable.fromJS(resp['opInfo']),
                        {
                            parameters: Immutable.fromJS(resp['args']),
                            successActions: [OperationHandlers.navigate()],
                        },
                    );
                }
            }
        );
    }

    /**
     * Callback for the FlatCatalog. It is called if the user
     * presses the Select-Button
     */
    template_selected(catalog_result) {
        const obj = catalog_result['selected_objects'][0];
        this.startWebUIOperation(obj);
    }

    render() {
        return (
            <div>
                <ApplicationBar items={this.items}/>
                <WizardProgressPanel
                    position={this.props.isInstanceActive ? 1 : 0}
                    steps={this.steps}/>
                <Form.Form handlerName={HANDLER_ID} />
                {!this.props.isInstanceActive ?
                    <DocTemplateCatalog onSelect={this.template_selected}/> :
                    null}
            </div>
        );
    }
}

DocTemplateCreate.propTypes = {
    runOperation: PropTypes.func.isRequired,
    isInstanceActive: PropTypes.bool.isRequired,
    addNotification: PropTypes.func.isRequired,
    removeNotificationNow: PropTypes.func.isRequired,
};

const DocTemplateCreateWithOp = WithOperationTrigger(
    connect(null, {addNotification, removeNotificationNow})(DocTemplateCreate),
    HANDLER_ID
);

export default class DocTemplateCreateApp extends React.Component {
    render() {
        return (<SinglePage
            frameComponent={PageFrame.ApplicationFrame}
            pageContent={DocTemplateCreateWithOp} />);
    }
}
