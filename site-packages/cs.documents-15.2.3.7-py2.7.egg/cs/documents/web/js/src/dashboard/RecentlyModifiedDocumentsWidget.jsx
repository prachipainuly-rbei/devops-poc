/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RecentlyModifiedDocumentsWidget.jsx 183605 2018-09-10 13:31:19Z heiko $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {getJSON, Throbber, Messages} from 'cs-web-components-base';
import Dashboard from 'cs-web-dashboard';
import {formatStr} from '../i18n.js';
import {ListElement, ListElementGroup} from './ListElement.jsx';
import groupByMDate from './groupByDate.js';

const rulename = 'cs-web-dashboard: My Documents';
const collectionURL = ('/api/v1/collection/document'
                     + `?rule=${rulename}`
                     + '&withFiles=no'
                     + '&$orderby=cdb_mdate desc'
                     + '&maxrows=10');
const stateColorsURL = ('/internal/uisupport/state_colors/document');
const appLink = "/info/document";

const system_description = "system:description";
const ui_link = "system:ui_link";
const icon_link = "system:icon_link";
const z_status = "z_status";
const status_name = "joined_status_name";
const doc_approve = "doc_approve";

class RecentlyModifiedDocumentsWidget extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            searchResult: undefined,
            stateColors: undefined
        };
        this.displayBanner = this.displayBanner.bind(this);
    }

    componentDidMount() {
        getJSON(collectionURL).then(result => {
            getJSON(stateColorsURL).then(result2 => {
                this.setState({
                    searchResult: Immutable.fromJS(result),
                    stateColors: Immutable.fromJS(result2)
                }, () => {
                    this.state.searchResult.get('objects').size === 0 ?
                        this.displayBanner() : null;
                });
            });
        });
    }

    displayBanner() {
        this.props.postMessage({
            level: Messages.Level.INFO,
            title: formatStr("empty_title"),
            message: formatStr("empty_body"),
            owner: this,
            global: true,
            id: 'documents-banner-message'},
            Messages.createBanner({bannerContainerId: 'documents-banner'}),
            Messages.createNotification({timeout: 5000})
        );
    }

    renderContent(searchResult) {
        const {stateColors} = this.state;
        const groupedObject = groupByMDate(searchResult);
        return (
            <div>
                {Object.entries(groupedObject).map((category, key) => (
                    category[1].array.length > 0 ?
                        <ListElementGroup
                            key={"listElementGroup" + key}
                            title={category[1].headline}>
                            {category[1].array.map((item, index) => (
                                <ListElement
                                    key={"listElement" + index}
                                    stateTitle={item.get(status_name)}
                                    stateColor={
                                        stateColors.
                                        get(doc_approve).
                                        get(item.get(z_status).toString())}
                                    title={item.get(system_description)}
                                    icon={item.get(icon_link)}
                                    uiLink={item.get(ui_link)}/>
                            ))}
                        </ListElementGroup>
                    : null
                ))}
            </div>
        );
    }

    renderBody() {
        const {searchResult} = this.state;
        if (searchResult === undefined) {
            return <Throbber />;
        } else {
            return this.renderContent(searchResult);
        }
    }

    render() {
        const {item} = this.props;
        const {searchResult} = this.state;
        const title = formatStr("recently_modified_documents");
        if (searchResult !== undefined) {
            return (
                <Dashboard.DashboardItem
                    item={item}
                    title={searchResult.get('objects').size === 10 ? title + " (10)" : title}
                    appLink={appLink}>
                    <Messages.BannerContainer id="documents-banner" />
                    {this.renderBody()}
                </Dashboard.DashboardItem>
            );
        } else {
            return <Throbber />;
        }
    }
}

export default connect(
    undefined,
    {postMessage: Messages.Actions.postMessage}
    )(RecentlyModifiedDocumentsWidget);

RecentlyModifiedDocumentsWidget.propTypes = {
    postMessage: PropTypes.func,
    // these come from the dashboard infrastructure, and must be passed on
    item: ImmutablePropTypes.map.isRequired,
    columnWidth: PropTypes.oneOf(['small', 'medium']).isRequired,
    setSettings: PropTypes.func.isRequired
};
