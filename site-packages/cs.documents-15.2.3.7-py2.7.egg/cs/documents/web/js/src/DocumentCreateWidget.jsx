/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DocumentCreateWidget.jsx 175631 2018-04-09 10:44:36Z cla $"
 */

import React from 'react';
import {Dropdown, MenuItem} from 'react-bootstrap';
import {PropTypes} from 'cs-web-components-externals';
import {
    FileDropzone, getAppSetup, ObjectWidgets
} from 'cs-web-components-base';
import Immutable from 'immutable';
import {prefixNS} from './helpers.js';
import {formatStr} from './i18n';

let dropdownCounter = 0;

export default class _DocumentCreateWidget extends React.Component {
    constructor(props) {
        super(props);
        this.onDrop = this.onDrop.bind(this);
        this.submitQueryClassDialog = this.submitQueryClassDialog.bind(this);
        this.closeQueryClassDialog = this.closeQueryClassDialog.bind(this);
        this.toggleQueryClassDialog = this.toggleQueryClassDialog.bind(this);
        this.operations = getAppSetup().getIn(['cs-documents-web', 'create_document']);
        this.dropdownID = prefixNS(`DocumentCreateWidget-Dropdown-${++dropdownCounter}`);
        this.state = {
            files: Immutable.List()
        };
    }

    onDrop(files) {
        const immutableFiles = Immutable.List(files);
        // Immediately startOperation if only one class available,
        // else Dropdown is rendered, see DocumentCreateWidget.render()
        if (this.operations.size === 1) {
            this.props.runOperation(this.operations.get(0), {initialFiles: immutableFiles});
        } else if (this.operations.size > 1) {
            this.setState({files: immutableFiles});
        }
    }

    submitQueryClassDialog(operation) {
        this.props.runOperation(operation, {initialFiles: this.state.files});
        this.closeQueryClassDialog();
    }

    closeQueryClassDialog() {
        this.setState({files: Immutable.List()});
    }

    toggleQueryClassDialog(open) {
        if (!open) {
            this.closeQueryClassDialog();
        }
    }

    render() {
        const {isOperationRunning} = this.props;
        if (this.operations.size === 0 || isOperationRunning) {
            return null;
        }

        // Dropdown.Toggle is required by bootstrap and should
        // not be removed, though it is not visible
        return (
            <Dropdown
                className={prefixNS("document-create-widget")}
                id={`${this.dropdownID}`}
                open={this.state.files.size > 0 && this.operations.size > 1}
                onToggle={this.toggleQueryClassDialog}
            >
                <FileDropzone onDrop={this.onDrop}>
                    <div className={prefixNS('form-upload-placeholder')}>
                        {formatStr('dropzone_create_label')}
                    </div>
                </FileDropzone>
                <Dropdown.Toggle style={{display: 'none'}} />
                <Dropdown.Menu>
                    {this.operations.map(op => (
                        <MenuItem
                            key={op.get('submit_url')}
                            onSelect={() => this.submitQueryClassDialog(op)}
                        >
                            <ObjectWidgets.ObjectLabel
                                text={`${op.get('label')}`}
                                icon={op.get('icon')} />
                        </MenuItem>
                    ))}
                </Dropdown.Menu>
            </Dropdown>
        );
    }
}

_DocumentCreateWidget.propTypes = {
    runOperation: PropTypes.func.isRequired,
    isOperationRunning: PropTypes.bool,
    displayFiles: PropTypes.bool,
    vertical: PropTypes.bool
};

_DocumentCreateWidget.defaultProps = {
    isOperationRunning: false,
    displayFiles: true,
    vertical: false
};
