#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# https://www.contact-software.com/

"""
Test Module test_worflow_issues

This is the documentation for the tests.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_operations.py 177976 2018-05-30 14:24:33Z heiko $"

import unittest
from datetime import datetime

from cdb import auth, sqlapi, testcase, typeconversion, ElementsError
from cs.documents import Document, DocumentCategory
from cdb import constants
from cdb.objects.operations import operation


# Tests
class Test_document_Create(testcase.RollbackTestCase):
    """
    Test CDB_Create operation for document class
    """
    def setUp(self):
        super(Test_document_Create, self).setUp()

    def tearDown(self):
        super(Test_document_Create, self).tearDown()

    def test_wf_init_on_create(self):
        """
        The standard initializes the workflow using the category
        """
        categ = DocumentCategory.ByKeys(322)
        d = operation(constants.kOperationNew,
                      "document",
                      z_categ1=categ.parent_id,
                      z_categ2=categ.categ_id)
        self.assertEqual(d.z_status, 0)
        self.assertEqual(d.z_status_txt, "Draft")
        self.assertEqual(d.z_art, categ.getWorkflow(""))

    def test_initial_values_set(self):
        """
        Check if the intial attributes are set and do not
        overwrite values provided to the function.
        """
        initial_values = Document.GetInitialCreateValues()
        self.assertTrue("zeichner" in initial_values,
                        "Test has to be changed (initial attr missing)")
        categ = DocumentCategory.ByKeys(322)
        d = operation(constants.kOperationNew,
                      "document",
                      z_categ1=categ.parent_id,
                      z_categ2=categ.categ_id,
                      zeichner="unknown")
        initial_values["zeichner"] = "unknown"
        for attr, val in initial_values.items():
            doc_val = d[attr]
            if isinstance(doc_val, datetime) and isinstance(val, basestring):
                val = typeconversion.to_python_rep(sqlapi.SQL_DATE, val)
            self.assertEqual(d[attr], val)


class Test_document_object_op(testcase.RollbackTestCase):
    """
    Base class for testing object operations.
    """
    def setUp(self):
        super(Test_document_object_op, self).setUp()
        categ = DocumentCategory.ByKeys(200)  # doc_approve
        self.doc = operation(constants.kOperationNew,
                             "document",
                             cdb_obsolete=1,
                             pruefer="caddok",
                             autoren="hinz, kunz",
                             z_categ1=categ.parent_id,
                             z_categ2=categ.categ_id)

    def tearDown(self):
        super(Test_document_object_op, self).tearDown()


class Test_document_Modify(Test_document_object_op):
    """
    Test CDB_Modify operation for document class
    """

    def test_wf_init_on_change(self):
        """
        It is allowed to change the workflow in the initial state.
        """
        categ = DocumentCategory.ByKeys(322)
        d = operation(constants.kOperationModify,
                      self.doc,
                      z_categ1=categ.parent_id,
                      z_categ2=categ.categ_id)
        self.assertEqual(d.z_status, 0)
        self.assertEqual(d.z_art, categ.getWorkflow(""))

    def test_refuse_wf_change(self):
        """
        It is not allowed to change the workflow in a state != ``0``.
        """
        self.doc.ChangeState(100)
        categ = DocumentCategory.ByKeys(322)
        with self.assertRaises(ElementsError):
            d = operation(constants.kOperationModify,
                          self.doc,
                          z_categ1=categ.parent_id,
                          z_categ2=categ.categ_id)


class Test_document_Copy(Test_document_object_op):
    """
    Test CDB_Copy operation for document class
    """

    def test_attr_init(self):
        """
        Check if initial attributes are set and others are resetted
        """
        categ = DocumentCategory.ByKeys(322)
        d = operation(constants.kOperationCopy,
                      self.doc,
                      z_categ1=categ.parent_id,
                      z_categ2=categ.categ_id)
        self.assertEqual(d.z_status, 0)
        self.assertEqual(d.z_art, categ.getWorkflow(""))
        # cdb_obsolete and pruefer has to be resetted
        self.assertEqual(d.pruefer, "")
        self.assertEqual(d.cdb_obsolete, 0)
        self.assertEqual(d.autoren, auth.get_name())
        self.assertEqual(d.source_oid, self.doc.cdb_object_id)


class Test_document_Index(Test_document_object_op):
    """
    Test CDB_Index operation for document class
    """

    def test_attr_init(self):
        """
        Check if initial attributes are set and others are resetted
        """
        d = operation(constants.kOperationIndex,
                      self.doc)
        # cdb_obsolete and pruefer has to be resetted
        self.assertEqual(d.pruefer, "")
        self.assertEqual(d.cdb_obsolete, 0)
        # The author should stay
        self.assertEqual(d.autoren, self.doc.autoren)


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
