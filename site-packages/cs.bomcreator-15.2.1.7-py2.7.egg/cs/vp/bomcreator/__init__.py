#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2010 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
Module bomcreator

An e-link application that presents a generated BOM to the user and offers
to import it as the BOM of the selected assembly.

Depending on the configuration it may also display multiple BOMs
(of referenced documents) and offers import for each BOM.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 175948 2018-04-16 11:51:54Z wme $"

import traceback
import sys
import json

from cdb import misc
from cdb import elink
from cdb.objects import ByID

from cs.vp.bomcreator.bom import msg, UserHintList, GeneratedBOM, \
    ReplaceDatetimeDecoder
from cs.vp.bomcreator.bomreader import create_bom, delete_unused_new_articles


def log(txt):
    """internal logging shortcut"""
    misc.cdblogv(misc.kLogMsg, 7, txt)


def log_error(txt):
    """internal logging shortcut"""
    misc.cdblogv(misc.kLogErr, 0, txt)


def get_object(**kwargs):
    """
    :param kwargs should contain cdb_object_id
    :return (Document or None, error message or None)
    """
    result = None
    cdb_object_id = kwargs.get('cdb_object_id')
    log("BOMCreator called for object %s" % cdb_object_id)
    if not cdb_object_id:
        log_error("BOMCreator: no cdb_object_id given")
    else:
        result = ByID(cdb_object_id)
        if result is None:
            log_error("BOMCreator: object not found")
        elif not result.CheckAccess("read"):
            log_error("BOMCreator: no 'read' right on object")
            result = None
    error = None
    if result is None:
        error = msg('WSM_BOM_object_not_found') % cdb_object_id
    return result, error


@elink.using_template_engine("chameleon")
class BOMCreator(elink.Application):
    def setup(self):
        self.add("bomcreator_confirm", PreviewPage())
        self.addJSON(self.submit_boms)
        self.addJSON(self.cancel)

    def submit_boms(self, boms):
        """
        Receives a list of GeneratedBOMs as JSON and
         saves these BOMs to the database.
        """
        try:
            boms = json.loads(boms, cls=ReplaceDatetimeDecoder)
            log("BOMCreator.submit_boms: %d boms." % len(boms))
            boms = [GeneratedBOM.from_json(bom) for bom in boms]
            log("BOMCreator.submit_boms: boms deserialized.")
            success = True
            hints_after_import = UserHintList()
            written_boms = []

            for b in boms:
                if b.is_selected:
                    if b.write(hints_after_import):
                        written_boms.append(b)
                    else:
                        success = False

            if boms:
                first_bom_reader = boms[0].get_factory().reader if boms else None
                if first_bom_reader:
                    first_bom_reader.post_write_boms(written_boms, hints_after_import)

            delete_unused_new_articles(boms)

            res = {'success': success,
                   'messages': list(hints_after_import)}
        except Exception:
            logMsg = "".join(traceback.format_exception(*sys.exc_info()))
            log_error(u"Error in BOMCreator.submit_BOM: %s" % logMsg)
            userMsg = u"<b>Internal error on server</b>:<br>%s" %\
                      "<br>".join(traceback.format_exception(*sys.exc_info()))
            res = {'success': False,
                   'messages': [(userMsg, "alert-error")]}
        return res

    def cancel(self, boms):
        """
        Called when the app is cancelled without saving the BOMs.
        Receives a list of GeneratedBOMs as JSON and deletes temporary items.
        """
        try:
            boms = json.loads(boms, cls=ReplaceDatetimeDecoder)
            log("BOMCreator.cancel: %d boms." % len(boms))
            boms = [GeneratedBOM.from_json(bom) for bom in boms]
            log("BOMCreator.cancel: boms deserialized.")
            delete_unused_new_articles(boms)
            log("BOMCreator.cancel: deleted unused temporary items.")
        except Exception:
            errorText = "".join(traceback.format_exception(*sys.exc_info()))
            log_error(u"Error in BOMCreator.cancel: %s" % errorText)


class PreviewPage(elink.Template):
    """
    Displays the BOM(s) in a FORM, each one selectable.
    """
    __template__ = "bomcreator_confirm.html"
    __cdbhelpid__ = "cs_vp_bomcreator"

    def render(self, context, *args, **kwargs):
        obj, error = get_object(**kwargs)
        if obj is None:
            global_user_hints = UserHintList()
            global_user_hints.append_error(error)
            res = {'global_user_hints': global_user_hints,
                   'boms': [],
                   'enable_save': False,
                   'title': ""}
            self.application.boms = []
        else:
            log("PreviewPage, render %s" % obj.cdb_object_id)
            global_user_hints = UserHintList()
            # create synchronized bom(s), and display it
            boms = create_bom(obj, global_user_hints, cadsource=kwargs.get('cadsource'))
            log("PreviewPage, BOM(s) created.")
            has_changes = False
            for b in boms:
                bom_changed, _ = b.synchronize()
                if bom_changed:
                    has_changes = True
            log("PreviewPage, BOM(s) synchronized.")

            title = obj.GetDescription()
            res = {'global_user_hints': global_user_hints,
                   'boms': boms,
                   'enable_save': has_changes,
                   'title': title}
        return res


app = elink.AppMaker(BOMCreator)


# from cs.vp.cad import CADVariant
# from cdb import sig
#
#
# @sig.connect(CADVariant, "variant_createbom", "now")
# def create_bom_from_variant(self, ctx):
#    """
#    For manual test of BOM invocation on non-documents.
#    Starts the bomcreator e-Link app."""
#    ctx.url("powerscript/"
#            "cs.vp.bomcreator.app/"
#            "bomcreator_confirm?cdb_object_id=%s&cadsource=%s" %
#            (self.cdb_object_id, "ProE"))
