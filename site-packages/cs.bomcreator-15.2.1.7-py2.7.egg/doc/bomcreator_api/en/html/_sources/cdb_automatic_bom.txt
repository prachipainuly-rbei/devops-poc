.. -*- rst -*- 

Creating a BOM automatically
============================

Introduction
^^^^^^^^^^^^
The cs.vp.bomcreator module is designed for customizable, interactive creation
of bills of materials (BOM) and includes a preview function.
However, in some situations customers need BOMs to be created and updated
automatically without user intervention whenever new data enters the system.
It is possible to implement such behaviour with some manual customization.

Requirements
^^^^^^^^^^^^
To implement automatic BOM creation we first need a suitable integration point
where all needed data is available. The exact user exit or signal to use
depends on the type of input data.

For data imported with the Workspace Manager, the right choice is the signal
`wsmcommit`, emitted by the Workspace Manager communication component. This
signal is only available in **Workspace Manager 3.1** and newer.

Basic implementation
^^^^^^^^^^^^^^^^^^^^
The cs.vp.bomcreator.bomreader Python module contains a function
`create_and_save_bom` which is suitable for this use case. It considers the
current configuration and creates a BOM for the article associated with the
given CAD document. Note: Depending on the configuration, it may also create
BOMs for referenced documents and their articles.

The function is called like this, if you are using **Workspace Manager 3.1.1-4**: ::

    from cdb import sig
    from cs.documents import Document
    from cs.vp.bomcreator.bom import UserHintList
    from cs.vp.bomcreator.bomreader import create_and_save_bom

    @sig.connect(Document, "wsmcommit", "post")
    def create_bom_after_commit(doc):
        try:
            hasArticle = bool(doc.Item)
            isDrawing = doc.z_categ2 == "CAD-Zeichnung"  # customize!
            if hasArticle and not isDrawing:
                errors_and_hints = UserHintList()
                success = create_and_save_bom(doc, errors_and_hints)
        except:
            pass  # better: log exception

In this example, we connect the code to the Workspace Manager-specific
signal `wsm_commit` to make sure that the BOM is created and updated
whenever the data of a document is committed.

`create_and_save_bom` logs most errors and warnings automatically.
However, errors will not be visible to the user!

.. warning::
   BOMs must not be created from drawing documents. The mechanism how to exclude
   drawings is dependend on the concrete installation and must be adjusted
   (comparing "z_categ2" to "CAD-Zeichnung" will not work in the general case).


If you are using **Workspace Manager 3.1.5** or newer, the signature is
slightly changed: ::

    ...
    @sig.connect(Document, "wsmcommit", "post")
    def create_bom_after_commit(doc, ctx):
    ...



If you are using **Workspace Manager 3.3** or newer, you can improve this
example by returning any errors and warnings to the Workspace Manager where
they will be displayed after the commit operation.

The Workspace Manager expects error messages in a format that is different from
the format that is used by the BOM creation. So some glue code is
necessary: ::

    import traceback
    from cdb import sig
    from cs.documents import Document
    from cs.vp.bomcreator.bom import UserHintList
    from cs.vp.bomcreator.bomreader import create_and_save_bom
    from cs.wsm.result import Result, Error, Info


    @sig.connect(Document, "wsmcommit", "post")
    def create_bom_after_commit(doc, ctx):
        res = Result()
        try:

            hasArticle = bool(doc.Item)
            isDrawing = doc.z_categ2 == "CAD-Zeichnung"  # customize!
            if hasArticle and not isDrawing:
                errors_and_hints = UserHintList()
                create_and_save_bom(doc, errors_and_hints)
                res += convert_to_result(errors_and_hints)

        except Exception:
            res += Error("Unexpected exception while creating BOM for document %s-%s:\n%s"
                         % (doc.z_nummer, doc.z_index, traceback.format_exc()))
        return res


    def convert_to_result(userHintList):
        res = Result()
        for msg, alertType in userHintList:
            msg = u"%s" % msg  # convert to unicode if bytestring
            if alertType == 'alert-error':
                res += Error(msg)
            elif alertType == 'alert-warning':
                res += Info(msg)
        return res

