.. -*- rst -*- 

cs.vp.bomcreator.bomreader
==========================
 
.. automodule:: cs.vp.bomcreator.bomreader


SimpleBOMReader
^^^^^^^^^^^^^^^

.. autoclass:: cs.vp.bomcreator.bomreader.SimpleBOMReader
   :members: fill_BOM, add_position, add_error, add_warning
   :show-inheritance:

BOMContext
^^^^^^^^^^

.. autoclass:: cs.vp.bomcreator.bomreader.BOMContext
   :members:

BOMFatalError
^^^^^^^^^^^^^

.. autoclass:: cs.vp.bomcreator.bomreader.BOMFatalError
   :members:


BOMReader
^^^^^^^^^

.. autoclass:: cs.vp.bomcreator.bomreader.BOMReader
   :members: adjust_and_filter, ignore_component_document, ignore_component_item, ignore_variant, log, post_write_component, post_write_bom, post_write_boms, pre_show_component, use_kernel_operations


make_recursive_reader_type
^^^^^^^^^^^^^^^^^^^^^^^^^^
.. function:: cs.vp.bomcreator.bomreader.make_recursive_reader_type

    Given a class that implements the BOMReader interface,
    creates a class that also implements this interface, but
    additionally creates BOMs for the referenced docs.

    In other words: Takes a non-recursive bom reader C and
    creates a recursive one, based on C.

    Ignores a document if it has encountered the document before
    (breaking cycles).

    :Parameters:
      - `reader_class`: class
          a class derived from :class:`cdb.bom.bomreader.BOMReader`
          instances of this class have to return a list of IDs of referenced
          documents in the attribute `referenced_docs`
      - `result_order`: :class:`ResultOrder`
          how to sort the tree of BOMs; either `ResultOrder.DepthFirst` or `ResultOrder.BreadthFirst`
      - `max_depth`: int
          maximum recursion depth (0=no limit)
