.. _`taskmanager-conf-plugins`:

Plugins
================================================================================

Die Darstellung bestimmter Elemente kann mit Hilfe von Plugins selbst gestaltet
werden. Plugins sind dabei im System bekannte Frontend-Komponenten.

Einer Aufgabenklasse können mehrere Plugins zugeordnet werden. Die Zuordnung
geschieht über den Diskriminator, der dem Namen der Klasse entsprichen muss.
Tatsächlich ausgewertet werden aber nur bestimmte Plugin-IDs.

cs-tasks-desc
--------------------------------------------------------------------------------

Komponente, die innerhalb des Blocks "Beschreibung" gerendert wird. In der Regel
wird hier der textuelle Inhalt der Aufgabe als Langtext dargestellt, oft aber
auch während der Bearbeitung nutzbare Interaktionen, wie z.B. die Änderung des
Fertigstellungsgrads.

cs-tasks-custom-status-cell
--------------------------------------------------------------------------------

Komponente, die die reguläre für Statuswerte verwendete Komponente für diese
Klasse ersetzt. Sie wird für Klassen benötigt, die entweder keinen Object Lifecycle
besitzen oder bei denen dieser nicht ausschlaggebend für den Anzeigestatus in
|cs.taskmanager| ist.

cs-tasks-custom
--------------------------------------------------------------------------------

Komponente, die den Inhalt eines zusätzlichen, optionalen Blocks bereitstellt.
Ein Anwendungsbeispiel wäre etwa ein Block für Aufwandsbuchung zur Aufgabe.

Die Komponente sollte eine Funktion ``getLabel`` besitzen, die die Beschriftung
des Blocks vorgibt:

.. code-block:: javascript

    function MyComponent(props) {
        return (
            <div>
                This is an example
            </div>
        );
    }

    MyComponent.getLabel = function(relship) {
        return (
            relship && (
                <span>
                    {relship.get('mappedName')}
                </span>
            )
        );
    }

Eigene Beziehungsblöcke
--------------------------------------------------------------------------------

Beziehungen, für deren Name ein Plugin mit ID ``cs-tasks-custom-relship`` und
Diskriminator gleich des Beziehungsnamens existiert, verwenden das Plugin an
Stelle der normalen Beziehungskomponente. Diese Plugins sind nicht an der
Aufgabenklasse selbst zu konfigurieren, sondern an Beziehungen zu den Klassen.

Dies kann z.B. verwendet werden, um eine verschachtelte Beziehung "flach"
anzuzeigen, wie im Fall von Mappen an Workflow-Aufgaben.

Wie auch bei eigenen Blöcken sollten Komponenten für eigene Beziehungsblöcke
eine Funktion ``getLabel`` mitbringen.

Beispiel: Eigenes Plugin für eine Aufgabenbeschreibung hinzufügen
--------------------------------------------------------------------------------

Im folgenden Beispiel ersetzen wir die Aufgabenbeschreibung für Projektaufgaben
durch eine eigene Komponente.

.. note ::
    Im Beispiel wird das Kundenmodul "customer.plm" verwendet. Ersetzen Sie
    dieses durch ihr jeweiliges Kundenmodul.

Schritt 1: Anlegen einer neuen Web-Anwendung
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Legen Sie eine neue Web-Anwendung in Ihrem Kundenmodul an, die ihre angepassten
Plugins für |cs.taskmanager| enthalten wird:
``webmake.exe create customer.plm --templates cs.taskmanager:cs-tasks-desc``

Die neue Anwendung ist anschließend in Ihrem Kundenmodul im Ordner
:file:`customer/plm/js/src`. Die Komponente ``customer-plm-TaskDescription``
ist ab sofort in der cs.web Registry verfügbar.

Schritt 2: Ändern der Plugin-Konfiguration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. Navigieren Sie im Windows-Client zu
   :menuselection:`Administration/Konfiguration --> Konfiguration --> GUI --> Web UI --> Plugins`
   und suchen Sie nach dem Plugin mit ID ``cs-tasks-desc``.
#. Klicken Sie auf den Reiter "Konfigurationen". Sie sehen dort die für die
   einzelnen Aufgabenklassen existierenden Plugins.
#. Ändern Sie das Plugin für den Diskriminator ``cs_tasks_cls_pcs_task``:

   #. Ändern Sie "React-Komponente" von
      ``cs-tasks-pcs-task-plugin-PCSTaskDetails`` zu
      ``customer-plm-TaskDescription``.
   #. Löschen Sie den Eintrag im Register "Libraries" und erstellen Sie einen
      neuen Eintrag mit Library ``customer-plm``, Version ``15.3.0`` und der
      Modulzuordnung ``customer.plm``.

Schritt 3: Testen und iterative Anpassung
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Ihre neue Aufgabenbeschreibung sollte nun im Detailbereich angezeigt werden,
wenn Sie eine Projektaufgabe in |cs.taskmanager| selektieren.

Wollen Sie weitere Anpassungen vornehmen, editieren Sie
:file:`TaskDescription.jsx` und rufen Sie anschließend
`webmake webpack customer.plm` auf, um die Änderungen für die Laufzeit im
Web-Browser vorzubereiten.
