/*
* Copyright (C) 1990 - 2018 CONTACT Software GmbH
* All rights reserved.
* http://www.contact-software.com
*
* Revision "$Id: "
*/

import Immutable from 'immutable';
import {reselect} from 'cs-web-components-externals';
const {createSelector} = reselect;
import * as constants from '../../constants';
import * as helpers from '../../helpers';
import * as proptypes from '../../proptypes';

// helpers
const VIEWS = {
    BASE: ['settings', 'userViews'],
    RECENT: 'recent',
    CURRENT: 'current',
    DEFAULT: 'default',
    CUSTOM: 'custom',
    BY_ID: 'byID',
    CONDITION: 'condition'
};

function getViewIDFromOwnState(ownState, viewNameOrID) {
    switch (viewNameOrID) {
        case VIEWS.RECENT:
        case VIEWS.CURRENT:
        case VIEWS.DEFAULT:
        case VIEWS.CUSTOM:
        case VIEWS.BY_ID:
            return ownState.getIn(
                VIEWS.BASE.concat([viewNameOrID])
            );
        default:
            return viewNameOrID;
    }
}
export function getViewID(state, viewNameOrID) {
    const ownState = helpers.getOwnState(state);
    return getViewIDFromOwnState(ownState, viewNameOrID);
}

export function getViewIDPath(viewName) {
    return VIEWS.BASE.concat([viewName]);
}

export function getViewPathFromOwnState(ownState, viewNameOrID) {
    return VIEWS.BASE.concat([VIEWS.BY_ID, getViewIDFromOwnState(ownState, viewNameOrID)]);
}

export function getViewPath(state, viewNameOrID) {
    return VIEWS.BASE.concat([VIEWS.BY_ID, getViewID(state, viewNameOrID)]);
}

function _getCustomViewByIDFromOwnState(ownState, viewID) {
    if (viewID) {
        return ownState.getIn(getViewPathFromOwnState(ownState, viewID));
    }
    return null;
}

function _getCustomViewByID(state, viewID) {
    const ownState = helpers.getOwnState(state);
    return _getCustomViewByIDFromOwnState(ownState, viewID);
}

function _getViewByID(state, viewID) {
    if (viewID) {
        return state.objectsById.get(viewID);
    }
    return null;
}

function _getCustomViewByNameFromOwnState(name) {
    return function(ownState) {
        const viewID = getViewIDFromOwnState(ownState, name);
        return _getCustomViewByIDFromOwnState(ownState, viewID);
    };
}

function _getCustomViewByName(name) {
    return function(state) {
        const viewID = getViewID(state, name);
        return _getCustomViewByID(state, viewID);
    };
}

function _getViewByName(name) {
    return function(state) {
        const viewID = getViewID(state, name);
        return _getViewByID(state, viewID);
    };
}

function _mergeViewObjects(customViewObject, viewObject) {
    if (customViewObject) {
        return customViewObject.merge(viewObject);
    } else {
        return null;
    }
}

function _getUserViewIDs(state) {
    const ownState = helpers.getOwnState(state);
    const userIDs = ownState.getIn(getViewIDPath('custom'));
    if (userIDs) {
        return userIDs;
    } else {
        return Immutable.List();
    }
}

export function _getRecentViewIDs(state) {
    const recentViewIDs = getViewID(state, 'recent');
    if (recentViewIDs) {
        return recentViewIDs;
    } else {
        return Immutable.List();
    }
}

function _getUserViews(state) {
    const userIDs = _getUserViewIDs(state).toJS();
    return userIDs
        .map(userID => state.objectsById.get(userID))
        .filter(view => view);
}

function _getViewNames(state) {
    return Immutable.OrderedSet(_getUserViews(state))
        .add(_getViewByName('default')(state))
        .filter(view => view)
        .map(view => view.get('name'));
}

function _getContextClassnames(state) {
    const ownState = helpers.getOwnState(state);
    return ownState
        .getIn(['settings', 'contextClassnames'])
        .join('@');
}

// selectors
export const mergeViewObjects = createSelector(
    [(_, customView) => customView, (_, __, view) => view],
    _mergeViewObjects
);

export const getDefaultView = createSelector(
    [
        _getCustomViewByName('default'),
        _getViewByName('default')
    ],
    _mergeViewObjects
);

export const getCurrentCustomViewFromOwnState = createSelector(
    [_getCustomViewByNameFromOwnState('current')],
    customView => customView
);

export const getCurrentView = createSelector(
    [
        _getCustomViewByName('current'),
        _getViewByName('current')
    ],
    _mergeViewObjects
);

export const getViewByID = createSelector(
    [_getViewByID],
    view => view
);

export const getUserViewIDs = createSelector(
    [_getUserViewIDs],
    viewIDs => viewIDs
);

export const getRecentViewIDs = createSelector(
    [_getRecentViewIDs],
    viewIDs => viewIDs
);

function _getEditedViewNames(state) {
    const defaultView = getDefaultView(state);

    // collect IDs first
    const editedViewIDs = getUserViewIDs(state)
        .concat([defaultView ? defaultView.get(constants.ID) : null])
        .filter(viewID => {
            const customView = _getCustomViewByID(state, viewID);
            return customView && customView.get('edited');
        });

    return editedViewIDs
        .map(viewID => state.objectsById.getIn([viewID, 'name']))
        .join(', ');
}

export const getEditedViewNames = createSelector(
    [_getEditedViewNames],
    editedViewNames => editedViewNames
);

export const getEditedViewByID = createSelector(
    [_getCustomViewByID],
    customView => customView.get('edited')
);

export const getViewNames = createSelector(
    [_getViewNames],
    names => names
);

export const getCurrentViewCondition = createSelector(
    [getCurrentView, (_, addPath) => addPath],
    (currentView, additionalPath) => {
        if (currentView) {
            const path = ['condition'];
            if (additionalPath) {
                path.push(additionalPath);
            }
            return currentView.getIn(path);
        } else {
            const result = proptypes.DEFAULT_CONDITION;
            if (additionalPath) {
                return result.get(additionalPath);
            } else {
                return result;
            }
        }
    }
);

function _getCurrentViewUserIDs(state) {
    return getCurrentViewCondition(state, 'users')
        .filter(userID => state.objectsById.get(userID))
        .join('@');
}

export const getCurrentViewUserIDs = createSelector(
    [_getCurrentViewUserIDs],
    userIDs => Immutable.List(userIDs.split('@'))
);

function _getSelectedUserNames(state, getUserLabel) {
    const userIDs = getCurrentViewCondition(state, 'users');
    if (userIDs) {
        return userIDs
            .map(userID => getUserLabel(state.objectsById.get(userID)))
            .filter(user => user)
            .join(', ');
    } else {
        return '';
    }
}

export const getSelectedUserNames = createSelector(
    [_getSelectedUserNames],
    names => names
);

export const getContextClassnames = createSelector(
    [_getContextClassnames],
    classString => classString
        .split('@')
        .filter(classname => classname)
);
