import React from 'react';
import Immutable from 'immutable';
import {MenuItem} from 'react-bootstrap';
import {connect, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {modifyCurrentView, CONTEXT} from '../actions/actions';
import * as constants from '../../constants';
import * as helpers from '../../helpers';
import {formatStr} from '../../i18n';
import {FilterDropdown, SimpleFilterItem} from './FilterDropdown';
import TypeAheadBrowser from '../browser/TypeAheadBrowser';
import {getCurrentViewCondition, getContextClassnames} from '../views/selectors';

const MESSAGE_CONTEXT_FILTER = 'context_filter';
const MESSAGE_ALL_CONTEXTS = 'all_contexts';
const MESSAGE_REMOVE_OBJECT = 'remove_object';
const MESSAGE_SEARCH_CONTEXT = 'search_context';

class ContextFilter extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.inputRef = null;
        this.setInputRef = this.setInputRef.bind(this);
        // debounce focus since onToggle is called before input is visible
        this.focus = helpers.debounce(this.focus.bind(this), 0);
        this.selectContext = this.selectContext.bind(this);
        this.deselectContext = this.deselectContext.bind(this);
        this.onToggleHandler = this.onToggleHandler.bind(this);
    }

    setInputRef(element) {
        this.inputRef = element;
    }

    focus(event) {
        if (this.inputRef && this.inputRef.focus) {
            this.inputRef.focus(event);
        }
    }

    selectContext(contextID) {
        const {selectContext} = this.props;
        selectContext(contextID);
    }

    deselectContext(contextID) {
        const {deselectContext} = this.props;
        deselectContext(contextID);
    }

    onToggleHandler(isOpen, event) {
        if (isOpen === true) {
            this.focus(event);
        }
    }

    render() {
        const {
            contextClassnames, selectedContexts, selectedContextNames, clearContext
        } = this.props;

        if (!contextClassnames || contextClassnames.length === 0) {
            return null;
        }

        const allChecked = selectedContexts.size === 0;
        const contextBrowser = helpers.prefixNS('context-browser');

        return (
            <FilterDropdown
                onToggle={this.onToggleHandler}
                label={allChecked ?
                    formatStr(MESSAGE_ALL_CONTEXTS) :
                    selectedContextNames.join(', ')
                }
                title={formatStr(MESSAGE_CONTEXT_FILTER)}
                id={helpers.prefixNS('context-filter')}
            >
                <SimpleFilterItem
                    key={MESSAGE_ALL_CONTEXTS}
                    name={MESSAGE_ALL_CONTEXTS}
                    checked={allChecked}
                    label={formatStr(MESSAGE_ALL_CONTEXTS)}
                    onChange={clearContext}
                />

                <MenuItem divider />

                <TypeAheadBrowser
                    ref={this.setInputRef}
                    key={contextBrowser}
                    name={contextBrowser}
                    queryClassnames={contextClassnames}
                    currentSelection={selectedContexts}
                    select={this.selectContext}
                    deselect={this.deselectContext}
                    messageRemove={MESSAGE_REMOVE_OBJECT}
                    messagePlaceholder={MESSAGE_SEARCH_CONTEXT}
                />

            </FilterDropdown>
        );
    }
}

ContextFilter.propTypes = {
    contextClassnames: PropTypes.arrayOf(PropTypes.string).isRequired,
    selectedContexts: ImmutablePropTypes.set.isRequired,
    selectedContextNames: ImmutablePropTypes.set.isRequired,
    selectContext: PropTypes.func.isRequired,
    deselectContext: PropTypes.func.isRequired,
    clearContext: PropTypes.func.isRequired
};

function mapStateToProps(state) {
    const viewCondition = getCurrentViewCondition(state);
    const selectedContexts = viewCondition ? (
        viewCondition.get('contexts').toSet()
    ) : Immutable.Set();

    return {
        contextClassnames: getContextClassnames(state),
        selectedContexts,
        selectedContextNames: selectedContexts.map(
            context => state.objectsById.getIn([context, constants.DESCRIPTION])
        )
    };
}

function mapDispatchToProps(dispatch) {
    return {
        selectContext: (contextID) => {dispatch(
            modifyCurrentView(CONTEXT.SELECT, {contextID})
        );},
        deselectContext: (contextID) => {dispatch(
            modifyCurrentView(CONTEXT.DESELECT, {contextID})
        );},
        clearContext: () => {dispatch(
            modifyCurrentView(CONTEXT.CLEAR)
        );}
    };
}

export default connect(mapStateToProps, mapDispatchToProps)(ContextFilter);
