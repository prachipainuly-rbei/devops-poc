import React from 'react';
import Immutable from 'immutable';
import {connect, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {Dialog, FormControl} from 'cs-web-components-base';
import {formatStr} from '../../i18n';
import * as helpers from '../../helpers';
import {getViewNames} from './selectors';

export const MESSAGE_SAVE_USER_VIEW_AS = 'save_user_view_as';
const VALIDATION_ERROR = 'error';
const VALIDATION_SUCCESS = 'success';

class SaveUserViewAsDialog extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.state = {
            value: '',
            validationState: VALIDATION_ERROR
        };
        this.inputRef = null;
        this.setInputRef = this.setInputRef.bind(this);
        // modal fades in for 0.3s
        this.focus = helpers.debounce(this.focus.bind(this), 300);
        this.isValidName = this.isValidName.bind(this);
        this.rememberValue = this.rememberValue.bind(this);
        this.saveViewAs = this.saveViewAs.bind(this);
    }

    setInputRef(element) {
        this.inputRef = element;
        this.focus();
    }

    focus() {
        if (this.inputRef && this.inputRef.focus) {
            this.inputRef.focus();
        }
    }

    isValidName(value) {
        const {existingNames} = this.props;

        if (value.length > 0 && !existingNames.includes(value)) {
            return VALIDATION_SUCCESS;
        } else {
            return VALIDATION_ERROR;
        }
    }

    rememberValue(event) {
        const value = event.target.value;

        this.setState({
            value: value,
            validationState: this.isValidName(value)
        });
    }

    saveViewAs() {
        const {saveViewAs, closeDialog} = this.props;
        const {value, validationState} = this.state;

        if (validationState === VALIDATION_SUCCESS) {
            saveViewAs(value);
            closeDialog();
        }
    }

    render() {
        const {closeDialog} = this.props;
        const {value, validationState} = this.state;

        return (
            <Dialog.Dialog
                title={formatStr(MESSAGE_SAVE_USER_VIEW_AS)}
                buttons={[
                    <Dialog.Buttons.Ok
                        key='ok'
                        onClick={this.saveViewAs}
                        disabled={validationState !== VALIDATION_SUCCESS}
                    />,
                    <Dialog.Buttons.Cancel
                        key='cancel'
                        onClick={closeDialog}
                    />,
                ]}
                size={Dialog.SIZE_SMALL}
                onHide={closeDialog}
                show={true}
            >
                <FormControl.TextInput
                    compact
                    ref={this.setInputRef}
                    name='save-as'
                    value={value}
                    onChange={this.rememberValue}
                    onSubmit={this.saveViewAs}
                    onEnter={this.saveViewAs}
                    validationState={validationState}
                />
            </Dialog.Dialog>
        );
    }
}

SaveUserViewAsDialog.defaultProps = {
    existingNames: Immutable.List()
};

SaveUserViewAsDialog.propTypes = {
    saveViewAs: PropTypes.func.isRequired,
    closeDialog: PropTypes.func.isRequired,
    existingNames: ImmutablePropTypes.iterableOf(PropTypes.string).isRequired
};

function mapStateToProps(state) {
    return {
        existingNames: getViewNames(state)
    };
}

export default connect(mapStateToProps)(SaveUserViewAsDialog);
