import React from 'react';
import {connect, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {Table} from 'react-bootstrap';
import {Dialog, Button, FormControl} from 'cs-web-components-base';
import * as constants from '../../constants';
import * as helpers from '../../helpers';
import * as proptypes from '../../proptypes';
import {formatStr} from '../../i18n';

const CATEGORY_USER = 'user';

export const MESSAGE_MANAGE_USER_VIEWS = 'manage_user_views';
const MESSAGE_CANCEL_RENAME_VIEW = 'cancel_rename_view';
const MESSAGE_DELETE_VIEW = 'delete_view';
const MESSAGE_REVERT_VIEW = 'revert_view';
const MESSAGE_RENAME_VIEW = 'rename_view';
const MESSAGE_RENAME_VIEW_NOW = 'rename_view_now';

class ManageUserView extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.state = {
            viewName: null,
            editing: false
        };
        this.inputRef = null;
        this.setInputRef = this.setInputRef.bind(this);
        this.setViewName = this.setViewName.bind(this);
        this.setViewNameFromEvent = this.setViewNameFromEvent.bind(this);
        this.startEditing = this.startEditing.bind(this);
        this.stopEditing = this.stopEditing.bind(this);
        this.saveViewName = this.saveViewName.bind(this);
        this.deleteView = this.deleteView.bind(this);
        this.getRenameButtonProps = this.getRenameButtonProps.bind(this);
        this.getDeleteButtonProps = this.getDeleteButtonProps.bind(this);
        this.cancelRenameView = this.cancelRenameView.bind(this);
    }

    setInputRef(element) {
        this.inputRef = element;
        if (this.inputRef && this.inputRef.focus) {
            this.inputRef.focus();
        }
    }

    setViewName(name) {
        this.setState({
            viewName: name
        });
    }

    setViewNameFromEvent(e) {
        this.setViewName(e.target.value);
    }

    componentWillMount() {
        const {view} = this.props;
        this.setViewName(view.get('name'));
    }

    componentWillReceiveProps(nextProps) {
        const {view} = nextProps;

        if (view !== this.props.view) {
            this.setViewName(view.get('name'));
        }
    }

    startEditing() {
        this.setState({
            editing: true
        });
    }

    stopEditing(reset) {
        this.setState({
            editing: false
        });
        if (reset === true) {
            this.setViewName(this.props.view.get('name'));
        }
    }

    saveViewName() {
        const {view, renameView} = this.props;
        const {viewName} = this.state;
        renameView(view.get(constants.ID), viewName);
        this.stopEditing();
    }

    deleteView() {
        const {view, deleteView} = this.props;
        deleteView(view.get(constants.ID));
    }

    getRenameButtonProps(isEdited) {
        if (isEdited) {
            return {
                iconName: 'csweb_check',
                title: formatStr(MESSAGE_RENAME_VIEW_NOW),
                onClick: this.saveViewName
            };
        } else {
            return {
                iconName: 'csweb_edit',
                title: formatStr(MESSAGE_RENAME_VIEW),
                onClick: this.startEditing
            };
        }
    }

    getDeleteButtonProps() {
        const {view} = this.props;
        const isCustomized = view.get('customizes') > '';

        if (isCustomized) {
            return {
                buttonStyle: 'warning',
                iconName: 'csweb_richtext_undo',
                title: formatStr(MESSAGE_REVERT_VIEW),
                className: helpers.prefixNS('manage-views__revert'),
                onClick: this.deleteView
            };
        } else {
            return {
                buttonStyle: 'danger',
                iconName: 'csweb_trash',
                title: formatStr(MESSAGE_DELETE_VIEW),
                className: helpers.prefixNS('manage-views__delete'),
                onClick: this.deleteView
            };
        }
    }

    cancelRenameView(event) {
        this.stopEditing(true);
        event.stopPropagation();
    }

    render() {
        const {view} = this.props;
        const {viewName, editing} = this.state;
        const isEditable = view.get('category') === CATEGORY_USER;

        return (
            <tr data-view-name={viewName}>
                <td className={helpers.prefixNS('manage-views-name-col')}>
                    {editing ? (
                        <FormControl.TextInput
                            compact
                            ref={this.setInputRef}
                            name={view.get(constants.CDB_OBJECT_ID)}
                            value={viewName}
                            onChange={this.setViewNameFromEvent}
                            onEnter={this.saveViewName}
                            onBlur={this.stopEditing}
                            afterControl={viewName !== view.get('name') ?
                                <Button.CloseButton
                                    title={formatStr(MESSAGE_CANCEL_RENAME_VIEW)}
                                    onClick={this.cancelRenameView}
                                /> :
                                ' '
                            }
                        />
                    ) : (
                        <div
                            className={helpers.prefixNS('manage-views-name__label')}
                            onClick={this.startEditing}
                        >
                            {viewName}
                        </div>
                    )}
                </td>
                <td className={helpers.prefixNS('manage-views-button-col')}>
                    <Button.IconButton
                        buttonStyle='success'
                        className={helpers.prefixNS('manage-views__edit')}
                        {...this.getRenameButtonProps(viewName !== view.get('name'))}
                    />
                </td>
                <td className={helpers.prefixNS('manage-views-button-col')}>
                    <Button.IconButton
                        disabled={isEditable === false}
                        {...this.getDeleteButtonProps()}
                    />
                </td>
            </tr>
        );
    }
}

ManageUserView.propTypes = {
    view: proptypes.OBJECT_PROPTYPE.isRequired,
    renameView: PropTypes.func.isRequired,
    deleteView: PropTypes.func.isRequired
};

function ManageUserViewsDialog({
    userViews, defaultView, renameView, deleteView, closeDialog
}) {
    return (
        <Dialog.Dialog
            title={formatStr(MESSAGE_MANAGE_USER_VIEWS)}
            buttons={[
                <Dialog.Buttons.Close
                    key='close'
                    onClick={closeDialog}
                />
            ]}
            size={Dialog.SIZE_SMALL}
            onHide={closeDialog}
            show={true}
        >
            <Table
                striped
                hover
                borderless='true'
                className={helpers.prefixNS('manage-views')}
            >
                <tbody>
                    <ManageUserView
                        key={defaultView.get(constants.ID)}
                        renameView={renameView}
                        deleteView={deleteView}
                        view={defaultView}
                    />
                    {userViews.map(view => (
                        <ManageUserView
                            key={view.get(constants.ID)}
                            renameView={renameView}
                            deleteView={deleteView}
                            view={view}
                        />
                    ))}
                </tbody>
            </Table>
        </Dialog.Dialog>
    );
}

ManageUserViewsDialog.propTypes = {
    defaultView: proptypes.USER_VIEW.isRequired,
    userViewIDs: ImmutablePropTypes.orderedSetOf(PropTypes.string),
    userViews: ImmutablePropTypes.orderedSetOf(proptypes.OBJECT_PROPTYPE),
    renameView: PropTypes.func.isRequired,
    deleteView: PropTypes.func.isRequired,
    closeDialog: PropTypes.func.isRequired
};

function mapStateToProps(state, ownProps) {
    return {
        userViews: ownProps.userViewIDs
            .map(viewID => state.objectsById.get(viewID))
            .filter(view => view)
    };
}

export default connect(mapStateToProps)(ManageUserViewsDialog);
