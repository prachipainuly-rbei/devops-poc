/* -*- mode: javascript; coding: utf-8 -*-
 * $Id: actions.js 183976 2018-09-17 14:53:30Z cso $
 *
 * Copyright (c) 1990 - 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 */

import {addNotification, getAppSetup} from 'cs-web-components-base';
import {prefixNS, debugMode} from '../../helpers';

export const UPDATE_DOCUMENT_TITLE = prefixNS('UPDATE_DOCUMENT_TITLE');
export const VIEW = {
    SETUP: prefixNS('SETUP_VIEWS'),
    MODIFY: prefixNS('MODIFY_VIEW'),
    SELECT: prefixNS('SELECT_VIEW'),
    DO_SELECT: prefixNS('DO_SELECT_VIEW'),
    SELECTED: prefixNS('SELECTED_VIEW'),
    SET_EDITED: prefixNS('SET_VIEW_EDITED'),
    SET_UNEDITED: prefixNS('SET_VIEW_UNEDITED'),
    SAVE: prefixNS('SAVE_VIEW'),
    SAVED: prefixNS('SAVED_VIEW'),
    SAVE_AS: prefixNS('SAVE_VIEW_AS'),
    NEW_OPTIMISTIC: prefixNS('NEW_VIEW_OPTIMISTIC'),
    NEW: prefixNS('NEW_VIEW'),
    RENAME: prefixNS('RENAME_VIEW'),
    RENAME_OPTIMISTIC: prefixNS('RENAME_VIEW_OPTIMISTIC'),
    RENAMED: prefixNS('RENAMED_VIEW'),
    DELETE: prefixNS('DELETE_VIEW'),
    DELETE_OPTIMISTIC: prefixNS('DELETE_VIEW_OPTIMISTIC')
};
export const TYPE = {
    SELECT: prefixNS('SELECT_TYPE'),
    DESELECT: prefixNS('DESELECT_TYPE'),
    CLEAR: prefixNS('CLEAR_TYPES')
};
export const CONTEXT = {
    SELECT: prefixNS('SELECT_CONTEXT'),
    DESELECT: prefixNS('DESELECT_CONTEXT'),
    CLEAR: prefixNS('CLEAR_CONTEXT')
};
export const DEADLINE = {
    SET_DAYS: prefixNS('SET_DEADLINE_DAYS'),
    SET_RANGE: prefixNS('SET_DEADLINE_RANGE'),
    ACTIVATE: prefixNS('ACTIVATE_DEADLINE_FILTER')
};
export const USER = {
    SELECT: prefixNS('SELECT_USER'),
    DESELECT: prefixNS('DESELECT_USER'),
    INCLUDE_ROLE_TASKS: prefixNS('INCLUDE_ROLE_TASKS')
};

const NOTIFICATION_TIMEOUT = 10000;  // ms before permanently hiding notifications

export function setupViews() {
    return {
        type: VIEW.SETUP,
        payload: null
    };
}

export function updateDocumentTitle(currentViewName) {
    const appTitle = getAppSetup().getIn(['appSettings', 'title']);
    return {
        type: UPDATE_DOCUMENT_TITLE,
        payload: currentViewName ? `${appTitle} - ${currentViewName}` : appTitle
    };
}

export function modifyCurrentView(type, payload) {
    return {
        type: VIEW.MODIFY,
        payload: {
            modification: {
                type,
                payload
            }
        }
    };
}

export function selectUserView(viewID) {
    return {
        type: VIEW.SELECT,
        payload: {viewID}
    };
}

export function saveUserView(viewID, condition) {
    return {
        type: VIEW.SAVE,
        payload: {viewID, condition}
    };
}

export function saveUserViewAs(name, condition) {
    return {
        type: VIEW.SAVE_AS,
        payload: {name, condition}
    };
}

export function newUserViewOptimistic(dummyID) {
    return {
        type: VIEW.NEW_OPTIMISTIC,
        payload: {dummyID}
    };
}

export function renameUserView(viewID, name) {
    return {
        type: VIEW.RENAME,
        payload: {viewID, name}
    };
}

export function renameUserViewOptimistic(viewID, name) {
    return {
        type: VIEW.RENAME_OPTIMISTIC,
        payload: {viewID, name}
    };
}

export function deleteUserView(viewID) {
    return {
        type: VIEW.DELETE,
        payload: {viewID}
    };
}

export function deleteUserViewOptimistic(viewID) {
    return {
        type: VIEW.DELETE_OPTIMISTIC,
        payload: {viewID}
    };
}

export function setViewEdited(viewID, edited) {
    return {
        type: edited ? VIEW.SET_EDITED : VIEW.SET_UNEDITED,
        payload: {viewID}
    };
}

/*
 * type can be one of 'danger', 'warning', 'info' (default), 'success'
 */
export function notify(title, message, type = 'info', id = null) {
    const timeout = debugMode() ? null : NOTIFICATION_TIMEOUT;
    return addNotification(id, title, message, type, null, null, timeout);
}
