import React from 'react';
import {PropTypes, ImmutablePropTypes, connect, classNames} from 'cs-web-components-externals';
import {Button} from 'cs-web-components-base';
import {getTasks} from '../actions/actions';
import * as helpers from '../helpers';
import * as proptypes from '../proptypes';
import {getCurrentViewCondition} from './views/selectors';

/*
 * Debug information for manual and automated testing
 *
 * Selenium tests can query the following:
 *
 * +------------------------------------------+---------------+---------------------------------+
 * | CSS Class                                | Attribute     | Contents                        |
 * +------------------------------------------+---------------+---------------------------------+
 * | .cs-taskmanager-web-debug-info__fetching | data-fetching | Asynchronous actions pending?   |
 * |                                          |               | (bool)                          |
 * +------------------------------------------+---------------+---------------------------------+
 * | .cs-taskmanager-web-debug-info__tasks    | data-tasks    | Amount of tasks shown (number)  |
 * +------------------------------------------+---------------+---------------------------------+
 *
 * When hovering above the component, users can interactively look at cs.taskmanager's application
 * setup and its own redux store.
 */
function DebugInfo({completeState, fetching, condition, getTasks}) {
    return (
        helpers.debugMode() && (
            <pre className={helpers.prefixNS('debug-info')}>
                <DebugInfoMain
                    fetching={fetching}
                    tasks={completeState.getIn(['table', 'rows']).size}
                    condition={condition}
                    getTasks={getTasks} />

                <div className={helpers.prefixNS('debug-info__bulk')}>
                    <div className={helpers.prefixNS('debug-info__bulk--setup')}>
                        <h4>App Setup</h4>
                        {JSON.stringify(window.appSetup, null, 4)}
                    </div>
                    <div className={helpers.prefixNS('debug-info__bulk--state')}>
                        <h4>Redux Store</h4>
                        {JSON.stringify(completeState.toJS(), null, 4)}
                    </div>
                </div>
            </pre>
        )
    );
}

DebugInfo.propTypes = {
    completeState: ImmutablePropTypes.map.isRequired,
    fetching: PropTypes.number.isRequired,
    condition: proptypes.VIEW_CONDITION,
    getTasks: PropTypes.func.isRequired
};

function mapStateToProps(state) {
    const ownState = state[helpers.prefixNS('reducer')];
    return {
        completeState: ownState,
        fetching: state.fetchingById.size + ownState.get('inFlight').size,
        condition: getCurrentViewCondition(state)
    };
}

export default connect(mapStateToProps, {getTasks})(DebugInfo);

function DebugInfoMain({fetching, tasks, condition, getTasks}) {
    return (
        <div className={helpers.prefixNS('debug-info__main')}>
            <h1>Debug Mode Active</h1>
            <FetchIndicator fetching={fetching} />
            <TasksIndicator tasks={tasks} />
            <Button.IconButton
                iconName='csweb_refresh'
                title='Reload tasks'
                onClick={() => getTasks(condition)} />
        </div>
    );
}

DebugInfoMain.propTypes = {
    fetching: PropTypes.number.isRequired,
    tasks: PropTypes.number.isRequired,
    condition: proptypes.VIEW_CONDITION,
    getTasks: PropTypes.func.isRequired
};

class FetchIndicator extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.pendingCheck = null;
        this.state = {
            checksDone: 0,
            checksRequired: 3,
            checkInterval: 400,
            fetchingDone: false
        };
        this.checkContinously = this.checkContinously.bind(this);
        this.killContinuousCheck = this.killContinuousCheck.bind(this);
        this.checkIfDone = this.checkIfDone.bind(this);
    }

    componentDidMount() {
        this.checkContinously();
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.fetching !== this.props.fetching) {
            this.checkContinously();
        }
    }

    checkContinously() {
        const {checkInterval} = this.state;
        if (this.pendingCheck === null) {
            this.pendingCheck = setInterval(
                this.checkIfDone,
                checkInterval
            );
        }
    }

    killContinuousCheck() {
        clearInterval(this.pendingCheck);
        this.pendingCheck = null;
    }

    checkIfDone() {
        const {fetching} = this.props;
        const {checksDone, checksRequired} = this.state;

        if (fetching === 0) {
            if ((checksDone + 1) >= checksRequired) {
                this.killContinuousCheck();
                this.setState({
                    checksDone: 0,
                    fetchingDone: true
                });
            } else {
                this.setState(prevState => {
                    const newChecks = prevState.checksDone + 1;
                    return {
                        checksDone: newChecks,
                        fetchingDone: false
                    };
                });
            }
        } else {
            this.setState({
                checksDone: 0,
                fetchingDone: false
            });
        }
    }

    render() {
        const {fetching} = this.props;
        const {fetchingDone} = this.state;

        return (
            <div
                className={classNames(
                    helpers.prefixNS('debug-info__fetching'),
                    {fetching: !fetchingDone}
                )}
                data-fetching={!fetchingDone}
            >
                {fetching ? `fetching ${fetching}...` : 'fetching done'}
            </div>
        );
    }
}

FetchIndicator.propTypes = {
    fetching: PropTypes.number.isRequired
};

function TasksIndicator({tasks}) {
    return (
        <div
            className={helpers.prefixNS('debug-info__tasks')}
            data-tasks={tasks}
        >
            {componentNameSpace} showing {tasks} tasks
        </div>
    );
}

TasksIndicator.propTypes = {
    tasks: PropTypes.number.isRequired
};
