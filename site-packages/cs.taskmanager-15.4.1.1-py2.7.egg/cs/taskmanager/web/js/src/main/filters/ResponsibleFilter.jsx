import React from 'react';
import Immutable from 'immutable';
import {connect, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {getAppSetup} from 'cs-web-components-base';
import {MenuItem} from 'react-bootstrap';
import * as constants from '../../constants';
import * as helpers from '../../helpers';
import {formatStr} from '../../i18n';
import {modifyCurrentView, USER} from '../actions/actions';
import {
    FilterDropdown,
    FilterItem
} from './FilterDropdown';
import TypeAheadBrowser from '../browser/TypeAheadBrowser';
import {
    getCurrentViewCondition, getSelectedUserNames, getCurrentViewUserIDs
} from '../views/selectors';

const MESSAGE_RESPONSIBLE_FILTER = 'responsible_filter';
const MESSAGE_MY_TASKS = 'my_tasks';
const MESSAGE_SEARCH_USER = 'search_user';
const MESSAGE_REMOVE_USER = 'remove_user';
const MESSAGE_ALL_TASKS = 'all_tasks';
const MESSAGE_PERSONAL_TASKS = 'personal_tasks';
const MESSAGE_NO_USER_SELECTED = 'no_user_selected';
const MESSAGE_INCLUDE_ROLE_TASKS = 'include_role_tasks';

const CURRENT_USER_ID = getAppSetup().getIn(['links', 'common', 'currentUser']);

function getUserLabel(user) {
    if (user) {
        if (user.get(constants.ID) === CURRENT_USER_ID) {
            return formatStr(MESSAGE_MY_TASKS);
        }
        return `${user.get('firstname')} ${user.get('lastname')}`;
    }
    return undefined;
}

class ResponsibleFilter extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.queryClassnames = ['angestellter'];
        this.ignoredObjects = Immutable.Set([CURRENT_USER_ID]);
        this.inputRef = null;
        this.setInputRef = this.setInputRef.bind(this);
        // debounce focus since onToggle is called before input is visible
        this.focus = helpers.debounce(this.focus.bind(this), 0);
        this.additionalFilter = this.additionalFilter.bind(this);
        this.onToggleHandler = this.onToggleHandler.bind(this);
        this.toggleMyTasks = this.toggleMyTasks.bind(this);
        this.toggleRoleTasks = this.toggleRoleTasks.bind(this);
    }

    setInputRef(element) {
        this.inputRef = element;
    }

    focus(event) {
        if (this.inputRef && this.inputRef.focus) {
            this.inputRef.focus(event);
        }
    }

    additionalFilter(user) {
        return (
            user.active_account === '1' &&
            user.visibility_flag === 1 &&
            user.is_system_account === 0
        );
    }

    onToggleHandler(isOpen, event) {
        if (isOpen === true) {
            this.focus(event);
        }
    }

    toggleMyTasks() {
        const {currentUsers, loggedInUserID, deselectUser, selectUser} = this.props;
        const myTasksShown = currentUsers.includes(loggedInUserID);

        if (myTasksShown) {
            deselectUser(loggedInUserID);
        } else {
            selectUser(loggedInUserID);
        }
    }

    toggleRoleTasks() {
        const {toggleRoleTasks, includeRoles} = this.props;
        toggleRoleTasks(!includeRoles);
    }

    render() {
        const {
            allowUserSelection,
            loggedInUserID,
            currentUsers,
            selectedUserNames,
            selectUser,
            deselectUser,
            includeRoles
        } = this.props;

        if (!currentUsers) {
            return null;
        }

        const includeRolesText = includeRoles ?
            formatStr(MESSAGE_ALL_TASKS) :
            formatStr(MESSAGE_PERSONAL_TASKS);

        const myTasksKey = helpers.prefixNS('my-tasks');
        const rolesKey = helpers.prefixNS('include-roles');
        const myTasksShown = currentUsers.includes(loggedInUserID);

        const currentSelectionText = currentUsers.size > 0 ?
            `${selectedUserNames} (${includeRolesText})` :
            formatStr(MESSAGE_NO_USER_SELECTED);
        const userBrowser = helpers.prefixNS('user-browser');

        return (
            <FilterDropdown
                onToggle={this.onToggleHandler}
                label={currentSelectionText}
                title={formatStr(MESSAGE_RESPONSIBLE_FILTER)}
                id={helpers.prefixNS('responsible-filter')}
            >
                <FilterItem
                    key={myTasksKey}
                    name={myTasksKey}
                    checked={myTasksShown}
                    label={formatStr(MESSAGE_MY_TASKS)}
                    onChange={this.toggleMyTasks}
                />

                <FilterItem
                    key={rolesKey}
                    name={rolesKey}
                    checked={includeRoles}
                    label={formatStr(MESSAGE_INCLUDE_ROLE_TASKS)}
                    onChange={this.toggleRoleTasks}
                />

                {allowUserSelection === true && (
                    <React.Fragment>
                        <MenuItem divider />

                        <TypeAheadBrowser
                            ref={this.setInputRef}
                            name={userBrowser}
                            queryClassnames={this.queryClassnames}
                            currentSelection={currentUsers}
                            ignoredObjects={this.ignoredObjects}
                            additionalFilter={this.additionalFilter}
                            select={selectUser}
                            deselect={deselectUser}
                            messageRemove={MESSAGE_REMOVE_USER}
                            messagePlaceholder={MESSAGE_SEARCH_USER}
                            getDescription={getUserLabel}
                        />
                    </React.Fragment>
                )}
            </FilterDropdown>
        );
    }
}

ResponsibleFilter.propTypes = {
    allowUserSelection: PropTypes.bool.isRequired,
    loggedInUserID: PropTypes.string,
    currentUsers: ImmutablePropTypes.list,
    selectedUserNames: PropTypes.string,
    selectUser: PropTypes.func.isRequired,
    deselectUser: PropTypes.func.isRequired,
    includeRoles: PropTypes.bool,
    toggleRoleTasks: PropTypes.func.isRequired
};

function mapStateToProps(state) {
    const ownState = state[helpers.prefixNS('reducer')];
    const viewCondition = getCurrentViewCondition(state);
    const currentUsers = getCurrentViewUserIDs(state);

    return {
        allowUserSelection: ownState.getIn(['settings', 'userSelection']),
        loggedInUserID: CURRENT_USER_ID,
        currentUsers,
        includeRoles: viewCondition && viewCondition.get('roles'),
        selectedUserNames: getSelectedUserNames(state, getUserLabel)
    };
}

function mapDispatchToRFProps(dispatch) {
    return {
        selectUser: (userID) => {dispatch(
            modifyCurrentView(USER.SELECT, {userID})
        );},
        deselectUser: (userID) => {dispatch(
            modifyCurrentView(USER.DESELECT, {userID})
        );},
        toggleRoleTasks: (includeRoleTasks) => {dispatch(
            modifyCurrentView(USER.INCLUDE_ROLE_TASKS, {includeRoleTasks})
        );}
    };
}

export default connect(mapStateToProps, mapDispatchToRFProps)(ResponsibleFilter);
