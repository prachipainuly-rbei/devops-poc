import reducer from '../reducers';

describe('The root reducer', () => {
    test('with the action type TASK_DETAILS return a valid new state', () => {
        let state = Immutable.fromJS({
            currentSelection: {
                task_object_id: 'testID',
                byObjectID: {
                    testID: {}
                }
            }
        });
        let action = {
            type: 'cs-taskmanager-web-TASK_DETAILS',
            payload: {
                task: {
                    name: 'test',
                    id: 'id'
                }
            }
        };

        const redu = reducer(state,action);

        expect(redu.getIn(['currentSelection','task_object_id'])).toEqual('testID');
        expect(redu.getIn(['currentSelection','byObjectID','testID','name'])).toEqual('test');
        expect(redu.getIn(['currentSelection','byObjectID','testID','id'])).toEqual('id');
    });

    test('with the action type TASK_DETAILS return an invalid new state', () => {
        let state = Immutable.fromJS({
            currentSelection: {
                task_object_id: 'testID',
                byObjectID: {
                    testID: {}
                }
            }
        });
        let action = {
            type: 'cs-taskmanager-web-TASK_DETAILS',
            payload: {
                task: {
                    id: 'id'
                }
            }
        };

        const redu = reducer(state,action);

        expect(redu.getIn(['currentSelection','task_object_id'])).toEqual('testID');
        expect(redu.getIn(['currentSelection','byObjectID','testID','name'])).toEqual(undefined);
        expect(redu.getIn(['currentSelection','byObjectID','testID','id'])).toEqual('id');
    });

    test('with the action type RESET_TASK_DETAILS return a valid new state', () => {
        let state = Immutable.fromJS({
            currentSelection: {
                task_object_id: 'testID',
                byObjectID: {
                    testID: {}
                }
            }
        });
        let action = {
            type: 'cs-taskmanager-web-RESET_TASK_DETAILS',
            payload: {}
        };

        const redu = reducer(state,action);

        expect(redu.getIn(['currentSelection','task_object_id'])).toEqual(undefined);
        expect(redu.getIn(['currentSelection','byObjectID']).toJS()).toEqual({});
    });

    test('with the action type RESET_TASK_DETAIL return the same state', () => {
        let state = Immutable.fromJS({
            currentSelection: {
                task_object_id: 'testID',
                byObjectID: {
                    testID: {}
                }
            }
        });
        let action = {
            type: 'cs-taskmanager-web-RESET_TASK_DETAIL',
            payload: {}
        };

        const redu = reducer(state,action);

        expect(redu).toEqual(state);
    });

    test('with the action type SELECT_FILE_CONTAINER and fileContainerID is not equal to id return a valid new state', () => {
        let state = Immutable.Map({});
        let action = {
            type: 'cs-taskmanager-web-SELECT_FILE_CONTAINER',
            payload: {
                '@id': 'testID'
            }
        };

        expect(reducer(state,action)).toEqual(Immutable.fromJS(
            {fileContainerID: "testID"}
        ));
    });

    test('with the action type SELECT_FILE_CONTAINER and fileContainerID is not equal to id return an invalid new state', () => {
        let state = Immutable.Map({});
        let action = {
            type: 'cs-taskmanager-web-SELECT_FILE_CONTAINER',
            payload: {}
        };

        expect(reducer(state,action)).toEqual(Immutable.fromJS(
            {fileContainerID: null}
        ));
    });

    test('with the action type SELECT_FILE_CONTAINER and fileContainerID is equal to id return a valid new state', () => {
        let otherState = Immutable.Map({
            fileContainerID: 'testID'
        });
        let action = {
            type: 'cs-taskmanager-web-SELECT_FILE_CONTAINER',
            payload: {
                '@id': 'testID'
            }
        };

        expect(reducer(otherState,action)).toEqual(Immutable.fromJS(
            {fileContainerID: null}
        ));
    });
});
