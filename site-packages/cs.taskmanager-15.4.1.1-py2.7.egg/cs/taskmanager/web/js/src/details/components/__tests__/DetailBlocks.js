import React from 'react';
import Immutable from 'immutable';
import {shallow} from 'enzyme';
import DetailBlocks from '../DetailBlocks';
import * as helpers from '../../../helpers';

describe('The DetailBlock component', () => {
    it('with label displays a valid ContentBlock', () => {
        const label = 'test';
        const wrapper = shallow(<DetailBlocks.DetailBlock label={label} />);
        expect(wrapper.find(
            '.cs-taskmanager-web-details-contentblock > '+
            '.cs-taskmanager-web-details-contentblock-body').length).toBe(1);
        expect(wrapper.find({title:'test'}).length).toBe(1);
    });
});

describe('The TaskContext component', () => {
    const task = Immutable.Map({
        'system:icon_link': '/resources/icons/byname/branding_web_favicon',
        'system:description': 'Example Object'
    });
    const taskInfo = Immutable.Map({
        '@id': '',
        '@plugin_discriminators': Immutable.List(),
        'cs_tasks_context': Immutable.List(),
        'cs_tasks_relships': Immutable.List()
    });

    it('with a task and taskinfo returns a valid DetailComponent with a TaskContextTree', () => {
        const wrapper = shallow(<DetailBlocks.TaskContext task={task} taskInfo={taskInfo} />);
        expect(wrapper.find('.cs-taskmanager-web-detail-block > '+
            '.cs-taskmanager-web-taskcontexttree').length).toBe(1);
    });
});

describe('The TaskDescription component', () => {
    const task = Immutable.Map({
        'system:icon_link': '/resources/icons/byname/branding_web_favicon',
        'system:description': 'Example Object'
    });
    const otherTaskInfo = Immutable.Map({
        '@id': '',
        '@plugin_discriminators': Immutable.List(),
        'cs_tasks_context': Immutable.List(),
        'cs_tasks_relships': Immutable.List()
    });

    /**
     * This case cannot be tested yet, because there is no access on the getAppSetup context object
     * Note: In the testclient is already a testplugin defined
     */
    // it('with a task with description and taskinfo returns a valid DetailComponent with a description', () => {
    //     function TestPlugin() {
    //         return(
    //             <div className={helpers.prefixNS('testplugin')}>testplugin</div>
    //         );
    //     }
    //     const taskInfo = Immutable.Map({
    //          [constants.ID]: '',
    //          [constants.PLUGIN_DISCRIMINATORS]: Immutable.List(['testplugin']),
    //          [constants.CONTEXT]: Immutable.List(),
    //          [constants.RELSHIPS]: Immutable.List()
    //     });
    //     Registry.registerComponent('TestPlugin', TestPlugin);
    //     const wrapper = shallow(<DetailBlocks.TaskDescription task={task} taskInfo={taskInfo} />);
    //     expect(wrapper.find('.cs-taskmanager-web-detail-block').length).toBe(1);
    // });

    it('with a taskinfo and task without description returns null', () => {
        const wrapper = shallow(<DetailBlocks.TaskDescription task={task} taskInfo={otherTaskInfo} />);
        expect(wrapper.find('.cs-taskmanager-web-detail-block').length).toBe(0);
    });
});

/**
 * The TaskRelship component cannot be tested yet, because it is a connected component
 */

describe('The CustomTaskPlugin component', () => {
    const task = Immutable.Map({
        'system:icon_link': '/resources/icons/byname/branding_web_favicon',
        'system:description': 'Example Object'
    });
    const taskInfo = Immutable.Map({
        '@id': 'id',
        '@plugin_discriminators': Immutable.List(['plugin_one', 'plugin_two']),
        'cs_tasks_context': Immutable.List(['a', 'b', 'c']),
        'cs_tasks_relships': Immutable.List(['d', 'e'])
    });

    it('with a task, taskInfo and custom is false and returns null', () => {
        const wrapper = shallow(<DetailBlocks.CustomTaskPlugin task={task} taskInfo={taskInfo} />);
        expect(wrapper.find('.cs-taskmanager-web-detail-block').length).toBe(0);
    });

    it('with a task, taskInfo and custom is true and displays a valid DetailComponent', () => {
        helpers.getTaskPlugin = jest.fn( () => {
            return 'test';
        });

        const wrapper = shallow(<DetailBlocks.CustomTaskPlugin task={task} taskInfo={taskInfo} />);
        expect(wrapper.find('.cs-taskmanager-web-detail-block').length).toBe(1);
    });
});

describe('The TaskActivities component', () => {
    const contextObj = Immutable.Map({
        cdb_object_id: 'test'
    });

    it('with a contextObject displays a valid DetailComponent wirg ObjectActivities', () => {
        const wrapper = shallow(<DetailBlocks.TaskActivities contextObject={contextObj} />);
        expect(wrapper.find('.cs-taskmanager-web-detail-block > '+
            '.cs-taskmanager-web-object-activities').length).toBe(1);
    });
});

describe('The TaskManagerIntro component', () => {
    it('with no parameter displays a valid Alert', () => {
        const wrapper = shallow(<DetailBlocks.TaskManagerIntro />);
        expect(wrapper.find('.cs-taskmanager-web-detail-blocks-alert').length).toBe(1);
        expect(wrapper.find('strong').length).toBe(1);
        expect(wrapper.find('p').length).toBe(1);
    });
});
