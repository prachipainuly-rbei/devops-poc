/* -*- mode: javascript; coding: utf-8 -*-
 * $Id: sagas.js 181657 2018-08-03 13:46:23Z cso $
 *
 * Copyright (c) 1990 - 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 */

import {ReduxSaga} from 'cs-web-components-externals';
const {put, call, takeEvery} = ReduxSaga.effects;
import {getJSON, fetchTypes, getAppSetup} from 'cs-web-components-base';
import {backendRequestInFlight, notifyError} from '../../actions/actions';
import {mergeObjectStore} from '../../sagas/sagas';
import {GET_TASK_DETAILS, TASK_DETAILS} from '../actions/actions';

const URL_GET_TASK_DETAILS = getAppSetup().getIn(['links', componentNameSpace, 'taskDetails']);
const OBJECT_TYPES = 'cs_tasks_object_types';

function* getTaskDetails(action) {
    const payload = {task_object_id: action.payload.task_object_id};

    yield call(backendRequestInFlight, `GET ${URL_GET_TASK_DETAILS}`, true);

    try {
        yield put(backendRequestInFlight(`GET ${URL_GET_TASK_DETAILS}`, false));
        const info = yield call(getJSON, URL_GET_TASK_DETAILS, payload);

        // consume OBJECT_TYPES while loading operations for selection
        // result is added to object in store directly
        if (info.task && info.task[OBJECT_TYPES]) {
            yield put(fetchTypes(info.task[OBJECT_TYPES]));
            delete info.task[OBJECT_TYPES];
        }
        yield call(mergeObjectStore, info);
        yield put({
            type: TASK_DETAILS,
            payload: info
        });
    } catch (error) {
        yield put(backendRequestInFlight(`GET ${URL_GET_TASK_DETAILS}`, false));
        yield put(notifyError(error));
    }
}

export default function* setupSagas() {
    yield takeEvery(GET_TASK_DETAILS, getTaskDetails);
}
