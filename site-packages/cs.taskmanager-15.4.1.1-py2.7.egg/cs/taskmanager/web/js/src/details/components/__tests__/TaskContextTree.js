import React from 'react';
import {shallow} from 'enzyme';
import TaskContextTree from '../TaskContextTree';

describe('The TaskContextTree component', () => {
    const task = Immutable.Map({
        'system:icon_link': '/resources/icons/byname/branding_web_favicon',
        'system:description': 'Example Object'
    });

    it('with task and taskinfo with empty context dispalys a empty TaskContextNode', () => {
        const taskInfo = Immutable.Map({
            '@id': '',
            '@plugin_discriminators': Immutable.List(),
            'cs_tasks_context': Immutable.List(),
            'cs_tasks_relships': Immutable.List()
        });

        const wrapper =shallow(<TaskContextTree task={task} taskInfo={taskInfo} />);
        expect(wrapper.find(
            '.cs-taskmanager-web-task-context > '+
            '.cs-taskmanager-web-context-node-0'
            ).length).toBe(0);
        expect(wrapper.find(
            '.cs-taskmanager-web-task-context > '+
            '.cs-taskmanager-web-context-node-empty'
            ).length).toBe(1);
        expect(wrapper.text()).toBe('<Connect(_TaskContextNode) />');
    });

    it('with task and taskinfo with filled context dispalys a TaskContextNode', () => {
        const taskInfo = Immutable.Map({
            '@id': '',
            '@plugin_discriminators': Immutable.List(),
            'cs_tasks_context': Immutable.List([
                'test1', 'test2'
            ]),
            'cs_tasks_relships': Immutable.List()
        });

        const wrapper =shallow(<TaskContextTree task={task} taskInfo={taskInfo} />);
        expect(wrapper.find(
            '.cs-taskmanager-web-task-context > '+
            '.cs-taskmanager-web-context-node-0'
            ).length).toBe(1);
        expect(wrapper.find(
            '.cs-taskmanager-web-task-context > '+
            '.cs-taskmanager-web-context-node-1'
            ).length).toBe(1);
        expect(wrapper.find(
            '.cs-taskmanager-web-task-context > '+
            '.cs-taskmanager-web-context-node-empty'
            ).length).toBe(1);
        expect(wrapper.text()).toBe('<Connect(_TaskContextNode) /><Connect(_TaskContextNode) /><Connect(_TaskContextNode) />');
    });
});

/**
 * The TaskContextNode component cannot be tested yet, because it is a connected component.
 */
