import React from 'react';
import {
    ImmutablePropTypes,
    connect,
    PropTypes,
    classNames
} from 'cs-web-components-externals';
import {Registry, SplitterLayout} from 'cs-web-components-base';
import {saveUserSettings} from '../actions/actions';
import * as helpers from '../helpers';
import {DEFAULT_PANE_WIDTH} from './Details';

const FileList = Registry.findComponent('cs-web-components-base-FileList');

const PANE_FILES = helpers.prefixNS('files-pane');

class FileListPane extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.setUserSettings = this.setUserSettings.bind(this);
    }

    setUserSettings(updates) {
        const {setUserSettings} = this.props;

        setUserSettings({
            [PANE_FILES]: updates
        });
    }

    render() {
        const {fileContainer, filesPaneSize} = this.props;
        const showFiles = fileContainer !== null;

        return (
            <SplitterLayout.SecondaryPane
                className={classNames(
                    helpers.prefixNS('file-list'),
                    {active: showFiles},
                    {inactive: !showFiles}
                )}
                resizable={showFiles}
                collapsible={showFiles}
                initCollapsed={!showFiles}
                defaultSize={filesPaneSize}
                onChange={this.setUserSettings}
            >
                {fileContainer && (
                    <FileList
                        contextObject={fileContainer}
                        expanded={true}
                        minified={false}
                    />
                )}
            </SplitterLayout.SecondaryPane>
        );
    }
}

FileListPane.defaultProps = {
    filesPaneSize: DEFAULT_PANE_WIDTH
};

FileListPane.propTypes = {
    fileContainer: ImmutablePropTypes.map,
    fileContainerID: PropTypes.string,
    filesPaneSize: PropTypes.string.isRequired,
    setUserSettings: PropTypes.func.isRequired
};

function mapStateToProps(state) {
    const ownState = state[helpers.prefixNS('reducer')];
    const fileContainerID = ownState.get('fileContainerID');

    return {
        filesPaneSize: ownState.getIn(['settings', PANE_FILES, 'size']),
        fileContainer: state.objectsById.get(fileContainerID, null)
    };
}

function mapDispatchToProps(dispatch) {
    return {
        setUserSettings: (payload, optimistic) => {
            dispatch(saveUserSettings(payload, optimistic));
        }
    };
}

export default connect(mapStateToProps, mapDispatchToProps)(FileListPane);
