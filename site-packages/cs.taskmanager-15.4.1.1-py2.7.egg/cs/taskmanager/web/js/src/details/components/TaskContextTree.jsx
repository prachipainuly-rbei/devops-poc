import React from 'react';
import {ImmutablePropTypes, PropTypes, connect} from 'cs-web-components-externals';
import {fetchObject} from 'cs-web-components-base';
import * as constants from '../../constants';
import {prefixNS} from '../../helpers';
import * as proptypes from '../../proptypes';
import ObjectIconAndLink from './ObjectIconAndLink';

/**
 * TaskContextTree shows a given object's parent structure as identified by a list
 * of Powerscript References of cardinality 1.
 *
 * React Properties
 * ................
 *
 * +-------------------------+----------------+---------+------------------------------------------+
 * | Property                | Type           | Default | Use                                      |
 * +=========================+================+=========+==========================================+
 * | task                    | Immutable.Map  | \-      | The object as returned by the REST API.  |
 * |                         | (Required)     |         |                                          |
 * +-------------------------+----------------+---------+------------------------------------------+
 * | taskInfo                | Immutable.Map  | \-      | cs.taskmanager-specific task             |
 * |                         | (Required)     |         | information. Keys are described below.   |
 * +-------------------------+----------------+---------+------------------------------------------+
 * | taskInfo.@id            | String         | \-      | Task's REST API URL.                     |
 * |                         | (Required)     |         |                                          |
 * +-------------------------+----------------+---------+------------------------------------------+
 * | taskInfo                | Immutable.List | \-      | List of plugin names as registered.      |
 * | .@plugin_discriminators | (Required)     |         |                                          |
 * +-------------------------+----------------+---------+------------------------------------------+
 * | taskInfo                | Immutable.List | \-      | List of context objects' REST API URLs.  |
 * | .cs_tasks_context       | (Required)     |         |                                          |
 * +-------------------------+----------------+---------+------------------------------------------+
 * | taskInfo                | Immutable.List | \-      | (Unused) List of resolved relationships. |
 * | .cs_tasks_relships      | (Required)     |         |                                          |
 * +-------------------------+----------------+---------+------------------------------------------+
 *
 * @module TaskContextTree
 */
function TaskContextTree({task, taskInfo}) {
    const context = taskInfo.get(constants.CONTEXT);
    return (
        <ul className={prefixNS('task-context')}>
            {context ? context.map((nodeID, index) => (
                <TaskContextNode key={`context-node-${index}`}
                                 nodeID={nodeID}
                                 level={index}
                                 className={prefixNS(`context-node-${index}`)} />
            )) : null}
            <TaskContextNode node={task}
                             level={context ? context.size : 0}
                             className={prefixNS('context-node-empty')} />
        </ul>
    );
}

TaskContextTree.propTypes = {
    task: ImmutablePropTypes.map.isRequired,
    taskInfo: proptypes.TASK_INFO.isRequired
};

export default TaskContextTree;

const LOADING_NODE = '...';

class _TaskContextNode extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.fetchNode = this.fetchNode.bind(this);
    }

    componentWillMount() {
        this.fetchNode(this.props);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.nodeID !== this.props.nodeID) {
            this.fetchNode(nextProps);
        }
    }

    fetchNode(props) {
        const {node, nodeID, fetchObject} = props;

        if (!node && nodeID) {
            fetchObject(nodeID);
        }
    }

    render() {
        const {node, resolvedNode, level} = this.props;
        const actualNode = node || resolvedNode;

        return (
            <li className={prefixNS('task-context-node')}
                style={{marginLeft: 2 * level + 'em'}}>
                {actualNode ?
                    (<ObjectIconAndLink obj={actualNode} />) :
                    LOADING_NODE
                }
            </li>
        );
    }
}

_TaskContextNode.propTypes = {
    node: ImmutablePropTypes.map,
    resolvedNode: ImmutablePropTypes.map,
    nodeID: PropTypes.string,
    level: PropTypes.number.isRequired
};

function mapStateToProps(state, ownProps) {
    return {
        resolvedNode: state.objectsById.get(ownProps.nodeID)
    };
}

const TaskContextNode = connect(mapStateToProps, {fetchObject})(_TaskContextNode);
