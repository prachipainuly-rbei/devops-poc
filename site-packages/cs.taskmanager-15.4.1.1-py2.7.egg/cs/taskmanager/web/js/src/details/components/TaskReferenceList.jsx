/* -*- mode: javascript; coding: utf-8 -*-
 * $Id: TaskReferenceList.jsx 185099 2018-10-16 06:51:55Z cso $
 *
 * Copyright (c) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 */

import React from 'react';
import {ListGroup, ListGroupItem} from 'react-bootstrap';
import {ImmutablePropTypes, PropTypes, connect} from 'cs-web-components-externals';
import {ContentOperationToolbar} from 'cs-web-components-base';
import {prefixNS, detectIE} from '../../helpers';
import {formatStr} from '../../i18n';
import * as constants from '../../constants';
import * as proptypes from '../../proptypes';
import ObjectListEntry from './ObjectListEntry';

const IS_IE = detectIE();
const LIST_LIMIT = 3;  // amount of objects to show before "more..." link appears
const MESSAGE_MORE = 'more';

function stopEventPropagation(event) {
    event.stopPropagation();
}

function _ObjectListEntryWrapper({resolvedObject}) {
    return (
        <ObjectListEntry obj={resolvedObject}>
            <div
                className={prefixNS('referenced-object__actions')}
                style={IS_IE ? {marginTop: '-12px'} : null}
                onClick={stopEventPropagation}
            >
                <ContentOperationToolbar
                    contextObject={resolvedObject}
                    operationContextName='CsTasksDetailReference'
                    hideQuickAccess={true}/>
            </div>
        </ObjectListEntry>
    );
}

_ObjectListEntryWrapper.propTypes = {
    resolvedObject: proptypes.OBJECT_PROPTYPE.isRequired
};

function mapResolvedObject(state, ownProps) {
    const {objID} = ownProps;

    return {
        resolvedObject: state.objectsById.get(objID)
    };
}

const ObjectListEntryWrapper = connect(mapResolvedObject)(_ObjectListEntryWrapper);

function ObjectList({objectIDs, showAllObjs, hasMore}) {
    return (
        <ListGroup>
            {objectIDs.map(objID => (
                <ListGroupItem
                    key={objID}
                    className={prefixNS('referenced-object')}
                >
                    <ObjectListEntryWrapper objID={objID} />
                </ListGroupItem>
            ))}

            {showAllObjs && hasMore ? (
                <a onClick={showAllObjs} href='#'>
                    {formatStr(MESSAGE_MORE)}
                </a>
            ) : null}
        </ListGroup>
    );
}

ObjectList.propTypes = {
    objectIDs: ImmutablePropTypes.listOf(PropTypes.string).isRequired,
    shownObjs: ImmutablePropTypes.list.isRequired,
    showAllObjs: PropTypes.func,
    hasMore: PropTypes.bool
};

/**
 * TaskReferenceList displays a list of objects identified by the name of a Powerscript reference.
 * It is preceded by a ``_`` to denote its default usage as a connected component that
 * automatically resolves objects from the global object store ``objectsById``.
 *
 * React Properties
 * ................
 *
 * +------------+---------------+------------+----------------------------------------------------+
 * | Property   | Type          | Default    | Use                                                |
 * +============+===============+============+====================================================+
 * | renderer   | Component     | ObjectList | Component used to render objects                   |
 * |            | (Required)    |            |                                                    |
 * +------------+---------------+------------+----------------------------------------------------+
 * | relship    | Immutable.Map | \-         | Map with keys as described below.                  |
 * |            | (Required)    |            |                                                    |
 * +------------+---------------+------------+----------------------------------------------------+
 * | relship.   | Array         | \-         | The referenced objects REST IDs. The component     |
 * | references | (Required)    |            | resolves objects from state.objectsById with these |
 * |            |               |            | IDs. The calculated prop ``resolvedObjectCount``   |
 * |            |               |            | contains the number of resolved reference objects. |
 * +------------+---------------+------------+----------------------------------------------------+
 * | relship.   | String        | \-         | The translated relationship's title.               |
 * | mappedName | (Required)    |            |                                                    |
 * +------------+---------------+------------+----------------------------------------------------+
 *
 */

class _TaskReferenceList extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.state = {
            shownReferences: 0
        };
        this.initializeRef = this.initializeRef.bind(this);
        this.showAllReferences = this.showAllReferences.bind(this);
    }

    initializeRef(props) {
        const {resolvedObjectCount, relship} = props;
        const references = relship.get('references');
        let limit = LIST_LIMIT;

        // actually show one more ref than limit if this means we can show everything
        if (resolvedObjectCount <= LIST_LIMIT + 1) {
            limit = LIST_LIMIT + 1;
        }

        const shownReferences = references.slice(0, limit);

        this.setState({
            shownReferences,
            hasMore: shownReferences.size !== references.size
        });
    }

    componentWillMount() {
        this.initializeRef(this.props);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.resolvedObjectCount !== this.props.resolvedObjectCount) {
            this.initializeRef(nextProps);
        }
    }

    showAllReferences() {
        const {relship} = this.props;

        this.setState({
            shownReferences: relship.get('references'),
            hasMore: false
        });
    }

    render() {
        const {renderer, resolvedObjectCount} = this.props;
        const {shownReferences, hasMore} = this.state;

        if (resolvedObjectCount === 0) {
            return null;
        }

        return renderer({
            objectIDs: shownReferences,
            showAllObjs: this.showAllReferences,
            hasMore: hasMore
        });
    }
}

_TaskReferenceList.getLabel = (relship) => {
    const label = relship && relship.get('mappedName');  // may contain prefixes
    return label ? label.split('/').pop() : constants.NULL;
};

_TaskReferenceList.propTypes = {
    renderer: PropTypes.oneOfType([
        PropTypes.element,
        PropTypes.func
    ]).isRequired,
    relship: ImmutablePropTypes.contains({
        references: ImmutablePropTypes.listOf(PropTypes.string).isRequired,
        mappedName: PropTypes.string.isRequired
    }).isRequired,
    resolvedObjectCount: PropTypes.number.isRequired
};

_TaskReferenceList.defaultProps = {
    renderer: ObjectList
};

function mapStateToProps(state, ownProps) {
    const references = ownProps.relship.get('references');

    return {
        resolvedObjectCount: references ? (
            references
                .map(ID => state.objectsById.get(ID))
                .filter(o => o)
                .size
        ) : 0
    };
}

export default connect(mapStateToProps)(_TaskReferenceList);
