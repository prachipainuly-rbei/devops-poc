import React from 'react';
import {shallow, mount} from 'enzyme';
import IconCell from '../IconCell';

describe('The IconCell constant', () => {
    const SUCCESS = Immutable.Map({
        icon: '/resources/icons/byname/csweb_check',
        tooltip: 'Erfolg'
    });

    it('with value displays a span with an Icon but no tooltip', () => {
        const wrapper = shallow(<IconCell value={SUCCESS} />);
        expect(wrapper.find('.cs-taskmanager-web-empty').length).toBe(0);
        expect(wrapper.find('.cs-taskmanager-web-object-icon').length).toBe(1);
        expect(wrapper.text()).toBe('<Icon />');
        expect(wrapper.find({ title: 'Erfolg' }).length).toBe(1);
    });

    it('with value and isGroup displays a span with an Icon and a tooltip', () => {
        const wrapper = shallow(<IconCell value={SUCCESS} isGroup />);
        expect(wrapper.find('.cs-taskmanager-web-empty').length).toBe(0);
        expect(wrapper.find('.cs-taskmanager-web-object-icon').length).toBe(1);
        expect(wrapper.text()).toBe('<Icon />Erfolg');
        expect(wrapper.find({ title: 'Erfolg' }).length).toBe(1);
    });

    it('with no value displays an empty div', () => {
        const wrapper = shallow(<IconCell isGroup />);
        expect(wrapper.find('.cs-taskmanager-web-empty').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-object-icon').length).toBe(0);
    });

    it('with no value and isGroup displays an empty div', () => {
        const wrapper = mount(<IconCell />);
        expect(wrapper.find('.cs-taskmanager-web-empty').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-object-icon').length).toBe(0);
    });
});

describe('The sortFunction', () => {
    it('with a < b sort it ccorrectly', () => {
        const a = Immutable.Map({
            icon: '/resources/icons/byname/csweb_check',
            tooltip: 'A'
        });

        const b = Immutable.Map({
            icon: '/resources/icons/byname/csweb_check',
            tooltip: 'Z'
        });
        expect(IconCell.sortFunction([a],[b])).toBe(-1);
    });

    it('with a > b sort it correctly', () => {
        const a = Immutable.Map({
            icon: '/resources/icons/byname/csweb_check',
            tooltip: 'Z'
        });

        const b = Immutable.Map({
            icon: '/resources/icons/byname/csweb_check',
            tooltip: 'A'
        });
        expect(IconCell.sortFunction([a],[b])).toBe(1);
    });

    it('with a = b sort it correctly', () => {
        const a = Immutable.Map({
            icon: '/resources/icons/byname/csweb_check',
            tooltip: 'A'
        });

        const b = Immutable.Map({
            icon: '/resources/icons/byname/csweb_check',
            tooltip: 'A'
        });
        expect(IconCell.sortFunction([a],[b])).toBe(0);
    });
});

describe('The filterFunction', () => {
    it('with a loweredText that can be find in the value', () => {
        const Success = Immutable.Map({
            icon: '/resources/icons/byname/csweb_check',
            tooltip: 'Erfolg'
        });
        const loweredText = "folg";
        expect(IconCell.filterFunction(Success,loweredText)).toBe(true);
    });

    it('with a loweredText that cannot be find in the value', () => {
        const Success = Immutable.Map({
            icon: '/resources/icons/byname/csweb_check',
            tooltip: 'Erfolg'
        });
        const loweredText = "test";
        expect(IconCell.filterFunction(Success,loweredText)).toBe(false);
    });
});