import React from 'react';
import StatusCell from '../StatusCell';
import {shallow} from 'enzyme';

const MINIMAL_STATUS = Immutable.Map({
    data: Immutable.Map({
        status: 10,
        label: 'Example Status',
        color: '#abcdef',
    })
});

const STATUS = Immutable.Map({
    data: Immutable.Map({
        priority: 20,
        status: 10,
        label: 'Other Example Status',
        color: '#fedcba',
        attributes: Immutable.Map({
            comment: Immutable.Map({
                mandatory: true,
                label: 'Kommentar'
            }),
            optional: Immutable.Map({
                mandatory: false,
                label: 'Optional',
                value: 'Test'
            })
        })
    })
});
const ICON_STATUS = MINIMAL_STATUS.setIn(
    ['data', 'icon_url'],
    '/resources/icons/byname/csweb_check'
);

describe('The StatusCell component', () => {
    it('with a status displays a span with a StatusIcon', () => {
        const wrapper = shallow(<StatusCell value={MINIMAL_STATUS} />);
        expect(wrapper.find(
            '.cs-taskmanager-web-status > '+
            '.cs-taskmanager-web-status-icon'
            ).length).toBe(1);
        expect(wrapper.find({label:'Example Status'}).length).toBe(1);
        expect(wrapper.find({title:'Example Status'}).length).toBe(1);
        expect(wrapper.find({color:'#abcdef'}).length).toBe(1);
    });

    it('with status and isGroup displays a grouped span with a StatusIcon', () => {
        const wrapper = shallow(<StatusCell value={MINIMAL_STATUS} isGroup />);
        expect(wrapper.find(
            '.cs-taskmanager-web-status > '+
            '.cs-taskmanager-web-status-icon'
            ).length).toBe(1);
        expect(wrapper.find({label:'Example Status'}).length).toBe(1);
        expect(wrapper.find({title:'Example Status'}).length).toBe(1);
        expect(wrapper.find({color:'#abcdef'}).length).toBe(1);
    });

    it('with x-large and status displays a extra large span with a StatusIcon', () => {
        const wrapper = shallow(<StatusCell value={STATUS} size='xl' />);
        expect(wrapper.find(
            '.cs-taskmanager-web-status > '+
            '.cs-taskmanager-web-status-icon'
            ).length).toBe(1);
        expect(wrapper.find({size:'xl'}).length).toBe(1);
        expect(wrapper.find({label:'Other Example Status'}).length).toBe(1);
        expect(wrapper.find({color:'#fedcba'}).length).toBe(1);
    });

    it('with x-large, status and isGroup displays a grouped extra large span with a StatusIcon', () => {
        const wrapper = shallow(<StatusCell value={STATUS} size='xl' isGroup />);
        expect(wrapper.find(
            '.cs-taskmanager-web-status > '+
            '.cs-taskmanager-web-status-icon'
            ).length).toBe(1);
        expect(wrapper.find({size:'xl'}).length).toBe(1);
        expect(wrapper.find({label:
            'Other Example Status'
            }).length).toBe(1);
        expect(wrapper.find({color:'#fedcba'}).length).toBe(1);
    });

    it('with icon and status displays a span with a SVGIcon', () => {
        const wrapper = shallow(<StatusCell value={ICON_STATUS} />);
        expect(wrapper.find(
            '.cs-taskmanager-web-status > '+
            '.cs-taskmanager-web-svg-status-icon'
            ).length).toBe(1);
        expect(wrapper.find({title:'Example Status'}).length).toBe(1);
        expect(wrapper.find({src:'/resources/icons/byname/csweb_check'}).length).toBe(1);
    });

    it('with icon, status and isGroup displays a grouped span with a SVGIcon', () => {
        const wrapper = shallow(<StatusCell value={ICON_STATUS} isGroup />);
        expect(wrapper.find(
            '.cs-taskmanager-web-status > '+
            '.cs-taskmanager-web-svg-status-icon'
            ).length).toBe(1);
        expect(wrapper.find({title:'Example Status'}).length).toBe(1);
        expect(wrapper.find({src:'/resources/icons/byname/csweb_check'}).length).toBe(1);
    });

    it('with large, icon and status displays a large span with a SVGIcon', () => {
        const wrapper = shallow(<StatusCell value={ICON_STATUS} size='lg' />);
        expect(wrapper.find(
            '.cs-taskmanager-web-status > '+
            '.cs-taskmanager-web-svg-status-icon'
            ).length).toBe(1);
        expect(wrapper.find({title:'Example Status'}).length).toBe(1);
        expect(wrapper.find({src:'/resources/icons/byname/csweb_check'}).length).toBe(1);
        expect(wrapper.find({size:'lg'}).length).toBe(1);
    });

    it('with large, icon, status and isGroup displays a grouped large span with a SVGIcon', () => {
        const wrapper = shallow(<StatusCell value={ICON_STATUS} size='lg' isGroup />);
        expect(wrapper.find(
            '.cs-taskmanager-web-status > '+
            '.cs-taskmanager-web-svg-status-icon'
            ).length).toBe(1);
        expect(wrapper.find({title:'Example Status'}).length).toBe(1);
        expect(wrapper.find({src:'/resources/icons/byname/csweb_check'}).length).toBe(1);
        expect(wrapper.find({size:'lg'}).length).toBe(1);
    });
});

describe('The StatusCell component function groupByFunction', () => {
    it('groups the following value', () => {
        const value = Immutable.Map({
            data: Immutable.Map({
                status: 10,
                label: 'A',
                color: '#abcdef',
            }),
            data: Immutable.Map({
                status: 20,
                label: 'Z',
                color: '#fedcba',
            })
        });

        const result = Immutable.Map({
            data: Immutable.Map({
                label: 'Z',
                color: '#fedcba',
            })
        });

        expect(StatusCell.groupByFunction(value)).toEqual(result);
    });
});

describe('The StatusCell component function sortFunction', () => {
    it('with a < b sort it correctly', () => {
        const a = Immutable.Map({
            data: Immutable.Map({
                status: 10,
                label: 'A',
                color: '#abcdef',
            })
        });

        const b = Immutable.Map({
            data: Immutable.Map({
                status: 20,
                label: 'Z',
                color: '#fedcba',
            })
        });

        expect(StatusCell.sortFunction([a],[b])).toBe(-1);
    });

    it('with a > b sort it correctly', () => {
        const a = Immutable.Map({
            data: Immutable.Map({
                status: 20,
                label: 'Z',
                color: '#abcdef',
            })
        });

        const b = Immutable.Map({
            data: Immutable.Map({
                status: 10,
                label: 'A',
                color: '#abcdef',
            })
        });
        expect(StatusCell.sortFunction([a],[b])).toBe(1);
    });

    it('with a = b sort it correctly', () => {
        const a = Immutable.Map({
            data: Immutable.Map({
                status: 10,
                label: 'A',
                color: '#abcdef',
            })
        });

        const b = Immutable.Map({
            data: Immutable.Map({
                status: 10,
                label: 'A',
                color: '#abcdef',
            })
        });
        expect(StatusCell.sortFunction([a],[b])).toBe(0);
    });
});

describe('The StatusCell component function filterFunction', () => {
    it('with a loweredText that can be find in the value', () => {
        const value = Immutable.Map({
            data: Immutable.Map({
                status: 10,
                label: 'Example',
                color: '#abcdef',
            })
        });
        const loweredText = 'xample';
        expect(StatusCell.filterFunction(value, loweredText)).toBe(true);
    });

    it('with a loweredText that cannot be find in the value', () => {
        const value = Immutable.Map({
            data: Immutable.Map({
                status: 10,
                label: 'Example',
                color: '#abcdef',
            })
        });
        const loweredText = 'test';
        expect(StatusCell.filterFunction(value, loweredText)).toBe(false);
    });
});
