import {ReduxSaga} from 'cs-web-components-externals';
const {put, call, takeEvery} = ReduxSaga.effects;
import {postJSON, getAppSetup} from 'cs-web-components-base';
import {
    GET,
    POST,
    URL_SETTINGS,
    getTasks,
    notifyError
} from '../../actions/actions';
import {
    FETCH_SETTINGS,
    RECEIVED_SETTINGS,
    SAVE_TAGS,
    SAVE_TAGS_RESPONSE,
    SAVE_READ_STATUS,
    SAVE_READ_STATUS_RESPONSE,
    GET_TARGET_STATUSES,
    TARGET_STATUSES,
    CHANGE_STATUS,
    STATUS_CHANGE_IN_FLIGHT
} from '../actions/actions';
import {backendRequest} from '../../sagas/sagas';

const URL_TAG = getAppSetup().getIn(['links', componentNameSpace, 'tag']);
const URL_READ_STATUS = getAppSetup().getIn(['links', componentNameSpace, 'readStatus']);
const URL_PROCEED = getAppSetup().getIn(['links', componentNameSpace, 'proceed']);

function* fetchSettings() {
    yield call(backendRequest, GET, URL_SETTINGS, RECEIVED_SETTINGS);
}

function* saveTag(action) {
    yield call(backendRequest, POST, URL_TAG, SAVE_TAGS_RESPONSE, action.payload);
}

function* saveReadStatus(action) {
    yield call(
        backendRequest, POST, URL_READ_STATUS, SAVE_READ_STATUS_RESPONSE, action.payload
    );
}

function* getTargetStatuses(action) {
    yield call(backendRequest, GET, URL_PROCEED, TARGET_STATUSES, action.payload);
}

function* changeStatus(action) {
    const {task_object_id, proceed_to, kwargs, condition} = action.payload;

    yield put({
        type: STATUS_CHANGE_IN_FLIGHT,
        payload: {task_object_id}
    });

    try {
        let payload = {task_object_id, proceed_to};
        if (kwargs) {
            payload = Object.assign(kwargs, payload);
        }
        yield call(postJSON, URL_PROCEED, payload);
        // refresh tasks table after successful proceed
        yield put(getTasks(condition));
    } catch (error) {
        yield put(notifyError(error));
    }
}

export default function* setupSagas() {
    yield takeEvery(FETCH_SETTINGS, fetchSettings);
    yield takeEvery(SAVE_TAGS, saveTag);
    yield takeEvery(SAVE_READ_STATUS, saveReadStatus);
    yield takeEvery(GET_TARGET_STATUSES, getTargetStatuses);
    yield takeEvery(CHANGE_STATUS, changeStatus);
}
