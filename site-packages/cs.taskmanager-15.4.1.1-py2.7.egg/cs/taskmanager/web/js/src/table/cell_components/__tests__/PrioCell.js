import React from 'react';
import {shallow} from 'enzyme';
import PrioCell from '../PrioCell';

describe('The PrioCell component', () => {
    it('is displayed with a high priority', () => {
        const wrapper = shallow(<PrioCell value='cs_tasks_prio_high' />);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio.cs_tasks_prio_high').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio-label').length).toBe(0);
        expect(wrapper.find({title:'[Missing label: cs-taskmanager-web.cs_tasks_prio_high]'}).length).toBe(1);
    });

    it('is displayed with a high priority and the tooltip will be displayed alongside the icon', () => {
        const wrapper = shallow(<PrioCell value='cs_tasks_prio_high' isGroup />);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio.cs_tasks_prio_high').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio-label').length).toBe(1);
        expect(wrapper.find({title:'[Missing label: cs-taskmanager-web.cs_tasks_prio_high]'}).length).toBe(1);
    });

    it('is displayed with a medium priority', () => {
        const wrapper = shallow(<PrioCell value='cs_tasks_prio_medium' />);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio.cs_tasks_prio_medium').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio-label').length).toBe(0);
        expect(wrapper.find({title:'[Missing label: cs-taskmanager-web.cs_tasks_prio_medium]'}).length).toBe(1);
    });

    it('is displayed with a medium priority and the tooltip will be displayed alongside the icon', () => {
        const wrapper = shallow(<PrioCell value='cs_tasks_prio_medium' isGroup />);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio.cs_tasks_prio_medium').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio-label').length).toBe(1);
        expect(wrapper.find({title:'[Missing label: cs-taskmanager-web.cs_tasks_prio_medium]'}).length).toBe(1);
    });

    it('is displayed with a low priority', () => {
        const wrapper = shallow(<PrioCell value='cs_tasks_prio_low' />);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio.cs_tasks_prio_low').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio-label').length).toBe(0);
        expect(wrapper.find({title:'[Missing label: cs-taskmanager-web.cs_tasks_prio_low]'}).length).toBe(1);
    });

    it('is displayed with a low priority and the tooltip will be displayed alongside the icon', () => {
        const wrapper = shallow(<PrioCell value='cs_tasks_prio_low' isGroup />);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio.cs_tasks_prio_low').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio-label').length).toBe(1);
        expect(wrapper.find({title:'[Missing label: cs-taskmanager-web.cs_tasks_prio_low]'}).length).toBe(1);
    });

    it('is displayed with no priority', () => {
        const wrapper = shallow(<PrioCell />);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio-label').length).toBe(0);
    });

    it('is displayed with no priority and the tooltip will be displayed alongside the icon', () => {
        const wrapper = shallow(<PrioCell isGroup />);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio').length).toBe(1);
        expect(wrapper.find('.cs-taskmanager-web-prio-wrapper > .cs-taskmanager-web-prio-label').length).toBe(1);
    });
});

describe('The PrioCell component function sortFunction', () => {
    it('with a < b sort it correctly', () => {
        const a = 'cs_tasks_prio_low';
        const b = 'cs_tasks_prio_high';
        expect(PrioCell.sortFunction([a],[b])).toBe(-1);
    });

    it('with a > b sort it correctly', () => {
        const a = 'cs_tasks_prio_high';
        const b = 'cs_tasks_prio_low';
        expect(PrioCell.sortFunction([a],[b])).toBe(1);
    });

    it('with a = b sort it correctly', () => {
        const a = 'cs_tasks_prio_medium';
        const b = 'cs_tasks_prio_medium';
        expect(PrioCell.sortFunction([a],[b])).toBe(0);
    });
});

describe('The PrioCell component function filterFunction', () => {
    const value = 'cs_tasks_prio_medium';

    it('with a loweredText that can be find in the value', () => {
        const loweredText = 'medium';
        expect(PrioCell.filterFunction(value, loweredText)).toBe(true);
    });

    it('with a loweredText that cannot be find in the value', () => {
        const loweredText = 'low';
        expect(PrioCell.filterFunction(value, loweredText)).toBe(false);
    });
});
