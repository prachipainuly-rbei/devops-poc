import Immutable from 'immutable';
import ProceedCell from '../ProceedCell';

const TARGET_0 = Immutable.Map({
    data: Immutable.Map({
        status: 0,
        label: 'Example Status',
        color: '#abcdef',
    })
});
const TARGET_10 = Immutable.Map({
    data: Immutable.Map({
        priority: -1,
        status: 10,
        label: 'Ten',
        color: '',
        icon_url: '/resources/icons/byname/csweb_cancel',
        attributes: Immutable.Map({
            comment: Immutable.Map({
                mandatory: true,
                label: 'Kommentar'
            }),
            optional: Immutable.Map({
                mandatory: false,
                label: 'Optional',
                value: 'Test'
            })
        })
    })
});
const TARGET_20 = Immutable.Map({
    data: Immutable.Map({
        status: 20,
        label: 'Twenty',
        color: '',
        icon_url: '/resources/icons/byname/csweb_check',
        attributes: Immutable.Map({
            optional: Immutable.Map({
                mandatory: false,
                label: 'Optional'
            })
        })
    })
});
const TARGET_30 = Immutable.Map({
    data: Immutable.Map({
        priority: 5,
        status: 30,
        label: 'Thirty',
        color: '#ff00ff'
    })
});

/**
 * To test the ProceedCell components function getRowID it is necessary to create
 * an intsance of it. This cannot be tested, because ProceedCell is a connected component.
 */

/**
 * To test the ProceedCell component it is necessary to create an instance of
 * it. This cannot be tested, because ProceedCell is a connected component.
 */

 /**
 * To test the ProceedCell components function groupByFunction it is necessary to
 * check if a function is called (e.g. mock function) or to test the return value.
 * This cannot be tested, because e.g. getIn are default methods.
 */

/**
 * To test the ProceedCell components function sortFunction it is necessary to create
 * an intsance of it to set 'current'. This cannot be tested, because
 * ProceedCell is a connected component.
 */

describe('The ProceedCell component function filterFunction', () => {
    const value = Immutable.Map({
        current: TARGET_0,
        'targets': Immutable.List([
            TARGET_30,
            TARGET_20,
            TARGET_10
        ])
    });

    it('with a loweredText that can be find in the value', () => {
        const loweredText = 'xample';
        expect(ProceedCell.filterFunction(value, loweredText)).toBe(true);
    });

    it('with a loweredText that cannot be find in the value', () => {
        const loweredText = 'test';
        expect(ProceedCell.filterFunction(value, loweredText)).toBe(false);
    });
});
