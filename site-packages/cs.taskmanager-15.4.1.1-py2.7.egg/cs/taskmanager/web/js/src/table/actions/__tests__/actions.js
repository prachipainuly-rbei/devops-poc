import {fetchSettings,
    saveTags,
    saveReadStatus,
    getTargetStatuses,
    changeStatus} from '../actions';

const task_object_id = 'test-task';

describe('The function fetchSettings', () => {
    it('with no parameter return an valid action', () => {
        expect(fetchSettings()).toEqual({"type": 'cs-taskmanager-web-FETCH_SETTINGS'});
    });
});

describe('The function saveTags', () => {
    it('with the needed parameter task_object_id and tags return an valid action', () => {
        const tags = 'test';
        expect(saveTags(task_object_id, tags)).toEqual(
            {"type": 'cs-taskmanager-web-SAVE_TAGS', "payload": {"tags": "test", "task_object_id": "test-task"}}
        );
    });
});

describe('The function saveReadStatus', () => {
    it('with the needed parameter task_object_id and read_status return an valid action', () => {
        const read_status = 'test';
        expect(saveReadStatus(task_object_id, read_status)).toEqual(
            {"type": 'cs-taskmanager-web-SAVE_READ_STATUS', "payload": {"task_object_id": "test-task", "read_status": "test"}}
        );
    });
});

describe('The function getTargetStatuses', () => {
    it('with the needed parameter task_object_id return an valid action', () => {
        expect(getTargetStatuses(task_object_id)).toEqual(
            {"type": 'cs-taskmanager-web-GET_TARGET_STATUSES', "payload": {"task_object_id": "test-task"}}
        );
    });
});

describe('The function changeStatus', () => {
    it('with the needed parameter task_object_id, proceed_to, kwargs and condition return an valid action', () => {
        const proceed_to = 'Done';
        const kwargs = 'test';
        const condition= 'its done';
        expect(changeStatus(task_object_id, proceed_to, kwargs, condition)).toEqual(
            {"type": 'cs-taskmanager-web-CHANGE_STATUS', "payload": {"task_object_id": "test-task",
                                            "proceed_to": "Done",
                                            "kwargs": "test",
                                            "condition": "its done"}}
        );
    });
});
