import React from 'react';
import {connect, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import * as helpers from '../../helpers';
import {formatStr} from '../../i18n';
import {saveReadStatus} from '../actions/actions';
import {CELL_PROPTYPE, isDeleted} from './index';

const READ_STATUS = 'cs_tasks_col_read_status';

const MESSAGE_TASK_READ = 'task-read';
const MESSAGE_TASK_UNREAD = 'task-unread';
const MESSAGE_READ = 'read';
const MESSAGE_UNREAD = 'unread';

/**
 * Displays a task's read status and allows the user to toggle it.
 *
 * React Properties
 * ................
 *
 * +----------+---------+---------+-----------------------------------------------------+
 * | Property | Type    | Default | Use                                                 |
 * +==========+=========+=========+=====================================================+
 * | value    | Number  | \-      | If 1, the task counts as read, otherwise as unread. |
 * +----------+---------+---------+-----------------------------------------------------+
 * | isGroup  | Boolean | \-      | If true, toggling the read status is disabled.      |
 * +----------+---------+---------+-----------------------------------------------------+
 *
 * The standard cell property ``row`` is required.
 *
 * Filtering
 * .........
 *
 * Values will never match the table filter.
 *
 */
class ReadStatusCell extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.cycleReadStatus = this.cycleReadStatus.bind(this);
    }

    cycleReadStatus(event) {
        const {row} = this.props;
        this.props.setReadStatus(
            row.get('id'),
            row.get(READ_STATUS) ? 0 : 1
        );
        helpers.stopEvent(event);
    }

    render() {
        const {row, value, isGroup} = this.props;
        const read_status = value === 1;
        const read = read_status ? 'read' : 'unread';
        const tooltip = read_status ?
            formatStr(MESSAGE_READ) :
            formatStr(MESSAGE_UNREAD);
        const short_tooltip = read_status ?
            formatStr(MESSAGE_TASK_READ) :
            formatStr(MESSAGE_TASK_UNREAD);

        return (
            <span>
                <div
                    className={helpers.prefixNS(`read-status-${read}`)}
                    title={isGroup ? short_tooltip : tooltip}
                    onClick={isGroup || isDeleted(row) ? null : this.cycleReadStatus}
                />
                {isGroup ? short_tooltip : ''}
            </span>
        );
    }
}

ReadStatusCell.filterFunction = (value, loweredText) => false; // eslint-disable-line no-unused-vars

ReadStatusCell.propTypes = {
    ...CELL_PROPTYPE,
    row: ImmutablePropTypes.map.isRequired,
    value: PropTypes.number,
    setReadStatus: PropTypes.func.isRequired
};

function mapDispatchToProps(dispatch) {
    return {
        setReadStatus: (task_oid, read_status) => {
            dispatch(saveReadStatus(task_oid, read_status));
        }
    };
}

export default connect(null, mapDispatchToProps)(ReadStatusCell);
