import React from 'react';
import {Registry, SVGIcon} from 'cs-web-components-base';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import * as helpers from '../../helpers';
import {EMPTY, CELL_PROPTYPE, customSort} from './index';

const StatusIcon = Registry.findComponent('cs-web-components-base-StatusIcon');

export const STATUS_PROPTYPE = ImmutablePropTypes.contains({
    data: PropTypes.oneOfType([
        ImmutablePropTypes.contains({
            priority: PropTypes.number,
            status: PropTypes.number.isRequired,
            label: PropTypes.string.isRequired,
            icon_url: PropTypes.string,
            color: PropTypes.string.isRequired,
            attributes: ImmutablePropTypes.mapOf(
                ImmutablePropTypes.contains({
                    mandatory: PropTypes.bool.isRequired,
                    label: PropTypes.string.isRequired,
                    value: PropTypes.string
                })
            )
        }),
        PropTypes.object
    ]).isRequired
});

/**
 * Displays a status value. This component does not offer interaction. By default, it is only used by the
 * :ref:`cs-taskmanager-web-table.cell_components.ProceedCell.ProceedCell`.
 *
 * React Properties
 * ................
 *
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 * | Property              | Type              | Default | Use                                                   |
 * +=======================+===================+=========+=======================================================+
 * | value                 | Immutable.Map     | \-      | Keys are described below.                             |
 * |                       | (Required)        |         |                                                       |
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 * | value.data            | Immutable.Map or  | \-      | Keys are described below.                             |
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 * | value.data.priority   | Number            | \-      | (Unused) Configured priority, dictates order in       |
 * |                       |                   |         | proceed cells.                                        |
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 * | value.data.status     | Number (Required) | \-      | Numerical status identifier.                          |
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 * | value.data.label      | String (Required) | \-      | Internationalized status name.                        |
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 * | value.data.color      | String (Required) | \-      | CSS color value.                                      |
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 * | value.data.icon_url   | String            | \-      | If given, replaces colored circle.                    |
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 * | value.data.attributes | Immutable.Map     | \-      | (Unused) Additional attributes for changing to this   |
 * |                       |                   |         | status. Used in proceed cells.                        |
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 * | size                  | String            | 'sm'    | The status icon's size.                               |
 * +-----------------------+-------------------+---------+-------------------------------------------------------+
 *
 * Grouping
 * ........
 *
 * Status cells are grouped by their color, icon URL and label.
 *
 * Sorting
 * .......
 *
 * Status cells are sorted by their label defaulting to an empty string.
 *
 * Filtering
 * .........
 *
 * Values match the table filter if the label contains the filter text.
 *
 * @module StatusCell
 */
function StatusCell({value, size}) {
    if (value) {
        const data = value.get('data');
        const iconURL = data.get('icon_url');

        const statusIcon = iconURL ? (
            <SVGIcon
                size={size}
                src={iconURL}
                className={helpers.prefixNS('svg-status-icon')}
            />
        ) : (
            <StatusIcon
                color={data.get('color')}
                label={data.get('label')}
                className={helpers.prefixNS('status-icon')}
                size={size}
            />
        );

        return (
            <span
                className={helpers.prefixNS('status')}
                title={data.get('label')}
            >
                {statusIcon}
                {data.get('label')}
            </span>
        );
    } else {
        return EMPTY;
    }
}

StatusCell.groupByFunction = (value) => (
    // only use current color, icon and label for grouping
    value.set('data',
        value.get('data').filter(
            (val, key) => (
                key === 'color' ||
                key === 'label' ||
                key === 'icon_url'
            )
        )
    )
);

StatusCell.sortFunction = (a, b) => (
    customSort(x => x.getIn(['data', 'label']), '', a, b)
);

StatusCell.filterFunction = (value, loweredText) => {
    const valueStr = value && value.getIn(['data', 'label']) || '';
    return valueStr.toLowerCase().indexOf(loweredText) > -1;
};

StatusCell.propTypes = {
    ...CELL_PROPTYPE,
    value: STATUS_PROPTYPE.isRequired,
    size: PropTypes.string
};

StatusCell.defaultProps = {
    size: 'sm'
};

export default StatusCell;
