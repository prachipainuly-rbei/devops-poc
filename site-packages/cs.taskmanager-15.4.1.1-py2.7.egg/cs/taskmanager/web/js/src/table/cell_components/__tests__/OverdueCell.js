import React from 'react';
import {shallow} from 'enzyme';
import OverdueCell from '../OverdueCell';

describe('The OverdueCell component', () => {
    it('have an overdue and displays a red square', () => {
        const wrapper = shallow(<OverdueCell value />);
        expect(wrapper.find('.cs-taskmanager-web-overdue').length).toBe(1);
        expect(wrapper.find('span').length).toBe(1);
        expect(wrapper.find('div').length).toBe(1);
    });

    it('have no overdue and displays a grayed out square', () => {
        const wrapper = shallow(<OverdueCell />);
        expect(wrapper.find('.cs-taskmanager-web-not-overdue').length).toBe(1);
        expect(wrapper.find('span').length).toBe(1);
        expect(wrapper.find('div').length).toBe(1);
    });

    it('have an overdue with an isGruop and displays a red square and a tooltip without the hover', () => {
        const wrapper = shallow(<OverdueCell value isGroup />);
        expect(wrapper.find('.cs-taskmanager-web-overdue').length).toBe(1);
        expect(wrapper.find('span').length).toBe(1);
        expect(wrapper.find('div').length).toBe(1);
    });

    it('have no overdue with an isGruop and displays a grayed out square and a tooltip without the hover', () => {
        const wrapper = shallow(<OverdueCell isGroup />);
        expect(wrapper.find('.cs-taskmanager-web-not-overdue').length).toBe(1);
        expect(wrapper.find('span').length).toBe(1);
        expect(wrapper.find('div').length).toBe(1);
    });
});

describe('The OverdueFunction component function sortFunction', () => {
    it('with a < b sort it correctly', () => {
        const a = false;
        const b = true;
        expect(OverdueCell.sortFunction([a],[b])).toBe(-1);
    });

    it('with a > b sort it correctly', () => {
        const a = true;
        const b = false;
        expect(OverdueCell.sortFunction([a],[b])).toBe(1);
    });

    it('with a = b sort it correctly', () => {
        const a = true;
        const b = true;
        expect(OverdueCell.sortFunction([a],[b])).toBe(0);
    });
});

describe('The OverdueCell component function filterFunction', () => {
    const value = Immutable.Map({});
    const loweredText = '';
    it('return everytime false', () => {
        expect(OverdueCell.filterFunction(value, loweredText)).toBe(false);
    });
});