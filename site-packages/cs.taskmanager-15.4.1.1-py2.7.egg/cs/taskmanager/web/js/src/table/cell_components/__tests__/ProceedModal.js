import React from 'react';
import {ProceedModal} from '../ProceedModal';
import {isValid} from '../ProceedModal';
import {shallow} from 'enzyme';

const status = 1;
const mockOnClose = jest.fn();
const mockSetAttributes = jest.fn();
const attributes = Immutable.Map({
    test : Immutable.Map({
        label: 'Test this thing',
        mandatory: true,
        value: 'SUCCESS'
    })
});

describe('The ProceedModal component function isValid', () => {
    it('with a value that has a min length 2', () => {
        const value = 'test';
        expect(isValid(value)).toBe(true);
    });

    it('with a value that has not a min length 2', () => {
        const value = 't';
        expect(isValid(value)).toBe(false);
    });
});

describe('The ProceedModal component', () => {
    it('with the class structure displays a Modal with passed informations', () => {
        const wrapper = shallow(
            <ProceedModal
                status={status}
                attributes={attributes}
                onClose={mockOnClose}
                setAttributes={mockSetAttributes}
            />
        );

        expect(wrapper.find(
            '.cs-taskmanager-web-proceed-modal '+
            '.cs-taskmanager-web-proceed-modal-header '+
            '.cs-taskmanager-web-proceed-modal-title'
        ).length).toBe(1);

        expect(wrapper.find(
            '.cs-taskmanager-web-proceed-modal '+
            '.cs-taskmanager-web-proceed-modal-body '+
            '.cs-taskmanager-web-proceed-modal-body-formgroup '+
            '.cs-taskmanager-web-proceed-modal-body-formgroup-controllabel'
        ).length).toBe(1);

        expect(wrapper.find(
            '.cs-taskmanager-web-proceed-modal '+
            '.cs-taskmanager-web-proceed-modal-body '+
            '.cs-taskmanager-web-proceed-modal-body-formgroup '+
            '.cs-taskmanager-web-proceed-modal-body-formgroup-formcontrol'
        ).length).toBe(1);

        expect(wrapper.find(
            '.cs-taskmanager-web-proceed-modal '+
            '.cs-taskmanager-web-proceed-modal-footer '+
            '.cs-taskmanager-web-proceed-modal-footer-button-cancel'
        ).length).toBe(1);

        expect(wrapper.find(
            '.cs-taskmanager-web-proceed-modal '+
            '.cs-taskmanager-web-proceed-modal-footer '+
            '.cs-taskmanager-web-proceed-modal-footer-button-ok'
        ).length).toBe(1);

        expect(mockOnClose.mock.calls.length).toBe(0);
        expect(mockSetAttributes.mock.calls.length).toBe(0);
    });
});

describe('The ProceedModal component function cancel', () => {
    it('is called by a simulated click', () => {
        const proceedModal = new ProceedModal ({
            status,
            onClose: mockOnClose,
            setAttributes: mockSetAttributes,
            attributes
        });
        proceedModal.cancel();
        expect(mockOnClose).toHaveBeenCalled();
    });

    it('passes true to onClose function', () => {
        const proceedModal = new ProceedModal ({
            status,
            onClose: mockOnClose,
            setAttributes: mockSetAttributes,
            attributes
        });
        proceedModal.cancel();
        expect(mockOnClose).toBeCalledWith(true);
    });

    it('is not called by a simulated click', () => {
        const mockOtherOnClose = jest.fn();
        const proceedModal = new ProceedModal ({
            status,
            onClose: mockOtherOnClose,
            setAttributes: mockSetAttributes,
            attributes
        });
        proceedModal.forceUpdate();
        expect(mockOtherOnClose.mock.calls.length).toBe(0);
    });
});

describe('The ProceedModal component function ok', () => {
    it('passes false and attributes to onClose function', () => {
        const proceedModal = new ProceedModal ({
            status,
            onClose: mockOnClose,
            setAttributes: mockSetAttributes,
            attributes
        });
        proceedModal.ok();
        expect(mockOnClose).toBeCalledWith(false, attributes);
    });
});

describe('The ProceedModal component function getValidationState', () => {
    it('should return success', () => {
        const attr = Immutable.Map({
            test : Immutable.Map({
                label: 'Test this thing',
                mandatory: true,
                value: 'SUCCESS'
            })
        });
        const proceedModal = new ProceedModal ({
            status,
            onClose: mockOnClose,
            setAttributes: mockSetAttributes,
            attributes: attr
        });

        attr.entrySeq().toList().map(data => {
            expect(proceedModal.getValidationState().byKey.get(data[0])).toBe('success');
        });
    });

    it('should return error', () => {
        const attr = Immutable.Map({
            test : Immutable.Map({
                label: 'Test this thing',
                mandatory: true,
                value: ''
            })
        });
        const proceedModal = new ProceedModal ({
            status,
            onClose: mockOnClose,
            setAttributes: mockSetAttributes,
            attributes: attr
        });

        attr.entrySeq().toList().map(data => {
            expect(proceedModal.getValidationState().byKey.get(data[0])).toBe('error');
        });
    });
});
