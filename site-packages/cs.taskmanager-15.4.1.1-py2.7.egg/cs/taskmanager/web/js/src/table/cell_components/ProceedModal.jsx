import React from 'react';
import {ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {Button} from 'cs-web-components-base';
import {Modal, FormGroup, FormControl, ControlLabel} from 'react-bootstrap';
import {formatStr} from '../../i18n';
import * as helpers from '../../helpers';

const SUCCESS = 'success';
const ERROR = 'error';

const MESSAGE_OK = 'ok';
const MESSAGE_CANCEL = 'cancel';
const MESSAGE_PROCEED_ATTRS = 'proceed_attrs';

// validator; we only accept strings of minimum length 2
function isValid(value) {
    return value && value.length > 1;
}

// ProceedModal currently only supports string attributes
class ProceedModal extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.getValidationState = this.getValidationState.bind(this);
        this.cancel = this.cancel.bind(this);
        this.ok = this.ok.bind(this);
        this.onChange = this.onChange.bind(this);
    }

    componentDidMount() {
        const input = document.getElementById(`${helpers.prefixNS('comment-input')}`);
        if (input) {
            input.focus();
        }
    }

    cancel() {
        this.props.onClose(true);
    }

    ok() {
        const {onClose, attributes} = this.props;
        onClose(false, attributes);
    }

    getValidationState() {
        const {attributes} = this.props;
        let overall = SUCCESS;

        const singleValidation = (key) => {
            const value = attributes.getIn([key, 'value']);
            if (isValid(value)) {
                return SUCCESS;
            } else {
                if (attributes.getIn([key, 'mandatory'])) {
                    overall = ERROR;
                }
                return ERROR;
            }
        };

        const byKey = attributes.map((v, k) => singleValidation(k));
        return {overall, byKey};
    }

    onChange(event, attribute) {
        const {attributes, setAttributes, status} = this.props;
        const newAttributes = attributes.setIn([attribute, 'value'], event.target.value);
        setAttributes(status, newAttributes);
    }

    render() {
        const {attributes} = this.props;
        const validationState = this.getValidationState();

        return (
            <Modal show={true} onHide={this.cancel} className={helpers.prefixNS(
                'proceed-modal'
                )}>
                <Modal.Header closeButton className={helpers.prefixNS(
                    'proceed-modal-header'
                    )}>
                    <Modal.Title className={helpers.prefixNS(
                        'proceed-modal-title'
                        )}>
                        {formatStr(MESSAGE_PROCEED_ATTRS)}
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body className={helpers.prefixNS(
                    'proceed-modal-body'
                    )}>
                    {attributes.entrySeq().toList().map(data => {
                        const mandatory = data[1].get('mandatory');
                        return (
                            <FormGroup
                                controlId={helpers.prefixNS(`${data[0]}-input`)}
                                key={data[0]}
                                validationState={
                                    mandatory && validationState.byKey.get(data[0])
                                }
                                className={helpers.prefixNS(
                                    'proceed-modal-body-formgroup'
                                    )}>
                                <ControlLabel className={helpers.prefixNS(
                                    'proceed-modal-body-formgroup-controllabel'
                                    )}>
                                    {mandatory ?
                                        `${data[1].get('label')} *` :
                                        data[1].get('label')}
                                </ControlLabel>
                                <FormControl
                                    componentClass='textarea'
                                    name={data[0]}
                                    value={data[1].get('value') || ''}
                                    onChange={(e) => this.onChange(e, data[0])}
                                    className={helpers.prefixNS(
                                        'proceed-modal-body-formgroup-formcontrol'
                                    )}
                                />
                            </FormGroup>
                        );
                    })}
                </Modal.Body>
                <Modal.Footer className={helpers.prefixNS(
                    'proceed-modal-footer'
                    )} >
                    <Button.TextButton
                        label={formatStr(MESSAGE_CANCEL)}
                        onClick={this.cancel}
                        className={helpers.prefixNS(
                            'proceed-modal-footer-button-cancel'
                        )}
                    />
                    <Button.TextButton
                        buttonStyle='primary'
                        label={formatStr(MESSAGE_OK)}
                        disabled={validationState.overall !== SUCCESS}
                        onClick={this.ok}
                        className={helpers.prefixNS(
                            'proceed-modal-footer-button-ok'
                        )}
                    />
                </Modal.Footer>
            </Modal>
        );
    }
}

ProceedModal.propTypes = {
    status: PropTypes.number.isRequired,
    onClose: PropTypes.func.isRequired,
    setAttributes: PropTypes.func.isRequired,
    attributes: ImmutablePropTypes.mapOf(
        ImmutablePropTypes.contains({
            label: PropTypes.string.isRequired,
            mandatory: PropTypes.bool,
            value: PropTypes.string
        }).isRequired
    ).isRequired
};

export {ProceedModal, isValid};
