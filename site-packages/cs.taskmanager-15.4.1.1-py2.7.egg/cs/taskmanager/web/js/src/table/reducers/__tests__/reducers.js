import reducer from '../reducers';

describe('The root reducer', () => {
    test('with the action type "RECEIVED_SETTINGS" return a valid new state', () => {
        let state = Immutable.Map({});
        let action = {
            type: 'cs-taskmanager-web-RECEIVED_SETTINGS',
            payload: {settings: 'A'}
        };

        expect(reducer(state,action)).toEqual(Immutable.fromJS(
            {"settings": "A"}
        ));
    });

    test('with the action type "RECEIVED_SETTINGS" return an invalid new state', () => {
        let state = Immutable.Map({});
        let action = {
            type: 'cs-taskmanager-web-RECEIVED_SETTINGS',
            payload: {test: 'A'}
        };

        expect(reducer(state,action)).toEqual(Immutable.fromJS(
            {"settings": undefined}
        ));
    });

    test('with the action type "SAVE_TAGS_RESPONSE" return a valid new state', () => {
        let state = Immutable.fromJS({
            "table": {
                "fetching": false,
                "rows": [
                    {
                        "id": "95a2e2e1-a9f2-11e8-9ce3-68f7284ff046",
                        "columns": [
                            0,
                            {
                                "tooltip": "Testaufgabe",
                                "icon": "/resources/icons/byname/branding_web_company_logo/"
                            },
                            {
                                "text": "Simple Test 1",
                                "link": {
                                    "to": null,
                                    "title": "Simple Test 1"
                                }
                            }
                        ]
                    }
                ],
                "columns": [
                    {
                        "attribute": "cs_tasks_col_name",
                        "label": "Name",
                        "id": "cs_tasks_col_name"
                    },
                    {
                        "attribute": "cs_tasks_col_tags",
                        "label": "Tags",
                        "id": "cs_tasks_col_tags"
                    }
                ]
            }
        });
        let action = {
            type: 'cs-taskmanager-web-SAVE_TAGS_RESPONSE',
            payload: {
                task_object_id: '95a2e2e1-a9f2-11e8-9ce3-68f7284ff046',
                tags: ['Test-Tag']
            }
        };

        const redu = reducer(state,action);
        const rows = redu.getIn(['table','rows']);
        const rows_columns = rows.get(0).getIn(['columns']);
        const tags = rows_columns.get(1);
        expect(tags.get(0)).toEqual('Test-Tag');

        expect(redu.getIn(['userTags']).get(0)).toEqual('Test-Tag');
    });

    test('with the action type "SAVE_TAGS_RESPONSE" return an invalid new state', () => {
        let state = Immutable.fromJS({
            "table": {
                "fetching": false,
                "rows": [
                    {
                        "id": "95a2e2e1-a9f2-11e8-9ce3-68f7284ff046",
                        "columns": [
                            0,
                            {
                                "tooltip": "Testaufgabe",
                                "icon": "/resources/icons/byname/branding_web_company_logo/"
                            },
                            {
                                "text": "Simple Test 1",
                                "link": {
                                    "to": null,
                                    "title": "Simple Test 1"
                                }
                            }
                        ]
                    }
                ],
                "columns": [
                    {
                        "attribute": "cs_tasks_col_name",
                        "label": "Name",
                        "id": "cs_tasks_col_name"
                    },
                    {
                        "attribute": "cs_tasks_col_tags",
                        "label": "Tags",
                        "id": "cs_tasks_col_tags"
                    }
                ]
            }
        });
        let action = {
            type: 'cs-taskmanager-web-SAVE_TAGS_RESPONSE',
            payload: {
                task_object_id: '95a2e2e1-a9f2-11e8-9ce3-68f7284ff046',
                tags: []
            }
        };

        const redu = reducer(state,action);
        const rows = redu.getIn(['table','rows']);
        const rows_columns = rows.get(0).getIn(['columns']);
        const tags = rows_columns.get(1);
        expect(tags.get(0)).toEqual(undefined);

        expect(redu.getIn(['userTags']).get(0)).toEqual(undefined);
    });

    test('with the action type "SAVE_READ_STATUS_RESPONSE" and defnined columns return a valid new state', () => {
        let state = Immutable.fromJS({
            "table": {
                "fetching": false,
                "rows": [
                    {
                        "id": "95a2e2e1-a9f2-11e8-9ce3-68f7284ff046",
                        "columns": [
                            0,
                            {
                                "tooltip": "Testaufgabe",
                                "icon": "/resources/icons/byname/branding_web_company_logo/"
                            },
                            {
                                "text": "Simple Test 1",
                                "link": {
                                    "to": null,
                                    "title": "Simple Test 1"
                                }
                            }
                        ]
                    }
                ],
                "columns": [
                    {
                        "attribute": "cs_tasks_col_name",
                        "label": "Name",
                        "id": "cs_tasks_col_name"
                    },
                    {
                        "attribute": "cs_tasks_col_tags",
                        "label": "Tags",
                        "id": "cs_tasks_col_tags"
                    }
                ]
            }
        });
        let action = {
            type: 'cs-taskmanager-web-SAVE_READ_STATUS_RESPONSE',
            payload: {
                task_object_id: '95a2e2e1-a9f2-11e8-9ce3-68f7284ff046',
                cs_tasks_col_read_status: 'read'
            }
        };

        const redu = reducer(state,action);
        const rows = redu.getIn(['table','rows']);
        const rows_columns = rows.get(0).getIn(['columns']);
        expect(rows_columns.get(2)).toEqual('read');

        const rows_cs_tasks_col_read_status = rows.get(0).getIn(['cs_tasks_col_read_status']);
        expect(rows_cs_tasks_col_read_status).toEqual('read');

        const rows_className = rows.get(0).getIn(['className']);
        expect(rows_className).toEqual(' cs-taskmanager-web-task-read');
    });

    test('with the action type "SAVE_READ_STATUS_RESPONSE" and defnined columns return an invalid new state', () => {
        let state = Immutable.fromJS({
            "table": {
                "fetching": false,
                "rows": [
                    {
                        "id": "95a2e2e1-a9f2-11e8-9ce3-68f7284ff046",
                        "columns": [
                            0,
                            {
                                "tooltip": "Testaufgabe",
                                "icon": "/resources/icons/byname/branding_web_company_logo/"
                            },
                            {
                                "text": "Simple Test 1",
                                "link": {
                                    "to": null,
                                    "title": "Simple Test 1"
                                }
                            }
                        ]
                    }
                ],
                "columns": [
                    {
                        "attribute": "cs_tasks_col_name",
                        "label": "Name",
                        "id": "cs_tasks_col_name"
                    },
                    {
                        "attribute": "cs_tasks_col_tags",
                        "label": "Tags",
                        "id": "cs_tasks_col_tags"
                    }
                ]
            }
        });
        let action = {
            type: 'cs-taskmanager-web-SAVE_READ_STATUS_RESPONSE',
            payload: {
                task_object_id: '95a2e2e1-a9f2-11e8-9ce3-68f7284ff046',
            }
        };

        const redu = reducer(state,action);
        const rows = redu.getIn(['table','rows']);
        const rows_columns = rows.get(0).getIn(['columns']);
        expect(rows_columns.get(2)).toEqual(undefined);

        expect(rows.get(0).getIn(['cs_tasks_col_read_status'])).toEqual(undefined);
    });

    test('with the action type "SAVE_READ_STATUS_RESPONSE" and not defnined columns return a valid new state', () => {
        let state = Immutable.fromJS({
            "table": {
                "fetching": false,
                "rows": [
                    {
                        "id": "95a2e2e1-a9f2-11e8-9ce3-68f7284ff046"
                    }
                ],
                "columns": [
                    {
                        "attribute": "cs_tasks_col_name",
                        "label": "Name",
                        "id": "cs_tasks_col_name"
                    },
                    {
                        "attribute": "cs_tasks_col_tags",
                        "label": "Tags",
                        "id": "cs_tasks_col_tags"
                    }
                ]
            }
        });
        let action = {
            type: 'cs-taskmanager-web-SAVE_READ_STATUS_RESPONSE',
            payload: {
                task_object_id: '95a2e2e1-a9f2-11e8-9ce3-68f7284ff046',
                cs_tasks_col_read_status: 'read'
            }
        };

        const redu = reducer(state,action);
        const rows = redu.getIn(['table','rows']);
        const rows_columns = rows.get(0).getIn(['columns']);
        expect(rows_columns).toEqual();

        const rows_cs_tasks_col_read_status = rows.get(0).getIn(['cs_tasks_col_read_status']);
        expect(rows_cs_tasks_col_read_status).toEqual();

        const rows_className = rows.get(0).getIn(['className']);
        expect(rows_className).toEqual();
    });

    test('with the action type "TARGET_STATUSES" return a valid new state', () => {
        let state = Immutable.fromJS({
            "table": {
                "fetching": false,
                "rows": [
                    {
                        "id": "95a2e2e1-a9f2-11e8-9ce3-68f7284ff046",
                        "columns": [
                            0,
                            {
                                "tooltip": "Testaufgabe",
                                "icon": "/resources/icons/byname/branding_web_company_logo/"
                            },
                            {
                                "text": "Simple Test 1",
                                "link": {
                                    "to": null,
                                    "title": "Simple Test 1"
                                }
                            }
                        ]
                    }
                ],
                "columns": [
                    {
                        "attribute": "cs_tasks_col_name",
                        "label": "Name",
                        "id": "cs_tasks_col_name"
                    },
                    {
                        "attribute": "cs_tasks_col_tags",
                        "label": "Tags",
                        "id": "cs_tasks_col_tags"
                    }
                ]
            }
        });
        let action = {
            type: 'cs-taskmanager-web-TARGET_STATUSES',
            payload: {
                task_object_id: '95a2e2e1-a9f2-11e8-9ce3-68f7284ff046',
                targets: 'Test-Target'
            }
        };

        const redu = reducer(state,action);
        const rows = redu.getIn(['table','rows']);
        const rows_columns = rows.get(0).getIn(['columns']);
        const targets = rows_columns.get(2).getIn(['targets']);

        expect(targets).toEqual('Test-Target');
    });

    test('with the action type "TARGET_STATUSES" return an invalid new state', () => {
        let state = Immutable.fromJS({
            "table": {
                "fetching": false,
                "rows": [
                    {
                        "id": "95a2e2e1-a9f2-11e8-9ce3-68f7284ff046",
                        "columns": [
                            0,
                            {
                                "tooltip": "Testaufgabe",
                                "icon": "/resources/icons/byname/branding_web_company_logo/"
                            },
                            {
                                "text": "Simple Test 1",
                                "link": {
                                    "to": null,
                                    "title": "Simple Test 1"
                                }
                            }
                        ]
                    }
                ],
                "columns": [
                    {
                        "attribute": "cs_tasks_col_name",
                        "label": "Name",
                        "id": "cs_tasks_col_name"
                    },
                    {
                        "attribute": "cs_tasks_col_tags",
                        "label": "Tags",
                        "id": "cs_tasks_col_tags"
                    }
                ]
            }
        });
        let action = {
            type: 'cs-taskmanager-web-TARGET_STATUSES',
            payload: {
                task_object_id: '95a2e2e1-a9f2-11e8-9ce3-68f7284ff046'
            }
        };

        const redu = reducer(state,action);
        const rows = redu.getIn(['table','rows']);
        const rows_columns = rows.get(0).getIn(['columns']);

        expect(rows_columns.get(2).getIn(['targets'])).toEqual(undefined);
    });

    test('with the action type "STATUS_CHANGE_IN_FLIGHT" return a valid new state', () => {
        let state = Immutable.Map({
            delta: Immutable.Map({
                proceeding: Immutable.Set([
                    'a',
                    'b',
                    'c'
                ])
            })
        });
        let action = {
            type: 'cs-taskmanager-web-STATUS_CHANGE_IN_FLIGHT',
            payload: {
                task_object_id: 'd'
            }
        };

        const redu = reducer(state,action);

        expect(redu.getIn(['delta','proceeding'])).toEqual(Immutable.Set(
            ['a','b','c','d']
        ));
    });

    test('with the action type "STATUS_CHANGE_IN_FLIGHT" return an invalid new state', () => {
        let state = Immutable.Map({
            delta: Immutable.Map({
                proceeding: Immutable.Set([
                    'a',
                    'b',
                    'c'
                ])
            })
        });
        let action = {
            type: 'cs-taskmanager-web-STATUS_CHANGE_IN_FLIGHT',
            payload: {}
        };

        const redu = reducer(state,action);

        expect(redu.getIn(['delta','proceeding'])).toEqual(Immutable.Set(
            ['a','b','c',undefined]
        ));
    });
});
