import Immutable from 'immutable';
import * as constants from './constants';
import {ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';

const COMPONENT = PropTypes.oneOfType([
    PropTypes.func,
    PropTypes.element
]);

export const OBJECT_PROPTYPE = ImmutablePropTypes.contains({
    [constants.ID]: PropTypes.string,
    [constants.ICON_LINK]: PropTypes.string.isRequired,
    [constants.UI_LINK]: PropTypes.string,
    [constants.DESCRIPTION]: PropTypes.string.isRequired
});

export const ACTIVE_DEADLINE = PropTypes.oneOf(['days', 'range']);

const DEADLINE_RANGE = PropTypes.shape({
    start: PropTypes.string.isRequired,
    end: PropTypes.string.isRequired
});

export const DEFAULT_CONDITION = Immutable.fromJS({
    types: [],
    contexts: [],
    users: [],
    roles: false,
    deadline: {
        active: null,
        days: null,
        range: null
    }
});

export const VIEW_CONDITION = ImmutablePropTypes.shape({
    types: ImmutablePropTypes.list.isRequired,
    contexts: ImmutablePropTypes.list.isRequired,
    users: ImmutablePropTypes.list.isRequired,
    roles: PropTypes.bool,
    deadline: PropTypes.shape({
        active: ACTIVE_DEADLINE,
        days: PropTypes.number,
        range: DEADLINE_RANGE
    }).isRequired
});

const SETTINGS_DEFAULT = Immutable.fromJS({
    userSelection: false,
    notificationInterval: null,
    taskClasses: Immutable.List(),
    contextClassnames: Immutable.List(),
    userViews: {}
});

export const USER_VIEW = ImmutablePropTypes.contains({
    edited: PropTypes.bool.isRequired,
    condition: VIEW_CONDITION.isRequired
});

export const DATE_PROPTYPE = ImmutablePropTypes.contains({
    iso: PropTypes.string,
    overdue: PropTypes.bool,
    epoch: PropTypes.number
});

const ROW_PROPTYPE = ImmutablePropTypes.contains({
    ui_link: PropTypes.string,
    cs_tasks_col_read_status: PropTypes.number.isRequired,
    cs_tasks_col_deadline: DATE_PROPTYPE,
    cs_tasks_col_overdue: PropTypes.bool.isRequired,
    [constants.ID]: PropTypes.string.isRequired,
    [constants.CDB_OBJECT_ID]: PropTypes.string.isRequired,
    id: PropTypes.string.isRequired,
    columns: ImmutablePropTypes.list.isRequired
});

const ROWS = ImmutablePropTypes.listOf(ROW_PROPTYPE).isRequired;

const COLUMNS = ImmutablePropTypes.contains({
    visible: PropTypes.bool,
    sortDesc: PropTypes.bool,
    width: ImmutablePropTypes.contains({
        unit: PropTypes.oneOf(['px', 'em']).isRequired,
        value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired
    }),
    contentRenderer: PropTypes.oneOfType([
        COMPONENT,
        PropTypes.string
    ]),
    position: PropTypes.number,
    attribute: PropTypes.string.isRequired,
    label: PropTypes.string.isRequired,
    tooltip: PropTypes.string,
    groupBy: PropTypes.number
});

const TABLE_DEFAULT = Immutable.Map({
    columns: Immutable.List(),
    rows: Immutable.List(),
    fetching: true,
    error: ''
});

export const TABLE = ImmutablePropTypes.contains({
    columns: ImmutablePropTypes.listOf(COLUMNS).isRequired,
    rows: ROWS,
    fetching: PropTypes.bool.isRequired,
    error: PropTypes.string.isRequired
}).isRequired;

export const DELTA_DEFAULT = Immutable.fromJS({
    newTasks: Immutable.Set(),
    missingTasks: Immutable.Set(),
    temporaryTasks: Immutable.Set(),
    proceeding: Immutable.Set()
});

export const TASK_INFO = ImmutablePropTypes.contains({
    [constants.ID]: PropTypes.string.isRequired,
    [constants.PLUGIN_DISCRIMINATORS]: ImmutablePropTypes.list.isRequired,
    [constants.CONTEXT]: ImmutablePropTypes.list.isRequired,
    [constants.RELSHIPS]: ImmutablePropTypes.list.isRequired
});

export const CURRENT_SELECTION = ImmutablePropTypes.contains({
    [constants.TASK_OIDs]: ImmutablePropTypes.orderedSet,
    byObjectID: ImmutablePropTypes.mapOf(TASK_INFO).isRequired
});

export const CURRENT_SELECTION_DEFAULT = Immutable.fromJS({
    [constants.TASK_OIDS]: Immutable.OrderedSet(),
    byObjectID: Immutable.Map()
});

export const STORE_DEFAULT = Immutable.fromJS({
    settings: SETTINGS_DEFAULT,
    table: TABLE_DEFAULT,
    delta: DELTA_DEFAULT,
    currentSelection: CURRENT_SELECTION_DEFAULT,
    fileContainerID: null,
    inFlight: Immutable.Set()
});
