/* -*- mode: javascript; coding: utf-8 -*-
 * $Id: actions.js 185258 2018-10-18 11:15:26Z cso $
 *
 * Copyright (c) 1990 - 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 */

import {getAppSetup, notifyError as _notifyError} from 'cs-web-components-base';
import {prefixNS, debugMode} from '../helpers';

export const BACKEND_REQUEST_IN_FLIGHT = prefixNS('BACKEND_REQUEST_IN_FLIGHT');
export const OPTIMISTIC_UPDATE_USER_SETTINGS = prefixNS('OPTIMISTIC_UPDATE_USER_SETTINGS');
export const SHOW_TASKS_LOADING_INDICATOR = prefixNS('SHOW_TASKS_LOADING_INDICATOR');
export const GET_TASKS = prefixNS('GET_TASKS');
export const CLEAR_TASKS = prefixNS('CLEAR_TASKS');
export const TASKS = prefixNS('TASKS');
export const GET_NEW_TASKS = prefixNS('GET_NEW_TASKS');
export const NEW_TASKS = prefixNS('NEW_TASKS');
export const SELECT_ROWS = prefixNS('SELECT_ROWS');
export const SAVE_USER_SETTINGS = prefixNS('SAVE_USER_SETTINGS');
export const SAVE_USER_SETTINGS_RESPONSE = prefixNS('SAVE_USER_SETTINGS_RESPONSE');

export const GET = 'GET';
export const POST = 'POST';
export const DELETE = 'DELETE';

export const URL_SETTINGS = getAppSetup().getIn(['links', componentNameSpace, 'settings']);

export function backendRequestInFlight(actionName, isInFlight) {
    return {
        type: BACKEND_REQUEST_IN_FLIGHT,
        payload: {actionName, isInFlight}
    };
}

export function notifyError(error) {
    if (debugMode()) {
        return _notifyError(
            error,
            null,
            undefined,
            'danger',
            1,
            null,
            null // disable hidingTimeout
        );
    } else {
        return _notifyError(error);
    }
}

export function optimisticUpdateUserSettings(payload) {
    return {
        type: OPTIMISTIC_UPDATE_USER_SETTINGS,
        payload: payload
    };
}

export function selectRows(task_object_ids) {
    return {
        type: SELECT_ROWS,
        payload: {task_object_ids}
    };
}

export function getTasks(condition, ignoreTemporary) {
    return {
        type: GET_TASKS,
        payload: {condition, ignoreTemporary}
    };
}

export function getNewTasks(condition) {
    return {
        type: GET_NEW_TASKS,
        payload: {condition}
    };
}

export function saveUserSettings(payload, optimistic) {
    return {
        type: SAVE_USER_SETTINGS,
        payload: {payload, optimistic}
    };
}
