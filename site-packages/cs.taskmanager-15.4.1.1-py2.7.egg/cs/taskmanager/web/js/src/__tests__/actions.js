import {
    backendRequestInFlight,
    optimisticUpdateUserSettings,
    selectRows,
    getTasks,
    getNewTasks,
    saveUserSettings
} from '../actions/actions';

describe('The function backendRequestInFlight', () => {
    it('with the needed parameter actionName and isInFlight returns an valid action', () => {
        const actionName = 'test';
        const isInFlight = false;
        expect(backendRequestInFlight(actionName,isInFlight)).toEqual(
            {
                "type": "cs-taskmanager-web-BACKEND_REQUEST_IN_FLIGHT",
                "payload": {
                    "actionName": "test",
                    "isInFlight": false
                }
            }
        );
    });

    it('without the needed parameter actionName and isInFlight returns an invalid action', () => {
        expect(backendRequestInFlight()).toEqual(
            {
                "type": "cs-taskmanager-web-BACKEND_REQUEST_IN_FLIGHT",
                "payload": {
                    "actionName": undefined,
                    "isInFlight": undefined
                }
            }
        );
    });
});

describe('The function optimisticUpdateUserSettings', () => {
    it('with the needed parameter payload returns an valid action', () => {
        const payload = 'test';
        expect(optimisticUpdateUserSettings(payload)).toEqual(
            {
                "type": "cs-taskmanager-web-OPTIMISTIC_UPDATE_USER_SETTINGS",
                "payload": "test"
            }
        );
    });

    it('without the needed parameter payload returns an invalid action', () => {
        expect(optimisticUpdateUserSettings()).toEqual(
            {
                "type": "cs-taskmanager-web-OPTIMISTIC_UPDATE_USER_SETTINGS",
                "payload": undefined
            }
        );
    });
});

describe('The function selectRows', () => {
    it('with the needed parameter task_object_ids returns an valid action', () => {
        const task_object_ids = ['test'];
        expect(selectRows(task_object_ids)).toEqual(
            {
                "type": "cs-taskmanager-web-SELECT_ROWS",
                "payload": {
                    "task_object_ids": ["test"]
                }
            }
        );
    });

    it('without the needed parameter task_object_id returns an invalid action', () => {
        expect(selectRows()).toEqual(
            {
                "type": "cs-taskmanager-web-SELECT_ROWS",
                "payload": {
                    "task_object_id": undefined
                }
            }
        );
    });
});

describe('The function getTasks', () => {
    it('with the needed parameter condition and ignoreTemporary returns an valid action', () => {
        const condition = 'test';
        const ignoreTemporary = true
        expect(getTasks(condition, ignoreTemporary)).toEqual(
            {
                "type": "cs-taskmanager-web-GET_TASKS",
                "payload": {
                    "condition": "test",
                    "ignoreTemporary": true
                }
            }
        );
    });

    it('without the needed parameter condition and ignoreTemporary returns an invalid action', () => {
        expect(getTasks()).toEqual(
            {
                "type": "cs-taskmanager-web-GET_TASKS",
                "payload": {
                    "condition": undefined,
                    "ignoreTemporary": undefined
                }
            }
        );
    })
});

describe('The function getTasks', () => {
    it('with the needed parameter condition returns an valid action', () => {
        const condition = 'test';
        expect(getNewTasks(condition)).toEqual(
            {
                "type": "cs-taskmanager-web-GET_NEW_TASKS",
                "payload": {
                    "condition": "test"
                }
            }
        );
    });

    it('without the needed parameter condition returns an invalid action', () => {
        expect(getNewTasks()).toEqual(
            {
                "type": "cs-taskmanager-web-GET_NEW_TASKS",
                "payload": {
                    "condition": undefined
                }
            }
        );
    });
});

describe('The function saveUserSettings', () => {
    it('with the needed parameter payload and optimistic returns an valid action', () => {
        const payload = 'test';
        const optimistic = true;
        expect(saveUserSettings(payload,optimistic)).toEqual(
            {
                "type": "cs-taskmanager-web-SAVE_USER_SETTINGS",
                "payload": {
                    "payload": "test",
                    "optimistic": true
                }
            }
        );
    });

    it('without the needed parameter payload and optimistic returns an invalid action', () => {
        expect(saveUserSettings()).toEqual(
            {
                "type": "cs-taskmanager-web-SAVE_USER_SETTINGS",
                "payload": {
                    "payload": undefined,
                    "optimistic": undefined
                }
            }
        );
    });
});
