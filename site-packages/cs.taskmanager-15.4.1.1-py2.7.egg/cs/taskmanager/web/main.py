# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#
# Version:  $Id: main.py 183976 2018-09-17 14:53:30Z cso $

"""
cs.taskmanager web app backend
"""

__revision__ = "$Id: main.py 183976 2018-09-17 14:53:30Z cso $"
__docformat__ = "restructuredtext en"


import os
from cdb import auth
from cdb import rte
from cdb import sig
from cdb import util
from cs.platform.web import static
from cs.platform.web.root import Root
from cs.web.components.configurable_ui import ConfigurableUIApp
from cs.web.components.configurable_ui import SinglePageModel
from cs.taskmanager.settings import read_settings


APPNAME = "cs-taskmanager-web"
APPVERSION = "15.4.1"
MOUNTEDPATH = "/tasks"
APPDIR = os.path.dirname(__file__)
LINK_PATTERNS = {
    "newUserView": "/internal/tasks/new_user_view",
    "rememberUserView": "/internal/tasks/remember_user_view/${view_object_id}",
    "userView": "/internal/tasks/user_view/${view_object_id}",
    "settings": "/internal/tasks/settings",
    "tasks": "/internal/tasks/tasks",
    "newTasks": "/internal/tasks/new_tasks",
    "taskDetails": "/internal/tasks/task_details",
    "tag": "/internal/tasks/tag",
    "readStatus": "/internal/tasks/read_status",
    "proceed": "/internal/tasks/proceed",
}


def getDebugMode():
    try:
        debugMode = read_settings(
            "cs.taskmanager",
            "debugMode",
            auth.persno,
            use_cache=False,
        )
        isDebugMode = debugMode and debugMode.get("active") is True
    except (TypeError, ValueError):
        isDebugMode = False

    return isDebugMode


def addLinkPatterns(model, request, app_setup):
    app_setup["links"][APPNAME] = LINK_PATTERNS


def addAppSettings(model, request, app_setup):
    app_setup["appSettings"].update({
        "title": util.get_label("cs_task_manager_title"),
        "debugMode": getDebugMode(),
    })


class ConfigurableModel(SinglePageModel):
    page_name = "cs-tasks"

    def __init__(self, absorb):
        super(ConfigurableModel, self).__init__()
        self.absorb = absorb


class ConfigurableApp(ConfigurableUIApp):
    client_favicon = "cs_tasks"


@Root.mount(app=ConfigurableApp, path=MOUNTEDPATH)
def _mount_app(request):
    return ConfigurableApp()


@ConfigurableApp.path(path="", model=ConfigurableModel, absorb=True)
def _get_model(absorb):
    return ConfigurableModel(absorb)


@ConfigurableApp.view(model=ConfigurableModel, name="base_path", internal=True)
def get_base_path(model, request):
    if not model.absorb:
        return request.path
    else:
        return request.path[:-(len(model.absorb) + 1)]


@ConfigurableApp.view(model=ConfigurableModel, name="document_title",
                      internal=True)
def default_document_title(self, request):
    return util.get_label("cs_task_manager_title")


@sig.connect(rte.APPLICATIONS_LOADED_HOOK)
def register():
    app = os.path.join(APPDIR, 'js', 'build')
    lib = static.Library(APPNAME, APPVERSION, app)
    lib.add_file("%s.js" % APPNAME)
    lib.add_file("%s.js.map" % APPNAME)
    static.Registry().add(lib)
