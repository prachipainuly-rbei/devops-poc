# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#
# Version:  $Id: userdata.py 180930 2018-07-23 15:17:07Z cso $

"""
cs.taskmanager user-specific data
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: userdata.py 180930 2018-07-23 15:17:07Z cso $"

from cdb import auth
from cdb import sqlapi
from cdb import transaction
from cdb.objects import Object


class Tags(Object):
    """
    Tags are personal labels to help users organize their tasks.
    """
    __maps_to__ = "cs_tasks_tag"
    __classname__ = "cs_tasks_tag"

    @classmethod
    def getTaskTags(cls, persno, task_object_id):
        tags = cls.KeywordQuery(persno=persno, task_object_id=task_object_id)
        tags = set(t.strip() for t in tags.tag if t.strip() > "")

        if tags:
            return sorted(tags)

        return []

    @classmethod
    def setTaskTags(cls, persno, task_object_id, tags):
        if not isinstance(tags, list):
            raise ValueError("'tags' must be a list")

        vals = {
            "persno": sqlapi.quote(persno),
            "task_object_id": sqlapi.quote(task_object_id)}

        unique_tags = set([sqlapi.quote(t.strip()) for t in tags])

        with transaction.Transaction():
            for tag in unique_tags:
                vals["tag"] = tag

                if not cls.ByKeys(**vals):
                    cls.Create(**vals)

            cls.Query(
                "persno='{}' "
                "AND task_object_id='{}' "
                "AND tag NOT IN ('{}')".format(
                    vals["persno"],
                    vals["task_object_id"],
                    "', '".join(unique_tags))).Delete()


class ReadStatus(Object):
    """
    To keep track of new or already seen tasks, tasks read by a user have a
    corresponding entry in this class.

    While read_status can be modified to be 0, and thus not "count" as read,
    the system itself only creates entries with read_status 1 and does not
    modify it. To set a task back to "unread", the entry is deleted instead.
    """
    __maps_to__ = "cs_tasks_read_status"
    __classname__ = "cs_tasks_read_status"

    @classmethod
    def setTaskRead(cls, task_object_id):
        vals = {"persno": auth.persno, "task_object_id": task_object_id}
        status = cls.ByKeys(**vals)
        if status:
            status.Update(read_status=1)
        else:
            vals["read_status"] = 1
            cls.Create(**vals)

    @classmethod
    def setTaskUnread(cls, task_object_id):
        status = cls.ByKeys(persno=auth.persno, task_object_id=task_object_id)
        if status:
            status.Delete()

    @classmethod
    def getReadStatus(cls, task_object_id):
        status = cls.ByKeys(auth.persno, task_object_id)
        if status:
            status.Reload()
            return status.read_status
        return 0
