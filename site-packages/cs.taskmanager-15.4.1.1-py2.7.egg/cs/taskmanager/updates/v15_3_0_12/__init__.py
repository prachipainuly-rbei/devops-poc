# coding: utf-8
import json
from cdb import ddl
from cdb import sqlapi
from cdb import transaction
from cdb.comparch import content
from cdb.comparch import modules
from cdb.comparch import protocol
from cdb.objects import paginated
from cdb.platform.mom.entities import Class
from cs.taskmanager import settings
from cs.taskmanager.userdata import Tags


class TagSchemaChange(object):
    """
    Primary key change in cs_tasks_tag.
    """
    __tag_attr__ = "tag"
    __txt__ = "cs_tasks_tag_txt"

    def run(self):
        tag_class = Class.ByKeys(Tags.__classname__)

        if tag_class:
            # tag_class is None if updating from cs.taskmanager < 15.3.1

            table = ddl.Table(Tags.__maps_to__)
            tag_column = ddl.Char(self.__tag_attr__, 255, default="''")

            with transaction.Transaction():
                if table.hasColumn(self.__tag_attr__):
                    table.modifyAttributes(tag_column)
                else:
                    table.addAttributes(tag_column)
                    table.reflect(force_reload=True)

                sqlapi.SQLupdate("{} SET {}='' WHERE {} IS NULL".format(
                    Tags.__maps_to__, self.__tag_attr__, self.__tag_attr__))
                table.setPrimaryKey(
                    ddl.PrimaryKey("persno",
                                   "task_object_id",
                                   self.__tag_attr__))
                table.reflect(force_reload=True)

                tag_class.compile(force=True)
                protocol.logMessage("you may now drop '{}'".format(
                    self.__txt__))
        else:
            protocol.logMessage("class '{}' does not exist - "
                                "skipping update".format(Tags.__classname__))


class MigrateTags(object):
    """
    Migrate existing tags from long text to single entries. Needed to
    efficiently support typeahead suggestions of existing user tags.
    """
    __tag_attr__ = "tag"
    __txt__ = "cs_tasks_tag_txt"

    def run(self):
        old_tags = Tags.Query()

        for page in paginated(old_tags):
            for old_tag in page:
                with transaction.Transaction():
                    text = sqlapi.RecordSet2(
                        self.__txt__,
                        "persno='{}' AND task_object_id='{}'".format(
                            old_tag.persno, old_tag.task_object_id),
                        addtl="ORDER BY zeile ASC")

                    if len(text):
                        tags_txt = "".join([t.text for t in text])

                        for tag in tags_txt.split(","):
                            vals = {
                                "persno": old_tag.persno,
                                "task_object_id": old_tag.task_object_id,
                                "tag": tag.strip(),
                            }
                            if not Tags.KeywordQuery(**vals):
                                Tags.Create(**vals)

        with transaction.Transaction():
            sqlapi.SQLdelete("FROM {} WHERE tag=''".format(
                Tags.__maps_to__))

        protocol.logMessage("Tags successfully migrated.")


class EnsureDefaultUser(object):
    """Always re-insert user and role assignments for cs.taskmanager.dflt"""
    def run(self):
        m = modules.Module.ByKeys("cs.taskmanager")
        for rel, key in [("angestellter", "personalnummer"),
                         ("cdb_global_subj", "subject_id")]:
            content_filter = content.ModuleContentFilter([rel])
            mc = modules.ModuleContent(
                m.module_id, m.std_conf_exp_dir, content_filter)

            for mod_content in mc.getItems(rel).values():
                if mod_content.getAttr(key) == "cs.taskmanager.dflt":
                    try:
                        # Effectively revert patch
                        mod_content.insertIntoDB()
                    except:
                        pass  # Already there


class UpdateTableSettings(object):
    """
    - Create default user settings from existing defaults
    - Update user settings non-destructively
    """
    __old__ = "setting_id='{}' AND setting_id2='{}' AND role_id='public'"

    def migrate_old_settings(self, setting_class):
        old_settings = sqlapi.RecordSet2(
            "cdb_setting",
            self.__old__.format(setting_class.__id1__, setting_class.__id2__))

        if len(old_settings) == 1:
            try:
                old_value = json.loads(old_settings[0].default_val)
                setting_class.write(old_value)
            except Exception, e:
                protocol.logError("could not migrate old settings",
                                  details_longtext="{}".format(e))
        else:
            protocol.logMessage("no old default settings found")

    def run(self):
        settings.update_all_settings()
        self.migrate_old_settings(settings.AppSettings)
        self.migrate_old_settings(settings.TableSettings)


pre = [TagSchemaChange]
post = [EnsureDefaultUser, UpdateTableSettings, MigrateTags]
