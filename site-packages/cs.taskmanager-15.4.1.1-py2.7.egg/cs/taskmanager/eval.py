# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#
# Version:  $Id: eval.py 180930 2018-07-23 15:17:07Z cso $

"""
cs.taskmanager attribute mapping term evaluation
"""
import inspect
from datetime import date
from datetime import datetime
import dateutil.parser

from cdb import misc
from cdb import sqlapi
from cdb.objects import Object
from cdb.objects import ObjectCollection
from cdb.testcase import without_error_logging


READ_STATUS = "getCsTasksReadStatus"


def log(msg):
    misc.cdblogv(misc.kLogMsg, 1, "{prefix}: {msg}'".format(
        prefix=__name__, msg=msg))


def ISOStringToDateTime(date_string):
    try:
        return dateutil.parser.parse(sqlapi.quote(date_string))
    except (TypeError, ValueError):
        return None


def dateToEpoch(dateOrDatetime):
    return (dateOrDatetime - datetime(1970, 1, 1)).total_seconds()


def evalDate(dateOrDatetime):
    if dateOrDatetime is None:
        return None

    if isinstance(dateOrDatetime, datetime):
        dateobj = dateOrDatetime.date()

    else:
        dateobj = dateOrDatetime

    return {
        "overdue": dateobj < date.today(),
        "iso": unicode(dateOrDatetime.isoformat()),
        "epoch": dateToEpoch(dateOrDatetime),
    }


@without_error_logging
def _eval(obj, simple_expression, **kwargs):
    if simple_expression == READ_STATUS:
        return None  # read status is hard-coded

    if simple_expression == "":
        return None

    if simple_expression.startswith("_"):
        log("trying to access private attribute '{}'".format(
            simple_expression))
        return None

    error = False
    try:
        result = getattr(obj, simple_expression)
    except AttributeError:
        try:
            result = obj.GetText(simple_expression)
            if result == "":
                error = True
        except AttributeError:
            error = True

    if error:
        log("trying to access non-existing attribute '{}'".format(
            simple_expression))
        return None

    if result == sqlapi.NULL or result is None:
        return None

    if isinstance(result, (Object, dict, str, unicode, int)):
        return result

    if isinstance(result, (datetime, date)):
        return evalDate(result)

    if isinstance(result, (ObjectCollection, list)):
        return len(result)

    if inspect.ismethod(result):
        return result(**kwargs)

    log("trying to access unknown attribute '{}'".format(simple_expression))


def evaluate(obj, complex_expression, **kwargs):
    if not (isinstance(obj, Object) and
            isinstance(complex_expression, (str, unicode))):
        return None

    result = [obj]
    for path_expression in complex_expression.split("."):
        # if not done yet, we need an Object for further evaluation
        if not isinstance(result[-1], Object):
            return None

        # keep pushing evaluated results to result, eval on last result
        result.append(_eval(result[-1], path_expression, **kwargs))
    return result[-1]
