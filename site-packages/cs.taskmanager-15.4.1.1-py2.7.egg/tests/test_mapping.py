#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_mapping.py 185258 2018-10-18 11:15:26Z cso $"

import unittest
from datetime import datetime
import mock
from cdb import auth
from cdb import testcase
from cdb.objects import Object
from cs.taskmanager import conditions
from cs.taskmanager import mapping
from cs.taskmanager.userdata import ReadStatus


def setUpModule():
    testcase.run_level_setup()


class test_mapping(testcase.RollbackTestCase):
    @classmethod
    def setUpClass(cls):
        cls.test_oid_1 = "95a2e2e1-a9f2-11e8-9ce3-68f7284ff046"
        cls.test_oid_2 = "98e7d4b0-a9f2-11e8-a374-68f7284ff046"

    @classmethod
    def getMappedTask(cls, task):
        return {
            'cs_tasks_col_deadline': None,
            'activities_context': task,
            'task_class': u'Test Tasks',
            'cs_tasks_col_overdue': False,
            u'cs_tasks_col_tags': [],
            u'cs_tasks_col_type': {
                'tooltip': u'Testaufgabe',
                'icon': '/resources/icons/byname/'
                        'branding_web_company_logo/'
            },
            u'cs_tasks_col_name': task.name,
            'cdb_object_id': task.cdb_object_id,
            'cs_tasks_col_read_status': 0,
        }

    @mock.patch.object(Object, "CheckAccess")
    def test_uncachedByID(self, CheckAccess):
        """
        While "uncached" is not true (cdb.object uses its own cache), we check
        read access on every call.
        """
        a = mapping.uncachedByID(self.test_oid_1)
        b = mapping.uncachedByID(self.test_oid_1)
        self.assertEqual(a, b)
        self.assertEqual(a.CheckAccess.call_count, 2)
        self.assertEqual(
            a.CheckAccess.call_args_list,
            [mock.call("read"), mock.call("read")]
        )

    @mock.patch.object(Object, "CheckAccess")
    def test_ByID(self, CheckAccess):
        a = mapping.ByID(self.test_oid_1)
        b = mapping.ByID(self.test_oid_1)
        self.assertEqual(a, b)
        self.assertEqual(a.CheckAccess.call_count, 1)
        self.assertEqual(a.CheckAccess.call_args_list, [mock.call("read")])

    def test_getMappedTasks(self):
        ReadStatus.setTaskUnread(self.test_oid_1)
        ReadStatus.setTaskUnread(self.test_oid_2)
        cond = conditions.getConditions([auth.persno])
        tasks, mapped = mapping.getMappedTasks(cond)
        self.assertEqual(
            set([t.cdb_object_id for t in tasks]),
            set([self.test_oid_1, self.test_oid_2])
        )
        self.assertEqual(
            {x['cdb_object_id']: x for x in mapped},
            {t.cdb_object_id: self.getMappedTask(t) for t in tasks}
        )

    def test_getMappedTask(self):
        mapped = mapping.getMappedTask(self.test_oid_1)
        self.assertEqual(
            mapped,
            self.getMappedTask(mapped["activities_context"])
        )
        self.assertEqual(mapping.getMappedTask("no task header"), None)

    def test_TaskClassByTaskOID(self):
        task_class = mapping.TaskClassByTaskOID(self.test_oid_1)
        self.assertEqual(task_class.name, "Test Tasks")
        self.assertEqual(
            task_class.cdb_object_id,
            "2d74652e-a9f3-11e8-a3ca-68f7284ff046"
        )
        self.assertEqual(mapping.TaskClassByTaskOID("no task header"), None)

    def test_getDeadline(self):
        self.assertEqual(mapping._getDeadline(None), None)
        self.assertEqual(mapping._getDeadline(1), 1)
        self.assertEqual(
            mapping._getDeadline("2018.1.1"),
            datetime(2018, 1, 1, 0, 0)
        )


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
