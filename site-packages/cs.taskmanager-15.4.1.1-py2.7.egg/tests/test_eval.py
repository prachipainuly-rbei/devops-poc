#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_eval.py 180439 2018-07-12 08:48:23Z cso $"

import unittest
from cdb import testcase
from cdb.objects.org import Organization
from cdb.objects.org import User
from cs.taskmanager.eval import evaluate

ORG = None
CADDOK = None


def setUpModule():
    testcase.run_level_setup()
    global ORG
    global CADDOK
    ORG = Organization.ByKeys("131")
    CADDOK = User.ByKeys("caddok")
    assert ORG, "Organization 131 from base data missing"
    assert CADDOK, "User caddok from base data missing"


class BaseTest(testcase.RollbackTestCase):
    def assertObjectsEqual(self, a, b):
        self.assertEqual(dict(a), dict(b))


class test_evaluate(BaseTest):
    @classmethod
    def setUpClass(cls):
        cls.name = "Personal Group (Test)"

    def test_simpleAttribute(self):
        self.assertEqual(evaluate(ORG, "name"), ORG.name)

    def test_objectMethod(self):
        self.assertEqual(evaluate(ORG, "GetDescription"), ORG.GetDescription())
        self.assertFalse(evaluate(ORG, "MatchRule", rule="WEBUI Files"))

    def test_reference_1(self):
        self.assertObjectsEqual(evaluate(CADDOK, "Organization"), ORG)

    def test_chainedReference_1(self):
        self.assertEqual(evaluate(CADDOK, "Organization.name"), ORG.name)
        self.assertEqual(evaluate(CADDOK, "Organization.GetDescription"),
                         ORG.GetDescription())

    def test_reference_n(self):
        self.assertEqual(evaluate(CADDOK, "Organization.SubOrganizations"), 0)

    def test_nonExistingAttribute(self):
        self.assertIsNone(
            evaluate(CADDOK, "Organization.SubOrganizations.u_boote"))
        self.assertIsNone(evaluate(CADDOK, "Organizzle"))
        self.assertIsNone(evaluate(CADDOK, "Organizzle.Organizzo"))
        self.assertIsNone(evaluate(CADDOK, "Organization.shmorganization"))
        self.assertIsNone(evaluate(CADDOK, None))
        self.assertIsNone(evaluate(CADDOK, 1))
        self.assertIsNone(evaluate(CADDOK, ""))
        self.assertIsNone(evaluate(CADDOK, "."))
        self.assertIsNone(evaluate(None, ""))
        self.assertIsNone(evaluate(0, ""))
        self.assertIsNone(evaluate(1, ""))
        self.assertIsNone(evaluate("?", ""))

    def test_privateAttribute(self):
        self.assertIsNone(evaluate(CADDOK, "Organization.__dict__"))

    def test_datetime(self):
        org_date = evaluate(ORG, "cdb_cdate")
        self.assertEqual(org_date['epoch'], 1092391131.0)
        self.assertEqual(org_date['iso'], u'2004-08-13T09:58:51')


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
