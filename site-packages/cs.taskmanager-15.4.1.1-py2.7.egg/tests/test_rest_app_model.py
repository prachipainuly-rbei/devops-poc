#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#
"""
DANGEROUS: Since view.rebuild() issues explicit commits in Oracle,
cdb.testcase.RollbackTestcase does not work.

This means tests are responsible for cleaning up _all_ database changes
themselves.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_rest_app_model.py 185791 2018-10-29 12:43:39Z cso $"

import cdbwrapc
import unittest

from cdb import auth
from cdb import sqlapi
from cdb import testcase
from cdb import transaction
from cdb.objects import ByID
from cdb.objects import org
from cdb.objects import rules
from cdb.validationkit import run_with_roles
from cs.platform.web.root.main import _get_dummy_request
from cs.taskmanager import TaskHeaders
from cs.taskmanager.conditions import getConditions
from cs.taskmanager.conf import Attribute
from cs.taskmanager.conf import Cache
from cs.taskmanager.conf import TaskClass
from cs.taskmanager.mixin import WithTasksIntegration
from cs.taskmanager.userdata import ReadStatus
from cs.taskmanager.userdata import Tags
from cs.taskmanager.user_views import UserView
from cs.taskmanager.web import rest_app_model
from cs.taskmanager.web import util


TESTUSER = None
TEST_TASK_OID = u"bbba325e-987f-11e7-b682-5cc5d4123f3b"
TEST_TASK_OID_1 = u"95a2e2e1-a9f2-11e8-9ce3-68f7284ff046"
TEST_TASK_OID_2 = u"98e7d4b0-a9f2-11e8-a374-68f7284ff046"
TEST_TASK_OID_3 = u"d702e3f0-a9d1-11e8-bd29-68f7284ff046"
TEST_TASK_ICON = "/resources/icons/byname/branding_web_company_logo/"


def setUpModule():
    global TESTUSER

    try:
        testcase.run_level_setup()
        TESTUSER = org.User.ByKeys("cs.taskmanager.test")
        cdbwrapc.set_user(TESTUSER.login)
    except:
        tearDownModule()


def tearDownModule():
    pass


class Mock(object):
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)


class Organization(org.Organization, WithTasksIntegration):
    pass


class BaseTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.model = cls.__model_class__()

    def setUp(self):
        self.setupTaskClass()

    def tearDown(self):
        self.teardownTaskClass()

    def assertObjectsEqual(self, a, b):
        self.assertEqual(dict(a), dict(b))

    def setupTaskClass(self):
        self.task_object_id = "cs_tasks_test task"
        self.task = Organization.Create(
            cdb_object_id=self.task_object_id,
            org_id=self.task_object_id,
            org_id_head="131",
            name="TEST ORG"
        )
        self.task_empty = Organization.Create(
            cdb_object_id="cs_tasks_test empty",
            org_id="cs_tasks_test empty",
            org_id_head=None,
            name="TEST ORG (EMPTY)"
        )
        self.original_org_id = TESTUSER.org_id
        TESTUSER.Update(org_id=self.task_object_id)
        self.rule = rules.Rule.Create(name=self.task_object_id)
        self.predicate = rules.Predicate.Create(
            name=self.rule.name,
            fqpyname="cdb.objects.org.Organization",
            predicate_name="ORG"
        )
        self.term = rules.Term.Create(
            name=self.rule.name,
            fqpyname=self.predicate.fqpyname,
            predicate_name=self.predicate.predicate_name,
            id="1",
            attribute="cdb_object_id",
            operator="=",
            expression=self.task_object_id
        )
        self.attributes = []
        self.task_classes = []
        for i in range(2):
            self.task_classes.append(TaskClass.Create(
                name="cs_tasks test {}".format(i),
                classname="cdb_organization",
                rule_id=self.rule.name,
            ))
        TaskHeaders.compileToView()
        Cache.refresh()

    def teardownTaskClass(self):
        for table in ["cdb_usr_setting", "cdb_usr_setting_long_txt"]:
            sqlapi.SQLdelete("FROM {} WHERE personalnummer='{}'".format(
                table, TESTUSER.personalnummer))

        ReadStatus.setTaskUnread(self.task_object_id)
        Tags.setTaskTags(auth.persno, self.task_object_id, [])
        for attribute in self.attributes:
            attribute.Delete()

        for task_class in self.task_classes:
            task_class.Delete()

        self.term.Delete()
        self.predicate.Delete()
        self.rule.Delete()
        self.task.Delete()
        self.task_empty.Delete()
        TESTUSER.Update(org_id=self.original_org_id)
        TaskHeaders.compileToView()
        Cache.refresh()

    def setupTaskMapping(self):
        for task_class in self.task_classes:
            self.attributes.append(Attribute.Create(
                propname="getCsTasksType",
                # cs_tasks_col_icon
                column_object_id="5e3e7821-3deb-11e6-a189-00aa004d0001",
                tclass_object_id=task_class.cdb_object_id))
            self.attributes.append(Attribute.Create(
                propname="GetDescription",
                # cs_tasks_col_name
                column_object_id="79bff151-3deb-11e6-b25c-00aa004d0001",
                tclass_object_id=task_class.cdb_object_id))
            self.attributes.append(Attribute.Create(
                propname="cdb_cdate",
                # cs_tasks_col_deadline
                column_object_id="96e333a1-3deb-11e6-bec7-00aa004d0001",
                tclass_object_id=task_class.cdb_object_id))
            self.attributes.append(Attribute.Create(
                propname="getCsTasksTags",
                # cs_tasks_col_tags
                column_object_id="01e638a1-3dec-11e6-b6df-00aa004d0001",
                tclass_object_id=task_class.cdb_object_id))
            self.attributes.append(Attribute.Create(
                propname="getCsTasksReadStatus",
                # cs_tasks_col_read_status
                column_object_id="5204d021-3dde-11e6-b91d-00aa004d0001",
                tclass_object_id=task_class.cdb_object_id))
        Cache.refresh()


class test_PersonalBaseModel(BaseTest):
    __model_class__ = rest_app_model.PersonalBaseModel

    def test_getInitialSettings(self):
        self.maxDiff = None
        self.model.app_settings = {
            "size": "111px",
            "notificationInterval": 5010,
        }
        default_view = UserView.ByKeys("4fb33321-9570-11e8-ba1d-68f7284ff046")
        default_view_rest_id = util.oid2restID(
            default_view.cdb_object_id, None
        )
        self.assertEqual(
            self.model.getInitialSettings(None),
            {
                'objects': [util.getRestObject(default_view, None)],
                'settings': {
                    'contextClassnames': [u'cs_tasks_test_class_olc'],
                    u'notificationInterval': 5010,
                    u'size': u'111px',
                    'taskClasses': [
                        'http://localhost/api/v1/class/{}'.format(c)
                        for c in [
                            "cdb_organization",
                            "cdb_organization",
                            "cs_tasks_test_class",
                            "cs_tasks_test_class_olc",
                        ]
                    ],
                    'userSelection': True,
                    'userViews': {
                        'byID': {
                            default_view_rest_id: {
                                'condition': {
                                    u'contexts': [],
                                    u'deadline': {
                                        u'active': None,
                                        u'days': 5,
                                        u'range': None},
                                    u'roles': False,
                                    u'types': [],
                                    u'users': [util.userID2restID(
                                        TESTUSER.personalnummer
                                    )]},
                                'edited': False,
                            },
                        },
                        'current': default_view_rest_id,
                        'custom': [],
                        'default': default_view_rest_id,
                        'recent': [],
                    },
                },
            }
        )

    def test_table_settings(self):
        self.model.table_settings = {"abc": "def"}
        self.assertEqual(self.model.table_settings, {"abc": "def"})

    def test_checkShowTasks(self):
        self.assertIsNone(self.model.checkShowTasks(
            set([TESTUSER.personalnummer])))
        self.assertIsNone(self.model.checkShowTasks(
            set(["caddok"])))

        @run_with_roles(["public"])
        def missing_access():
            self.assertIn(
                "error",
                self.model.checkShowTasks(set(["caddok"])).keys()
            )

        missing_access()

    def test_checkRead(self):
        self.assertIsNone(self.model.checkRead(TESTUSER.cdb_object_id))
        self.assertIn(
            "error",
            self.model.checkRead("invalid object").keys()
        )


class test_NewTasksModel(BaseTest):
    __model_class__ = rest_app_model.NewTasksModel

    def test_getNewTasks(self):
        condition = getConditions([TESTUSER.personalnummer])
        self.assertEqual(
            sorted(self.model.getNewTasks(condition)),
            sorted([
                TEST_TASK_OID_1,
                TEST_TASK_OID_2,
                self.task_object_id,
                self.task_object_id,
            ])
        )


class test_TasksModel(BaseTest):
    __model_class__ = rest_app_model.TasksModel

    def test_getTasks(self):
        self.skipTest("fix me")
        # test_task = ByID(TEST_TASK_OID)
        test_task_1 = ByID(TEST_TASK_OID_1)
        test_task_2 = ByID(TEST_TASK_OID_2)

        with transaction.Transaction():
            test_task_1.Update(active=0)
            test_task_2.Update(active=0)

            expected = [
                {
                    'activities_context': org.Organization.ByKeys("131"),
                    'cdb_object_id': TEST_TASK_OID,
                    u'cs_tasks_col_name': u'Test OLC 1',
                    u'cs_tasks_col_read_status': 0,
                    u'cs_tasks_col_responsible': TESTUSER,
                    'cs_tasks_col_deadline': {
                        'epoch': 1531699200.0,
                        'iso': u'2018-07-16T00:00:00',
                        'overdue': True,
                    },
                    'cs_tasks_col_overdue': True,
                    u'cs_tasks_col_status': {
                        'current': {
                            'data': {
                                'color': u'#F8F8F8',
                                'label': u'Neu',
                                'attributes': {
                                    'required': {
                                        'mandatory': True,
                                        'label': 'Benötigt',
                                    },
                                    'optional': {
                                        'mandatory': False,
                                        'label': 'Nicht so wichtig',
                                    },
                                },
                                'status': 0L,
                            }
                        },
                        'targets': []},
                    u'cs_tasks_col_tags': [],
                    u'cs_tasks_col_type': {
                        'icon': TEST_TASK_ICON,
                        'tooltip': u'Testaufgabe (OLC)'},
                    'task_class': u'Test Tasks (OLC)',
                },
                {
                    'task_class': u'cs_tasks test 0',
                    'cdb_object_id': u'cs_tasks_test task',
                    'cs_tasks_col_deadline': None,
                    'cs_tasks_col_overdue': False,
                    'cs_tasks_col_read_status': 0,
                    'activities_context': self.task,
                }, {
                    'task_class': u'cs_tasks test 1',
                    'cdb_object_id': u'cs_tasks_test task',
                    'cs_tasks_col_deadline': None,
                    'cs_tasks_col_overdue': False,
                    'cs_tasks_col_read_status': 0,
                    'activities_context': self.task,
                }]
            condition = getConditions([TESTUSER.personalnummer])
            result = self.model.getTasks(condition)
            self.assertEqual(
                sorted([t.cdb_object_id for t in result[0]]),
                sorted([
                    TEST_TASK_OID_3,
                    self.task_object_id,
                    self.task_object_id,
                ]))
            self.assertEqual(result[1], expected)

            raise transaction.Rollback

    def test_getTasksForTable(self):
        self.setupTaskMapping()
        condition = getConditions([TESTUSER.personalnummer])
        result = self.model.getTasksForTable(condition, _get_dummy_request())

        self.assertEqual(result.keys(), ['table', 'userTags'])
        self.assertEqual(result["table"].keys(),
                         ['fetching', 'rows', 'name', 'columns', 'error'])
        self.assertEqual(result["userTags"], [])

        self.assertEqual(result["table"]["fetching"], False)
        self.assertEqual(result["table"]["error"], "")
        self.assertEqual(result["table"]["name"],
                         "cs-taskmanager-web-tasks-table")
        self.assertEqual(len(result["table"]["columns"]), 11)
        self.assertEqual(len(result["table"]["rows"]), 4)


class test_ReadStatusModel(BaseTest):
    __model_class__ = rest_app_model.ReadStatusModel

    def test_setReadStatus(self):
        self.assertEqual(ReadStatus.getReadStatus(self.task_object_id), 0)
        self.model.setReadStatus(self.task_object_id, 1)
        self.assertEqual(ReadStatus.getReadStatus(self.task_object_id), 1)
        self.model.setReadStatus(self.task_object_id, 0)
        self.assertEqual(ReadStatus.getReadStatus(self.task_object_id), 0)


class test_TagModel(BaseTest):
    __model_class__ = rest_app_model.TagModel

    def test_tags(self):
        self.assertEqual(self.model.getTags(self.task_object_id), [])
        self.model.setTags(
            self.task_object_id, ["A", " A", "A\t", "B", "C", ""])
        self.assertEqual(
            self.model.getTags(self.task_object_id), [u"A", u"B", u"C"])
        self.model.setTags(self.task_object_id, [])
        self.assertEqual(self.model.getTags(self.task_object_id), [])
        self.model.setTags(self.task_object_id, [""])
        self.assertEqual(self.model.getTags(self.task_object_id), [])
        with self.assertRaises(ValueError):
            self.model.setTags(self.task_object_id, "A, A,A\t,B,C,,")


class test_ProceedModel(BaseTest):
    __model_class__ = rest_app_model.ProceedModel

    @staticmethod
    def _mockedProceed(proceed_to, **kwargs):
        # TODO use class with actual OLC for testing this
        return (proceed_to, kwargs)

    def test_proceed(self):
        self.setupTaskMapping()
        self.task.csTasksProceed = self._mockedProceed
        expected = (303, {'plays': 'drums'})
        result = self.model.proceed(
            None, self.task_object_id, 303, plays="drums")
        self.assertEqual(result, expected)


class test_TaskContextModel(BaseTest):
    __model_class__ = rest_app_model.TaskContextModel

    @classmethod
    def setUpClass(cls):
        pass

    def test_getTaskContext(self):
        self.headOrg = self.__model_class__(
            self.task, references=["HeadOrganization"])
        self.employees = self.__model_class__(
            self.task, references=["Employees"])

        self.assertEqual(
            self.headOrg.getTaskContext(),
            [Organization.ByKeys("131")]
        )
        self.assertEqual(
            self.employees.getTaskContext(),
            [])


class test_TaskRelshipModel(BaseTest):
    __model_class__ = rest_app_model.TaskRelshipModel

    @classmethod
    def setUpClass(cls):
        pass

    def test_getTaskRelships_empty(self):
        self.model = self.__model_class__(
            self.task_empty,
            relships=[
                ("HeadOrganization", "cdb_parent_org"),
                ("Employees", "cdb_personen"),
            ],
        )

        result = self.model.getTaskRelships()
        self.assertEqual(len(result), 2, msg="RESULT IS {}".format(result))

        head_org = result[0]
        self.assertEqual(head_org["relshipName"], "HeadOrganization")
        self.assertEqual(len(head_org["references"]), 0)

        employees = result[1]
        self.assertEqual(employees["relshipName"], "Employees")
        self.assertEqual(len(employees["references"]), 0)

    def test_getTaskRelships_non_empty(self):
        self.model = self.__model_class__(
            self.task,
            relships=[
                ("Employees", "cdb_personen"),
                ("HeadOrganization", "cdb_parent_org"),
            ],
        )

        result = self.model.getTaskRelships()
        self.assertEqual(len(result), 2, msg="RESULT IS {}".format(result))

        employees = result[0]
        self.assertEqual(employees["relshipName"], "Employees")
        self.assertEqual(employees["mappedName"], "Personen")
        self.assertEqual(len(employees["references"]), 1)
        self.assertObjectsEqual(employees["references"][0], TESTUSER)

        head_org = result[1]
        self.assertEqual(head_org["relshipName"], "HeadOrganization")
        self.assertEqual(len(head_org["references"]), 1)


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
