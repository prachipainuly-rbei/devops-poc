#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: environment.py 183491 2018-09-07 08:14:19Z cso $"

import sys

import cdbwrapc
from cdb import sqlapi
from cdb import testcase
from cdb import util
from cdb.objects import org
from cdb.plattools import killableprocess
from cdb.storage.index.object_updater import ObjectUpdater
from cdb.storage.index.updaters import IndexUpdaterFactory
from cdb.uberserver import usutil
from cdb.uberserver.management import Management
from cdb.validationkit import generateUser

from cs.taskmanager import TaskHeaders
from cs.taskmanager.settings import DebugMode
from cs.taskmanager.web import webdriver_support

BROWSER = "chrome"
TIMEOUT = 20 if webdriver_support.IS_BUILDBOT else 5
TESTUSER = "behave_test"


def ensure_running_service_daemon(context):
    svc = Management()
    if svc._check_if_its_up(usutil.UBERSERVER):
        context.temp_service_daemon = None
    else:
        svc.start()
        context.temp_service_daemon = svc


def terminate_temp_service_daemon(context):
    if context.temp_service_daemon:
        try:
            context.temp_service_daemon.shutdown()
        except Exception as ex:
            print ex
            if sys.platform == "win32":
                # workaround for shutdown method not functioning properly (on
                # windows)
                killableprocess.call(
                    ['taskkill', '/f', '/t', '/im', 'cdbsvcd.exe'])


class EventListener(util.DBEventListener):
    __listener = None

    def __init__(self):
        super(EventListener, self).__init__()
        self.__events = []

    def notify(self, relation, event):
        self.__events.append(
            (event.m_event,
             relation,
             event.m_keys.items()))

    def rollback(self):
        def generateWhere(keys):
            where = ""
            for key, value in keys:
                where += "{}='{}' AND ".format(key, value)
            return where[:-5]
        try:
            self.doUnregister()
            self.__events.reverse()
            for t, relation, keys in self.__events:
                if t == util.kRecordInserted and relation != "cdb_global_subj":
                    sqlapi.SQLdelete("FROM {} WHERE {}".format(
                        relation, generateWhere(keys)))
        finally:
            self.clear()
            self.doRegister()

    def clear(self):
        self.__events = []

    @classmethod
    def getListener(cls):
        if not EventListener.__listener:
            EventListener.__listener = EventListener()
        return EventListener.__listener


def before_scenario(context, scenario):
    listener = EventListener.getListener()
    listener.doRegister()


def after_scenario(context, scenario):
    if hasattr(context, "settings"):
        delattr(context, "settings")

    listener = EventListener.getListener()
    listener.rollback()
    listener.doUnregister()

    TaskHeaders.compileToView()

    # delete user views
    view_condition = (
        "FROM cs_tasks_user_view "
        "WHERE subject_id='{}' AND subject_type='Person'".format(
            TESTUSER
        )
    )
    sqlapi.SQLdelete(
        "FROM cs_tasks_user_view_condition "
        "WHERE cdb_object_id IN (SELECT cdb_object_id {})".format(
            view_condition
        )
    )
    sqlapi.SQLdelete(view_condition)

    # delete settings
    for tbl in ["cdb_usr_setting", "cdb_usr_setting_long_txt"]:
        for sid, sid2 in [("cs.taskmanager", "settings"),
                          ("cs.webcomponents.table",
                           "cs-taskmanager-web-tasks-table")]:
            sqlapi.SQLdelete(
                "FROM {} "
                "WHERE setting_id='{}' "
                "AND setting_id2='{}'"
                "AND personalnummer='{}'".format(tbl, sid, sid2, TESTUSER))


def index_object(relation, cdb_object_id):
    "adds a single object to the ES index synchronously"
    update_factory = IndexUpdaterFactory()
    update_factory.add_updater(relation, ObjectUpdater)
    updater = update_factory.get_updater(
        relation=relation,
        job_id="job-{}".format(cdb_object_id),
        cdb_object_id=cdb_object_id,
        is_deleted=False,
        initial_phase=True,
        prevent_associated_obj_update=True,
    )
    updater.update()


def before_all(context):
    testcase.run_level_setup()

    # Create a new User to use for testing and login as this one
    users = org.User.KeywordQuery(personalnummer=TESTUSER)
    if users:
        context.user = users[0]
    else:
        context.user = generateUser(TESTUSER)
        org.CommonRoleSubject.Create(
            role_id="cs_tasks_test",
            subject_id=context.user.personalnummer,
            subject_type="Person",
            exception_id="",
            cdb_classname="cdb_global_subject",
        )

    DebugMode.activate(context.user.personalnummer)

    # Log him in
    assert cdbwrapc.set_user(context.user.personalnummer), (
        "The User couldn't be logged in")

    # run CDB server
    ensure_running_service_daemon(context)

    # add objects to ES index the tests want to search for
    index_object(
        "cs_tasks_test_class_olc",
        "9d2afd8f-7013-11e8-b676-68f7284ff046",  # parent task
    )
    index_object(
        "angestellter",
        "13a8cd00-aa2d-11e8-890a-68f7284ff046",  # test_dummy
    )
    index_object(
        "angestellter",
        "99504583-76e1-11de-a2d5-986f0c508d59",  # caddok
    )

    # setup webdriver
    # We have to use ie webdriver as firefox on buildbot does NOT support webgl
    # not even with software rendering which is used by the ie
    try:
        context.webdriver = webdriver_support.WebDriver(
            browser=BROWSER,
            timeout=TIMEOUT)
        context.webdriver.Login(username=TESTUSER, password="")
        context.webuser = TESTUSER
    except:
        after_all(context)
        raise


def after_all(context):
    if hasattr(context, "webdriver"):
        context.webdriver.Logout()
        context.webdriver.quit()

    # shutdown CDB server
    terminate_temp_service_daemon(context)

    # Delete the created user
    if hasattr(context, "user"):
        for setting in sqlapi.RecordSet2("cdb_usr_setting",
                                         "personalnummer='{}'".format(
                                             context.user.personalnummer)):
            setting.delete()
        for subject in org.CommonRoleSubject.KeywordQuery(
                subject_id=context.user.personalnummer,
                subject_type="Person"):
            subject.Delete()
        context.user.Delete()

    TaskHeaders.compileToView()

    if (sys.platform == "win32") and webdriver_support.IS_BUILDBOT:
        killableprocess.call(['taskkill', '/f', '/t', '/im', 'cdbsrv.exe'])
