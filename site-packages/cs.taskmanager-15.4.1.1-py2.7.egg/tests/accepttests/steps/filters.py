#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

import time
from datetime import datetime
from datetime import timedelta
from functools import wraps
import dateutil.parser
from cdb.validationkit import given
from cdb.validationkit import then
from cdb.validationkit import when
from cs.taskmanager.web.webdriver_support import urljoin
from cs.taskmanagertest import TestTask
from cs.taskmanagertest import TestTaskOLC


def with_dropdown(dropdown_id):
    def dd_decorator(func):
        @wraps(func)
        def func_wrapper(*args, **kwargs):
            context = kwargs.get("context", args[0])
            context.webdriver.WaitForAnimation()
            dropdown = context.webdriver.GetAndClick(byId=dropdown_id)
            try:
                result = func(*args, **kwargs)
                return result
            finally:
                context.webdriver.Click(dropdown)
        return func_wrapper
    return dd_decorator


def searchAndSelect(driver, input_name, search_value):
    # use object search named ``input_name`` to search for ``search_value``
    # and select first result starting with this text
    search_input = driver.GetAndClick(byName=input_name)
    driver.SendKeys(search_input, search_value)

    results_tag = driver.GetElement(
        byClass="cs-web-components-base-generic-tag"
    )
    driver.WaitUntilVisible(results_tag)
    results = driver.GetElement(
        multi=True,
        timeout=2 * driver.Timeout,
        byCSS=".cs-web-components-base-object-search-item-renderer"
              " > .cs-web-components-base-icon-and-label__label"
    )

    for result in results:
        if result.text.startswith(search_value):
            driver.Click(result)
            return True

    return False


@given('^test task "(?P<task_name>.+)" is active$')
def testTaskIsActive(context, task_name):
    task = TestTaskOLC.ByKeys(task_name)
    task.Update(status=0, cdb_status_txt='NEW')


@given('^simple test task "(?P<task_name>.+)" is active$')
def simpleTestTaskIsActive(context, task_name):
    task = TestTask.ByKeys(task_name)
    task.Update(active=1)


@given(r'^test task "(?P<task_name>.+)" is due in (?P<days>-?\d+) days$')
def testTaskIsDueInXDays(context, task_name, days):
    days = int(days)
    deadline = datetime.now() + timedelta(days=days)
    task = TestTaskOLC.ByKeys(task_name)
    task.Update(deadline=deadline)


@given(r'^test task "(?P<task_name>.+)" is due on "(?P<datestr>[0-9\-T:]+)"$')
def testTaskIsDueOn(context, task_name, datestr):
    deadline = dateutil.parser.parse(datestr)
    task = TestTaskOLC.ByKeys(task_name)
    task.Update(deadline=deadline)


@then(r'^(?P<amount>\d+) tasks are shown$')
def howManyTasksAreShown(context, amount):
    time.sleep(0.4)  # task fetching is debounced
    context.webdriver.waitForAsyncActions()
    # counts task rows instead of parsing DebugInfo component,
    # so this will only respect visible rows
    amount = int(amount)
    rows = context.webdriver.Table.GetAllRows()
    assert len(rows) == amount, "found {} rows, expected {}".format(
        len(rows), amount
    )


@then(r"^user has to confirm leaving the page$")
def userConfirmsLeaving(context):
    dashboard_url = urljoin(
        context.webdriver.ServerUrl, "dashboard")
    context.webdriver.get(dashboard_url)
    context.webdriver.ConfirmAlert()


@when('^user filters by type "(?P<filter_value>.+)"$')
@with_dropdown("cs-taskmanager-web-type-filter")
def userFiltersByType(context, filter_value):
    task_types = context.webdriver.GetElement(
        multi=True,
        byCSS=".dropdown-menu[aria-labelledby='cs-taskmanager-web-type-filter']"
              " .cs-web-components-base-checkbox-menuitem,"
              " .dropdown-menu[aria-labelledby='cs-taskmanager-web-type-filter']"
              " .cs-taskmanager-web-simple-menuitem"
    )

    def select_type():
        for task_type in task_types:
            if task_type.text.startswith(filter_value):
                context.webdriver.Click(task_type)
                return True
        return False

    found = select_type()
    assert found, "no type found: {}".format(filter_value)


@when('^user filters by context "(?P<filter_value>.+)"$')
@with_dropdown("cs-taskmanager-web-context-filter")
def userFiltersByContext(context, filter_value):
    if filter_value == "Alle Kontexte":
        found = context.webdriver.GetAndClick(
            byCSS=".dropdown-menu[aria-labelledby='cs-taskmanager-web-context-filter']"
                  " .cs-web-components-base-checkbox-menuitem,"
                  " .dropdown-menu[aria-labelledby='cs-taskmanager-web-context-filter']"
                  " .cs-taskmanager-web-simple-menuitem"
        )
    else:
        found = searchAndSelect(
            context.webdriver,
            "cs-taskmanager-web-context-browser",
            filter_value
        )

    assert found, "no context found: {}".format(filter_value)


@when('^user filters by deadline days "(?P<filter_value>.+)"$')
@with_dropdown("cs-taskmanager-web-deadline-filter")
def userFiltersByDeadlineDays(context, filter_value):
    days = context.webdriver.GetAndClick(byName="cs-taskmanager-web-days")
    days.clear()
    days.send_keys(filter_value)


@when('^user filters by deadline range "(?P<filter_value>.+)"$')
@with_dropdown("cs-taskmanager-web-deadline-filter")
def userFiltersByDeadlineRange(context, filter_value):
    deadline_range = context.webdriver.GetAndClick(
        byName="cs-taskmanager-web-range"
    )
    deadline_range.clear()
    deadline_range.send_keys(filter_value)


def set_checkbox(driver, name, expected_value):
    selector = "input[name={}]".format(name)
    checkbox = driver.GetElement(byCSS=selector)

    if checkbox.is_selected() != expected_value:
        clickable_cls = (
            "cs-web-components-base-formcontrols-label-aftercontrol"
        )
        clickable = driver.GetElement(
            byCSS="{}+.{}".format(selector, clickable_cls)
        )
        driver.Click(clickable)


@when('^user filters by person "(?P<filter_value>.+)"$')
@with_dropdown("cs-taskmanager-web-responsible-filter")
def userFiltersByPerson(context, filter_value):
    myTasks = filter_value == "Meine Aufgaben"

    set_checkbox(
        context.webdriver,
        "cs-taskmanager-web-my-tasks",
        myTasks
    )

    if not myTasks:
        found = searchAndSelect(
            context.webdriver,
            "cs-taskmanager-web-user-browser",
            filter_value
        )
        assert found, "no person found: {}".format(filter_value)


@when("^user filter (?P<include_roles>does|does not) include role tasks$")
@with_dropdown("cs-taskmanager-web-responsible-filter")
def userFilterIncludesRoleTasks(context, include_roles):
    include_roles = include_roles == "does"

    set_checkbox(
        context.webdriver,
        "cs-taskmanager-web-include-roles",
        include_roles
    )
