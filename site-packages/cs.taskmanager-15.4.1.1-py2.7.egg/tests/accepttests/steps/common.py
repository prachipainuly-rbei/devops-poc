#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb import auth
from cdb import constants
from cdb.objects.operations import operation
from cdb.validationkit import given
from cdb.validationkit import then
from cdb.validationkit import when
from cs.taskmanager import settings
from cs.taskmanager.conf import get_cache
from cs.taskmanagertest import TestTaskOLC

__docformat__ = "restructuredtext en"
__revision__ = "$Id: common.py 183504 2018-09-07 09:50:04Z cso $"

TEST_TASK = "Test OLC 1"


def getTestTask():
    test_task = TestTaskOLC.ByKeys(TEST_TASK)
    assert test_task, "test task '{}' missing".format(TEST_TASK)
    return test_task


def getSettings(context):
    return settings.AppSettings().read(
        persno=context.user.personalnummer, use_cache=False)


def updateSettings(context, **kwargs):
    newValue = {
        "notificationInterval": 123456,
    }

    if not hasattr(context, "settings"):
        context.settings = kwargs
    else:
        context.settings.update(kwargs)

    newValue.update(context.settings)

    settings.AppSettings().write(newValue, persno=context.user.personalnummer)


def createOLCTask(name):
    return operation(
        constants.kOperationNew,
        TestTaskOLC,
        name=name,
        subject_id=auth.persno,
        subject_type='Person',
    )


@given(u"^a task with OLC exists$")
def step_impl(context):
    context.task = createOLCTask("TEST TASK")


@when(r"^another user adds (?P<amount>\d+) task\(s\)$")
def step(context, amount):
    context.other_tasks = []

    for i in range(int(amount)):
        context.other_tasks.append(createOLCTask("Other Task {}".format(i)))


@when("^user opens the Task Manager$")
def openTaskManager(context):
    get_cache().refresh()
    context.webdriver.openTaskManager()


@when("^user re-opens the Task Manager$")
def reOpenTaskManager(context):
    context.webdriver.GetAndClick(
        byCSS=".cs-web-components-base-applications__icon-link--active "
              "> div[title='Aufgaben']")
    context.webdriver.waitForAsyncActions()


@then("^the tasks table is displayed$")
def tasksTableIsDisplayed(context):
    msg = "tasks table not found before timeout"
    assert context.webdriver.Table.GetAllRows(), msg


def taskIsShown(driver, task, deleted):
    task_row = driver.Table.GetRow(task, deleted)
    assert task_row, "task is not shown"


def taskIsNotShown(driver, task):
    for row in driver.Table.GetAllRows():
        if row.get_attribute("data-row-id") == task.cdb_object_id:
            raise AssertionError("task is shown")


@then("^the task (?P<shown>is|is not) shown$")
def taskIsOrIsNotShown(context, shown):
    shown = shown == "is"

    if shown:
        taskIsShown(context.webdriver, context.task, deleted=False)
    else:
        taskIsNotShown(context.webdriver, context.task)
