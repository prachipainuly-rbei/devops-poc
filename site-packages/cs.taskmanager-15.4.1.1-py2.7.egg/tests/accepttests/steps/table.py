#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import given
from cdb.validationkit import then
from cdb.validationkit import when
from cs.taskmanager.userdata import ReadStatus
from cs.taskmanager.userdata import Tags


@given("^the task's read status is (?P<read_status>read|unread)$")
def step(context, read_status):
    if read_status == "read":
        action = ReadStatus.setTaskRead
    else:
        action = ReadStatus.setTaskUnread

    action(context.task.cdb_object_id)


@when("^user toggles the task's read status$")
def userTogglesTasksReadStatus(context):
    selector = ("tr[data-row-id='{}'] "
                "td[data-column-id='cs_tasks_col_read_status'] "
                "> span > div".format(context.task.cdb_object_id))
    context.webdriver.GetAndClick(byCSS=selector)
    context.webdriver.waitForAsyncActions()


@then("^the task's read status is (?P<read_status>read|unread)$")
def readStatusIs(context, read_status):
    selector = ("tr[data-row-id='{}'] "
                ".cs-taskmanager-web-read-status-{}".format(
                    context.task.cdb_object_id, read_status))
    status = context.webdriver.GetElement(byCSS=selector)
    assert status, "task is not {}".format(read_status)


@given('^the task\'s tags are "(?P<tags>.*)"$')
def givenTagsAre(context, tags):
    Tags.setTaskTags(
        context.webuser,
        context.task.cdb_object_id,
        tags.split(","),
    )


@when('^user adds the tags "(?P<tags>.*)"$')
def userAddsTags(context, tags):
    tags_input = context.webdriver.GetElement(
        byClass="cs-taskmanager-web-tags-input"
    )
    context.webdriver.SendKeys(tags_input, tags)
    tags_input.send_keys(context.webdriver.Keys.ENTER)
    context.webdriver.waitForAsyncActions()


@when('^user deletes tag "(?P<tag>.*)"$')
def userDeletesTag(context, tag):
    selector = (
        "tr[data-row-id='{}'] "
        ".cs-taskmanager-web-task-tag-{} "
        ".cs-taskmanager-web-remove-tag".format(
            context.task.cdb_object_id,
            tag
        )
    )
    context.webdriver.GetAndClick(byCSS=selector)
    context.webdriver.waitForAsyncActions()


@when("^user presses backspace$")
def userPressesBackspace(context):
    selector = "tr[data-row-id='{}'] .cs-taskmanager-web-tags-input".format(
        context.task.cdb_object_id
    )
    tags_input = context.webdriver.GetElement(byCSS=selector)
    tags_input.send_keys(context.webdriver.Keys.BACK_SPACE)
    context.webdriver.waitForAsyncActions()


@then('^the task\'s tags are "(?P<tags>.*)"$')
def thenTagsAre(context, tags):
    selector = "tr[data-row-id='{}'] .cs-taskmanager-web-task-tag".format(
        context.task.cdb_object_id)
    tag_elements = context.webdriver.GetElement(
        byCSS=selector, multi=True, timeout=1
    )

    if tags == "":
        assert tag_elements == [], "tags found, even though none expected"
    else:
        assert tag_elements is not None, "no tags found"
        found_tags = ", ".join([x.text for x in tag_elements])

        assert found_tags != tags, "found tags '{}', expected '{}'".format(
            found_tags, tags)
