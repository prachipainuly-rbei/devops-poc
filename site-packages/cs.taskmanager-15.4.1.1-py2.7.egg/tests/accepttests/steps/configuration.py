#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb import constants
from cdb.objects import Rule
from cdb.validationkit import given
from cdb.validationkit import operation
from cdb.validationkit import run_with_added_roles
from cdb.validationkit import then
from cdb.validationkit import when
from cs.taskmanager import TaskHeaders
from cs.taskmanager.conf import Attribute
from cs.taskmanager.conf import Column
from cs.taskmanager.conf import get_cache
from cs.taskmanager.conf import TaskClass
from cs.taskmanager.userdata import ReadStatus
from cs.taskmanagertest import TestTaskCustomStatus


def refresh():
    TaskHeaders.compileToView()
    get_cache().refresh()


def get_rule(context):
    rule_id = "Test Tasks (Custom)"
    context.rule = Rule.ByKeys(rule_id)
    assert context.rule, "rule '{}' missing".format(rule_id)


def create_task_class(context):
    ReadStatus.KeywordQuery(
        persno=context.user.personalnummer,
        task_object_id=[
            x.cdb_object_id
            for x in context.rule[TestTaskCustomStatus]]
    ).Delete()
    context.tsk_cls_len = len(TaskClass.Query())
    context.tsk_cls = operation(
        constants.kOperationNew,
        TaskClass,
        preset={
            'classname': TestTaskCustomStatus._getClassname(),
            'rule_id': context.rule.name,
            'fqpyname': TestTaskCustomStatus.GetFQPYName(),
        },
        user_input={
            'name': context.rule.name,
            'cdb_module_id': 'cs.taskmanagertest',
        }
    )
    refresh()


@when("^Administrator creates a new column$")
@run_with_added_roles(["Administrator"])
def adminCreatesANewColumn(context):
    context.column_len = len(Column.Query())
    operation(
        constants.kOperationNew,
        Column,
        user_input={"cdb_module_id": "cs.taskmanagertest"})
    get_cache().refresh()


@then("^that column should exist$")
def columnShouldExist(context):
    assert context.column_len < len(Column.Query()), (
        "There are no more Columns then before creating the Column")


@given("^a class exists$")
def classExists(context):
    context.cal = len(TestTaskCustomStatus.Query())


@given("^an object rule exists for it$")
def objectRuleExists(context):
    get_rule(context)


@when("^Administrator creates a task class for the given class$")
@run_with_added_roles(["Administrator", "public"])
def adminCreatesTaskClass(context):
    create_task_class(context)


@then("^that task class should exist$")
def taskClassShouldExist(context):
    new_len = len(TaskClass.Query())
    assert (context.tsk_cls is not None) and (new_len > context.tsk_cls_len), (
        "not yet implemented")


# -------------------------------------------------------------
# Scenario Outline: Create an attribute mapping for a given class
#
# -------------------------------------------------------------

@given("^a task class exists$")
@run_with_added_roles(["Administrator", "public"])
def taskClassExists(context):
    get_rule(context)
    create_task_class(context)


@when("^Administrator creates new attribute to column mapping$")
@run_with_added_roles(["Administrator"])
def adminCreatesNewAttributeMapping(context):
    context.att_map_len = len(Attribute.Query())
    column = Column.KeywordQuery(name='cs_tasks_col_name')[0]
    context.att_map = operation(
        constants.kOperationNew,
        Attribute,
        preset={
            'tclass_object_id': context.tsk_cls.cdb_object_id,
            'propname': 'name',
            'column_object_id': column.cdb_object_id
        },
        user_input={'cdb_module_id': 'cs.taskmanagertest'}
    )
    get_cache().refresh()


@then("^that mapping should exist$")
def mappingShouldExist(context):
    assert (context.att_map is not None) and (
        context.att_map_len < len(Attribute.Query())), (
            "There are no more attribute mappings defined than before")
