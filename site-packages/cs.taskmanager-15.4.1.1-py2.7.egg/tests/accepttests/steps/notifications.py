#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

import time
from cdb.validationkit import given
from cdb.validationkit import then
from cdb.validationkit import when
import steps.common as common


def waitForNotification(context):
    # wait for 2 intervals to be sure we get up-to-date information
    seconds = context.notificationInterval / 500.0
    time.sleep(seconds)


def showNotificationPopover(context):
    waitForNotification(context)
    context.webdriver.GetAndClick(
        byClass="cs-taskmanager-web-notification__focusable")


@given(r"^notification interval is (?P<milliseconds>\d+) ms$")
def step(context, milliseconds):
    context.notificationInterval = int(milliseconds)
    common.updateSettings(context,
                          notificationInterval=context.notificationInterval)


@when("^another user completes the task$")
def anotherUserCompletesTheTask(context):
    context.task.ChangeState(20, check_access=0)


@when("^user refreshes the Task Manager$")
def userRefreshesTaskManager(context):
    showNotificationPopover(context)
    context.webdriver.GetAndClick(
        byCSS="#cs-taskmanager-web-notification__popover-info "
              "> .popover-content > a")


@then("^the task is not shown anymore$")
def taskNotShownAnymore(context):
    common.taskIsNotShown(context.webdriver, context.task)


@then("^the task is shown as deleted$")
def taskShownAsDeleted(context):
    common.taskIsShown(context.webdriver, context.task, deleted=True)


@then(r"^the user is notified about (?P<amount>\d+) (?P<status>new|completed) "
      r"task\(s\)$")
def userNotification(context, amount, status):
    waitForNotification(context)
    showNotificationPopover(context)
    notification = context.webdriver.GetElement(
        byClass="cs-taskmanager-web-notification__text")
    assert notification, "no notification shown"

    expected = {
        "new": "{} Neue Aufgabe(n) verf√ºgbar",
        "completed": "{} Aufgabe(n) abgeschlossen",
    }[status].format(amount)

    assert notification.text == expected, (
        "notification is '{}', expected '{}'".format(notification.text,
                                                     expected))
