#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from selenium.webdriver.support.wait import WebDriverWait
from cdb.validationkit import given
from cdb.validationkit import then
from cdb.validationkit import when
import steps.common as common

SUBTASK_OBJECT_IDS = {
    "first": "8eb6bbf0-7013-11e8-afad-68f7284ff046",
    "second": "939846c0-7013-11e8-b646-68f7284ff046",
    "third": "967d3e40-7013-11e8-89cc-68f7284ff046",
}


def click_subtask(context, subtask):
    task_oid = SUBTASK_OBJECT_IDS[subtask]
    # click object icon to avoid clicking the link to the subtask's data sheet
    selector = (
        ".cs-web-components-base-icon-and-label[data-cdb-object-id='{}'] "
        "img".format(task_oid)
    )
    return context.webdriver.GetAndClick(byCSS=selector)


def get_file(context, subtask):
    filename = "{} subtask.txt".format(subtask)
    # assumes the file we're looking for is the first one
    name_cell = context.webdriver.GetElement(
        byCSS="td[data-column-id=name] "
              "> .cs-web-components-base-filelist__primary")
    assert name_cell, "no file row found"
    assert name_cell.text == filename, (
        "filename is '{}', expected '{}'".format(name_cell.text, filename))
    return name_cell


def get_file_list(context):
    return context.webdriver.GetElement(
        byClass="cs-web-components-base-filelist")


@given("^the test task exists$")
def testTaskExists(context):
    context.task = common.getTestTask()


@given(r"^(?P<existing>\d+) subtasks exist$")
def xSubtasksExist(context, existing):
    context.parent_task = common.createOLCTask("Parent Test Class")
    expected = int(existing)

    for i in range(expected):
        subtask = common.createOLCTask("Child {}".format(i + 1))
        subtask.Update(parent_object_id=context.parent_task.cdb_object_id)

    context.parent_task.Reload()
    actual = len(context.parent_task.SubTasks)

    assert actual == expected, "expected {} children, found {}".format(
        expected, actual)


@when("^user selects the test task$")
def userSelectsTheTestTask(context):
    assert context.task.name == common.TEST_TASK, "test task not in context"
    task_row = context.webdriver.Table.GetRow(
        context.task,
        deleted=False,
        click=True,
    )


@then("^the task's details are displayed$")
def taskDetailsAreDisplayed(context):
    details = context.webdriver.GetElement(
        byId="cs-taskmanager-web-details-container")

    assert details, "details not rendered"


def toggleFileList(context, subtask):
    click_subtask(context, subtask)
    context.webdriver.waitForAsyncActions()


@when("^user toggles the (?P<subtask>first|second) subtask's file list$")
def userTogglesFileList(context, subtask):
    toggleFileList(context, subtask)


# "again" for more explicit scenario steps
@when("^user toggles the (?P<subtask>first|second) subtask's file list again$")
def userTogglesFileListAgain(context, subtask):
    toggleFileList(context, subtask)


@then("^the file list is hidden$")
def fileListIsHidden(context):
    file_list = get_file_list(context)
    if file_list:
        context.webdriver.WaitUntilInvisible(file_list)


@then("^the (?P<subtask>first|second) subtask's file list is displayed$")
def fileListIsDisplayed(context, subtask):
    file_list = get_file_list(context)
    context.webdriver.WaitUntilVisible(file_list)
    file_exists = get_file(context, subtask)
    assert file_exists, "{} subtask's file not shown".format(subtask)


@when("^user selects the parent task$")
def userSelectsParentTask(context):
    context.webdriver.Table.GetRow(context.parent_task, click=True)


@then(r"^(?P<displayed>\d+) subtasks are displayed$")
def subtasksAreDisplayed(context, displayed):
    refs = WebDriverWait(context.webdriver, context.webdriver.Timeout).until(
        lambda d: d.find_elements_by_xpath(
            # xpath assumes the relevant content block is the second one
            "(//*[@id='cs-taskmanager-web-details-container']//"
            "*[contains(@class, 'cs-web-components-base-contentblock-body')])"
            "[2]//*[contains(@class, 'cs-taskmanager-web-simple-object')]"),
        message="timed out waiting for referenced objects")
    actual = len(refs)
    expected = int(displayed)
    assert actual == expected, "expected {} children, found {}".format(
        expected, actual)
