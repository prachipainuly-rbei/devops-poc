#!/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_conditions.py 183176 2018-08-31 09:43:15Z cso $"

import unittest
from datetime import date
from datetime import datetime
from cdb import sqlapi
from cdb import testcase
from cs.taskmanager import conditions


def setUpModule():
    testcase.run_level_setup()


class test_conditions(testcase.RollbackTestCase):
    @classmethod
    def setUpClass(cls):
        cls.test_task_oid = "95a2e2e1-a9f2-11e8-9ce3-68f7284ff046"

    def test_getConditions(self):
        with self.assertRaises(ValueError):
            conditions.getConditions({"user": "x"})

        with self.assertRaises(ValueError):
            conditions.getConditions([])

        self.assertEqual(
            conditions.getConditions(["user"]),
            (
                ["user"],
                {},
                "persno IN ('user') AND (subject_type IN ('', 'Person') OR "
                "subject_type IS NULL) AND 1=1 AND 1=1",
            )
        )
        self.assertEqual(
            conditions.getConditions(["user"], roles=True),
            (["user"], {}, "persno IN ('user') AND 1=1 AND 1=1 AND 1=1")
        )
        self.assertEqual(
            conditions.getConditions(["user"], types=["A", "B"]),
            (
                ["user"],
                {},
                "persno IN ('user') AND (subject_type IN ('', 'Person') OR "
                "subject_type IS NULL) AND classname IN ('A', 'B') AND 1=1",
            )
        )
        self.assertEqual(
            conditions.getConditions(["user"], contexts=[self.test_task_oid]),
            (
                ["user"],
                {'cs_tasks_test_class': [{u'name': u'Simple Test 1'}]},
                "persno IN ('user') AND (subject_type IN ('', 'Person') OR "
                "subject_type IS NULL) AND 1=1 AND 1=1",
            )
        )
        self.assertEqual(
            conditions.getConditions(["user"], days=-1),
            (
                ["user"],
                {},
                "persno IN ('user') AND (subject_type IN ('', 'Person') OR "
                "subject_type IS NULL) AND 1=1 AND (deadline < {})".format(
                    sqlapi.SQLdate_literal(date.today())
                ),
            )
        )
        expected_start_date = sqlapi.SQLdate_literal(datetime(2000, 1, 31))
        self.assertEqual(
            conditions.getConditions(["user"], start="2000.1.31"),
            (
                ["user"],
                {},
                "persno IN ('user') AND (subject_type IN ('', 'Person') OR "
                "subject_type IS NULL) AND 1=1 "
                "AND (deadline >= {})".format(expected_start_date),
            )
        )
        expected_end_date = sqlapi.SQLdate_literal(datetime(2000, 12, 25))
        self.assertEqual(
            conditions.getConditions(["user"], end="2000.12.24"),
            (
                ["user"],
                {},
                "persno IN ('user') AND (subject_type IN ('', 'Person') OR "
                "subject_type IS NULL) AND 1=1 "
                "AND (deadline < {})".format(expected_end_date),
            )
        )

    def test_applyPostMappingConditions(self):
        self.skipTest("to be implemented")

    def test_startOfDay(self):
        self.assertEqual(
            conditions.startOfDay(datetime(2000, 2, 28, 1, 2, 3, 4)),
            datetime(2000, 2, 28)
        )
        self.assertEqual(
            conditions.startOfDay(datetime(2000, 2, 28, 1, 2, 3, 4), 1),
            datetime(2000, 2, 29)
        )
        self.assertEqual(
            conditions.startOfDay(datetime(2000, 2, 28), 2),
            datetime(2000, 3, 1)
        )
        self.assertEqual(
            conditions.startOfDay(datetime(2000, 2, 28, 1, 2, 3, 4), -1),
            datetime(2000, 2, 27)
        )


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
