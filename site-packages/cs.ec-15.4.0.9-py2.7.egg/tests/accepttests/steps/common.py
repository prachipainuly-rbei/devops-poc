#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cs.workflow import processes
from cs.calendar import CalendarProfile
from cdb.platform.olc import StateDefinition
from cs.vp.items import ItemCategory, Item
from cs.documents import DocumentCategory, Document
from cs.vp.classification import PropertySet, Property, PropertyCategory
from cs.vp.bom import AssemblyComponent
from cdb import util

import hashlib
import sys
from cdb.objects.pdd.Files import Sandbox
from cdb.objects import org
from cdb.objects.org import Person
from cs.ec import EngineeringChange, ECCategory
from cs.vp.ec_items import ItemECN


__docformat__ = "restructuredtext en"
__revision__ = "$Id: common.py 131650 2015-09-29 08:29:00Z gda $"


item_categ = ItemCategory.Query()[0]
doc_maincateg = DocumentCategory.KeywordQuery(parent_id='')[0]
doc_categ = DocumentCategory.KeywordQuery(parent_id=doc_maincateg.categ_id)[0]
calendar_profile = CalendarProfile.Query()[0]


class Document(Document):
    def __eq__(self, other):
        if hasattr(other, "z_nummer") and hasattr(other, "z_index"):
            return (other.z_nummer == self.z_nummer and
                    other.z_index == self.z_index)
        else:
            return False


class Model(Document):
    __classname__ = "model"


class Item(Item):
    def __eq__(self, other):
        if hasattr(other, "teilenummer") and hasattr(other, "t_index"):
            return (other.teilenummer == self.teilenummer and
                    other.t_index == self.t_index)
        else:
            return False


class PropertySet(PropertySet):
    def __eq__(self, other):
        if hasattr(other, "pset_id"):
            return self.pset_id == other.pset_id
        else:
            return False


class Person(Person):
    def __eq__(self, other):
        if hasattr(other, "personalnummer"):
            return self.personalnummer == other.personalnummer
        else:
            return False


def getObligatoryForItem():
    return {
        "teilenummer": "M-%s" % Item.MakeItemNumber(),
        "t_index": "",
        "benennung": "Test",
        "benennung2": "",
        "t_kategorie": item_categ.kategorie,
        "t_bereich": "IT",
        "gebrauchsstand": "aktiv",
        "mengeneinheit": "kg",
        "cdb_obsolete": 0,
        "cdb_classname": "part",
        "status": 0,
        "cdb_objektart": "part_ERP"
    }


def getObligatoryForDocument():
    return {
        "z_nummer": Document.makeNumber(None),
        "z_index": '',
        "titel": "Test",
        "z_categ1": doc_maincateg.name_d,
        "z_categ2": doc_categ.name_d,
        "autoren": "caddok",
        "z_bereich": "IT",
        "cdb_classname": 'document',
        "vorlagen_kz": 0,
        "erzeug_system": 'acad',
        "zeichner": 'caddok',
        "z_status_txt": 'In Progress',
        "z_status": 0,
        "z_art": 'doc_standard',
        "cdb_obsolete": 0,
        "teilenummer": "",
        "t_index": "",
    }


def getObligatoryForCharacteristicBar():
    return {
        "pset_id": "Characteristic Bar",  # TODO: replace with number generator
        "name_en": "Characteristic Bar",
        "description": "Characteristic Bar",
    }


def getObligatoryForCADDocument(item):
    attrs = getObligatoryForDocument()
    attrs.update({
        "teilenummer": item.teilenummer,
        "t_index": item.t_index,
        "benennung": item.benennung,
        "t_kategorie": item.t_kategorie,
        "t_bereich": item.t_bereich,
        "mengeneinheit": item.mengeneinheit,
        "cdb_status_txt": item.cdb_status_txt,
        "cdb_classname": 'model',
        "z_art": "cad_drawing",
    })
    return attrs


def getObligatoryForAssemblyComponent(assembly, item):
    return {
        "teilenummer": item.teilenummer,
        "t_index": item.t_index,
        "baugruppe": assembly.teilenummer,
        "b_index": assembly.t_index,
        "variante": 0,
        "position": 10,
        "auswahlmenge": 1,
        "menge": 1,
    }


def getObligatoryForSMLPropertyReference(propertySet, prop):
    return {
        "pset_id": propertySet.pset_id,
        "prop_nr": propertySet.nextPropertyNumber(),
        "prop_id": prop.prop_id,
        "prop_mk": "Test",
    }


def getObligatoryForSMLProperty():
    return {
        "prop_id": 0,  # TODO replace with generator call
        "din4001_mm_mk": "Test",
        "din4001_mm_dt": "T",
        "din4001_mm_v1": 1,
        "din4001_mm_n1": 0,
        "din4001_mm_id": "MM,SM",
        "din4001_mm_st": 1,
    }


def getObligatoryForUser(username):
    organisation = org.Organization.Query()[0]
    calendar_profile = CalendarProfile.Query()[0]
    return {
        "personalnummer": username,
        "login": username,
        "active_account": 1,
        "visibility_flag": 1,
        "lastname": username,
        "firstname": username,
        "org_id": organisation.org_id,
        "password_rule": "Unsafe",
        "calendar_profile_id": calendar_profile.cdb_object_id,
    }


def getObligatoryForPropertyCatalog():
    return {
        "cat_id": util.nextval("cdbsml_propcat"),
        "name_en": "Property Catalog",
    }


def getObligatoryForProcess():
    return {
        "cdb_process_id": processes.Process.new_process_id(),
        "titel": "Test",
    }


def getObligatoryForEngineeringChange():
    return {
        "cdb_ec_id": EngineeringChange.MakeID(),
        "ec_state": "ECO",
        "state": 0,
        "cdb_objektart": "cdbecm_standard_ec",
        "template": 0,
        "category": u"Standard"
    }


def getObligatoryForItemECN(item):
    return {
        "teilenummer": item.teilenummer,
        "t_index": item.t_index,
        "event": "anderer Anlass",
        "source": "intern",
        "reason": "Test",
        "description": "Validation-Toolkit"
    }


def log(txt):
    sys.stderr.write(txt)


def generateCADDocument(item, **kwargs):
    attrs = getObligatoryForCADDocument(item)
    attrs.update(kwargs)
    return Model.Create(**attrs)


def generateItem(**kwargs):
    attrs = getObligatoryForItem()
    attrs.update(kwargs)
    return Item.Create(**attrs)


def generateDocument(**kwArgs):
    attrs = getObligatoryForDocument()
    attrs.update(kwArgs)
    return Document.Create(**attrs)


def generateCharacteristicBar(**kwArgs):
    attrs = getObligatoryForCharacteristicBar()
    attrs.update(**kwArgs)
    return PropertySet.Create(**attrs)


def generateProcess(**kwArgs):
    attrs = getObligatoryForProcess()
    attrs.update(**kwArgs)
    return processes.Process.Create(**attrs)


def generateAssemblyComponent(assembly, item=None, **kwArgs):
    if item is None:
        item = generateItem()
    attrs = getObligatoryForAssemblyComponent(assembly, item)
    attrs.update(**kwArgs)
    return AssemblyComponent.Create(**attrs)


def generateSMLProperty(**kwArgs):
    attrs = getObligatoryForSMLProperty()
    attrs.update(**kwArgs)
    return Property.Create(**attrs)


def generateUser(username, **kwArgs):
    attrs = getObligatoryForUser(username)
    attrs.update(**kwArgs)
    return org.User.Create(**attrs)


def generatePropertyCatalog(**kwArgs):
    attrs = getObligatoryForPropertyCatalog()
    attrs.update(**kwArgs)
    return PropertyCategory.Create(**attrs)


def checkFile(filename, f):
    should = hashlib.sha1(open(filename, "rb").read())
    sb = Sandbox()
    try:
        f = sb.checkout(f)[0]
        result = hashlib.sha1(open(f, "rb").read())
        return should.digest() == result.digest()
    finally:
        sb.close()
        sb.clear()


def getStateNumber(t, statename):
    state = StateDefinition.KeywordQuery(objektart=t, statusbez_en=statename)
    assert len(state) > 0, "no state found for %s/%s" % (t, statename)
    return state[0].statusnummer


def generateEngineeringChange(**kwArgs):
    attrs = getObligatoryForEngineeringChange()
    attrs.update(**kwArgs)
    return EngineeringChange.Create(**attrs)


def generateItemECN(item, **kwArgs):
    attrs = getObligatoryForItemECN(item)
    attrs.update(**kwArgs)
    return ItemECN.Create(**attrs)
