#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from behave import given, when, then  # @UnresolvedImport

from cdb.validationkit import run_with_added_roles, operation, log
from common import generateItem, generateEngineeringChange, \
    getStateNumber, generateItemECN
from cs.vp.items import Item
from cs.ec import EngineeringChange
from cs.vp.ec_items import ItemECN


# -------------------------------------------------------------
# Scenario 0001-0025 Create an Engineering Change Message for an Item
#
# -------------------------------------------------------------
@given("^a released item exists$")
def step(context):
    context.item = generateItem(status=getStateNumber("part_ERP", "Released"))
    context.item_len = len(Item.Query())


@given("^a released engineering change exists$")
def step(context):  # @DuplicatedSignature
    context.ec = generateEngineeringChange(
        status=getStateNumber("cdbecm_standard_ec", "Approval"))
    context.ec_len = len(EngineeringChange.Query())


@when("^(?P<role>.*?)"
      " creates an index of the item with the engineering change$")
def step(context, role):  # @DuplicatedSignature
    @run_with_added_roles(role.split(","))
    def index(context):
        try:
            context.itemECN_len = len(ItemECN.Query())
            context.newItem = operation("CDB_Index",
                                        context.item,
                                        user_input={"index_ec_id": context.ec.cdb_ec_id})
        except Exception, e:
            log("Error indexing the item, details: %s" % e)
    return index(context)


@then("^a new engineering change message is (?P<state>(?:not )?created)$")
def step(context, state):  # @DuplicatedSignature
    if state == "created":
        assert len(ItemECN.Query()) - context.itemECN_len == 1, \
            "No engineering change message has been created"
    elif state == "not created":
        assert len(ItemECN.Query()) - context.itemECN_len == 0, \
            "An engineering change message has been created"


@then("^it is (?P<allocation>(?:not )?allocated) to the item$")
def step(context, allocation):  # @DuplicatedSignature
    ecm = None
    if hasattr(context, "newItem"):
        ecm = ItemECN.ByKeys(context.newItem.teilenummer, context.newItem.t_index)
    if allocation == "allocated":
        assert ecm is not None and ecm.Item == context.newItem, \
            "The engineering change message is not allocated to the item"
    elif allocation == "not allocated":
        assert ecm is None or ecm.Item != context.newItem, \
            "The engineering change message is allocated to the item"


@then("^it is (?P<allocation>(?:not )?allocated) to the engineering change$")
def step(context, allocation):  # @DuplicatedSignature
    ecm = None
    if hasattr(context, "newItem"):
        ecm = ItemECN.ByKeys(context.newItem.teilenummer, context.newItem.t_index)
    if allocation == "allocated":
        assert ecm is not None and ecm.EC.cdb_ec_id and context.ec.cdb_ec_id, \
            "The engineering change message is not allocated "\
            "to the engineering change"
    elif allocation == "not allocated":
        assert ecm is None or ecm.EC.cdb_ec_id != context.ec.cdb_ec_id, \
            "The engineering change message is allocated "\
            "to the engineering change"


# -------------------------------------------------------------
# Scenario 0001-0026 Delete an Engineering Change Message from an Item
#
# -------------------------------------------------------------
@given("^an engineering change message for the item exists$")
def step(context):  # @DuplicatedSignature
    context.ecm = generateItemECN(context.item)
    context.ecm_len = len(ItemECN.Query())


@when("^(?P<role>.*?) deletes this engineering change message$")
def step(context, role):  # @DuplicatedSignature
    @run_with_added_roles(role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.ecm)
        except Exception, e:
            log("Error deleting the engineering change message, details: %s"
                % e)
    return delete(context)


@then("^the engineering change message is (?P<state>(?:not )?deleted)$")
def step(context, state):  # @DuplicatedSignature
    if state == "deleted":
        assert len(ItemECN.Query()) - context.ecm_len == -1,\
            "The engineering change message is not deleted"
    elif state == "not deleted":
        assert len(ItemECN.Query()) - context.ecm_len == 0,\
            "The engineering change message is deleted"


@then("^the engineering change is (?P<state>(?:not )?deleted)$")
def step(context, state):  # @DuplicatedSignature
    if state == "deleted":
        assert len(EngineeringChange.Query()) - context.ec_len == -1,\
            "The engineering change is not deleted"
    elif state == "not deleted":
        assert len(EngineeringChange.Query()) - context.ec_len == 0,\
            "The engineering change is deleted"


@then("^the item is (?P<state>(?:not )?deleted)$")
def step(context, state):  # @DuplicatedSignature
    if state == "deleted":
        assert len(Item.Query()) - context.item_len == -1,\
            "The item is not deleted"
    elif state == "not deleted":
        assert len(Item.Query()) - context.item_len == 0,\
            "The item is deleted"
