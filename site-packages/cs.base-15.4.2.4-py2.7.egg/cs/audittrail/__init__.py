# !/usr/bin/env powerscript
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
import re
import datetime
import uuid

from cdb import auth
from cdb import sqlapi
from cdb import cdbuuid
from cdb import util

from cdb.objects import Object, ClassRegistry, ByID, org
from cdb.platform.mom import entities, fields
from cdb.platform.mom.relships import Relship
from cs.platform.web.rest.relship.main import UnaryRelshipResolver, NaryRelshipResolver

config = {}


def is_object_id(object_id):
    try:
        uuid.UUID(object_id)
    except ValueError:
        return False
    except AttributeError:
        return False
    return True


def setConfig():
    """
    Write the data of the cdb_audittrail_config relation to memory for faster access during AuditTrail entry creation.
    """
    global config
    config["cdb_file_base"] = {"is_indexed": 0,
                               "ident_field": "",
                               "index_field": "",
                               "fields": {"cdbf_name": {"de": "Dateiname",
                                                        "en": "File Name"}}}
    for atc in sqlapi.RecordSet2("cdb_audittrail_config"):
        config[atc.classname] = {"is_indexed": atc.is_indexed,
                                 "ident_field": atc.ident_field,
                                 "index_field": atc.index_field}
        config[atc.classname]["fields"] = {}
        for field in sqlapi.RecordSet2("cdb_audittrail_config_field", "classname = '%s'" % atc.classname):
            f = fields.DDField.ByKeys(atc.classname, field.field_name)
            if f:
                config[atc.classname]["fields"][field.field_name] = {"en": f.getLabel("en"),
                                                                     "de": f.getLabel("de")}

    for atc in sqlapi.RecordSet2("cdb_audittrail_config"):
        cdef = entities.CDBClassDef(atc.classname)
        subclasses = cdef.getSubClassNames(True)
        for subclass in subclasses:
            if subclass not in config:
                config[subclass] = config[atc.classname]
            else:
                subclass_fields = config[subclass]["fields"].copy()
                subclass_fields.update(config[atc.classname]["fields"])
                config[subclass]["fields"] = subclass_fields


class AuditTrail(Object):
    __classname__ = "cdb_audittrail"
    __maps_to__ = "cdb_audittrail"


class AuditTrailDetail(Object):
    __classname__ = "cdb_audittrail_detail"
    __maps_to__ = "cdb_audittrail_detail"


class AuditTrailObjects(Object):
    __classname__ = "cdb_audittrail_objects"
    __maps_to__ = "cdb_audittrail_objects"


class AuditTrailDetailLongText(AuditTrailDetail):
    __classname__ = "cdb_audittrail_detail_longtext"


class AuditTrailView(Object):
    __classname__ = "cdb_audittrail_view"
    __maps_to__ = "cdb_audittrail_view"


class AuditTrailConfig(Object):
    __classname__ = "cdb_audittrail_config"
    __maps_to__ = "cdb_audittrail_config"

    event_map = {(('create', 'copy', 'modify'), 'pre_mask'): 'setDefaults',
                 (('create', 'copy', 'modify'), 'dialogitem_change'): 'changeDialog'}

    def setDefaults(self, ctx):
        if self.is_indexed:
            ctx.set_fields_mandatory(["ident_field", "index_field"])
        else:
            ctx.set_fields_readonly(["ident_field", "index_field"])

    def changeDialog(self, ctx):
        if ctx.changed_item == "is_indexed":
            if ctx.dialog.is_indexed == "1":
                ctx.set_fields_writeable(["ident_field", "index_field"])
                ctx.set_mandatory("ident_field")
                ctx.set_mandatory("index_field")
            else:
                ctx.set_fields_readonly(["ident_field", "index_field"])
                ctx.set_optional("ident_field")
                ctx.set_optional("index_field")
                ctx.set("ident_field", "")
                ctx.set("index_field", "")


class AuditTrailConfigField(Object):
    __classname__ = "cdb_audittrail_config_field"
    __maps_to__ = "cdb_audittrail_config_field"


class WithAuditTrail(object):
    """
    Mixin which enables objects to automatically create AuditTrail entries.
    """
    event_map = {(('create', 'copy'), 'post'): 'createAuditTrailEntry',
                 ('relship_copy', 'post'): 'copyrelshipAuditTrailEntry',
                 ('state_change', 'post'): 'statechangeAuditTrailEntry',
                 ('delete', 'post'): 'deleteAuditTrailEntry',
                 ('modify', 'pre'): "keepAuditTrailAttributes",
                 ('modify', 'post'): "modifyAuditTrailEntry"}

    def referencedAuditTrailObjects(self):
        return [self]

    def createAuditTrail(self, category):
        """
        Creates a new AuditTrail entry.

        :param category: Which type of entry is generated e.g. create, modify, etc.
        :return: The AuditTrail entry
        """
        global config
        if not config:
            setConfig()

        clsname = self.GetClassname()
        idx = ""
        audittrail = None
        if clsname in config:
            if config[clsname]["is_indexed"] == 1 and config[clsname]["index_field"]:
                idx = self[config[clsname]["index_field"]]
            audittrail = AuditTrail.Create(audittrail_object_id=cdbuuid.create_uuid(),
                                           object_description=self.GetDescription(),
                                           idx=idx,
                                           cdb_cpersno=auth.persno,
                                           cdb_cdate=datetime.datetime.now(),
                                           type=category)
            for obj in self.referencedAuditTrailObjects():
                if category == 'delete' and obj == self:
                    continue
                AuditTrailObjects.Create(object_id=obj.cdb_object_id,
                                         audittrail_id=audittrail.audittrail_object_id)
        return audittrail

    def createAuditTrailDetail(self, audittrail_object_id, clsname, attribute, old_value, new_value):
        """
        Creates a new AuditTrailDetail entry

        :param audittrail_object_id: cdb_object_id of the encompassing AuditTrail entry
        :param attribute: Attribute name of the changed attribute
        :param old_value: Old value of the attribute
        :param new_value: New value of the attribute
        """
        global config
        if not config:
            setConfig()
        if attribute in config[clsname]["fields"] or "_status_txt" in attribute:
            AuditTrailDetail.Create(detail_object_id=cdbuuid.create_uuid(),
                                    audittrail_object_id=audittrail_object_id,
                                    attribute_name=attribute,
                                    old_value=old_value,
                                    new_value=new_value,
                                    label_de="Status" if ("_status_txt" in attribute) else config[clsname]["fields"][attribute]["de"],
                                    label_en="Status" if ("_status_txt" in attribute) else config[clsname]["fields"][attribute]["en"])

    def createAuditTrailLongText(self, audittrail_object_id, clsname, longtext, old_text, new_text):
        """
        Creates a new AuditTrailLongDetail entry

        :param audittrail_object_id: cdb_object_id of the encompassing AuditTrail entry
        :param longtest: Attribute name of the changed attribute
        :param old_text: Old text of the attribute
        :param new_text: New text of the attribute
        """
        global config
        if not config:
            setConfig()
        if longtext in config[clsname]["fields"]:
            attr_length = getattr(AuditTrailDetailLongText, "old_value").length
            longdetail = AuditTrailDetailLongText.Create(detail_object_id=cdbuuid.create_uuid(),
                                                         audittrail_object_id=audittrail_object_id,
                                                         attribute_name=longtext,
                                                         old_value=old_text if len(old_text) <= attr_length
                                                         else (old_text[:attr_length - 3] + "..."),
                                                         new_value=new_text if len(new_text) <= attr_length
                                                         else (new_text[:attr_length - 3] + "..."),
                                                         label_de=config[clsname]["fields"][longtext]["de"],
                                                         label_en=config[clsname]["fields"][longtext]["en"])
            longdetail.SetText("cdb_audittrail_longtext_old", old_text)
            longdetail.SetText("cdb_audittrail_longtext_new", new_text)

    def createAuditTrailEntry(self, ctx=None):
        global config
        if not config:
            setConfig()

        clsname = self.GetClassname()
        if clsname in config:
            audittrail = self.createAuditTrail('create')
            for attribute in self.GetFieldNames():
                if attribute in config[clsname]["fields"].keys():
                    if self[attribute]:
                        nv = self[attribute]
                        if is_object_id(nv):
                            nv = ByID(nv)
                            if nv:
                                nv = nv.GetDescription()
                            else:
                                nv = ""
                        self.createAuditTrailDetail(audittrail_object_id=audittrail.audittrail_object_id,
                                                    clsname=clsname,
                                                    attribute=attribute,
                                                    old_value="",
                                                    new_value=nv)

            for longtext in self.GetTextFieldNames():
                if longtext in config[clsname]["fields"].keys():
                    new_text = self.GetText(longtext)
                    if new_text:
                        self.createAuditTrailLongText(audittrail_object_id=audittrail.audittrail_object_id,
                                                      clsname=clsname,
                                                      longtext=longtext,
                                                      old_text="",
                                                      new_text=new_text)

    def copyrelshipAuditTrailEntry(self, ctx=None):
        global config
        if not config:
            setConfig()

        cdef = self.GetClassDef()
        rs_def = cdef.getRelationship(ctx.relationship_name)
        if rs_def and rs_def.is_valid():
            target_cdef = rs_def.get_reference_cldef()
            link_cdef = rs_def.get_link_cldef()
            if target_cdef:
                result = []
                if link_cdef and link_cdef == target_cdef:
                    target_clsname = target_cdef.getClassname()
                    if target_clsname in config:
                        parent_handle = self.ToObjectHandle()
                        if cdef.isOneOnOne(rs_def):
                            resolver = UnaryRelshipResolver(parent_handle, ctx.relationship_name, target_clsname)
                            if resolver:
                                result = [resolver.resolve()]
                        else:
                            resolver = NaryRelshipResolver(parent_handle, ctx.relationship_name, target_clsname)
                            if resolver:
                                result = resolver.resolve()
                else:
                    link_clsname = link_cdef.getClassname()
                    if link_clsname in config:
                        link_cls_obj = ClassRegistry().find(link_cdef.getPrimaryTable())
                        relship = Relship.ByKeys(ctx.relationship_name)

                        referer_args = {}
                        for pair in relship.referer_kmap.split(';'):
                            lpair = pair.strip().split('=')
                            referer_args[lpair[1].strip()] = getattr(self, lpair[0].strip())
                        result = link_cls_obj.KeywordQuery(**referer_args)
                for obj in result:
                    obj.createAuditTrailEntry()

    def statechangeAuditTrailEntry(self, ctx=None):
        global config
        if not config:
            setConfig()

        clsname = self.GetClassname()
        if clsname in config:
            status_attrib = 'cdb_status_txt'
            # Documents are handled differently then the rest of the entities
            if clsname in ('document', 'model'):
                status_attrib = 'z_status_txt'
            audittrail = self.createAuditTrail('status_change')
            self.createAuditTrailDetail(audittrail_object_id=audittrail.audittrail_object_id,
                                        clsname=clsname,
                                        attribute=status_attrib,
                                        old_value=ctx.old[status_attrib],
                                        new_value=ctx.new[status_attrib])

    def deleteAuditTrailEntry(self, ctx=None):
        self.createAuditTrail('delete')

    def keepAuditTrailAttributes(self, ctx=None):
        global config
        if not config:
            setConfig()

        if ctx and ctx.dialog:
            clsname = self.GetClassname()
            obj_attributes = ctx.object.get_attribute_names()
            obj_longtext = self.GetTextFieldNames()
            for attribute in ctx.dialog.get_attribute_names():
                if attribute not in config[clsname]["fields"].keys():
                    continue
                if attribute in obj_attributes:
                    if attribute in obj_longtext:
                        longtext = self.GetText(attribute)
                        if ctx.dialog[attribute] != longtext:
                            ctx.keep("auditlong_%s" % attribute, longtext)
                    elif ctx.dialog[attribute] != ctx.object[attribute]:
                        ctx.keep("audit_%s" % attribute, ctx.object[attribute])

    def modifyAuditTrailEntry(self, ctx=None):
        global config
        if not config:
            setConfig()
        clsname = self.GetClassname()
        if clsname not in config:
            return None

        audittrial_attributes = [re.sub('^audit_', '', attribute)
                                 for attribute in ctx.ue_args.get_attribute_names()
                                 if attribute.startswith("audit_")]
        audittrail_longtext = [re.sub('^auditlong_', '', attribute)
                               for attribute in ctx.ue_args.get_attribute_names()
                               if attribute.startswith("auditlong_")]

        if audittrial_attributes or audittrail_longtext:
            audittrail = self.createAuditTrail('modify')

            for attribute in audittrial_attributes:
                if attribute not in config[clsname]["fields"].keys():
                    continue
                ov = ctx.ue_args["audit_%s" % attribute]
                nv = self[attribute]
                if is_object_id(ov):
                    ov = ByID(ov)
                    if ov:
                        ov = ov.GetDescription()
                    else:
                        ov = ""
                if is_object_id(nv):
                    nv = ByID(nv)
                    if nv:
                        nv = nv.GetDescription()
                    else:
                        nv = ""
                self.createAuditTrailDetail(audittrail_object_id=audittrail.audittrail_object_id,
                                            clsname=clsname,
                                            attribute=attribute,
                                            old_value=ov,
                                            new_value=nv)
            for longtext in audittrail_longtext:
                if longtext not in config[clsname]["fields"].keys():
                    continue
                old_text = ctx.ue_args["auditlong_%s" % longtext]
                new_text = self.GetText(longtext)
                self.createAuditTrailLongText(audittrail_object_id=audittrail.audittrail_object_id,
                                              clsname=clsname,
                                              longtext=longtext,
                                              old_text=old_text,
                                              new_text=new_text)
            return audittrail
        return None


# Has to be added to Class if you want to track File Events for that class
# from cdb import sig
# from cdb.objects.cdb_file import FILE_EVENT
#
# @sig.connect(FILE_EVENT, MYCLASS.__maps_to__, any)
# def FileEvents(the_file, obj_hndl, ctx):
#     obj = ByID(obj_hndl.getValue('cdb_object_id', False))
#     if obj:
#         type = ""
#         if ctx.action == 'create':
#             type = "create_file"
#         elif ctx.action == 'modify':
#             type = "modify_file"
#         elif ctx.action == 'delete':
#             type = "delete_file"
#
#         if type:
#             audittrail = obj.createAuditTrail(type)
#             self.createAuditTrailDetail(audittrail_object_id=audittrail.audittrail_object_id,
#                                         clsname=MYCLASS.__classname__,
#                                         attribute="",
#                                         old_value="",
#                                         new_value=the_file.cdbf_name)

class AuditTrailApi(object):
    @classmethod
    def createAuditTrails(cls, category, objs):
        """
        Creates AuditTrail entries based on a list of dicts representing the necessary metadata for
        those.

        :param category: Which type of entry is generated e.g. create, modify, etc.
        :param objs: A list of dicts representing the metadata necessary for an AuditTrail entry:

            .. code-block:: python

                    objs = [{"cdb_object_id": "x",
                             "idx": "y",
                             "description": "x/y"
                             "attach_to": ["abced-...", ...], ...]

        :return: objs with additional attribute audittrail_id in the obj dict
        """
        global config
        if not config:
            setConfig()

        # objs should be a list of dicts containing cdb_object_id, index, description and classname
        # eg. objs = [{"cdb_object_id": "x",
        #              "idx": "y",
        #              "description": "x/y",
        #              "classname": "test_class"}, ...]

        DBType = sqlapi.SQLdbms()
        audittrail_inserts = """INSERT INTO cdb_audittrail (audittrail_object_id,
                                    object_description,idx,cdb_cpersno,cdb_cdate,type) """
        audittrail_objects_inserts = "INSERT INTO cdb_audittrail_objects (audittrail_id, object_id) "
        if DBType == sqlapi.DBMS_ORACLE:
            audittrail_inserts += "WITH entries AS ("
            audittrail_objects_inserts += "WITH entries AS ("
        else:
            audittrail_inserts += "VALUES "
            audittrail_objects_inserts += "VALUES "
        create = False
        for obj in objs:
            if obj['classname'] in config:
                uuid = cdbuuid.create_uuid()
                audittrail_insert = """'{uuid}','{obj_desc}','{idx}','{persno}',
                                           {date},'{category}'""".format(
                    uuid=uuid,
                    obj_id=obj['cdb_object_id'],
                    obj_desc=obj['description'],
                    idx=obj['idx'],
                    persno=auth.persno,
                    date=sqlapi.make_literals(datetime.datetime.now()),
                    category=category
                )
                for att in obj["attach_to"]:
                    audittrail_objects_insert = "'{uuid}', '{obj_id}'".format(obj_id=att,
                                                                              uuid=uuid)
                if DBType == sqlapi.DBMS_ORACLE:
                    audittrail_inserts += "SELECT %s FROM dual UNION ALL " % audittrail_insert
                    audittrail_objects_inserts += "SELECT %s FROM dual UNION ALL " % audittrail_objects_insert
                else:
                    audittrail_inserts += "(%s)," % audittrail_insert
                    audittrail_objects_inserts += "(%s)," % audittrail_objects_insert
                create = True
                obj["audittrail_id"] = uuid

        if DBType == sqlapi.DBMS_ORACLE:
            audittrail_inserts = audittrail_inserts[:-10] + ") SELECT * FROM entries"
            audittrail_objects_inserts = audittrail_objects_inserts[:-10] + ") SELECT * FROM entries"
        else:
            audittrail_inserts = audittrail_inserts[:-1]
            audittrail_objects_inserts = audittrail_objects_inserts[:-1]
        if create:
            sqlapi.SQL(audittrail_inserts)
            sqlapi.SQL(audittrail_objects_inserts)
            return objs
        return []

    @classmethod
    def createAuditTrailsWithDetails(cls, category, objs, longtext_stripper=None):
        """
        Creates AuditTrail and AuditTrailDetail entries based on a list of dicts representing the necessary metadata for
        those.

        :param category: Which type of entry is generated e.g. create, modify, etc.
        :param objs: A list of dicts representing the metadata necessary for AuditTrail and AuditTrailDetail entries:
        :param longtext_stripper: When using longtext which include html tags etc. provide a callback function to strip
               those of the preview description (new_value, old_value)

            .. code-block:: python

                    objs = [{"cdb_object_id": "x",
                             "idx": "y",
                             "description": "x/y",
                             "changes": [{"attribute_name": "test_attrib",
                                          "old_value": "a",
                                          "new_value": "b",
                                          "longtext": 1,
                                          "detail_classname": "cdb_audittrail_detail_richtext"},
                                         ...]
                            },
                            ...]

            attribute_name is a mandatory entry when including changes
        :return: Original list of objects

        """
        global config
        if not config:
            setConfig()
        attr_length = getattr(AuditTrailDetail, "old_value").length
        new_audittrails = AuditTrailApi.createAuditTrails(category, objs)
        longtexts = []
        # objs should be a list of dicts containing cdb_object_id, index, description,
        # classname and a list of changes in a dict with attribute_name, new and old value
        # eg. objs = [{"cdb_object_id": "x",
        #              "idx": "y",
        #              "description": "x/y",
        #              "changes": [{ "attribute_name": "test_attrib",
        #                            "old_value": "a",
        #                            "new_Value": "b"
        #                          }, ...],
        #             {"cdb_object_id": "a", ...
        #             }, ...]

        DBType = sqlapi.SQLdbms()
        audittrail_inserts = """INSERT INTO cdb_audittrail_detail (detail_object_id,audittrail_object_id,
                                    attribute_name,old_value,new_value, label_de, label_en, cdb_classname) """
        if DBType == sqlapi.DBMS_ORACLE:
            audittrail_inserts += "WITH entries AS ("
        else:
            audittrail_inserts += "VALUES "
        create = False
        for obj in new_audittrails:
            if obj['classname'] in config and "changes" in obj:
                for change in obj['changes']:
                    if change['attribute_name'] in config[obj['classname']]["fields"].keys():
                        detail_uuid = cdbuuid.create_uuid()
                        detail_clsname = 'cdb_audittrail_detail'

                        old_value = ""
                        if 'old_value' in change and change['old_value']:
                            old_value = str(change['old_value'])
                            if len(old_value) > attr_length:
                                old_value = old_value[:attr_length - 3] + "..."
                        new_value = ""
                        if 'new_value' in change and change['new_value']:
                            new_value = str(change['new_value'])
                            if len(new_value) > attr_length:
                                new_value = new_value[:attr_length - 3] + "..."

                        longtext = False
                        if 'longtext' in change and change['longtext'] == 1:
                            longtext = True
                            detail_clsname = 'cdb_audittrail_detail_longtext'
                            if 'detail_classname' in change:
                                detail_clsname = change['detail_classname']
                            if longtext_stripper:
                                if new_value:
                                    new_value = longtext_stripper(new_value)
                                if old_value:
                                    old_value = longtext_stripper(old_value)

                        audittrail_insert = """'{uuid}','{audittrail_id}','{attribute_name}','{old_value}',
                                                    '{new_value}','{label_de}','{label_en}','{detail_classname}'""".format(
                            uuid=detail_uuid,
                            audittrail_id=obj['audittrail_id'],
                            attribute_name=change['attribute_name'],
                            old_value=old_value,
                            new_value=new_value,
                            label_de=config[obj['classname']]["fields"][change['attribute_name']]["de"],
                            label_en=config[obj['classname']]["fields"][change['attribute_name']]["en"],
                            detail_classname=detail_clsname
                        )
                        object_insert = "'{uuid}', 'cdb_audittrail_detail'".format(uuid=detail_uuid)
                        if DBType == sqlapi.DBMS_ORACLE:
                            audittrail_inserts += "SELECT %s FROM dual UNION ALL "
                        else:
                            audittrail_inserts += "(%s)," % audittrail_insert
                        create = True
                        if longtext:
                            if old_value:
                                longtexts.append({"textfield": "cdb_audittrail_longtext_old",
                                                  "detail_object_id": detail_uuid,
                                                  "text": change['old_value']})
                            if new_value:
                                longtexts.append({"textfield": "cdb_audittrail_longtext_new",
                                                  "detail_object_id": detail_uuid,
                                                  "text": change['new_value']})

        if DBType == sqlapi.DBMS_ORACLE:
            audittrail_inserts = audittrail_inserts[:-10] + ") SELECT * FROM entries"
        else:
            audittrail_inserts = audittrail_inserts[:-1]
        if create:
            sqlapi.SQL(audittrail_inserts)
            if longtexts:
                for lt in longtexts:
                    util.text_write(lt["textfield"],
                                    ["detail_object_id"],
                                    [lt["detail_object_id"]],
                                    lt["text"])

    @classmethod
    def getChangedObjectIDs(cls, root_object_id, start=None, end=None, query="", with_create=False):
        """
        Returns a list of cdb_object_id and classname tuples which meet the entered criterion

        :param root_object_id: The cdb_object_id of the object on which a search shall be triggered.
        :param start: Commencement of a period
        :param end: End of a period
        :param query: Further SQL queries to refine the search e.g. idx > 0 to capture only index levels greater than 0
        :param with_create: True if "create" entries shall also be considered
        :return: Dict of elements which match the entered criterion

        """
        root_obj = ByID(root_object_id)
        result = {}
        if root_obj:
            objs = root_obj.getAuditTrailEntries()
            objs[root_object_id] = root_obj.getClassname()
            audittrail_objects = AuditTrailObjects.KeywordQuery(object_id=objs.keys())
            av_query = "type_en != 'Create'" if not with_create else "1=1"
            if query:
                av_query += " AND ( " + query + " ) AND audittrail_object_id IN ('%s')" % "','".join(audittrail_objects.audittrail_id)
            else:
                av_query += " AND audittrail_object_id IN ('%s')" % "','".join(audittrail_objects.audittrail_id)
            if start:
                av_query += " AND cdb_cdate >= %s" % sqlapi.make_literals(start)
            if end:
                av_query += " AND cdb_cdate <= %s" % sqlapi.make_literals(end)
            result_av_objs = AuditTrailView.Query(av_query)

            for obj in result_av_objs:
                result[obj.object_id] = objs[obj.object_id]
        return result

    @classmethod
    def getChangedObjects(cls, root_object_id, start=None, end=None, query="", with_create=False):
        """
        Returns a list of Objects which meet the entered criterion

        :param root_object_id: The cdb_object_id of the object on which a search shall be triggered.
        :param start: Commencement of a period
        :param end: End of a period
        :param query: Further SQL queries to refine the search e.g. idx > 0 to capture only index levels greater than 0
        :param with_create: True if "create" entries shall also be considered
        :return: List of objects which match the entered criterion

        """
        root_obj = ByID(root_object_id)
        obj_ids = AuditTrailApi.getChangedObjectIDs(root_object_id, start=start, end=end, query=query, with_create=with_create)
        result = []
        cls_dict = {}
        for obj_id, classname in obj_ids.iteritems():
            if classname in cls_dict:
                cls_dict[classname].append(obj_id)
            else:
                cls_dict[classname] = [obj_id]
        for classname, obj_ids in cls_dict.iteritems():
            cls_entity = ClassRegistry().find(entities.Entity.ByKeys(classname=classname).getTableName())
            for obj in cls_entity.Query("cdb_object_id in ('%s')" % "','".join(obj_ids)):
                if obj.CheckAccess("read"):
                    result.append(obj)
        return result
