#!/usr/bin/env powerscript
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

__revision__ = "$Id: __init__.py 179723 2018-06-28 13:41:24Z ssa $"
from webob.exc import HTTPBadRequest
from cdbwrapc import Operation
from cdb import ElementsError, util
from cdb.objects import ByID
from cdb.objects.core import ClassRegistry
from cs.platform.web.rest import CollectionApp
from cs.platform.web.rest import support
from cs.platform.web.rest.generic.model import ObjectCollection
from cs.platform.web.rest.generic.main import App as GenericApp
from cs.web.components.ui_support.operations import _extract_values, _run_operation, SimpleWebUIArguments
from cs.audittrail import AuditTrailObjects


class AuditTrailApp(GenericApp):
    def __init__(self):
        self.classname = "cdb_audittrail_view"

    def get_object(self, keys):
        cls_obj = ClassRegistry().find(self.classname)
        return support.rest_object(cls_obj, keys=keys)


@CollectionApp.mount(app=AuditTrailApp, path="audittrail")
def _mount_app():
    return AuditTrailApp()


class AuditTrailCollection(ObjectCollection):

    def __init__(self, extra_parameters, rule, object_id):
        self.as_table = extra_parameters.pop("_as_table", None)
        _maxrows = extra_parameters.pop("maxrows", None)
        try:
            self.maxrows = None if _maxrows is None else int(_maxrows)
        except ValueError:
            raise HTTPBadRequest("maxrows must be an integer")
        if self.maxrows is not None and self.maxrows < 1:
            raise HTTPBadRequest("maxrows value must be > 0")
        self.extra_parameters = extra_parameters
        self.rule = rule
        self.object = None
        if object_id:
            self.object = ByID(object_id)
        self._cls_obj = ClassRegistry().find("cdb_audittrail_view")
        self.cls_def = self._cls_obj._getClassDef()
        self.cls_name = self.cls_def.getClassname()

    def query(self):
        if not self.object:
            return []

        return self.object.getAuditTrailEntries()

    @classmethod
    def _path_vars(cls, obj):
        result = {'extra_parameters': obj.extra_parameters,
                  'rule': obj.rule_name,
                  'object_id': obj.object_id}
        return result


@AuditTrailApp.path(path='', model=AuditTrailCollection,
                    variables=AuditTrailCollection._path_vars)
def _get_audittrail_collection(extra_parameters, rule=''):
    object_id = extra_parameters.pop('object_id', None)
    return AuditTrailCollection(extra_parameters, rule, object_id)


@AuditTrailApp.json(model=AuditTrailCollection, request_method='GET')
def _run_search_operation(model, request):
    try:
        op = None
        values = {}
        if model.object:
            audittrail_objects = AuditTrailObjects.KeywordQuery(object_id=model.object.cdb_object_id)
            if audittrail_objects:
                if len(audittrail_objects) > 500:
                    for parts in partition(audittrail_objects.audittrail_id, 500):
                        values["cdb_audittrail_view.audittrail_object_id"] = ' or '.join(parts)
                        op = Operation('CDB_Search', 'cdb_audittrail_view',
                                       SimpleWebUIArguments(**values))
                        h = _run_operation(request, op)
                        if not details:
                            details = h
                        else:
                            details["rows"].extend(h["rows"])
                else:
                    values["cdb_audittrail_view.audittrail_object_id"] = ' or '.join(audittrail_objects.audittrail_id)
                    op = Operation('CDB_Search', 'cdb_audittrail_view', SimpleWebUIArguments(**values))
                    details = _run_operation(request, op)
            else:
                values["cdb_audittrail_view.audittrail_object_id"] = model.object.cdb_object_id
                op = Operation('CDB_Search', 'cdb_audittrail_view', SimpleWebUIArguments(**values))
                details = _run_operation(request, op)
            details["no_of_records_label"] = util.get_label("pccl_hits") % len(details["rows"])
            return details
        return []
    except ElementsError, exc:
        @request.after
        def set_status(response):
            response.status_code = 403

        result = op.getOperationResult() if op else {}
        result['message'] = '%s' % exc
        return result


def partition(l, n):
    for i in range(0, len(l), n):
        yield l[i:i + n]
