/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: AuditTrailTableConfig.jsx 181902 2018-08-09 10:00:26Z ssa $"
 */

import Immutable from 'immutable';
import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {Table, Button} from 'cs-web-components-base';
import {formatStr} from '../i18n';
import selectable from './selectable';
import tableToTree from './table_to_tree';

/**
 * Component build after the FACC pattern that build a table configuration
 * suitable as prop for TableWrapper
 */
export default class AuditTrailTableConfig extends React.Component {
    constructor(props) {
        super(props);
        this.tableConfig = this.makeTableConfig(props);
        this.getTableConfig = this.getTableConfig.bind(this);
    }

    makeTableConfig() {
        const {Manager, Scrolled, ContentBlockLayout, filterable, treeview,
               sortable, groupable, column_aggregator, SettingPanels,
               columnResizer, columnOrderer, columnDragger, columnHider, columnFixer} = Table;
        const toolbarButtons = [sortable, filterable, treeview, SettingPanels];
        toolbarButtons.push({toolbarButtons: [() => {
            return (
                <Button.IconButton
                  onClick={this.props.refreshTable}
                  buttonStyle="info"
                  iconName="csweb_refresh"
                  title={formatStr('refresh')}/>
            );
        }]});
        return Manager({
            Table: Scrolled(Table.Table),
            Layout: ContentBlockLayout,
            providers: [tableToTree, filterable, treeview, sortable,
                selectable, groupable, column_aggregator,
                SettingPanels
            ],
            columnActions: [sortable, filterable, columnOrderer,
                selectable, columnResizer, columnDragger],
            toolbarButtons: toolbarButtons,
            headerPanels: [groupable],
            footerPanels: [sortable, filterable],
            settingPanels: [columnHider, groupable, sortable,
                columnOrderer, columnFixer]
        });
    }

    componentWillReceiveProps(nextProps) {
        const propNames = [
            "contextObject", "relshipName", "selectionName", "refreshTable",
            "hideTableHeaderPanels", "height", "asTree", "tableLayout"
        ];
        if (propNames.some(
                propName => nextProps[propName] !== this.props[propName])) {
            this.makeTableConfig(nextProps);
        }
    }

    getTableConfig() {
        return this.tableConfig;
    }

    render() {
        return this.props.children(this.getTableConfig);
    }
}
AuditTrailTableConfig.propTypes = {
    contextObject: PropTypes.instanceOf(Immutable.Map),
    relshipName: PropTypes.string.isRequired,
    selectionName: PropTypes.string.isRequired,
    refreshTable: PropTypes.func,
    height: PropTypes.string.isRequired,
    hideTableHeaderPanels: PropTypes.bool,
    tableLayout: PropTypes.func,
    asTree: PropTypes.bool,
};

AuditTrailTableConfig.defaultProps = {
    hideTableHeaderPanels: false,
    asTree: true
};
