 /*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: AuditTrailRelshipTable.jsx 181644 2018-08-03 12:02:09Z ssa $"
 */

import React from 'react';
import {SplitLayout, ObjectWidgets} from 'cs-web-components-base';
import AuditTrailSelectionHelper from './AuditTrailSelectionHelper';
import AuditTrailTableConfig from './AuditTrailTableConfig';
import AuditTrailFetcher from './AuditTrailFetcher';
import Detail from './Detail';
import {prefixNS} from '../helpers.js';


export default class AuditTrailRelationshipTable extends ObjectWidgets.RelationshipTable {
    constructor(props) {
        super(props);
        this.state = {detail1: {id: "", desc: ""},
            detail2: {id: "", desc: ""},
            width: 0};

        this.onSelect = this._onSelect.bind(this);
    }

    _onSelect(selected) {
        if (selected && selected.length > 0) {
            const detail1 = selected[0];

            const detail1_id = detail1[2];
            if (detail1_id) {
                const detail1_desc = detail1[3];
                const o1 = detail1[4];
                const n1 = detail1[5];
                if (selected.length === 1 && detail1[1]) {
                    this.setState({detail1: {id: detail1_id, desc: detail1_desc, old: o1, new: n1},
                        detail2: {id: "", desc: "", old: "", new: ""},
                        width: 400});
                    return;
                }
                else if (selected.length === 2) {
                    const detail2 = selected[1];
                    const detail2_id = detail2[2];
                    if (detail2_id && detail2[1]) {
                        const detail2_desc = detail2[3];
                        const o2 = detail2[4];
                        const n2 = detail2[5];
                        this.setState({detail1: {id: detail1_id,
                            desc: detail1_desc,
                            old: o1,
                            new: n1},
                            detail2: {id: detail2_id,
                                desc: detail2_desc,
                                old: o2,
                                new: n2},
                            width: 400});
                        return;
                    }
                    else if (detail1[1]) {
                        this.setState({detail1: {id: detail1_id,
                            desc: detail1_desc,
                            old: o1,
                            new: n1},
                            detail2: {id: "",
                                desc: "",
                                short: "",
                                old: "",
                                new: ""},
                            width: 400});
                        return;
                    }
                }
            }
        }
        this.setState({detail1: {id: "",
            desc: "",
            old: "",
            new: ""},
            detail2: {id: "",
                desc: "",
                old: "",
                new: ""},
            width: 0.1});

    }

    render() {
        const {
            contextObject, relshipName, tableName, height,
            hideTableHeaderPanels, asTree, tableLayout
        } = this.props;
        return (
            <SplitLayout defaultSize={this.state.width}
                                 minSize={0}
                                 maxSize={-21}
                                 primary="second"
                                 className={prefixNS('split-layout')}
                                 style={{position: "static"}}>
                <AuditTrailFetcher
                        instanceName={this.instanceName}
                        contextObject={contextObject}
                        relshipName={relshipName}
                        tableName={tableName}
                        active={this.state.expanded}>
                    {(tableDef, rowValues, refreshTable, searchAgainOp) => (
                        <AuditTrailTableConfig
                                contextObject={contextObject}
                                relshipName={relshipName}
                                selectionName={this.selectionName}
                                refreshTable={refreshTable}
                                height={height}
                                hideTableHeaderPanels={hideTableHeaderPanels}
                                tableLayout={tableLayout}
                                asTree={asTree}>
                            {tableConfig => (
                                <AuditTrailSelectionHelper
                                        rows={rowValues}
                                        selectionName={this.selectionName}
                                        onSelect={this.onSelect}>
                                    {onSelectionChanged => this.renderTable(
                                        tableDef, rowValues, tableConfig,
                                        onSelectionChanged, searchAgainOp
                                    )}
                                </AuditTrailSelectionHelper>
                            )}
                        </AuditTrailTableConfig>
                    )}
                </AuditTrailFetcher>
                 <div className={prefixNS('detail')}>
                    <Detail detail1={this.state.detail1}
                            detail2={this.state.detail2}
                    />
                </div>
            </SplitLayout>
        );
    }
}

AuditTrailRelationshipTable.defaultProps = {
    expanded: false,
    hideTableHeaderPanels: false,
    collapsible: true,
    asTree: true,
    singleSelection: false
};
