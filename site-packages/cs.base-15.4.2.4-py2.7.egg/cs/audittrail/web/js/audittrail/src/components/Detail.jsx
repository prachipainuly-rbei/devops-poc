/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Detail.jsx 181644 2018-08-03 12:02:09Z ssa $"
 */

import React, {Component} from 'react';
import Immutable from 'immutable';
import {PropTypes, connect} from 'cs-web-components-externals';
import {ContentBlock, fetchObject, getPlugin} from 'cs-web-components-base';
import {formatStr} from '../i18n';
import {prefixNS} from '../helpers';
import DiffText from './Diff';


class Detail extends Component {
    constructor(props) {
        super(props);
        this.requestPromise = null;
        this.state = {error: null,
            detail1: undefined,
            detail2: undefined,
            desc_detail1: "",
            desc_detail2: ""};
    }


    componentDidMount() {
        const {detail1, detail2} = this.props;
        if (detail1.id) {
            this.getDetail(detail1, "detail1");
        }
        if (detail2.id) {
            this.getDetail(detail2, "detail2");
        }
    }

    componentWillReceiveProps(nextProps) {
        const {detail1, detail2} = nextProps;
        if (this.props.detail1.id !== detail1.id) {
            if (detail1.id) {
                this.getDetail(detail1, "detail1");
            }
            else {
                this.setState({detail1: undefined,
                    desc_detail1: ""});
            }
        }
        if (this.props.detail2.id !== detail2.id) {
            if (detail2.id) {
                this.getDetail(detail2, "detail2");
            }
            else {
                this.setState({detail2: undefined,
                    desc_detail2: ""});
            }
        }
    }

    getDetail(detail, detail_name) {
        const desc_name = "desc_" + detail_name;
        const url = '/api/v1/collection/audittrail_detail/';
        const obj = this.props.getObjectById(url + detail.id);
        if (obj === undefined) {
            this.props.fetchObject(url + detail.id).then((data) => {
                const newState = {};
                newState[detail_name] = Immutable.fromJS(data);
                newState[desc_name] = detail.desc;
                this.setState(newState);
            });
        }
        else {
            const newState = {};
            newState[detail_name] = obj;
            newState[desc_name] = detail.desc;
            this.setState(newState);
        }
    }

    render() {
        let text_old = "";
        let text_new = "";
        let plugin = "";

        if (this.state.detail1 && !this.state.detail2) {
            if (this.state.detail1.get("system:classname") === "cdb_audittrail_detail") {
                text_old = this.props.detail1.old;
                text_new = this.props.detail1.new;
            }
            else {
                text_old = this.state.detail1.get("cdb_audittrail_longtext_old");
                text_new = this.state.detail1.get("cdb_audittrail_longtext_new");
                plugin = "detail1";
            }
        }
        else if (this.state.detail1 && this.state.detail2) {
            if (this.state.detail1.get("system:classname") === "cdb_audittrail_detail") {
                text_old = this.props.detail1.old;
            }
            else {
                text_old = this.state.detail1.get("cdb_audittrail_longtext_old");
                plugin = "detail1";
            }
            if (!text_old) {
                if (this.state.detail1.get("system:classname") === "cdb_audittrail_detail") {
                    text_old = this.props.detail1.new;
                }
                else {
                    text_old = this.state.detail1.get("cdb_audittrail_longtext_new");
                    plugin = "detail1";
                }
            }
            if (this.state.detail2.get("system:classname") === "cdb_audittrail_detail") {
                text_new = this.props.detail2.new;
            }
            else {
                text_new = this.state.detail2.get("cdb_audittrail_longtext_new");
                plugin = "detail2";
            }
        }

        let diffComponent = DiffText;
        if (plugin) {
            diffComponent = getPlugin('cs-audittrail-detail',
                                       cn => cn === this.state[plugin].get("system:classname"),
                                       DiffText);
        }
        return (
            <ContentBlock collapsible={false}
                          title={formatStr('detail')}
                          className={prefixNS('content')}>
                <ContentBlock.Body>
                    {(!this.state.detail1) ?
                        <div>{formatStr('select_entry')}</div> :
                        <div>
                            <div className={prefixNS('description')}>
                                <dl className='dl-horizontal'>
                                    <dt className='text-muted'>
                                        {formatStr('source')}
                                    </dt>
                                    <dd>
                                        {this.state.desc_detail1}
                                    </dd>
                                    {(!this.state.detail2) ?
                                        <div>
                                            <dt className='text-muted'>
                                                {formatStr('target')}
                                            </dt>
                                            <dd>
                                                {this.state.desc_detail1}
                                            </dd>
                                        </div> :
                                        <div>
                                            <dt className='text-muted'>
                                                {formatStr('target')}
                                            </dt>
                                            <dd>
                                                {this.state.desc_detail2}
                                            </dd>
                                        </div>}
                                </dl>
                            </div>
                            <div className={prefixNS('compare')}>
                                {React.createElement(diffComponent, {old: text_old,
                                    new: text_new})}
                            </div>
                        </div>}
                </ContentBlock.Body>
            </ContentBlock>
        );
    }
}

Detail.propTypes = {
    fetchObject: PropTypes.func.isRequired,
    getObjectById: PropTypes.func,
    detail1: PropTypes.object,
    detail2: PropTypes.object
};

function mapStateToProps(state) {
    return {
        getObjectById: object_link => state.objectsById.get(object_link),
    };
}


const actions = {fetchObject};

export default connect(mapStateToProps, actions)(Detail);
