# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_audittrail.py 179619 2018-06-27 08:30:46Z ssa $"
from cdb import constants
from cdb import sqlapi
from cdb.objects.operations import operation
from cdb.validationkit.op import operation as interactive_operation
from cdb.testcase import RollbackTestCase

from cdb.objects import org
from cs.audittrail import WithAuditTrail, AuditTrailConfig, AuditTrailConfigField,\
                          AuditTrail, AuditTrailView, AuditTrailObjects


class TestAuditTrail(RollbackTestCase):
    class tOrganization(org.Organization, WithAuditTrail):
        pass

    def setUp(self):
        """
        Set up the test case
        """
        # NEVER!!! raise after initializing the transaction context of
        # RollbackTestCase
        super(TestAuditTrail, self).setUp()
        self.audittrail_config = operation(constants.kOperationNew,
                                           AuditTrailConfig,
                                           name=u'ORG TEST CONFIG',
                                           classname=u'cdb_organization')
        self.audittrail_config_field = operation(constants.kOperationNew,
                                                 AuditTrailConfigField,
                                                 config_name=self.audittrail_config.name,
                                                 classname=self.audittrail_config.classname,
                                                 field_name=u'name')

    def test_create_org(self):
        user_input = {"name": u"TEST ORG"}
        preset = {}
        contact = self.tOrganization.KeywordQuery(name=u"CONTACT Software")[0]
        result = interactive_operation("CDB_Copy", contact, user_input, preset)
        org_object_id = result.cdb_object_id
        audittrailobjects = AuditTrailObjects.KeywordQuery(object_id=org_object_id)
        self.assertTrue(audittrailobjects)
        audittrail = AuditTrail.KeywordQuery(audittrail_object_id=audittrailobjects[-1].audittrail_id,
                                             type=u"create")
        self.assertTrue(audittrail)

    def test_modify_org(self):
        user_input = {"name": u"TEST ORG"}
        preset = {}
        contact = self.tOrganization.KeywordQuery(name=u"CONTACT Software")[0]
        interactive_operation("CDB_Modify", contact, user_input, preset)
        audittrailobjects = AuditTrailObjects.KeywordQuery(object_id=contact.cdb_object_id)
        self.assertTrue(audittrailobjects)
        audittrail_detail = AuditTrailView.KeywordQuery(audittrail_object_id=audittrailobjects[-1].audittrail_id,
                                                        old_value=u"CONTACT Software",
                                                        new_value=u"TEST ORG")
        self.assertTrue(audittrail_detail)

    def test_delete_org(self):
        user_input = {"name": u"TEST ORG"}
        preset = {}
        contact = self.tOrganization.KeywordQuery(name=u"CONTACT Software")[0]
        result = interactive_operation("CDB_Copy", contact, user_input, preset)
        org_object_id = result.cdb_object_id
        user_input = {}
        interactive_operation("CDB_Delete", result, user_input, preset)
        audittrailobjects = AuditTrailObjects.KeywordQuery(object_id=org_object_id)
        self.assertTrue(audittrailobjects)
        audittrail = AuditTrail.KeywordQuery(audittrail_object_id=audittrailobjects[-1].audittrail_id,
                                             type=u"delete")
        self.assertFalse(audittrail)
