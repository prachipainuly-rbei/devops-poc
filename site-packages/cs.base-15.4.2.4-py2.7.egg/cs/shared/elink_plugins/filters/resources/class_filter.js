/**
 * Class Filters
 * @param appContext: the selector of the context element for this
 *                application.
 */
function cdbElinkClassFilter(appContext) {
  // Application Name
  this.appName = 'ClassFilter';
  // Application event namespace
  this.eventNS = '.classfilter.cdbelink';

};

//Inherites elinkBase
cdbElinkClassFilter.prototype = new cdbElinkBase();

/**
 * Switches filter button states and performs the filtering.
 * (Event handler)
 */
cdbElinkClassFilter.prototype.switchFilters = function(event) {
  var target = $(event.currentTarget);
  // Toggles other radio buttons in same group
  var rbs = target.parent('[data-toggle=buttons-radio],'+
                          '[data-elink-filter-group=radio]');
  if (rbs) {
    rbs.find('.elink-filter-on').removeClass('elink-filter-on');
  }
  // switches current button state
  target.toggleClass('elink-filter-on');
  this.filterEntries(target.closest('.filterable'));
};

/**
 * Performs filtering on target container.
 * (Event handler)
 */
cdbElinkClassFilter.prototype.onFilter = function(event) {
  var target = $(event.currentTarget);
  this.filterEntries(target);
}

/**
 * Combines the filter options and performs the filtering.
 * @param parent: container of entries to be filtered
 */
cdbElinkClassFilter.prototype.filterEntries = function(parent) {
  var selector = parent.data('elink-filter-target');
  if (selector == undefined) {
    selector = '[class*=filter-]';
  }
  var toShow = $(selector+':hidden', parent);
  var toHide = $(selector+':visible', parent);
  var toShowCond = new Array();
  var toShowCondStr = '';
  var nestedCount = parent.parent('')
  var showAll = selector;

  /* Radio buttons */
  parent.find('[data-toggle=buttons-radio],'+
              '[data-elink-filter-group=radio]').has(
              '[data-elink-filter]')
    .filter(
      // Ignores nested filters
      function(index) {
        return $(this).closest('.filterable').get(0) === parent.get(0);
        })
    .each(
      function() {
        $(this).find('[data-elink-filter^=filter-].elink-filter-on').each(
          function() {
            var filtername = $(this).data('elink-filter');
            if (filtername == 'filter-all') {
              filtername = showAll;
            } else {
              filtername = '.'+filtername;
            }
            toShowCond.push(filtername);
          }
        );
      });
  toShowCondStr = toShowCond.join('');

  /* Checkboxes */
  toShowCond = new Array();
  var cbs = $('[data-toggle=buttons-checkbox],'+
              '[data-elink-filter-group=checkbox]',
              parent)
            .has('[data-elink-filter]')
            .filter(function(index) {  // Ignores nested filters
                      return $(this).closest('.filterable').get(0) === parent.get(0);});
  // Adds a dummy filter to against the 'all' filter if no checkbox is checked
  if (cbs.length > 0) {
    toShowCond.push(toShowCondStr + '.filterNothing');
  }
  cbs.find('[data-elink-filter^=filter-].elink-filter-on').each(
    function() {
      toShowCond.push(toShowCondStr + '.' + $(this).data('elink-filter'));
    }
  );
  if (toShowCond.length > 0) {
    toShowCondStr = toShowCond.join(',');
  }
  toShow.filter(toShowCondStr).show();
  toHide.not(toShowCondStr).hide();
};

cdbElinkClassFilter.prototype.start = function () {
  this.context.on(
      this.nsEvents('filter'),
      '.filterable',
      this.appEventHandler('onFilter')
      )
    .on(
      this.nsEvents('click'),
      '[data-elink-filter^=filter-]',
      this.appEventHandler('switchFilters')
      );
};

