/**
 * Collapsible Blocks Application
 * @param appContext: the selector of the context element for this
 *                application.
 */
function cdbElinkCollapsibleBlocks(appContext) {
  // Application Name
  this.appName = 'CollapsibleBlocks';
  // Application event namespace
  this.eventNS = '.collapsibleblocks.cdbelink';
  this.ajaxRootURL = cdb.elink.baseURL + 'powerscript/cs.shared.elink_plugins.collapsible_blocks/';
  this.blockSettingID = '';
};

//Inherites elinkBase
cdbElinkCollapsibleBlocks.prototype = new cdbElinkBase();

/**
 * Toggles the collapse buttons.
 * (Event handler, use 'this' to reference the application object,
 *  use 'event.currentTarget' to get the target object.)
 */
cdbElinkCollapsibleBlocks.prototype.toggleCollapse = function(event) {
  var target = $(event.currentTarget);
  var collbtn = target.closest('div.block-container').find(
      'span[data-toggle=collapse][data-target=#'+target.attr('id')+']');
  collbtn.find('i').each(function() {
    $(this).toggleClass($(this).data('elink-toggle-class1')).toggleClass(
        $(this).data('elink-toggle-class2'));
  });
};

/**
 * Activates the reordering of blocks.
 */
cdbElinkCollapsibleBlocks.prototype.initReordering = function() {
  if ($.fn.sortable) {
    var app = this;
    // Caution: only ONE sortable area per plug-in instance expected!
    var target = $('[data-elink-block-sortable]', app.context);
    target.sortable({
      items: '.block-container[data-elink-block-order]',
      handle: '.bg-line, div.block-header div.block-title',
      axis: target.data('elink-block-sortable'),
      update: function(event, ui) {
        if (app.blockSettingID) {
          var orders = [];
          $('.block-container[data-elink-block-order]', target).each(function() {
            orders.push($(this).data('elink-block-order'));
          });
          $.ajax({
            url: app.ajaxRootURL + 'set_blocks_order',
            data: {'order': orders.join(','),
                   'app_id': app.blockSettingID},
            dataType: 'JSON',
            type: 'POST',
            success: function(data) {
              if (data.success=='1') {
               // NOOP
              } else {
                alert(data.message);
              }
            },
            error: function(jqXHR, textStatus, errorThrown) {
              alert(textStatus);
            }
          });
        }
      }
    });
  }
}

/**
 * Saves the collapse/expand settings.
 * (Event handler)
 */
cdbElinkCollapsibleBlocks.prototype.saveExpandSetting = function(event) {
  var app = this;
  var target = $(event.currentTarget);
  var tIn = target.hasClass('in');
  var tDefaultIn = target.hasClass('default-expanded');
  if ((tIn && tDefaultIn) || (!tIn && !tDefaultIn)) {
    // No changes
    return;
  } else {
    target.toggleClass('default-expanded');
  }
  if (app.blockSettingID) {
    var expanded = [];
    $('.block-container[data-elink-block-order]:has(.block-content.collapse.in)',
      app.context).each(function() {
      expanded.push($(this).data('elink-block-order'));
    });
    $.ajax({
      url: app.ajaxRootURL + 'set_blocks_expand',
      data: {'expanded': expanded.join(','),
             'app_id': app.blockSettingID},
      dataType: 'JSON',
      type: 'POST',
      success: function(data) {
        if (data.success=='1') {
         // NOOP
        } else {
          alert(data.message);
        }
      },
      error: function(jqXHR, textStatus, errorThrown) {
        alert(textStatus);
      }
    });
  }
};

cdbElinkCollapsibleBlocks.prototype.start = function() {
  // Activate the drop down menu if needed
  $('div.block-container div.block-header .header-dropdown-actions',
    this.context).has('ul.dropdown-menu li').each(function(){
    $(this).removeClass('hide');
  });

  // Toggles the button appearance
  this.context.on(
      this.nsEvents('show hide'),
      'div.block-content.collapse',
      this.appEventHandler('toggleCollapse'));

  // Collapses blocks by initiation
  $('.block-container.block-collapsible div.block-action [data-toggle]',
      this.context).not('.default-expanded').trigger('click');

  // Binds the event handler to save the collapse settings
  this.context.on(
      this.nsEvents('shown hidden'),
      '.block-content.collapse',
      this.appEventHandler('saveExpandSetting'));

  this.initReordering();
};


