/**
 * Catalog Application
 * @param appContext: the selector of the context element for this
 *                application.
 */
function cdbElinkCatalog(appContext) {
  // Application Name
  this.appName = 'Catalog';
  // Application event namespace
  this.eventNS = '.catalog.cdbelink';
  this.ajaxRootURL = null;
  this.tablePageSize = 10;
  this.pageNo = 1;
  this.mainDataTableConf = {
          'bPaginate': false,
          'bFilter': true,
          'bInfo': false,
          'bSort': true,
          'sDom': '<"hide"f>t',
          'sScrollX': '100%',
          'sScrollY': '1',
          'bScrollCollapse': true};
  this.saveDataTableConf = {
          'bPaginate': false,
          'bLengthChange': false,
          'bFilter': false,
          'bInfo': false,
          'bSort': false,
          'sScrollY': '100',
          'bScrollCollapse': true};
  this.defaultCatalogOptions = {
      plugins: [],
      layout: null,
      mainTableConf: null,
      getData: function() {
        return {};
      },
      selected: function(result, selectedRows) {},
      // default mode: single selection, and one click action is 'select'
      // (the value indicate which button should be clicked automatically after selecting item)
      singleSelect: 'select',
      // default filter mode: local filter
      localFilter: true
  };
  // Currently displayed data & tables
  // Catalog is displayed in modal, so there can be only one catalog
  // loaded.
  this.currentData = {
      mainTable: null,
      saveTable: null,
      fixedColumns: null,
      oriTable: null,
      selected: {},
      currentSearchConditions: '',
      currentPluginConditions: '',
      options: null
  };
  // flag to block further selection actions in single selection mode
  // during handling event
  this.already_selected = false;
};

// inherite elinkBase
cdbElinkCatalog.prototype = new cdbElinkBase();

// init app
cdbElinkCatalog.prototype.start = function() {
  this.context.on(
      this.nsEvents('click'),
      '[data-elink-catalog-id].catalog-button',
      this.appEventHandler('openCatalog')
      );
};

/**
 * Setup the catalog options, save it on the trigger element
 * to avoid repeated loading
 * */
cdbElinkCatalog.prototype.setupCatalog = function(el, options) {
  var catalogOptions = el.data('elink-catalog-options');
  var changed = false;
  if (catalogOptions == undefined) {
    catalogOptions = $.extend({} ,this.defaultCatalogOptions);
    // backwardscompatible
    catalogOptions['multiSelect'] = el.data('elink-catalog-multiselect');
    if (catalogOptions['multiSelect']) {
      catalogOptions['singleSelect'] = false;
    }
    if (el.data('elink-catalog-singleselect') !== undefined) {
      catalogOptions['singleSelect'] = el.data('elink-catalog-singleselect');
    }
    // plugin options
    var plugins = [],
        delayData = false,
        app = this;
    if (options && options.plugins) {
      plugins = options.plugins;
    }
    $.each(plugins, function(idx, pconf) {
      var pname = pconf.name,
          plugin = app.plugins[pname];
      delayData = delayData || (plugin && plugin.delayData);
    });
    catalogOptions['delayData'] = delayData;
    changed = true;
  }
  if (options) {
    catalogOptions = $.extend({}, catalogOptions, options);
    changed = true;
  }
  if (changed) {
    el.data('elink-catalog-options', catalogOptions);
  }
  return catalogOptions;
};

/**
 * Eventhandler: to open the catalog by button click
 * Look for options, load layouts if necessary
 */
cdbElinkCatalog.prototype.openCatalog = function(event) {
  var target = $(event.currentTarget);
  var app = this;
  var catalogOptions = app.setupCatalog(target);
  var cURL = target.data('elink-catalog-url');
  var cID = target.data('elink-catalog-id');
  var data = catalogOptions.getData();
  if (!data['catalog_def_required'] && !catalogOptions.layout) {
    data['catalog_def_required'] = true;
  }
  if (!data['catalog_no_data'] && catalogOptions.delayData) {
    data['catalog_no_data'] = true;
  }
  $.ajax({
    url: cURL,
    data: data,
    async: false,
    type: 'POST',
    dataType: 'html',
    success: function(html) {
      var $html = $(html);
      var newOptions = {};
      if (data['catalog_def_required']) {
        newOptions['layout'] = $html.find('.catalog-layout').first().clone();
        var invCols = [];
        newOptions['layout'].find('.main-table-container table.main-table thead tr.fields').first().find('th').each(
            function(idx, th) {
              if($(th).data('elink-catalog-visible') == undefined) {
                invCols.push(idx);
              }
            });
        newOptions['mainTableConf'] = $.extend({}, app.mainDataTableConf, {
          'aoColumnDefs': [{ 'bVisible': false, 'aTargets': invCols }],
          'bFilter': catalogOptions['localFilter']
        });
        if (catalogOptions['mainTableOnly']) {
          newOptions['layout'].find('.main-table-container').width('100%');
          newOptions['layout'].find('.save-table-container').addClass('hide');
        }
        catalogOptions = app.setupCatalog(target, newOptions);
      }
      app.currentData.options = $.extend({}, catalogOptions, {
        cID: cID,
        cURL: cURL
      });
      app.showCatalog(catalogOptions, $html.find('.catalog-data').first());
    }
  });
};

/**
 * get active plugins for current catalog
 */

cdbElinkCatalog.prototype.callPlugins = function(plugins, handlerName, args) {
  if (!plugins) {
    return;
  }
  var app = this;
  $.each(plugins, function(idx, pconf) {
    var pname = pconf.name,
        plugin = app.plugins[pname];
    if (plugin && plugin[handlerName]) {
      plugin[handlerName].apply(app, [pconf].concat(args));
    }
  });
};

/**
 * pre mask handler
 */
cdbElinkCatalog.prototype.preMaskHandler = function(options, data, mask) {
  var app = this;
  // get ready for showing dialog
  mask.width($('#elink_page_content').width() * 0.9);
  mask.css('margin-left', mask.width() / -2);
  mask.addClass('elink-catalog-plugin');
  var mHeader = options.layout.find('.modal-header');
  if(mHeader.length > 0) {
    mask.find('.modal-header-slot').empty().html(mHeader.html());
  }
  var mFooter = options.layout.find('.modal-footer');
  if(mFooter.length > 0) {
    var maskFooter = mask.find('.modal-footer');
    mFooter.children().each(function() {
      if ($(this).is('[data-elink-common-modal-button]')) {
        var btnFeat = $(this).data('elink-common-modal-button');
        if (btnFeat in options) {
          maskFooter.append($(this).clone());
        }
      } else {
        maskFooter.append($(this).clone());
      }
    });
  }
  var mBody = options.layout.find('.modal-body');
  if(mBody.length > 0) {
    mask.find('.modal-body').empty().html(mBody.html());
  }
  app.currentData.oriTable = data.find('table').clone();
  var _mainTable = app.getMainTable(mask);
  app.wrapCells(_mainTable);
  data.find('table tr').each(function() {
    _mainTable.find('tbody').append(app.wrapCells($(this)).get(0));
  });
  _mainTable.removeClass('hide');
  app.currentData.mainTable = _mainTable.dataTable(options.mainTableConf);
  // NOTE: It's maybe a general error by dataTable.FixedColumns:
  // The oScroll.iBarWidth is doubled calculated as it should be in IE9
  // We just fix it here temporarily
  if ($.browser.msie && parseInt($.browser.version, 10) < 10) {
    app.currentData.mainTable.fnSettings().oScroll.iBarWidth =
      app.currentData.mainTable.fnSettings().oScroll.iBarWidth / 2;
  }
  app.currentData.fixedColumns = new FixedColumns(app.currentData.mainTable, {'iLeftColumns': 1});

  var _saveTable = app.getSaveTable(mask);
  app.currentData.saveTable = _saveTable.dataTable(app.saveDataTableConf);

  app.getPagination(mask).empty().html(data.find('.catalog-pagenator').first().html());

  // Fix layout bug after shown
  mask.one(
    'shown',
    function() {
      var maxH = $('body').height() * 0.9;
      maxH = maxH -
             mask.find('.modal-header').height() -
             mask.find('.modal-footer').height();
      maxH = Math.ceil(maxH);
      mask.find('.modal-body').css('max-height',  maxH);

      var mainCT = mask.find('.modal-body .main-table-container').first();
      // Align the save table
      var mTop = mainCT.find('.dataTables_wrapper').first().height() -
                 mainCT.find('.DTFC_ScrollWrapper').first().height();
      if (mTop > 0) {
        mask.find('.modal-body .save-table-container .table-top').height(mTop);
      }
      // Reset max height of tables before showing scrollbar
      var wrapFooter = mainCT.find('.dataTables_scroll .dataTables_scrollFoot').first();
      var wrapBody = mainCT.find('.dataTables_scroll .dataTables_scrollBody');
      var paginator = mainCT.find('.catalog-pagenator').first();
      maxH = maxH -
             mask.find('.modal-body').outerHeight() +
             mask.find('.modal-body').height() -
             mainCT.outerHeight();
      if (wrapFooter.length) {
        maxH = maxH - wrapFooter.outerHeight();
      }
      if (paginator.length) {
        maxH = maxH - paginator.outerHeight();
      }
      maxH = Math.floor(maxH);
      // IE may have miscalculated the borders etc.
      if ($.browser.msie) {
        maxH = maxH - 10;
        paginator.addClass('iefix');
      }
      app.currentData.mainTable.fnSettings().oScroll.sY = maxH;
      app.currentData.saveTable.fnSettings().oScroll.sY = maxH;


      app.currentData.fixedColumns.fnRedrawLayout();
      // fix the layout bug
      mask.find('table.dataTable.DTFC_Cloned').first().css('margin-left',0).css('border-right', '0px');
      app.currentData.mainTable.fnAdjustColumnSizing();
      app.currentData.saveTable.fnAdjustColumnSizing();

      app.setMainTableHeight();
    }
  );

  // Listen to row selection
  mask.on(
    app.nsEvents('click'),
    'tr[data-elink-cdb_object_id] td.actions',
    app.appEventHandler('selectRow')
  );

  // Listen to filter
  var filterFields = '.main-table-container tfoot input.filter-input';
  if (options.localFilter) {
    mask.on(
        app.nsEvents('keyup'),
        filterFields,
        function() {
          app.currentData.mainTable.fnFilter(
              $(this).val(),
              $(this).closest('tfoot').find('th').index(
                  $(this).closest('th')));
        }
      );
    // Listen to search
    mask.on(
      app.nsEvents('click'),
      '.main-table-container .catalog-full-search .full-search',
      app.appEventHandler('searchAll')
    );
  } else {
    mask.find('.main-table-container .catalog-full-search .full-search').hide();
    mask.on(
        app.nsEvents('keyup'),
        filterFields,
        app.appEventHandler('searchAll')
    );
  }

  // Listen to pagenator
  mask.on(
    app.nsEvents('click'),
    '.pagination li:not(.disabled):not(.active)' +
    '[data-elink-paginator-page]',
    app.appEventHandler('gotoPage')
  );

  // Listen to 1-click selection and click on the target button
  // (usually the 'select' button)
  mask.on(
    app.nsEvents('clickButton'),
    '.main-table-container',
    function(event, btnName) {
      if (btnName == undefined) {
        btnName = app.currentData.options.singleSelect;
      }
      mask.find('[data-elink-common-modal-button=' + btnName + ']').click();
    }
  );

  app.callPlugins(options.plugins, 'pre_mask', [options, data, mask]);
};

/**
 * post mask handler
 */
cdbElinkCatalog.prototype.postMaskHandler = function(options, data, mask) {
  var app = this;
  // clean up
  app.currentData.oriTable = null;
  app.currentData.options = null;
  app.currentData.mainTable.fnDestroy(true);
  app.currentData.saveTable.fnDestroy(true);
  app.currentData.fixedColumns.fnDestroy();
  app.currentData.fixedColumns = null;
  app.currentData.mainTable = null;
  app.currentData.saveTable = null;
  app.currentData.selected = {};
  app.currentData.currentSearchConditions = '';
  app.currentData.currentPluginConditions = '';
  app.callPlugins(options.plugins, 'post_mask', [options, data, mask]);
};

/**
 * select handler
 */
cdbElinkCatalog.prototype.selectHandler = function(mask, event) {
  var app = this,
      options = app.currentData.options;
  app.callPlugins(options.plugins, 'select', [mask, event]);
};

/**
 * cancel handler
 */
cdbElinkCatalog.prototype.cancelHandler = function(mask, event) {
  var app = this,
      options = app.currentData.options;
  app.callPlugins(options.plugins, 'cancel', [mask, event]);
};

/**
 * Show the catalog dialog
 */
cdbElinkCatalog.prototype.showCatalog = function(options, data) {
  var app = this;
  if(options && options.layout) {
    var modalOptions = {
      pre_mask: function(mask) {
        app.preMaskHandler(options, data, mask);
        if(options.pre_mask) {
          options.pre_mask(mask);
        }
      },

      post_mask: function(mask) {
        app.postMaskHandler(options, data, mask)
        if(options.post_mask) {
          options.post_mask(mask);
        }
      },

      select: function(mask, event) {
        app.selectHandler(options, data, mask)
        if(options.selected) {
          options.selected(
              app.getResults(),
              app.currentData.selected);
        }
      },
      cancel: function(mask, event) {
        app.cancelHandler(options, data, mask)
        if(options.cancel) {
          options.cancel(mask, event);
        }
      }
    };
    if (app.currentData.options.resetFields) {
      modalOptions['resetFields'] = function(mask, event) {
        app.currentData.options.resetFields(mask, event);
      }
    }
    cdb.elink.modal(modalOptions);
    app.already_selected = false;
  }
};

cdbElinkCatalog.prototype.getMainTable = function($el) {
  var selector = '.modal-body .main-table-container table.main-table';
  var $tbl = $el.find(selector);
  return $tbl.length ? $tbl : $el.closest('.modal.elink-catalog-plugin').find(selector);
};

cdbElinkCatalog.prototype.getSaveTable = function($el) {
  var selector = '.modal-body .save-table-container table.save-table';
  var $tbl = $el.find(selector);
  return $tbl.length ? $tbl : $el.closest('.modal.elink-catalog-plugin').find(selector);
};

cdbElinkCatalog.prototype.getPagination = function($el) {
  var selector = '.modal-body .main-table-container .catalog-pagenator';
  var $pg = $el.find(selector);
  return $pg.length ? $pg : $el.closest('.modal.elink-catalog-plugin').find(selector);
};


cdbElinkCatalog.prototype.selectRow = function(event) {
  var app = this;
  var target = $(event.currentTarget);
  event.stopPropagation();
  if (app.currentData.mainTable && !app.already_selected) {
    var tr = target.closest('tr[data-elink-cdb_object_id]');
    var rowID, trChanged=0;
    // find out the real row, not the fixed column wrapper one
    rowID = tr.data('elink-cdb_object_id');
    trChanged += app.toggleRow(rowID).length;
    if (rowID in app.currentData.selected) {
      app.removeSelected(rowID);
    } else {
      // single selection?
      if(app.currentData.options.singleSelect) {
        // remove previous selections
        $.each(app.currentData.selected, function(key, value) {
          trChanged += app.toggleRow(key).length;
          app.removeSelected(key);
        });
      }
      app.addSelected(rowID);
    }
    if (trChanged) {
      // trigger one click selection
      if(app.currentData.options.singleSelect) {
        app.already_selected = true;  // handling, block further selections
        $.when(app._toggleRow(tr).delay(100)).then(function() {
          app.currentData.mainTable.trigger(
              'clickButton',
              app.currentData.options.singleSelect);
        });
      } else {
        // update fixed columns also
        app.currentData.fixedColumns._fnGridLayout();
        app.currentData.fixedColumns._fnDraw();
      }
    }
  }
};

//Toggle selected row.
cdbElinkCatalog.prototype.toggleRow = function(rowID) {
  var app = this;
  var $tr = app.currentData.mainTable.$('tr[data-elink-cdb_object_id=' + rowID +']');
  return app._toggleRow($tr);
};

cdbElinkCatalog.prototype._toggleRow = function($tr) {
  return $tr.toggleClass('selected').toggleClass('muted');
};

cdbElinkCatalog.prototype.addSelected = function(rowID) {
  var app = this;
  app.currentData.selected[rowID] = app.currentData.oriTable.find(
      'tr[data-elink-cdb_object_id=' + rowID +']').clone();

  // Show it in save table
  var desc = app.currentData.selected[rowID].find('td').last().html();
  var lastRow = app.currentData.saveTable.$('tr').last();
  var newRow = lastRow.clone();
  lastRow.attr('data-elink-cdb_object_id', rowID);
  lastRow.find('td.desc').html(desc);
  lastRow.find('td.actions .hide').toggleClass('hide');
  app.currentData.saveTable.fnAddTr(newRow[0], true);
};

cdbElinkCatalog.prototype.removeSelected = function(rowID) {
  var app = this;
  if (rowID in app.currentData.selected) {
    delete app.currentData.selected[rowID];
    var sRow = app.currentData.saveTable.$(
          'tr[data-elink-cdb_object_id=' + rowID +']');
    if (sRow.length) {
      app.currentData.saveTable.fnDeleteRow(sRow[0]);
    }
  }
};

// Load page data
cdbElinkCatalog.prototype.loadPage = function(pageNo, data) {
  var app = this;
  data = $.extend({}, app.currentData.options.getData(), data);
  data['page_no'] = pageNo;
  if(data['catalog_search_conditions'] === undefined && app.currentData.currentSearchConditions.length !== 0) {
      data['catalog_search_conditions'] = app.currentData.currentSearchConditions;
  }
  if(data['catalog_plugin_conditions'] === undefined && app.currentData.currentPluginConditions.length !== 0) {
    data['catalog_plugin_conditions'] = app.currentData.currentPluginConditions;
  }
  $.ajax({
    url: app.currentData.options.cURL,
    data: data,
    async: false,
    type: 'POST',
    dataType: 'html',
    success: function(html) {
      var $html = $(html);
      var data = $html.find('.catalog-data')
      app.currentData.oriTable = data.find('table').first().clone();
      app.currentData.mainTable.fnClearTable(false);
      data.find('table tr').each(function() {
        app.currentData.mainTable.fnAddTr(app.wrapCells($(this)).get(0));
      });
      // Check whether there are selected rows
      var changed = 0;
      $.each(app.currentData.selected, function(key, value) {
        changed += app.toggleRow(key).length;
      });
      if (changed) {
        app.currentData.mainTable.fnDraw();
      }
      app.getPagination(app.currentData.mainTable).empty().html(
          data.find('.catalog-pagenator').first().html());
      app.setMainTableHeight();
    }
  });
};

// Change page
cdbElinkCatalog.prototype.gotoPage = function(event) {
  var app = this;
  var pageNo = $(event.currentTarget).data('elink-paginator-page');
  event.preventDefault();
  app.loadPage(pageNo);
};

//Change page
cdbElinkCatalog.prototype.searchAll = function(event) {
  var app = this,
      target = $(event.currentTarget);
  var pageNo = 1,
      searchStr = {},
      data = {};
  event.preventDefault();
  target.closest('.main-table-container').find(
      'tfoot th[data-elink-catalog-attribute]').each(function() {
        var val = $(this).find('input.filter-input').val();
        if (val) {
          searchStr[$(this).data('elink-catalog-attribute')] = val;
        }
      });
  if (searchStr) {
    app.currentData.currentSearchConditions = JSON.stringify(searchStr);
    data['catalog_search_conditions'] = app.currentData.currentSearchConditions;
  }
  app.loadPage(pageNo, data);
};

// Default result handler
cdbElinkCatalog.prototype.getResults = function() {
  var app = this, result = [], tds;
  $.each(app.currentData.selected, function(key, row) {
    var data = {};
    data['cdb_object_id'] = key;
    tds = row.find('td');
    app.getMainTable(
        app.currentData.options.layout).find(
            'thead tr.fields th').each(
                function(thIdx) {
                  var attr = $(this).data('elink-catalog-attribute');
                  if (attr) {
                    data[attr] = {
                      'value': tds.eq(thIdx).data('elink-catalog-value'),
                      'text': tds.eq(thIdx).text()
                    };
                  }
                });
    result.push(data);
  });
  return result;
};

/**
 * IE Bug: table cells do not work with text-overflow
 * So move the content of cell into a <div> tag
 */
cdbElinkCatalog.prototype.wrapCells = function($container) {
  if($.browser.msie) {
    $container.find('th, td').each(function() {
      var wrapDiv = $('<div />').html($(this).html());
      wrapDiv.addClass('cell-wrap');
      wrapDiv.appendTo($(this).empty());
    });
  }
  return $container;
};

cdbElinkCatalog.prototype.setMainTableHeight = function() {
  var $mainTable = $(this.currentData.mainTable);
  if ($mainTable.parent().height() > $mainTable.outerHeight()) {
    $mainTable.parent().height($mainTable.outerHeight());
  }
  var height = $mainTable.parent()[0].clientHeight;
  var $wrapper = $('.DTFC_LeftWrapper > .DTFC_LeftBodyWrapper');
  $wrapper.height(height);
  $wrapper.children().height(height);
};

/**
 * Plug in for responsible catalog
 */
cdbElinkCatalog.prototype.plugins = {
    responsible: {
      delayData: true,  // load data after showing modal (set filter first)
      pre_mask: function(pluginOption, options, data, mask) {
        if (!pluginOption) {
          return;
        }
        var app = this,
            combobox = mask.find('input[name=catalog_role_filter]'),
            roles = pluginOption.roles || [];
        if(combobox) {
          combobox.autocomplete(
            roles,
            {
              minChars:0,
              matchContains:true,
              autoFill:true,
              max: 1000,
              cacheLength: 1,
              appendEl: combobox.parent(),
              emptyItem: '|',
              formatItem: function(row) {
                if (row[0]!=''){
                  return row[0];
                }else {
                  return '-';
                }
              },
              formatResult: function(row) {
                if (row[0]!="-" && row[0]!=""){
                  return row[0];
                }else {
                  return false;
                }
              }
            }
          ).result(function (event, data, formatted) {
            if (data !== undefined) {
              app.currentData.currentPluginConditions = '';
              if (data[1]) {
                app.currentData.currentPluginConditions = JSON.stringify(data[1]);
              }
              app.loadPage(1);  // reload data from page 1
            }
          });
          combobox.siblings('a.btn').click(function(){
            combobox.focus();
            combobox.openDropDown(true);
          });

          // preset role
          if (typeof pluginOption.presetValue == 'function') {
            var value = pluginOption.presetValue();
            if (typeof roles != 'string') {
              combobox.setOptions({
                data: roles
              });
            }
            combobox.val(value);
            combobox.trigger('search');
          }
        }
      }
    }
};
