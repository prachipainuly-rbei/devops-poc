/**
 * Extend dataTables to display a tree view column.
 *
 * In HTML head should be included:
 *
 *  <link href="${options.css}jquery/dataTables.bootstrap.css" rel="stylesheet" type="text/css" />
 *  <link href="${options.css}jquery/dataTables.cdb.css" rel="stylesheet" type="text/css" />
 *  <script src="${options.jscript}jquery/jquery.datatables.min.js" type="text/javascript"></script>
 *  <script src="${options.jscript}jquery/dataTables/jquery.dataTables.bootstrap.js" type="text/javascript"></script>
 *  <script src="${options.jscript}jquery/dataTables/jquery.dataTables.fnAddTr.js" type="text/javascript"></script>
 *  <script src="${options.jscript}jquery/dataTables/jquery.dataTables.fixedColumns.js" type="text/javascript"></script>
 *  <script src="${options.jscript}jquery/dataTables/jquery.dataTables.cdb.elink.tree.js" type="text/javascript"></script>
 *
 *
 * @example:
 * var treeColApp = new cdbElinkDataTablesTree('#table1');
 * treeColApp.ajaxDataURL = cdb.elink.baseURL + 'powerscript/elinktest.app/data3';
 * cdb.elink.addApplication("dataTableTreeCol", treeColApp);
 * cdb.elink.ready(function() {
 *   var treeNodeIndex = 0;
 *   var dTable = $('#table1').dataTable({
 *                    bSort: false,
 *                    'aoColumnDefs': [
 *                        {'asSorting': ['asc'], 'aTargets': [treeNodeIndex] },
 *                        {'sSortDataType': 'elink-datatables-tree-node', 'aTargets': [treeNodeIndex]},
 *                        {'sType': 'elink-datatables-tree-node', 'aTargets': [treeNodeIndex]}],
 *                    sScrollX: "100%",
 *                    sScrollXInner: "150%",
 *                    bScrollCollapse: true,
 *                    sScrollY: "300px",
 *                    bPaginate: false
 *                });
 *   treeColApp.setDataTable(dTable);
 *   treeColApp.dataTableTreeTdIndex = treeNodeIndex;
 *   new FixedColumns(dTable);
 * });
 *
 */

function cdbElinkDataTablesTree(appContext) {
  // Application Name
  this.appName = 'dataTableTreeCol';
  // Application event namespace
  this.eventNS = '.datatabletreecol.cdbelink';

  this.ajaxDataURL = 'data';

  this.dataTable = null;
  // index of td of tree nodes
  this.dataTableTreeTdIndex = 0;
  // dummy divs for indents
  this.dataTableTreeIndent =
    '<div class=\'elink-datatables-tree-indent pull-left\'></div>';
}

//Inherite elinkBase
cdbElinkDataTablesTree.prototype = new cdbElinkBase();

cdbElinkDataTablesTree.prototype.setDataTable = function(dtable) {
  this.dataTable = dtable;
};

cdbElinkDataTablesTree.prototype.checkToggle = function(parent) {
  return true;
};

cdbElinkDataTablesTree.prototype.toggleTreeNode = function(event) {
  event.stopPropagation();
  var target = $(event.currentTarget);
  var app = this;
  var parentID = target.closest('[data-elink-datatables-tree-node]')
                       .data('elink-datatables-tree-node');
  // ensure that we are dealing with the *REAL* dataTable object,
  // and not only the fixed column wrapper
  var parent = app.dataTable.$('[data-elink-datatables-tree-node=' +
                                  parentID + ']').first();
  if (! app.checkToggle(parent)) {
    return;
  }
  parent.find('.elink-datatables-tree-action').toggleClass('hide');
  if (parent.data('elink-datatables-tree-loaded') == 'loaded') {
    app.dataTable.fnDraw();
  } else {
    if (target.is('.expandable') &&
        parent.find(
            '.elink-datatables-tree-action.expandable.hide').length > 0) {
      app.loadData(parent);
    }
  }
};

cdbElinkDataTablesTree.prototype.reloadTreeNode = function(node,reopen){
	var app = this;
	var objID = node.data('elink-datatables-tree-node');
	var obj = app.dataTable.$('[data-elink-datatables-tree-node='+objID+']').first();
	if(obj.data('elink-datatables-tree-loaded')=='loaded'){
		if(obj.children('i.collapible.hide').length==0){
			obj.find('.elink-datatables-tree-action').toggleClass('hide');
		}
		app.deleteTreeNode(node,true);
		obj.data('elink-datatables-tree-loaded','');
	}
	if(reopen){
		obj.children('.elink-datatables-tree-action').first().trigger('click');
	}
};

cdbElinkDataTablesTree.prototype.deleteTreeNode = function(node, only_children){
	var app = this;
	var objID = node.data('elink-datatables-tree-node');
	var obj = app.dataTable.$('[data-elink-datatables-tree-node='+objID+']').first();
	var tr = obj.closest('tr');
	var children = app.getChildrenNodes(node);
	var i;
	for(i=children.length-1;i>=0;i--){
		app._deleteSingleTreeNode(children[i]);
	}
	if(tr && !only_children){
		app.dataTable.fnDeleteRow(tr[0]);
	}
};

cdbElinkDataTablesTree.prototype._deleteSingleTreeNode = function(node){
	var app = this;
	var objID = node.data('elink-datatables-tree-node');
	var obj = app.dataTable.$('[data-elink-datatables-tree-node='+objID+']').first();
	var tr = obj.closest('tr');
	if(tr){
		app.dataTable.fnDeleteRow(tr[0]);
	}
};

cdbElinkDataTablesTree.prototype.getDirectChildrenNodes = function(node){
	var app = this;
	var objID = node.data('elink-datatables-tree-node');
	var obj = app.dataTable.$('[data-elink-datatables-tree-node='+objID+']').first();
	if(obj){
		return app.dataTable.$('[data-elink-datatables-tree-parent='+objID+']');
	} else {
		return null;
	}
};

cdbElinkDataTablesTree.prototype.getChildrenNodes = function(node){
	var app = this;
	var objID = node.data('elink-datatables-tree-node');
	var obj = app.dataTable.$('[data-elink-datatables-tree-node='+objID+']').first();
	var obj_children = [];
	var result_children = [];
	var childObj;
	var childId;
	var childrenCount;
	var child_children;
	var i;
	if(obj){
		obj_children=app.dataTable.$('[data-elink-datatables-tree-parent='+objID+']');
		for(i=0;i<obj_children.length;i++){
			childObj = $(obj_children[i]);
			childId = childObj.data("elink-datatables-tree-node");
			childrenCount=app.dataTable.$('[data-elink-datatables-tree-parent='+childId+']').length;
			result_children.push(childObj);
			if(childrenCount>0){
				child_children = app.getChildrenNodes(childObj);
				result_children = result_children.concat(child_children);
			}
		}
		return result_children;
	} else {
		return null;
	}
};

cdbElinkDataTablesTree.prototype.loadData = function(parent) {
  var app = this;
  var pOrder = '' + parent.data('elink-datatables-tree-order');
  var objID = parent.data('elink-datatables-tree-node');
  var postData = {'parent_id': objID};
  app.getTreeNodeParameters(parent, postData);
  $.ajax({
    url: app.ajaxDataURL,
    data: postData,
    dataType: 'HTML',
    type: 'POST',
    success: function(html) {
      $(html).find('tr').each(function(tridx) {
        var trObj = $(this);
        var newtd = trObj.find('td:eq(' + app.dataTableTreeTdIndex + ')');
        var orderDiv = newtd.find('div[data-elink-datatables-tree-order]')
                            .first();
        if (!orderDiv.data('elink-datatables-tree-order')) {
          // remove value from data cache
          orderDiv.removeData('elink-datatables-tree-order');
          // reset the data attribute to element, not only in data cache
          orderDiv.attr('data-elink-datatables-tree-order',
                        pOrder+'.'+(tridx+1));
          var i;
          for(i=0;i<pOrder.split('.').length;i++) {
            $(app.dataTableTreeIndent).insertBefore(orderDiv);
          }
        }
        parent.removeData('elink-datatables-tree-loaded');
        parent.attr('data-elink-datatables-tree-loaded',
                      'loaded');
        app.dataTable.fnAddTr(trObj[0]);
      });
      app.dataTable.fnSort([[app.dataTableTreeTdIndex, 'asc']]);
      parent.trigger('treenodeloaded');
    },
    error: function(jqXHR, textStatus, errorThrown) {
     cdb.elink.alert(textStatus);
    }
  });
};

/**
 * Gather the parameters for loadData request.
 */
cdbElinkDataTablesTree.prototype.getTreeNodeParameters = function(parent, data) {
  return;
};

cdbElinkDataTablesTree.prototype.start = function() {
  this.context.on(
      this.nsEvents('click'),
      '.elink-datatables-tree-action',
      this.appEventHandler('toggleTreeNode')
  );
};


// Extend dataTables for tree view column
$.fn.dataTableExt.oSort['elink-datatables-tree-node-asc']  = function(a, b) {
  var ao = $('<div />').html(a).find('div[data-elink-datatables-tree-order]').first()
                       .data('elink-datatables-tree-order');
  var bo = $('<div />').html(b).find('div[data-elink-datatables-tree-order]').first()
                       .data('elink-datatables-tree-order');
  ao = ao != undefined ? ''+ao : '';
  bo = bo != undefined ? ''+bo : '';
  var al = ao.split('.');
  var bl = bo.split('.');
  return al == bl ? 0 : (al > bl? 1 : -1);
};

$.fn.dataTableExt.oSort['elink-datatables-tree-node-desc']  = function(a, b) {
  return $.fn.dataTableExt.oSort['elink-datatables-tree-node-asc'](a, b) * -1;
};

$.fn.dataTableExt.afnFiltering.push(
    function(oSettings, aData, iDataIndex) {
        var oTable = oSettings.oInstance;
        var parentID = $('[data-elink-datatables-tree-parent]',
                         oSettings.aoData[iDataIndex].nTr)
                         .first()
                         .data('elink-datatables-tree-parent');
        function _checkNode(parentID) {
          if (!parentID) {
            return true;
          } else {
            var parentNode =
                  oTable.$('[data-elink-datatables-tree-node=' + parentID + ']').first();
            var parentParentID =
                  parentNode.data('elink-datatables-tree-parent');
            return parentNode.find('.elink-datatables-tree-action.expandable')
                             .first()
                             .hasClass('hide') && _checkNode(parentParentID);
          }
        }
        return _checkNode(parentID);
    }
);

