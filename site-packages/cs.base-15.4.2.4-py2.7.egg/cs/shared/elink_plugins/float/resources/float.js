/**
 * Float Application
 * @param appContext: the selector of the context element for this
 *                application.
 */
function cdbElinkFloat(appContext) {
  // Application Name
  this.appName = 'Float';
  // Application event namespace
  this.eventNS = '.float.cdbelink';
  this.ajaxRootURL = cdb.elink.baseURL + 'powerscript/cs.shared.elink_plugins.float.app/';
  this.blockSettingID = '';
}

//Inherites elinkBase
cdbElinkFloat.prototype = new cdbElinkBase();

cdbElinkFloat.prototype.validateInput = function(input, nrDecimals, nonstrict) {
	var regExp = null;
	if(nrDecimals == undefined || ! cdb.elink.decimal_separator){
		nrDecimals=0;
	}
	if (cdb.elink.group_separator) {
	  if (nonstrict) {
	    if (cdb.elink.decimal_separator) {
	      regExp = new RegExp("^(-?)(\\d)*(\\"+cdb.elink.decimal_separator+")?(\\d)+(e-?(\\d)*){1}$|"+
            "^(-?)(\\d{1,3}(\\"+cdb.elink.group_separator+"\\d{3})+|\\d+){1}(\\"+cdb.elink.decimal_separator+"\\d+)?$");
	    }
	  } else {
      if (nrDecimals) {
        regExp = new RegExp("^(-?)(\\d{1,3}(\\"+cdb.elink.group_separator+"\\d{3})*(\\"+cdb.elink.decimal_separator+"\\d{"+nrDecimals+"}))$");
      } else {
        regExp = new RegExp("^(-?)(\\d{1,3})(\\"+cdb.elink.group_separator+"\\d{3})*$");
      }
	  }
	} else {
    if (nonstrict) {
      if (cdb.elink.decimal_separator) {
        regExp = new RegExp("^(-?)(\\d)*(\\"+cdb.elink.decimal_separator+")?(\\d)+(e-?(\\d)*){1}$|^(-?)(\\d)*(\\"+cdb.elink.decimal_separator+")?(\\d)+$");
      }
    } else {
      if (nrDecimals) {
        regExp = new RegExp("^(-?)((\\d)*(\\"+cdb.elink.decimal_separator+"\\d{"+nrDecimals+"}))$");
      } else {
        regExp = new RegExp("^(-?)((\\d)*)$");
      }
    }
	}
	if (regExp === null) {
	  regExp = new RegExp("^(-?)((\\d)*)$|^(-?)(\\d)+(e-?(\\d)*){1}$");
	}
	return regExp.test(input);
};

cdbElinkFloat.prototype.strToFloat = function(input) {
	var regExpGroup;
	var regExpDecimal;
	if(input === undefined){
		return NaN;
	}
	if(cdb.elink.group_separator !== ""){
		regExpGroup = new RegExp("\\"+cdb.elink.group_separator,'g');
		input = input.replace(regExpGroup,'');
	}
	if(cdb.elink.decimal_separator !== ""){
		regExpDecimal =  new RegExp("\\"+cdb.elink.decimal_separator,'g');
		input = input.replace(regExpDecimal,'.');
	}
	return parseFloat(input);
};

cdbElinkFloat.prototype.floatToStr = function(float, nrDecimals) {
	if(typeof(float)=='number'){
		if(nrDecimals === undefined || isNaN(nrDecimals)){
			nrDecimals=0;
		}
		if(nrDecimals <= 100 && nrDecimals >= 0){
			var i;
			var zerofill;
			var terminateAtIndex;
			var str = float.toFixed(nrDecimals);
			var origin_length = str.length;
			var decSepPos = str.search("\\.");
			var exp_value;
			var exp_index = str.indexOf('e');
			//fix decimals
			if(isNaN(float)){
				return "NaN";
			}
			if(float == Infinity){
				return "Inf";
			}
			if(float == -Infinity){
				return "-Inf";
			}
			if(exp_index != -1){
				exp_value = str.substring(exp_index);
				var fval = parseFloat(str.substring(0,exp_index));
				str = fval.toFixed(nrDecimals);
			}
			if (decSepPos != -1){
				str = str.replace(".", cdb.elink.decimal_separator);
				if (str.length-decSepPos-1>nrDecimals){
					if(nrDecimals > 0){
						str = str.slice(0, str.length-((str.length-decSepPos-1)-nrDecimals));
					} else {
						str = str.slice(0, str.length-(str.length-decSepPos));
					}
				}
				else{
					zerofill=(nrDecimals-str.length)+decSepPos+1;
					for (i=0; i<zerofill; i++){
						str = str + "0";
					}
				}
				i = decSepPos-3;
			}else{
				if(nrDecimals > 0){
					str = str + cdb.elink.decimal_separator;
					for (i=0; i<nrDecimals; i++){
						str = str + "0";
					}
				}
				i = origin_length-3;
			}
			//fix group_separator
			if(float < 0){
				terminateAtIndex = 1;
			} else {
				terminateAtIndex = 0;
			}
			while (i>terminateAtIndex)
			{
				str = str.substring(0,i) + cdb.elink.group_separator + str.substring(i,str.length);
				i=i-3;
			}
			if(exp_index != -1){
				return str.concat(exp_value);
			} else {
				return str;
			}
		} else {
			cdb.elink.alert("Elink Float Plugin: Out of precision range. (allowed range: 0-100)");
		}
	} else {
		cdb.elink.alert("Elink Float Plugin: Value is not a valid Float");
	}
};
var cdbFloatPlugin = new cdbElinkFloat();

if($.editable && $.editable.addInputType !== undefined){
	$.editable.addInputType('float', {
		element : function(settings, original) {
		var original_width=$(original).width();
		var original_height=$(original).height();
		var input = $('<input/>');
		$(input).attr('type','text');
		$(input).attr('name','value');
		$(input).attr('autocomplete','off');
		$(input).addClass(settings.cssclass);
		$(input).css('width',original_width);
		$(input).css('height',original_height);
		if(settings.validation === undefined || settings.validation === true){
			$(input).addClass('inputsuccess');
			$(input).on('keyup',function(){
				var check;
				if(settings.strict !== undefined && settings.strict === true){
					check = cdbFloatPlugin.validateInput(this.value,settings.decimals);
				} else {
					check = cdbFloatPlugin.validateInput(this.value,settings.decimals,true);
				}
				if(!check){
					$(this).removeClass('inputsuccess');
					$(this).addClass('inputerror');
				} else {
					$(this).removeClass('inputerror');
					$(this).addClass('inputsuccess');
				}
			});
		}
		$(this).append(input);
		return(input);
		}
	});
}
