#!/usr/bin/env powerscript
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 2015 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 161713 2017-07-14 10:27:29Z gwe $"

from cdbwrapc import PersSettings
from cdb import sqlapi
from cdb import util
from cdb.classbody import classbody
from cdb.objects.org import Person


@classbody
class Person(object):
    def getSettingValue(self, setting_id, default=None):
        """
        Returns the value of this user's personal setting identified by
        `setting_id`. If no personal setting is defined for this user,
        return the default value. If a default is not defined either, return
        `default`.
        """
        try:
            return PersSettings().getValueOrDefaultForUser(
                setting_id, "", default, self.personalnummer)
        except:
            perssetting = sqlapi.RecordSet2(
                "cdb_usr_setting", "setting_id='%s' AND personalnummer='%s'" % (
                    sqlapi.quote(setting_id), sqlapi.quote(self.personalnummer)))
            if perssetting:
                return perssetting[0].value

            roles = ["'%s'" % sqlapi.quote(role) for role in util.get_roles(
                "GlobalContext", "", self.personalnummer)]
            where = "setting_id='%s' AND role_id IN (%s)" % (
                sqlapi.quote(setting_id), ",".join(roles))
            order_by = ("ORDER BY (CASE WHEN role_id='public' THEN 1 ELSE 0 END), "
                        "role_id")  # always resolve public settings last

            setting = sqlapi.RecordSet2("cdb_setting", where, addtl=order_by)
            if setting:
                return setting[0].default_val

            return default

    def email_notification_task(self):
        """
        Resolves the setting `user.email_with_task` for this user. Returns True
        if the setting's value converts to True, and the user's `e_mail`
        attribute is not empty.
        """
        return bool(self.e_mail
                    and "1" == self.getSettingValue("user.email_with_task"))
