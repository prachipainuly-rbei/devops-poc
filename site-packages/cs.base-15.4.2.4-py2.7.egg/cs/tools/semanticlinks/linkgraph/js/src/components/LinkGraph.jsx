/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: LinkGraph.jsx 174640 2018-03-16 12:50:12Z ssa $"
 */

import React from 'react';
import Immutable from 'immutable';
import {Component} from 'react';
import {MenuItem, Popover, OverlayTrigger, Grid, Row, Col, Checkbox, Modal} from 'react-bootstrap';
import {PropTypes, connect, classNames} from 'cs-web-components-externals';
import {fetchObject, getJSON, postJSON, parseQuery, ContentBlock, Button, ButtonGroup,
        Registry, Dialog, isCEDesktop, getPlugin, Throbber} from 'cs-web-components-base';
import {formatStr} from '../i18n.js';
import {prefixNS} from '../helpers';
import Attributes from './Detail.jsx';
import InlineSVG from './InlineSVG.jsx';
const CreateLink = Registry.findComponent('cs-tools-semanticlinks-createLinksApp-CreateLink');
const SplitLayout = Registry.findComponent('cs-web-components-base-SplitLayout');

class CreateLinkDialog extends Dialog.Dialog {
    constructor(props) {
        super(props);
    }

    render() {
        const {title, buttons, onHide, hideFooter, dialogClassName, allowOverlay,
               showCancel, size, sizes, children, ...other} = this.props;
        const classes = classNames([prefixNS('dialog'),
                                    size || sizes.get(this.state.sizeIndex),
                                    {['cs-web-components-base-dialog-allow-overlay']:
                                        allowOverlay}]);
        return (
            <Modal {...other}
                   onHide={onHide}
                   className={classes}
                   backdrop={showCancel || 'static'}
                   keyboard={showCancel}
                   autoFocus={true}
                   dialogClassName={dialogClassName}>
                <Modal.Header>
                    <Modal.Title title={title}>
                        {title}
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                {children}
                </Modal.Body>
                {hideFooter ? null : (
                     <Modal.Footer>
                         <img src='/resources/icons/byname/branding_web_portal_logo_small'
                              name='branding_web_portal_logo' />
                         {buttons}
                     </Modal.Footer>)}
            </Modal>
        );
    }
}

const EmptyDesc = () => (
        <ContentBlock collapsible={false}>
            <ContentBlock.Body>
                {formatStr('selectObject')}
            </ContentBlock.Body>
        </ContentBlock>
);


const NoPreview = () => {
    return (
        <div/>
    );
};

class LinkGraph extends Component {
    constructor(props) {
        super(props);
        const linkfilters = {};
        const namespace = window.appSetup[`${componentNameSpace}`];
        for (let i = 0; i < namespace.link_types.length; i++) {
            if (namespace.link_types[i].includes('Contains')) {
                namespace.link_types[i].split(' / ').forEach(f => {
                    linkfilters[f] = 0;
                });
            }
            else {
                namespace.link_types[i].split(' / ').forEach(f => {
                    linkfilters[f] = 1;
                });
            }
        }
        const objectfilters = {};
        for (let i = 0; i < namespace.classnames.length; i++) {
            objectfilters[namespace.classnames[i][0]] = [1, namespace.classnames[i][1]];
        }

        this.config_id = parseQuery(location).config_id;
        this.state = {root: parseQuery(location).root,
                      root_desc: '',
                      svg: undefined,
                      active_object: undefined,
                      cdbwin_link: '',
                      maylink: false,
                      radius: 1,
                      linkfilters: linkfilters,
                      objectfilters: objectfilters,
                      obsolete: 0,
                      showModal: false,
                      descComponent: EmptyDesc,
                      settings: false,
                      width: 800,
                      loading: false};
        this.changeRadius = this._changeRadius.bind(this);
        this.refreshSVG = this._refreshSVG.bind(this);
        this.handleObjectSelect = this._handleObjectSelect.bind(this);
        this.newRoot = this._newRoot.bind(this);
        this.openFilterOverlay = this._openFilterOverlay.bind(this);
        this.toggleObjectFilter = this._toggleObjectFilter.bind(this);
        this.toggleLinkFilter = this._toggleLinkFilter.bind(this);
        this.toggleObsoleteFilter = this._toggleObsoleteFilter.bind(this);
        this.constructFilter = this._constructFilter.bind(this);
        this.savetoCDB = this._savetoCDB.bind(this);
        this.openDialog = this._openDialog.bind(this);
        this.closeDialog = this._closeDialog.bind(this);
        this.getSettings = this._getSettings.bind(this);
        this.setSettings = this._setSettings.bind(this);
        this.setTableSettings = this._setTableSettings.bind(this);
        this.getSettings();
    }

    componentDidUpdate(prevProps, prevState) {
        if (!prevState.settings && this.state.settings) {
            this.refreshSVG(this.state.radius);
        }
    }

    _getSettings() {
        const url = '/internal//cs-tools-semanticlinks-linkgraph/settings/' +
            parseQuery(location).config_id;
        getJSON(url).then((data) => {
            if (data.settings) {
                const settings = data.settings;
                if (settings.linkfilters && settings.objectfilters &&
                    settings.obsolete && settings.radius) {

                    this.setState({linkfilters: Object.assign(this.state.linkfilters,
                                                              JSON.parse(settings.linkfilters)),
                                   objectfilters: Object.assign(this.state.objectfilters,
                                                                JSON.parse(settings.objectfilters)),
                                   obsolete: JSON.parse(settings.obsolete),
                                   radius: JSON.parse(settings.radius),
                                   width: JSON.parse(settings.width),
                                   settings: true});
                }
                else {
                    this.refreshSVG(this.state.radius);
                }
            }

        });
    }

    _setSettings(radius) {
        const url = '/internal//cs-tools-semanticlinks-linkgraph/settings/' +
            parseQuery(location).config_id;
        const jsonData = {'linkfilters': JSON.stringify(this.state.linkfilters),
                          'objectfilters': JSON.stringify(this.state.objectfilters),
                          'obsolete': JSON.stringify(this.state.obsolete),
                          'radius': JSON.stringify(radius),
                          'width': JSON.stringify(this.state.width)
                         };
        postJSON(url, jsonData);
        this.refreshSVG(radius);
    }

    _setTableSettings(width) {
        const url = '/internal//cs-tools-semanticlinks-linkgraph/settings/' +
            parseQuery(location).config_id;
        const jsonData = {'linkfilters': JSON.stringify(this.state.linkfilters),
                          'objectfilters': JSON.stringify(this.state.objectfilters),
                          'obsolete': JSON.stringify(this.state.obsolete),
                          'radius': JSON.stringify(this.state.radius),
                          'width': JSON.stringify(width),
                         };
        postJSON(url, jsonData);
        this.setState({width: width});
    }

    _changeRadius(ek) {
        this.setSettings(ek);
    }

    _constructFilter() {
        let filters = '';
        for (const f of Object.keys(this.state.linkfilters)) {
            if (this.state.linkfilters[f] === 0) {
                filters += f + ';';
            }
        }
        filters += '@';
        for (const f of Object.keys(this.state.objectfilters)) {
            if (this.state.objectfilters[f][0] === 0) {
                filters += this.state.objectfilters[f][1] + ';';
            }
        }
        filters += '@' + this.state.obsolete;
        return filters;
    }

    _refreshSVG(radius) {
        if (this.state.loading === true) {
            return;
        }
        const url = '/api/v1/collection/linkgraphconfig/' + this.config_id + '/svg/' +
        this.state.root + '/' + radius + '/' + this.constructFilter();
        getJSON(url).then((data) => {
            this.setState({svg: data.svg,
                           root_desc: data.root_desc,
                           radius: data.radius,
                           loading: false});
        });
        this.setState({loading: true});
    }

    _newRoot(e) {
        if (this.state.loading === true) {
            return;
        }
        const url = '/api/v1/collection/linkgraphconfig/' + this.config_id + '/svg/' +
         e.getAttribute('id') + '/' + this.state.radius + '/' + this.constructFilter();
        getJSON(url).then((data) => {
            this.setState({svg: data.svg,
                           radius: data.radius,
                           root: e.getAttribute('id'),
                           root_desc: data.root_desc,
                           loading: false},
                           );
        });
        this.setState({loading: true});
    }

    _handleObjectSelect(e) {
        let obj = this.props.getObjectById(e.getAttribute('url'));
        let obj_link = '';
        let maylink = false;
        if (isCEDesktop()) {
            obj_link = e.getAttribute('cdbwin_url');
        }
        if (obj === undefined) {
            this.props.fetchObject(e.getAttribute('url')).then((data) => {
                const object_id = data.cdb_object_id;
                const active_object = this.state.active_object;
                if (active_object) {
                    const old_id = document.getElementById(active_object.get('cdb_object_id'));
                    old_id.setAttribute('class', 'node');
                }
                const active_g = document.getElementById(object_id);
                active_g.setAttribute('class', 'node-selected');
                const classname = data['system:classname'];
                Object.keys(this.state.objectfilters).forEach((key) => {
                    if (classname === this.state.objectfilters[key][1]) {
                        maylink = true;
                        return true;
                    }
                    return false;
                });
                obj = Immutable.Map(data);
                const clsName = obj.get('system:classname');
                const descComponent = getPlugin('cs-semanticlinks-linkgraph-desc',
                                                 cn => cn === clsName, NoPreview);
                this.setState({active_object: obj,
                               cdbwin_link: obj_link,
                               maylink: maylink,
                               descComponent: descComponent});
            });
        }
        else {
            const object_id = obj.get('cdb_object_id');
            const active_object = this.state.active_object;
            if (active_object) {
                const old_id = document.getElementById(active_object.get('cdb_object_id'));
                if (old_id) {
                    old_id.setAttribute('class', 'node');
                }
            }
            const active_g = document.getElementById(object_id);
            active_g.setAttribute('class', 'node-selected');
            const classname = obj.get('system:classname');
            Object.keys(this.state.objectfilters).forEach((key) => {
                if (classname === this.state.objectfilters[key][1]) {
                    maylink = true;
                    return true;
                }
                return false;
            });
            const clsName = obj.get('system:classname');
            const descComponent = getPlugin('cs-semanticlinks-linkgraph-desc',
                                            cn => cn === clsName, NoPreview);
            this.setState({active_object: obj,
                           cdbwin_link: obj_link,
                           maylink: maylink,
                           descComponent: descComponent});
        }

    }

    _toggleLinkFilter(filter) {
        let newfilter = 0;
        if (this.state.linkfilters[filter] === 0) {
            newfilter = 1;
        }
        const newstate = this.state.linkfilters;
        newstate[filter] = newfilter;
        this.setState({linkfilters: newstate});
    }

    _toggleObjectFilter(filter) {
        const classname = this.state.objectfilters[filter][1];
        let newfilter = [0, classname];
        if (this.state.objectfilters[filter][0] === 0) {
            newfilter = [1, classname];
        }
        const newstate = this.state.objectfilters;
        newstate[filter] = newfilter;
        this.setState({objectfilters: newstate});
    }

    _toggleObsoleteFilter() {
        let newfilter = 0;
        if (this.state.obsolete === 0) {
            newfilter = 1;
        }
        this.setState({obsolete: newfilter});
    }

    _openFilterOverlay() {
        const h = [];
        const h2 = [];
        const namespace = window.appSetup[`${componentNameSpace}`];
        namespace.link_types.forEach(f => {
            const filters = f.split(' / ');
            h.push(<Checkbox checked={(this.state.linkfilters[filters[0]] === 1)}
                                 onChange={this.toggleLinkFilter.bind(this, filters[0])}>
                            {filters[0]}
                   </Checkbox>);
            if (filters[1] && filters[0] !== filters[1]) {
                h2.push(<Checkbox checked={(this.state.linkfilters[filters[1]] === 1)}
                                  onChange={this.toggleLinkFilter.bind(this, filters[1])}>
                            {filters[1]}
                       </Checkbox>);
            }
            else {
                h2.push(<span>&nbsp;</span>);
            }
        });
        const h3 = [];
        for (const f2 of Object.keys(this.state.objectfilters)) {
            h3.push(<Checkbox checked={(this.state.objectfilters[f2][0] === 1)}
                              onChange={this.toggleObjectFilter.bind(this, f2)}>
                       {f2}
                   </Checkbox>);
        }
        return (
            <Popover id='filter' style={{'maxWidth': '550px'}}>
                <Grid>
                    <Row>
                        <Col xs={4} md={4}>
                            <Checkbox checked={(this.state.obsolete === 1)}
                                      onChange={this.toggleObsoleteFilter}>
                            {formatStr('obsolete')}
                            </Checkbox>
                        </Col>
                    </Row>
                    <Row>
                        <Col xs={2} md={2}>
                            <b>{formatStr('objectfilter')}</b>
                            {h3.map((filter) =>
                              {return filter}
                            )}
                        </Col>
                        <Col xs={2} md={2}>
                            <b>{formatStr('linkfilter')}</b>
                            {h.map((filter) =>
                              {return filter}
                            )}
                        </Col>
                        <Col xs={2} md={2}>
                            <span>&nbsp;</span>
                            {h2.map((filter) =>
                              {return filter}
                            )}
                        </Col>
                    </Row>
                </Grid>
            </Popover>
        );
    }

    _savetoCDB() {
        this.refs.CreateLink.wrappedInstance.submitForm();
        this.refreshSVG(this.state.radius);
    }

    _closeDialog() {
        this.setState({showModal: false});
    }

    _openDialog() {
        this.setState({showModal: true});
    }

    render() {
        const modal = (
            <CreateLinkDialog buttons={[<Dialog.Buttons.Create
                                         key='create'
                                         onClick={this.savetoCDB} />,
                                     <Dialog.Buttons.Cancel
                                         key='cancel'
                                         onClick={this.closeDialog}/>]}

                           size={Dialog.SIZE_LARGE}
                           show={this.state.showModal}
                           title={formatStr('add_link')}
                           allowOverlay={true}
                           dialogClassName={prefixNS('create-link-modal')}>
                <CreateLink ref='CreateLink'
                            onClose={this.closeDialog}
                            contextObject={this.state.active_object} />
            </CreateLinkDialog>
        );
        const DescComponent = this.state.descComponent;
        let formLink = '';
        if (this.state.active_object) {
            formLink = '/internal/uisupport/form/operation/class/CDB_ShowObject/' +
            this.state.active_object.get('system:classname');
        }
        return (
            <div>
                {modal}
                <SplitLayout onDragFinished={this.setTableSettings}
                             defaultSize={this.state.width}
                             minSize={0}
                             maxSize={-21}
                             style={{height: 'inherit'}}>
                    <div>
                        <ContentBlock collapsible={false} title={this.state.root_desc}>
                            <ContentBlock.Header>
                                 {formatStr('radius')}
                                 <ButtonGroup>
                                     <Button.DropdownTextButton title={formatStr('radius')}
                                                                label={String(this.state.radius)}
                                                                onSelect={this.changeRadius}
                                                                bsSize='xsmall'>
                                         <MenuItem eventKey='1' key='1'>1</MenuItem>
                                         <MenuItem eventKey='2' key='2'>2</MenuItem>
                                         <MenuItem eventKey='3' key='3'>3</MenuItem>
                                         <MenuItem eventKey='4' key='4'>4</MenuItem>
                                         <MenuItem eventKey='5' key='5'>5</MenuItem>
                                         <MenuItem eventKey='6' key='6'>6</MenuItem>
                                         <MenuItem eventKey='7' key='7'>7</MenuItem>
                                     </Button.DropdownTextButton>
                                     <OverlayTrigger trigger='click'
                                                     rootClose
                                                     placement='bottom'
                                                     overlay={this.openFilterOverlay()}
                                                     onExited={this.setSettings.bind(this,
                                                               this.state.radius)}>
                                        <Button.IconButton title={formatStr('filter')}
                                                           buttonStyle='primary'
                                                           iconName='csweb_filter'/>
                                    </OverlayTrigger>


                                    <Button.IconButton disabled={!this.state.maylink}
                                                       title={formatStr('add_link')}
                                                       onClick={this.openDialog}
                                                       buttonStyle='success'
                                                       iconName='csweb_add' />
                                 </ButtonGroup>

                            </ContentBlock.Header>
                            <ContentBlock.Body>
                                 {this.state.svg ? (
                                       <div className={prefixNS('linkgraph-svg')}>
                                       {(this.state.loading === true) &&
                                          <div className={prefixNS('throbber')}>
                                              <Throbber hidden={false} />
                                          </div>}

                                       <InlineSVG svg={this.state.svg}
                                                onClicked={this.handleObjectSelect}
                                                onDblClicked={this.newRoot}/>
                                       </div>
                                 ) : (
                                    <div className={prefixNS('linkgraph-svg')}>
                                        <Throbber hidden={false} />
                                    </div>
                                 )}

                            </ContentBlock.Body>
                        </ContentBlock>
                    </div>
                    <div>
                        {this.state.active_object ? (
                            <div>
                                <DescComponent contextObject={this.state.active_object}
                                               readOnly={true}/>
                                <Attributes contextObject={this.state.active_object}
                                            formLink={formLink}/>
                            </div>
                        ) : (
                            <EmptyDesc />
                        )}
                    </div>
                </SplitLayout>
            </div>
      );
    }
}

LinkGraph.propTypes = {
    fetchObject: PropTypes.func.isRequired,
    getObjectById: PropTypes.func,
    location: PropTypes.object
};

function mapStateToProps(state) {
    return {
        getObjectById: object_link => state.objectsById.get(object_link),
    };
}


const actions = {fetchObject};

export default connect(mapStateToProps, actions)(LinkGraph);
