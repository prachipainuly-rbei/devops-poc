#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import given, when, then, operation, run_with_roles
from cs.calendar import CalendarDayType, CalendarProfile, CalendarEntry, CalendarException
from common import random_id

import os
import sys


# -------------------------------------------------------------
# Screnario: admin adds a new day-type
#
# -------------------------------------------------------------
@when("^admin creates a new day-type$")
@run_with_roles(['public', 'Administrator'])
def step(context):
    context.day_type_len = len(CalendarDayType.Query())
    rid = random_id()
    user_input = {"name_de": rid,
                  "is_day_off_type": 1,
                  "day_type_id": rid}

    operation("CDB_Create", CalendarDayType, user_input)


@then("^a new day-type exists$")
@run_with_roles(['public'])
def step(context):
    assert len(CalendarDayType.Query()) - context.day_type_len == 1,\
        "No new day-type created"


# -------------------------------------------------------------
# Scenario: admin creates a new calendar profile
#
# -------------------------------------------------------------
@when("^admin creates a new profile for 2 days$")
@run_with_roles(['public', 'Administrator'])
def step(context):

    workday_id = "1"
    workday = CalendarDayType.KeywordQuery(day_type_id=workday_id)[0]

    day_off_id = "2"
    day_off = CalendarDayType.KeywordQuery(day_type_id=day_off_id)[0]

    preset = {"mo_type_id": workday_id,
              "tu_type_id": workday_id,
              "we_type_id": workday_id,
              "th_type_id": workday_id,
              "fr_type_id": workday_id,
              "sa_type_id": workday_id,
              "su_type_id": day_off_id,
              "mapped_mo_type": workday.name_de,
              "mapped_tu_type": workday.name_de,
              "mapped_we_type": workday.name_de,
              "mapped_th_type": workday.name_de,
              "mapped_fr_type": workday.name_de,
              "mapped_sa_type": workday.name_de,
              "mapped_su_type": day_off.name_de
              }

    user_input = {"valid_from": "10.06.2014",
                  "valid_until": "11.06.2014",
                  "name": random_id()
                  }

    context.profileNumber = len(CalendarProfile.Query())
    context.entriesNumber = len(CalendarEntry.Query())

    operation("CDB_Create", CalendarProfile, user_input, preset)


@then("^a new profile exists$")
def step(context):
    assert len(CalendarProfile.Query()) - context.profileNumber == 1,\
        "No new calendar profile created"


@then("^new calendar-entries for two days exist$")
@run_with_roles(['public'])
def step(context):
    assert len(CalendarEntry.Query()) - context.entriesNumber == 2,\
        "No new calendar entries created"


# -------------------------------------------------------------
# Scenario: admin creates a new calendar exception
#
# -------------------------------------------------------------
@when('^admin creates a calendar exception at "(?P<exp_day>.*?)" for the "Standard" calendar profile$')
@run_with_roles(['public', 'Administrator'])
def step(context, exp_day):
    calendar_profile = CalendarProfile.KeywordQuery(name="Standard")[0]
    day_type = CalendarDayType.KeywordQuery(day_type_id="1")[0]

    preset = {"calendar_profile_id": calendar_profile.cdb_object_id,
              "mapped_calendar_profile": calendar_profile.name,
              "day_type_id": day_type.day_type_id,
              "mapped_day_type": day_type.name_de}
    user_input = {"day": exp_day}

    context.exceptionsNumber = len(CalendarException.Query())

    operation("CDB_Create", CalendarException, user_input, preset)


@then("^a new calendar exception exists$")
def step(context):
    assert len(CalendarException.Query()) - context.exceptionsNumber == 1,\
        "No new exceptions exist"


# -------------------------------------------------------------
# Scenario: import from ics
#
# -------------------------------------------------------------
@when("^admin imports 2 calendar-exceptions from an ics-file$")
@run_with_roles(['public', 'Administrator'])
def step(context):
    accepttests_dir = os.path.join(
        os.path.dirname(__file__.decode(sys.getfilesystemencoding())), "..")
    files_dir = os.path.join(accepttests_dir, 'files')
    ics_file = os.path.join(files_dir, 'exceptions.ics')

    preset = {"ics_file": ics_file}

    context.exceptionsNumber = len(CalendarException.Query())

    calendar_profile = CalendarProfile.KeywordQuery(name="Standard")[0]

    operation("cdb_cal_prof_imp", calendar_profile, preset, preset)


@then("^two new calendar-exceptions exist$")
def step(context):
    lenHave = len(CalendarException.Query())
    lenWas = context.exceptionsNumber
    assert lenHave - lenWas == 2,\
        "No new calendar exceptions created. Number expected: %d, number have: %d" % (lenWas + 2, lenHave)


@given(u'^there is no calendar exception at "(?P<exp_day>.*?)"$')
@run_with_roles(['public', 'Administrator'])
def step_impl(context, exp_day):
    exceptions = CalendarException.KeywordQuery(day=exp_day)
    for exception in exceptions:
        operation("CDB_Delete", exception)
