# !/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import run_with_added_roles, operation, given, when, then
from cs.currency import Currency, CurrConversion
from common import random_id


# -------------------------------------------------------------
# Scenario: Add new currency
#
# -------------------------------------------------------------
@when("^an administrator creates a new currency$")
@given("^an administrator creates a new currency$")
@run_with_added_roles(["Administrator"])
def step(context):
    randstr = random_id()
    user_input = {'name': randstr, 'symbol': randstr}
    context.cur_obj = operation("CDB_Create", Currency, user_input)


@when("^the administrator creates a new conversion with (?P<factor>.*?) to (?P<currency>.*?)$")
@run_with_added_roles(["Administrator"])
def step(context, factor, currency):
    tocur = Currency.ByKeys(name=currency)
    preset = {'from_curr_object_id': context.cur_obj.cdb_object_id,
              'to_curr_object_id': tocur.cdb_object_id,
              'project_name': "Tralalala",
              'cdb_project_id': "Id"}
    user_input = {'convert_factor': float(factor)}
    context.cur_conv_obj = operation("CDB_Create", CurrConversion, user_input, preset)


@then("^that currency should exist$")
def step(context):
    object_ids = [each.cdb_object_id for each in Currency.Query()]
    assert context.cur_obj is not None and context.cur_obj.cdb_object_id in object_ids, \
        "Currency object is None or not in DB"


@then("^should have a conversion$")
def step(context):
    object_ids = [each.cdb_object_id for each in CurrConversion.Query()]
    assert context.cur_conv_obj is not None and context.cur_conv_obj.cdb_object_id in object_ids, \
        "CurrencyConversion object is None or not in DB"


# -------------------------------------------------------------
# Scenario: Convert between currencies
#
# -------------------------------------------------------------
@given("^the administrator creates a new conversion with (?P<factor>.*?) to (?P<currency>.*?)$")
@run_with_added_roles(["Administrator"])
def step(context, factor, currency):
    tocur = Currency.ByKeys(name=currency)
    preset = {'from_curr_object_id': context.cur_obj.cdb_object_id,
              'to_curr_object_id': tocur.cdb_object_id}
    user_input = {'convert_factor': float(factor)}
    context.cur_conv_obj = operation("CDB_Create", CurrConversion, user_input, preset)


@when("^the API function convertTo is used to convert (?P<amount>.*?) to (?P<tocurrency>.*?)$")
def step(context, amount, tocurrency):
    tocur = Currency.ByKeys(name=tocurrency)
    context.conv_result = float(context.cur_obj.convertTo(tocur.cdb_object_id, float(amount)))


@then("^the conversion should result (?P<amountinetocurrency>.*?)$")
def step(context, amountinetocurrency):
    assert round(context.conv_result - float(amountinetocurrency), 7) == 0, \
        "Expected Value to be %s, but it is %s" % (float(amountinetocurrency), context.conv_result)


# -------------------------------------------------------------
# Scenario: Convert to reference currency
#
# -------------------------------------------------------------
@when("^the API function convertToReference is used to convert (?P<amount>.*?) to reference$")
def step(context, amount):
    context.conv_result = float(context.cur_obj.convertToReference(float(amount)))
