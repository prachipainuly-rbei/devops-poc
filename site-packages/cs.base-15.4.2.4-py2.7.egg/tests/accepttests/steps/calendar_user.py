#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import given, when, then, run_with_added_roles
from cs.calendar import CalendarEntry, CalendarProfile
from cdb.objects.org import Person
from cdb import auth
from __builtin__ import str

from common import get_created_entries, create_calendar_extries


# Scenario: user adds some new calendar entries
@given(u'^user has a calendar profile$')
def step(context):
    calendar_profile = auth.get_attribute("calendar_profile_id")
    calendar_profile_id = CalendarProfile.Query()[0].cdb_object_id
    user = Person.ByKeys(personalnummer=auth.get_login())
    if calendar_profile is None:
        user.calendar_profile_id = calendar_profile_id


@given(u'there (?P<are>.*?) calendar entries between (?P<day_from>.*?) and (?P<day_until>.*?)$')
def step_impl(context, are, day_from, day_until):
    if (are == "are"):
        create_calendar_extries(day_from, day_until)
    else:
        entry = get_created_entries(day_from, day_until)
        entry.Delete()


@when(u'^(?P<role>.*?) creates a new calendar entry between (?P<day_from>.*?) and (?P<day_until>.*?) with capacity (?P<capacity>.*?)$')
def step(context, role, day_from, day_until, capacity):
    @run_with_added_roles(role.split(","))
    def create():
        context.day_from = day_from
        context.day_until = day_until
        try:
            context.calendarEntriesLen = create_calendar_extries(day_from, day_until, capacity=capacity)
        except RuntimeError as e:
            assert False, str(e)
    create()


@then(u'^(?P<number>.*?) new calendar entries with capacity (?P<capacity_check>.*?) exist$')
def step(context, number, capacity_check):
    act_entries = len(CalendarEntry.Query())
    assert act_entries - context.calendarEntriesLen == int(number), \
        "There are %s entries, there were: %s, the expected difference was: %s" \
        % (act_entries, context.calendarEntriesLen, number)
    for entry in get_created_entries(context.day_from, context.day_until):
        assert entry.capacity == int(capacity_check)
