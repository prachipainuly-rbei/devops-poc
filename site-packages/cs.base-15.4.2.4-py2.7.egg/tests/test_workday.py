#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
Test Module test_workday

The module tests the functions of cdb.workday
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_workday.py 104084 2013-11-25 16:58:21Z heiko $"

import unittest


# Tests
class test_get_index_of_day(unittest.TestCase):
    """
    Test of `cdb.workday.gett_index_of_day`.
    """

    @classmethod
    def setUpClass(self):
        pass

    @classmethod
    def tearDownClass(self):
        pass

    def _test_giod(self, days, day, next_val, expected_result, msg):
        """
        Calls workday.get_index_of_day(days, day, next_val) and checks
        if the result is `expected_result`. If not msg is part of the
        assertion message.
        """
        from cdb import cdbtime
        from cs.calendar import workday

        the_day = cdbtime.Time(day).date()
        all_days = [cdbtime.Time(d).date() for d in days]
        result = workday.get_index_of_day(the_day, all_days, next_val)
        self.assertEqual(expected_result, result,
                         "%s:Got %d instead of %d" % (msg, result, expected_result))

    def test_get_index_of_day_empty_list(self):
        """
        Test for workday.get_index_of_day with empty daylist
        """
        self._test_giod([], "15.07.2013", 0,
                        -1, "Empty list without next value.")
        self._test_giod([], "15.07.2013", 1,
                        -1, "Empty list with next=1.")
        self._test_giod([], "15.07.2013", -1,
                        -1, "Empty list with next=-1.")

    def _test_find_day(self, days):
        """
        Calls the test for every day in days
        """
        msg = "Find day in list of %d elements" % len(days)
        for d in range(0, len(days)):
            self._test_giod(days, days[d], 0,
                            d, msg)
            self._test_giod(days, days[d], 1,
                            d, msg + " (next = 1)")
            self._test_giod(days, days[d], "next = -1",
                            d, msg)

    def test_get_index_of_day_one_day_list(self):
        """
        Test for workday.get_index_of_day with a list that
        contains exactly one day.
        """
        days = ["15.07.2013"]
        self._test_find_day(days)
        self._test_giod(days, "16.07.2013", 0,
                        -1, "Find not existing day in an One-Day-List")
        self._test_giod(days, "16.07.2013", 1,
                        0, "Find not existing day in an One-Day-List with next=1.")
        self._test_giod(days, "16.07.2013", -1,
                        0, "Find not existing day in an One-Day-List with next=-1.")
        self._test_giod(days, "10.07.2013", 0,
                        -1, "Find not existing day in an One-Day-List")
        self._test_giod(days, "10.07.2013", 1,
                        0, "Find not existing day in an One-Day-List with next=1.")
        self._test_giod(days, "10.07.2013", -1,
                        0, "Find not existing day in an One-Day-List with next=-1.")

    def test_get_index_of_day(self):
        """
        Test for `workday.get_index_of_day` with a list that
        contains several elmenents.
        """
        days = ["01.07.2013",
                "05.07.2013",
                "09.07.2013",
                "14.07.2013",
                "19.07.2013"]
        # Find the days
        self._test_find_day(days)
        # Search for a day that is not part of the list
        # 1. A day before the first entry
        self._test_giod(days, "01.01.2013", 0,
                        -1, "Find not existing day in list")
        self._test_giod(days, "01.01.2013", 1,
                        0, "Find a date before days withe next = 1")
        self._test_giod(days, "01.01.2013", 1,
                        0, "Find a date before days withe next = -1")
        # 2. A day after the last entry
        self._test_giod(days, "01.12.2013", 0,
                        -1, "Find not existing day in list")
        self._test_giod(days, "01.12.2013", 1,
                        4, "Find a date after days with next = 1")
        self._test_giod(days, "01.12.2013", -1,
                        4, "Find a date after days with next = -1")
        # 3. A day in the middle
        self._test_giod(days, "06.07.2013", 0,
                        -1, "Find not existing day in list")
        self._test_giod(days, "06.07.2013", 1,
                        2, "Find a date after days with next = 1")
        self._test_giod(days, "06.07.2013", -1,
                        1, "Find a date after days with next = -1")


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
