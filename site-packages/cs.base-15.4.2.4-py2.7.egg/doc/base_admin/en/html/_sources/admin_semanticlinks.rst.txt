.. _`admin_semanticlinks`:

Semantische Verknüpfungen
#########################

Einleitung
==========

:guilabel:`Semantische Verknüpfungen` sind ein universelles Werkzeug zur Vernetzung von Fachobjekten.
In den nachfolgenden Kapiteln erfahren Sie, wie Sie dieses Werkzeug kundenindividuell konfigurieren 
können.

Verknüpfungstypen
=================

In einer semantischen Verknüpfung zwischen zwei Fachobjekten stellt das eine Fachobjekt grundsätzlich die *Quelle*
und das andere das *Ziel* dar. Die *Semantik* drückt dann die Bedeutung der Verknüpfung zwischen Quelle und Ziel aus,
z.B.:

    :strong:`Anforderung X` (Quelle) :strong:`Spezifiziert` (Semantik) :strong:`Artikel Y` (Ziel)


Die Konfiguration, welche Fachobjekte mit welcher Semantik miteinander verknüpft werden können, erfolgt über sogenannte 
:guilabel:`Verknüpfungstypen`. Diese können Sie über den Menüzugang 
:menuselection:`Administration/Konfiguration --> Konfiguration --> Semantische Verknüpfungen --> Semantische Verknüpfungstypen` pflegen.
Die Definition eines Verknüpfungstyps erfolgt über folgende Stammdaten:

- :guilabel:`Quelle`
   Wählen Sie hier diejenige Klasse aus, die in der Verknüpfung die Quelle darstellen soll.

- :guilabel:`Semantik`
   Erfassen Sie hier frei die Semantik der Verknüpfung zwischen Quelle und Ziel (in der Regel als Verbform).

- :guilabel:`Ziel`
   Wählen Sie hier diejenige Klasse aus, die in der Verknüpfung das Ziel darstellen soll.

- :guilabel:`Spiegelverknüpfung erzeugen`
   Über dieses Feld können Sie definieren, dass mit der Erstellung dieses Typs automatisch eine über das Feld :guilabel:`Spiegelverknüpfungstyp` 
   ausgewählte Spiegelverknüpfung generiert werden soll, in welcher Quelle und Ziel getauscht und die Verbform der Semantik (passiv oder aktiv) 
   entsprechend geändert wird. Zudem wird mit dem Löschen einer Verknüpfung automatisch die ggf. ausgewählte Spiegelverknüpfung gelöscht.

- :guilabel:`Spiegelverknüpfungstyp`
   Wählen Sie hier einen bereits definierten Verknüpfungstyp, der die *Spiegelverknüpfung* des aktuell bearbeiteten Typs darstellt, z.B.:

   Anforderung X spezifiziert Artikel Y :strong:`gespiegelt` Artikel Y wird spezifiziert durch Anforderung X

- :guilabel:`Kopie-Verknüpfungstyp`
   Setzen Sie diesen Haken, wenn der Verknüpfungstyps die Semantik *ist Kopie von* definiert. Dann legt das System automatisch eine 
   semantische Verknüpfung dieses Typs an, wenn Sie ein Objekt kopieren.   

- :guilabel:`Ungültig`
   Setzen Sie einen Verknüpfungstyp auf *Ungültig*, wenn es nicht mehr möglich sein soll, eine entsprechende Verknüpfung neu anzulegen.
   
- :guilabel:`Modul`
   Hier trägt das System mit der Neuanlage automatisch das Modul ein, in dem der Typ definiert wird (das ist bei kundenspezifischer 
   Konfiguration Ihr Kundenmodul).

.. note::
    Wenn Sie einen neuen Verknüpfungstypen definieren, in dem eine Klasse erstmals als *Quelle* oder *Ziel* verwendet 
    wird, müssen Sie für diese Klasse zudem eine Beziehung :guilabel:`Semantische Verknüpfungen` definieren, in welcher 
    die Klasse als Referer und die Standardklasse :guilabel:`cdb_semantic_link` als Verknüpfungsklasse und Reference 
    erfasst wird (siehe als Beispiel die Definition der Standardbeziehung :guilabel:`cdbrqm_req2slink`).
    Erst mit der Definition dieser Beziehung werden die semantischen Verknüpfungen der beteiligten Fachobjekte für den Anwender 
    zugänglich (über den gleichnamigen Reiter im Datenblatt der Fachobjekte). Über diesen Reiter können semantische Verknüpfungen 
    neu erstellt, geändert und gelöscht werden.
    

Link-Graph
==========

Einleitung
----------

Der :guilabel:`Link-Graph` ist eine universelle Elink-Anwendung zur Visualisierung der Navigation
durch die semantischen Netze zwischen beliebigen Fachobjekten, z.B. zwischen Anforderungen,
Artikeln und Projektaufgaben im Anforderungsmanagement.

Nachfolgend erfahren Sie, wie Sie kundenspezifisch konfigurieren können, welche Fachobjekte 
ein Graph jeweils enthalten soll und was Sie tun müssen, damit man den :guilabel:`Link-Graph` mit einer
definierten Konfiguration aus dem Kontext eines vernetzen Fachobjekts heraus aufrufen kann.

Konfigurationen
---------------

Die Konfiguration, welche Fachobjekte ein bestimmter Graph enthalten soll und wie dieser dargestellt wird, 
erfolgt zunächst über sogenannte :guilabel:`Link-Graph-Konfigurationen`. Diese können Sie über den Menüzugang
:menuselection:`Administration/Konfiguration --> Konfiguration --> Semantische Verknüpfungen --> Link-Graph-Konfigurationen` pflegen.
Die Definition einer *Link-Graph-Konfiguration* erfolgt über folgende Stammdaten:

- :guilabel:`Name`
   Geben Sie hier der Konfiguration einen verständlichen Namen.

- :guilabel:`Graphviz Aufruf`
   Für die Visualisierung von Graphen wird GraphViz verwendet (siehe http://www.graphviz.org/). Hier können Sie 
   die Übergabeparameter für den Aufruf von GraphViz definieren. Über diese können Sie die Darstellung des 
   Graphen parametrieren.
   
- :guilabel:`Schriftname`
   Hier können Sie definieren, welche Schriftart für die Kanten- und Knotenbeschriftungen verwendet werden soll.

- :guilabel:`Schriftgröße`
   Hier können Sie definieren, in welcher Schriftgröße die Kanten- und Knotenbeschriftungen dargestellt werden sollen.

- :guilabel:`View`
   Hier kann ein View definiert werden, der bei der Erzeugung des Link-Graphen berücksichtigt wird. Darin können z.B. 
   weitere :guilabel:`Semantische Verknüpfungen` zwischen Objekte, die nicht in den :guilabel:`Verknüpfungstypen`
   aufgeführt sind via SQL erstellt werden. 

- :guilabel:`Modul`
   Hier trägt das System mit der Neuanlage automatisch das Modul ein, in dem der Typ definiert wird (das ist Ihr Kundenmodul).

Konfigurationsaufruf
--------------------

Damit man den :guilabel:`Link-Graph` für die Objekte einer bestimmten Klasse öffnen kann, müssen Sie zunächst eine Operation
konfigurieren (z.B. die Operation *link_graph*) und den Aufruf des :guilabel:`Link-Graph` über diese Operation in Python implementieren,
z.B. wie folgt für die Klasse *Requirement* und die Konfiguration *RQMSemanticLinkGraph*:

.. code-block:: python

    #!/usr/bin/env powerscript
    # -*- python -*- coding: UTF-8 -*-
    from cs.tools.semanticlinks import LinkGraphConfig

    def on_link_graph_now(self, ctx):
        config = LinkGraphConfig.KeywordQuery(name="RQMSemanticLinkGraph")[0].cdb_object_id
        ctx.url("/cs-tools-semanticlinks-linkgraph/?config_id=%s&root=%s&radius=1" % (config,self.cdb_object_id))
