Feature: Managing Variants


Scenario: Create New Property with data type 'boolean'
    WHEN a new property with data type boolean is created
    THEN the property values 0 and 1 are generated


Scenario Outline: User is not allowed to change, delete or create boolean property values
    GIVEN a boolean property value exists
    WHEN user tries to <action> boolean property values
    THEN error message is raised

    Examples:
        | action |
        | change |
        | delete |
        | create |


Scenario Outline: Copy of predicate and associated term
    GIVEN an assembly exists
        AND an item exists
        AND a parts list position exists
        AND a boolean property value exists
        AND the bom item has a predicate
        AND the predicate has a term
    WHEN <role> copies this parts list position
    THEN the predicate and associated term are also copied

    Examples:
        | role                |
        | Engineering, public |


Scenario: Do not copy predicates and term when instantiating
    GIVEN an assembly exists
        AND an item exists
        AND a parts list position exists
        AND a boolean property value exists
        AND the bom item has a predicate
        AND the predicate has a term
        AND a variant exists
    WHEN a variant instance of the assembly is created
    THEN the predicate and associated term are not copied


Scenario: Copy predicates and term when generating indices
    GIVEN an assembly exists
        AND an item exists
        AND a parts list position exists
        AND a boolean property value exists
        AND the bom item has a predicate
        AND the predicate has a term
    WHEN an index of the assembly is generated
    THEN the predicate and associated term are copied


Scenario: Update variant status after creating a constraint
    GIVEN a product exists
        AND the product has 2 properties
        AND the product has 1 variant
    WHEN a constraint is created that invalidates the variant
        THEN the variant has the status invalid


Scenario Outline: Update variant status after deleting a constraint
    GIVEN a product exists
        AND the product has 2 properties
        AND the product has 1 variant
        AND a constraint exists that invalidates the variant
    WHEN the <what> is deleted
        THEN the variant has the status ok

    Examples:
        | what       |
        | constraint |
        | predicate  |
        | term       |


Scenario Outline: Instantiate an obsolete max bom
    GIVEN a product with an outdated maxbom and 1 variant exists
    WHEN the user starts the operation to instantiate the outdated maxbom and <action>
    THEN the maxbom is <outcome>

    Examples:
        | action                     | outcome          |
        | confirms the dialog        | instantiated     |
        | doesn't confirm the dialog | not instantiated |


Scenario Outline: Fill localized fields
    GIVEN a product exists
    WHEN the user creates a <what> in <language>
    THEN the localized fields are automatically filled

    Examples:
        | what            | language |
        | property        | de       |
        | value           | de       |
        | property folder | de       |
        | property        | en       |
        | value           | en       |
        | property folder | en       |


Scenario Outline: String predicates
    GIVEN an assembly exists
        AND an item exists
        AND a parts list position exists
        AND the <type> property <property> with value <value> exists
        AND the bom item has a string predicate with expression <expression>
        AND a variant exists
    WHEN a variant instance of the assembly is created
    THEN the parts list position is <outcome>

    Examples:
        | type         | property | value | expression    | outcome      |
        | alphanumeric | PROP     | 300   | PROP == "300" | not filtered |
        | alphanumeric | PROP     | 300   | PROP == 300   | filtered     |
        | numeric      | PROP     | 300   | PROP == "300" | filtered     |
        | numeric      | PROP     | 300   | PROP == 300   | not filtered |
