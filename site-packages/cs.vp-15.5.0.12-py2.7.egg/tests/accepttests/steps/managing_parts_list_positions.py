#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import given, when, then, log, run_with_added_roles, \
    run_with_roles, operation, getStateNumber
from common import generateAssemblyComponent
from cs.vp.items import Item
from cs.vp.bom import AssemblyComponent


# Scenario Create New Parts List Position

@when("^(?P<role>.*?) creates a new parts list position for it$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def create(context):
        try:
            context.assemblyComponent = operation(
                "CDB_Create",
                AssemblyComponent,
                preset={"teilenummer": context.item.teilenummer,
                        "t_index": context.item.t_index,
                        "baugruppe": context.assembly.teilenummer,
                        "b_index": context.assembly.t_index})
        except Exception, e:
            log("Error creating parts list position, details: %s" % e)
    return create(context)


@then("^a new parts list position is (?P<action>(?:not )?generated)$")
def step(context, action):
    res = Item.ByKeys(context.assembly.teilenummer, context.assembly.t_index)
    if action == "generated":
        assert context.assemblyComponent is not None,\
            "No parts list position created"
        assert context.assemblyComponent in res.Components,\
            "The item is not allocated to the assembly"
    elif action == "not generated":
        assert not hasattr(context, "assemblyComponent"),\
            "The item is allocated to the assembly"


# Scenario Change Parts List Position

def getAssemblyComponentAttributesToChange():
    return {"menge": 5}


@given("^a parts list position exists$")
@run_with_added_roles(["Engineering"])
def step(context):
    context.assemblyComponent = generateAssemblyComponent(
        context.assembly,
        context.item)
    context.assemblyComponent_len = len(AssemblyComponent.Query())


@when("^(?P<role>.*?) changes this parts list position$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def change(context):
        try:
            operation(
                "CDB_Modify",
                context.assemblyComponent,
                user_input=getAssemblyComponentAttributesToChange())
        except Exception, e:
            log("Error changing the parts list position, details: %s" % e)
    return change(context)


@then("^the changed parts list position is (?P<state>(?:not )?saved)$")
def step(context, state):
    context.assemblyComponent.Reload()
    s_attrs = set(getAssemblyComponentAttributesToChange().items())
    if state == "saved":
        assert s_attrs.issubset(set(context.assemblyComponent.items())),\
            "The attributes differ"
    elif state == "not saved":
        assert not s_attrs.issubset(
            set(dict(context.assemblyComponent.items()))),\
            "The attributes don't differ"


# Scenario Copy Parts List Position

@when("^(?P<role>.*?) copies this parts list position$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def copy(context):
        try:
            context.copy = operation(
                "CDB_Copy",
                context.assemblyComponent,
                user_input={"position": context.assemblyComponent.position + 10})
        except Exception, e:
            log("Error copying the parts list position, details: %s" % e)
    return copy(context)


@then("^the parts list position is "
      "(?P<action>(?:not )?copied|(?:not )?deleted)$")
def step(context, action):
    if action == "copied":
        assert hasattr(context, "copy") and context.copy is not None,\
            "The parts list position isn't copied"
        assert (
            context.copy.teilenummer == context.assemblyComponent.teilenummer
            and
            context.copy.t_index == context.assemblyComponent.t_index
            and
            context.copy.baugruppe == context.assemblyComponent.baugruppe
            and
            context.copy.b_index == context.assemblyComponent.b_index
        ), "The parts list position references another assembly or item"
    elif action == "not copied":
        if hasattr(context, "copy"):
            assert context.copy is None,\
                "The parts list position is copied"
    elif action == "deleted":
        assert (len(AssemblyComponent.Query()) - context.assemblyComponent_len
                == -1), "The parts list position isn't deleted"
    elif action == "not deleted":
        assert (len(AssemblyComponent.Query()) - context.assemblyComponent_len
                == 0), "The parts list position is deleted"


# Scenario Delete Parts List Position

@when("^(?P<role>.*?) deletes this parts list position$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def delete(context):
        try:
            operation("CDB_Delete", context.assemblyComponent)
        except Exception, e:
            log("Error deleting the parts list position, details: %s" % e)
    return delete(context)


# Scenario Change State Of A Parts List Position

@when("^(?P<role>.*?) changes the state of this parts list position$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def change(context):
        context.state_to = context.table[0]["TO"]
        context.state_from = context.table[0]["FROM"]
        try:
            context.assemblyComponent.Item.ChangeState(
                getStateNumber(
                    context.assemblyComponent.Item.cdb_objektart,
                    context.state_to))
        except Exception, e:
            log("Error changing the state of the parts list position, "
                "details: %s" % e)
    return change(context)


@then("^the state of the parts list position is (?P<state>(?:not )?changed)$")
def step(context, state):
    context.assemblyComponent.Reload()
    if state == "changed":
        assert (context.assemblyComponent.Item.status ==
                getStateNumber(
                    context.assemblyComponent.Item.cdb_objektart,
                    context.state_to)),\
                "The parts list position isn't in state %s" % context.state_to
    elif state == "not changed":
        assert (context.assemblyComponent.Item.status ==
                getStateNumber(
                    context.assemblyComponent.Item.cdb_objektart,
                    context.state_from)),\
                "The parts list position isn't in state %s" % context.state_to
