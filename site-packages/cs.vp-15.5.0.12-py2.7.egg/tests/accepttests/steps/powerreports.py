# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# https://www.contact-software.com/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: powerreports.py 177644 2018-05-25 10:51:15Z gda $"

from cdb.validationkit import given
from cdb.validationkit import operation
from cdb.validationkit import run_with_added_roles
from cdb.validationkit import then
from cdb.validationkit import when

from cs.tools import powerreports
from cs.vp import items
from cs.vp import variants
from cs.vp import products

import os
import common


@given("^the maxbom has some predicates$")
@run_with_added_roles(["cs.vptests"])
def step(ctx):
    comp = ctx.maxbom.Components[0]
    predicate = common.generateAssemblyComponentPredicate(comp, ctx.product)
    common.generatePredicateTerm(predicate, ctx.property1, ctx.prop1_value_1)

    comp = ctx.maxbom.Components[1]
    predicate = common.generateAssemblyComponentPredicate(comp, ctx.product)
    common.generatePredicateTerm(predicate, ctx.property1, ctx.prop1_value_2)


@when("^the user generates the bom report for the ebom$")
def step(ctx):
    objects = [ctx.ebom]

    template = powerreports.XMLReportTemplate.ByKeys(name="HierarchicalBOM", iso_code="de")
    ctx.report_files = items.Item.generate_report(template.cdb_object_id, objects=[ctx.ebom])


@when("^the user generates the bom report for the variant$")
def step(ctx):
    maxbom = ctx.ebom
    objects = ctx.variants[:1]

    template = powerreports.XMLReportTemplate.ByKeys(name="VPMHierarchicalBOM", iso_code="de")
    ctx.report_files = variants.Variant.generate_report(
        template.cdb_object_id, objects=objects,
        dlg_args={
            "max_bom_teilenummer": maxbom.teilenummer,
            "max_bom_t_index": maxbom.t_index
        }
    )


@when("^the user generates the bom report for a virtual variant$")
def step(ctx):
    maxbom = ctx.ebom
    objects = [ctx.product]

    from cs.vp.variants import solvers
    signature = solvers.BasicProblemSolver.getSolutionSignature({
        ctx.property1.id: ctx.prop1_value_1.value,
        ctx.property2.id: ctx.prop2_value_1.value
    })

    template = powerreports.XMLReportTemplate.ByKeys(name="VPMVirtualHierarchicalBOM", iso_code="de")
    ctx.report_files = products.Product.generate_report(
        template.cdb_object_id, objects=objects,
        dlg_args={
            "max_bom_teilenummer": maxbom.teilenummer,
            "max_bom_t_index": maxbom.t_index,
            "filter_id": "%s;%s" % (ctx.product.cdb_object_id, signature)
        }
    )


@then("^the report is generated$")
def step(ctx):
    assert len(ctx.report_files) > 0, "the report has not been generated"

    for filepath in ctx.report_files:
        assert os.path.exists(filepath), "%s does not exists" % filepath
