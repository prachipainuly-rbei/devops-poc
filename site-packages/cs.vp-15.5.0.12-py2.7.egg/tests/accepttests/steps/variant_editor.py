#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/


from selenium.webdriver.support import select

from cdb.objects import operations
from cdb import constants
from cdb.validationkit import given
from cdb.validationkit import when
from cdb.validationkit import then
from cdb.validationkit import run_with_added_roles

import common

from cs.vp.variants import properties
from cs.vp.variants import solvers

VARIANT_EDITOR_URL = ""


@given("^a product exists$")
@run_with_added_roles(["Product: Manager"])
def step(ctx):
    ctx.product = common.generateProduct()


@when("^the user switches to the next page$")
def step(ctx):
    driver = ctx.webdriver
    common.waitForAjax(driver)

    button = driver.find_element_by_css_selector(".fg-button.next")
    button.click()
    common.waitForAjax(driver)


@when("^the user selects a variant in the variant table$")
def step(ctx):
    driver = ctx.webdriver

    row = driver.find_element_by_css_selector("#grid tr[data-cdb-elink-row-vindex='0']")

    def compute_signature(table_row):
        header = driver.find_element_by_css_selector(".dataTables_scrollHead table tr:not(#search)")

        selected_variant = {}
        property_name_attr = properties.Property.Name[''].name
        enum_name_attr = properties.EnumDefinition.ValueText[''].name
        for th, td in zip(header.find_elements_by_tag_name("th"),
                          table_row.find_elements_by_tag_name("td")):
            props = ctx.product.AllProperties\
                .KeywordQuery(**{property_name_attr: th.text.strip()})
            if props:
                prop = props[0]
                values = props[0].EnumValues\
                    .KeywordQuery(**{enum_name_attr: td.text.strip()})
                if values:
                    selected_variant[prop.id] = values[0].value
        return solvers.BasicProblemSolver.getSolutionSignature(selected_variant)

    ctx.selected_variant_signature = compute_signature(row)

    # click on the first cell in the row which represents a property
    cell = row.find_element_by_css_selector("td:nth-child(5)")
    cell.click()
    common.waitForAjax(driver)


@when("^the user saves the selected variant$")
def step(ctx):
    driver = ctx.webdriver
    button = driver.find_element_by_css_selector("button#save_button")
    button.click()
    common.waitForAjax(driver)


@then("^the selected variant is saved$")
def step(ctx):
    variants = ctx.product.Variants\
        .KeywordQuery(signature=ctx.selected_variant_signature)
    assert len(variants) == 1, "The selected variant has not been saved"


@given("^the product has (?P<n>\d+) views?$")
@run_with_added_roles(["Product: Manager"])
def step(ctx, n):
    n = int(n)

    for i in range(1, n + 1):
        view = common.generateProductView(ctx.product)
        setattr(ctx, 'view%d' % i, view)


@given("^the product has (?P<n>\d+) variants?$")
@run_with_added_roles(["Product: Manager"])
def step(ctx, n):
    n = int(n)

    ctx.variants = common.generateNVariants(ctx.product, n)
    assert len(ctx.variants) == n


@given("^a constraint exists that invalidates the variant")
@when("^a constraint is created that invalidates the variant")
@run_with_added_roles(["Product: Manager"])
def step(ctx):
    variant = ctx.variants[0]
    ctx.constraint = variant.make_invalid()


@when("^the (?P<what>constraint|predicate|term) is deleted$")
@run_with_added_roles(["Product: Manager", "cs.vptests"])
def step(ctx, what):
    if what == "constraint":
        obj = ctx.constraint
    elif what == "predicate":
        obj = ctx.constraint.Predicates[0]
    elif what == "term":
        obj = ctx.constraint.Predicates[0].Terms[0]

    operations.operation(constants.kOperationDelete, obj)


@then("^the variant has the status (?P<status>ok|invalid)$")
def step(ctx, status):
    from cs.vp.variants.varianttableadapters import SyncStatus

    variant = ctx.variants[0]
    variant.Reload()
    assert variant.solver_status == getattr(SyncStatus, status).value


@given("^the view has (?P<n>\d+) properties$")
@run_with_added_roles(["Product: Manager"])
def the_product_has_properties(ctx, n):  # @DuplicatedSignature
    n = int(n)

    view = ctx.view1

    for i in range(1, n + 1):
        prop = common.generateProductProperty(
            ctx.product,
            preset={'view_id': view.id},
            user_input={'name_de': 'ViewProperty%d' % i}
        )
        setattr(ctx, 'view_property%d' % i, prop)
        setattr(ctx, 'view_prop%d_value_1' % i, prop.EnumValues[0])
        setattr(ctx, 'view_prop%d_value_2' % i, prop.EnumValues[1])


@given("^the product has (?P<n>\d+) variants?$")
@run_with_added_roles(["Product: Manager"])
def step(ctx, n):
    n = int(n)

    ctx.variants = common.generateNVariants(ctx.product, n)
    assert len(ctx.variants) == n


@when("^the user selects a filter for the table$")
def step(ctx):
    driver = ctx.webdriver

    menu = driver.find_elements_by_css_selector("select.select_filter")[1]
    menu = select.Select(menu)
    menu.select_by_value("0")


@when("^the user selects a view$")
def step(ctx):
    driver = ctx.webdriver

    menu = driver.find_element_by_css_selector("select.select_view")
    menu = select.Select(menu)
    menu.select_by_value(u"%s" % ctx.view1.id)


@then("^the filter is still active$")
def step(ctx):
    driver = ctx.webdriver

    menu = driver.find_elements_by_css_selector("select.select_filter")[1]
    menu = select.Select(menu)
    opt = menu.first_selected_option
    assert opt.get_attribute("value") == "0", "Filter is not active anymore"


@then("^all variants are visible in the table$")
def step(ctx):
    driver = ctx.webdriver

    n_variants = driver.execute_script("return variant_editor.metrics.n_result")
    assert n_variants == 8, "Expected %s variants, got %s" % (8, n_variants)
