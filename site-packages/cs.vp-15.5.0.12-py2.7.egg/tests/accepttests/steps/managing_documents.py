#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#


from cdb.validationkit import given, when, then, log, operation, run_with_added_roles
from common import generateDocument
from cs.documents import Document
from cs.vp.items import Item


@given("^a document exists$")
@run_with_added_roles(["Documentation", "Engineering"])
def step(context):
    context.document = generateDocument()
    context.doc_len = len(Document.Query())


# Scenario 0002-0007 Allocate A Document To An Item

@when("^(?P<role>.*?) allocates this document to the item$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_added_roles(roles)
    def allocate(context):
        try:
            operation("CDB_Modify",
                      context.document,
                      user_input={"teilenummer": context.item.teilenummer},
                      preset={"t_index": context.item.t_index})
        except Exception, e:
            log("Error allocating the document to the item, details: %s"
                % str(e))
    return allocate(context)


@then("^the document is (?P<state>(?:not )?allocated) to the item$")
def step(context, state):
    res = Document.ByKeys(context.document.z_nummer, context.document.z_index)
    if state == "allocated":
        assert res.Item is not None,\
            "The Item is not allocated"
        assert context.item == res.Item, "There is a different Item allocated"
    elif state == "not allocated":
        if res is not None:
            assert res.Item is None, "The Item is allocated"
    else:
        assert False, "Unknown state"


# Scenario 0002-0008 Delete Item Allocation Of A Document

@given("^the document is allocated to the item$")
def step(context):
    context.item_len = len(Item.Query())
    context.document.teilenummer = context.item.teilenummer
    context.document.t_index = context.item.t_index


@when("^(?P<role>.*?) deletes the allocation of this document to the item$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_added_roles(roles)
    def delete(context):
        try:
            operation("CDB_Modify",
                      context.document,
                      user_input={"teilenummer": ""},
                      preset={"t_index": ""})
        except Exception, e:
            log("Error deleting the allocation of the document to the item,"
                " details: %s" % str(e))
    return delete(context)


@then("^the allocation of the document to the item is "
      "(?P<state>(?:not )?deleted)$")
def step(context, state):
    if state == "deleted":
        context.execute_steps(
            u"THEN the document is not allocated to the item")
    elif state == "not deleted":
        context.execute_steps(
            u"THEN the document is allocated to the item")
    else:
        assert False, "Unknown state"


# Scenario 0002-0019 Copy a Document allocated to an item

@when("^(?P<role>.*?) copies this document$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_added_roles(roles)
    def copy(context):
        context.doc_len = len(Document.Query())
        try:
            context.copy = operation("CDB_Copy", context.document)
        except Exception, e:
            log("Error copying the document, details: %s" % str(e))
    return copy(context)


@then("^no new item is generated$")
def step(context):
    assert len(Item.Query()) - context.item_len == 0, \
        "A new item was generated"


@then("^a new document is (?P<state>(?:not )?generated)$")
def step(context, state):
    if state == "generated":
        assert len(Document.Query()) - context.doc_len == 1,\
            "No Document created"
    elif state == "not generated":
        assert len(Document.Query()) - context.doc_len == 0,\
            "A Document was created"
    else:
        assert False, "Unknown state"


@then("^the copy is (?P<state>(?:not )?allocated) to the item$")
def step(context, state):
    if state == "allocated":
        context.execute_steps(
            u"THEN the document is allocated to the item")
    elif state == "not allocated":
        if hasattr(context, "copy"):
            context.execute_steps(
                u"THEN the document is not allocated to the item")
        else:
            return True
    else:
        assert False, "Unknown state"
