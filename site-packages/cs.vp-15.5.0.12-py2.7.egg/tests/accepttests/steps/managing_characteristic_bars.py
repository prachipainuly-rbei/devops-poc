#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#


from cdb.validationkit import given, when, then, log, operation
from cdb.validationkit import run_with_added_roles
from cs.vp.classification import PropertySet
from common import generateCharacteristicBar


# Scenario Create New Characteristic Bar

@when("^(?P<role>.*?) creates a new characteristic bar$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_added_roles(roles)
    def create(context):
        try:
            context.propertySet_len = len(PropertySet.Query())
            context.propertySet = operation("CDB_Create",
                                            PropertySet,
                                            user_input={"pset_id": "Test"})
        except Exception, e:
            log("Error creating characteristic bar, details: %s" % e)
    return create(context)


@then("^a new characteristic bar is (?P<creation>(?:not )?generated)$")
def step(context, creation):
    if creation == "generated":
        assert len(PropertySet.Query()) - context.propertySet_len == 1,\
            "No characteristic bar was created"
    elif creation == "not generated":
        assert len(PropertySet.Query()) - context.propertySet_len == 0,\
            "A characteristic bar was created"


# Scenario Change Characteristic Bar

def getCharacteristicBarAttributesToChange():
    return {"description": "22Changed"}


@given("^a characteristic bar exists$")
@run_with_added_roles(["Administrator"])
def step(context):
    context.propertySet = generateCharacteristicBar()
    context.propertySet_len = len(PropertySet.Query())


@when("^(?P<role>.*?) changes this characteristic bar$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_added_roles(roles)
    def change(context):
        try:
            operation("CDB_Modify",
                       context.propertySet,
                       user_input=getCharacteristicBarAttributesToChange())
        except Exception, e:
            log("Error changing the characteristic bar, details: %s" % e)
    return change(context)


@then("^the changed characteristic bar is (?P<status>(?:not )?saved)$")
def step(context, status):
    context.propertySet.Reload()
    s_attrs = set(getCharacteristicBarAttributesToChange().items())
    if status == "saved":
        assert s_attrs.issubset(
            set(dict(context.propertySet.items()))
        ), "The attributes differ"
    elif status == "not saved":
        assert not s_attrs.issubset(
            set(dict(context.propertySet.items()))
        ), "The attributes don't differ"


# Scenario Copy Characteristic Bar

@when("^(?P<role>.*?) copies this characteristic bar$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_added_roles(roles)
    def copy(context):
        try:
            context.copy = operation("CDB_Copy",
                                     context.propertySet,
                                     user_input={"pset_id": "Copied"})
        except Exception, e:
            log("Error copieing the characteristic bar, details: %s" % e)
    return copy(context)


@then("^the characteristic bar is (?P<status>(?:not )?copied|(?:not )?deleted)$")
def step(context, status):
    if status == "copied":
        assert len(PropertySet.Query()) - context.propertySet_len == 1,\
            "No new characteristic bar was created"
    elif status == "not copied":
        assert len(PropertySet.Query()) - context.propertySet_len == 0,\
            "A new characteristic bar was created"
    elif status == "deleted":
        assert len(PropertySet.Query()) - context.propertySet_len == -1,\
            "The characteristic bar wasn't deleted"
    elif status == "not deleted":
        assert len(PropertySet.Query()) - context.propertySet_len == 0,\
            "The characteristic bar was deleted"


# Scenario Delete Characteristic Bar

@when("^(?P<role>.*?) deletes this characteristic bar$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_added_roles(roles)
    def delete(context):
        try:
            operation("CDB_Delete", context.propertySet)
        except Exception, e:
            log("Error deleting the characteristic bar, details: %s" % e)
    return delete(context)
