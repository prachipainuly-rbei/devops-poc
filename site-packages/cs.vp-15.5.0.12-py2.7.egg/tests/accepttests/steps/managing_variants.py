#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#


from cdb.validationkit import given
from cdb.validationkit import operation
from cdb.validationkit import run_with_added_roles
from cdb.validationkit import then
from cdb.validationkit import when
from cdb._ctx import message_box
from cdb import cdbuuid

import common
from cs.vp import items
from cs.vp.variants import properties
from cs.vp.variants import bomlinks


# -------------------------------------------------------------
# Scenario Create New Property with data type 'boolean'
# -------------------------------------------------------------
@when("^a new property with data type boolean is created$")
@run_with_added_roles(["Product: Manager"])
def step(context):
    product = common.generateProduct(user_input={'code': 'Test product 1'})
    context.property = common.generateProductProperty(product,
                                               user_input={"data_type": "boolean"})


@then("^the property values 0 and 1 are generated$")
def step(context):
    context.property.Reload()
    assert len(context.property.EnumValues) == 2, \
        "Failed to generate two property values"
    assert 0 in context.property.EnumValues.value, \
        "Property value with value 0 not generated"
    assert 1 in context.property.EnumValues.value, \
        "Property value with value 1 not generated"


# --------------------------------------------------------------------------
# User is not allowed to change, delete or create boolean property values
# --------------------------------------------------------------------------
@given("^a boolean property value exists$")
@run_with_added_roles(["Product: Manager"])
def step(context):
    context.product = common.generateProduct(user_input={'code': 'Test product 2'})
    prop = common.generateProductProperty(context.product)
    context.property = prop
    context.prop_value = prop.EnumValues[0]


@when("^user tries to (?P<action>change|delete|create) boolean property values$")
def step(context, action):
    context.error_raised = False
    try:
        if action == "change":
            operation("CDB_Modify", context.prop_value)
        elif action == "delete":
            operation("CDB_Delete", context.prop_value)
        else:
            operation("CDB_Create",
                      properties.EnumDefinition,
                      preset={"id": context.property.id,
                              "product_object_id": context.property.product_object_id})
    except Exception:
        context.error_raised = True


@then("^error message is raised$")
def step(context):
    assert context.error_raised, "No error message raised"


# -------------------------------------------------------------
# Scenario: Copy of predicate and associated term
# -------------------------------------------------------------

@given("the bom item has a predicate")
@run_with_added_roles(["Product: Manager", "cs.vptests"])
def step(context):  # @DuplicatedSignature
    context.predicate = common.generateAssemblyComponentPredicate(
        context.assemblyComponent, context.product)
    context.predicate_id = context.predicate.predicate_id


@given("the predicate has a term")
@run_with_added_roles(["Product: Manager"])
def step(context):  # @DuplicatedSignature
    context.term = common.generatePredicateTerm(
        context.predicate,
        context.property,
        context.prop_value
    )


@then("the predicate and associated term are (?:also )?copied")
def step(context):  # @DuplicatedSignature
    new_predicate = bomlinks.BOM_Predicate.ByKeys(baugruppe=context.copy.baugruppe,
                                         b_index=context.copy.b_index,
                                         teilenummer=context.copy.teilenummer,
                                         variante=context.copy.variante,
                                         position=context.copy.position,
                                         product_object_id=context.product.cdb_object_id,
                                         predicate_id=context.predicate_id)
    assert new_predicate and len(new_predicate.Terms) > 0, "Predicate or Term was not copied!"


# -------------------------------------------------------------
# Scenario: Do not copy predicates and term when instantiating
# -------------------------------------------------------------

@given("^a variant exists$")
@run_with_added_roles(["Product: Manager", "cs.vptests"])
def step(ctx):
    ctx.variants = common.generateNVariants(ctx.product, 2)


@when("^a variant instance of the assembly is created$")
@run_with_added_roles(["Engineering", "cs.vptests"])
def step(ctx):
    ctx.instances = []
    for variant in ctx.variants:
        ctx.instances.append(ctx.assembly.instantiate_bom(variant, []))


@then("^the predicate and associated term are not copied$")
def step(ctx):  # @DuplicatedSignature
    for instance in ctx.instances:
        predicates = bomlinks.BOM_Predicate.KeywordQuery(
            baugruppe=instance.teilenummer,
            b_index=instance.t_index,
        )
        assert len(predicates) == 0, "Predicates have been copied!"

        terms = bomlinks.BOM_Term.KeywordQuery(
            baugruppe=instance.teilenummer,
            b_index=instance.t_index,
        )
        assert len(terms) == 0, "Terms have been copied!"


@when("^the user starts the operation to instantiate the outdated maxbom and (?P<action>confirms the dialog|doesn't confirm the dialog)$")
@run_with_added_roles(["Engineering", "Product: Manager"])
def step(ctx, action):
    if action == "confirms the dialog":
        answer = message_box.MessageBoxMixin.MessageBox.kMsgBoxResultYes
    elif action == "doesn't confirm the dialog":
        answer = message_box.MessageBoxMixin.MessageBox.kMsgBoxResultCancel

    try:
        operation(
            "cdbvp_instantiate_max_bom",
            ctx.variant,
            user_input={
                "question_maxbom_invalid": answer,
                "max_bom_teilenummer": ctx.maxbom.teilenummer,
                "max_bom_t_index": ctx.maxbom.t_index
            }
        )
    except RuntimeError as ex:
        if action != "doesn't confirm the dialog" or \
                "Operation wurde vom Benutzer abgebrochen" not in ex.message:
            raise


@when("^an index of the assembly is generated$")
@run_with_added_roles(["Engineering", "Design Release"])
def step(ctx):
    review = common.getStateName(ctx.assembly.cdb_objektart, "Review")
    released = common.getStateName(ctx.assembly.cdb_objektart, "Released")

    for item in [ctx.item, ctx.assembly]:
        operation("CDB_Workflow", item, user_input={"zielstatus": review})
        operation("CDB_Workflow", item, user_input={"zielstatus": released})

    operation("CDB_Index", ctx.assembly)
    ctx.newindex = items.Item.ByKeys(teilenummer=ctx.assembly.teilenummer, t_index="a")
    ctx.copy = ctx.newindex.Components[0]


# Scenario Outline: Fill localized fields

@when("^the user creates a (?P<what>property|value|property folder) in (?P<language>de|en)$")
@run_with_added_roles(["Product: Manager"])
def step(ctx, what, language):
    ctx.name = cdbuuid.create_uuid()
    ctx.language = language

    if what == "property" or what == "value":
        attr = "name_%s" % language
        ctx.property = common.generateProductProperty(
            ctx.product,
            user_input={
                "name_de": "",
                attr: ctx.name,
                "data_type": "alphanumeric"
            }
        )

        ctx.obj = ctx.property
        ctx.multilang_field = properties.Property.property_name

    if what == "value":
        attr = "value_txt_%s" % language
        ctx.property_value = common.generateProductPropertyValue(
            ctx.property,
            user_input={
                attr: ctx.name
            }
        )
        ctx.obj = ctx.property_value
        ctx.multilang_field = properties.EnumDefinition.value_txt

    if what == "property folder":
        attr = "folder_name_%s" % language
        ctx.property_folder = common.generateProductPropertyFolder(
            ctx.product,
            user_input={
                attr: ctx.name
            }
        )
        ctx.obj = ctx.property_folder
        ctx.multilang_field = properties.PropertyFolder.folder_name


@then("^the localized fields are automatically filled$")
def step(ctx):
    for lang, field in ctx.multilang_field.getLanguageFields().items():
        if lang != ctx.language:
            attr = field.name
            assert getattr(ctx.obj, attr) == "{%s}" % ctx.name, "field %s has not been automatically filled" % attr


# Scenario Outline: String predicates

@given("^the (?P<prop_type>alphanumeric|numeric) property (?P<prop_name>.*) with value (?P<prop_value>.*) exists$")
@run_with_added_roles(["Product: Manager"])
def step(ctx, prop_type, prop_name, prop_value):
    ctx.product = common.generateProduct(user_input={'code': 'Test product 3'})
    prop = common.generateProductProperty(
        ctx.product,
        user_input={
            "data_type": prop_type,
            "name_de": prop_name,
            "erp_code": prop_name
        }
    )

    value = common.generateProductPropertyValue(
        prop,
        preset={
            "name": prop_value,
            "value_txt_de": prop_value
        }
    )

    ctx.property = prop
    ctx.prop_value = value


@given("^the bom item has a string predicate with expression (?P<expression>.*)$")
@run_with_added_roles(["Product: Manager", "cs.vptests"])
def step(ctx, expression):
    common.generateStringPredicate(ctx.assemblyComponent, ctx.product, expression)


@then("^the parts list position is (?P<outcome>filtered|not filtered)$")
def step(ctx, outcome):
    for instance in ctx.instances:
        positions = instance.Components.KeywordQuery(
            teilenummer=ctx.assemblyComponent.teilenummer, t_index=ctx.assemblyComponent.t_index)

        if outcome == "filtered":
            assert len(positions) == 0, "the parts list position has not been filtered"
        elif outcome == "not filtered":
            assert len(positions) > 0, "the parts list position has been filtered"
