# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# https://www.contact-software.com/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: batch_operations.py 180295 2018-07-10 14:22:39Z gda $"

import common

from cdb.validationkit import given, when, then, operation, run_with_added_roles


@given("^an assembly with multiple occurrences exists$")
@run_with_added_roles(["Engineering"])
def step(ctx):
    ctx.main_assembly = common.generateItem()
    ctx.subassembly1 = common.generateItem()
    ctx.subassembly2 = common.generateItem()
    ctx.part = common.generateItem()

    common.generateAssemblyComponent(ctx.main_assembly, ctx.subassembly1)
    common.generateAssemblyComponent(ctx.main_assembly, ctx.subassembly2)
    common.generateAssemblyComponent(ctx.subassembly1, ctx.part)
    common.generateAssemblyComponent(ctx.subassembly2, ctx.part)


@when("^a batch (?:(?P<recursive>recursive) )?status change on the assembly is run$")
@run_with_added_roles(["Engineering", "public"])
def step(ctx, recursive=None):
    preset = {
        "param1": "200",
        "param2": "Released",
    }

    if recursive == "recursive":
        preset["param3"] = "1"

    ctx.batchop = common.generateItemBatchOperation(preset=preset)
    ctx.batchop_assignment = common.assignItemToBatchOperation(ctx.batchop, ctx.main_assembly)

    operation("cdbbop_operation_exec", ctx.batchop)


@then("^the status has been changed on the complete structure$")
def step(ctx):
    from cs.tools import batchoperations

    ctx.batchop_assignment.Reload()
    assert ctx.batchop_assignment.exec_state == batchoperations.kExecStateOk, \
        "Operation failed: %s, %s\n%s" % (
            ctx.batchop_assignment.exec_state,
            ctx.batchop_assignment.infotext,
            ctx.batchop_assignment.GetText("cdbbop_item_log")
        )

    for item in [ctx.main_assembly, ctx.subassembly1, ctx.subassembly2, ctx.part]:
        item.Reload()
        assert item.status == 200, "status on item (%s) has not been changed "\
            "(expected %s, got %s)" % (item.GetDescription(), 200, item.status)


@then("^the status has not been changed on the assembly$")
def step(ctx):
    from cs.tools import batchoperations

    ctx.batchop_assignment.Reload()
    assert ctx.batchop_assignment.exec_state == batchoperations.kExecStateError, \
        "Operation didn't fail: %s, %s\n%s" % (
            ctx.batchop_assignment.exec_state,
            ctx.batchop_assignment.infotext,
            ctx.batchop_assignment.GetText("cdbbop_item_log")
        )

    assert ctx.main_assembly.status == 0, "status on item (%s) has been changed "\
        "(expected %s, got %s)" % (item.GetDescription(), 0, item.status)
