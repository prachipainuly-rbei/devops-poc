#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/


from cdb.validationkit import given, when, then, operation
import common


@given("^no variants for a given product exist$")
def step(context):
    context.product = common.get_variant_matrix_test_product()

    for variant in context.product.Variants:
        try:
            operation("CDB_Delete", variant)
        except RuntimeError:
            # workaround for E038574
            for property_value in variant.PropertyValues:
                property_value.Delete()
            operation("CDB_Delete", variant)


@given("^the user opens the variant matrix$")
@given("^the user reloads the variant matrix$")
def step(context):
    context.webdriver.get("%sbyname/variant_matrix/%s/" % (context.server_url, context.product.cdb_object_id))


@given("^variants (?P<variants_definition>.*?) for a given product exist$")
def step(context, variants_definition):
    driver = context.webdriver
    variants_definition = variants_definition.split(";")  # step separates variants with ';'

    for variant_definition in variants_definition:
        common.select_variant_properties(context, variant_definition)

        common.create_variant_with_name(driver, variant_definition)
        common.deselect_all_checkboxes(driver)


@when("^the user selects a variant with definition (?P<properties_selected>.*?)$")
@when("^the user selects variant properties (?P<properties_selected>.*?)$")
def step(context, properties_selected):
    common.deselect_all_checkboxes(context.webdriver)
    common.select_variant_properties(context, properties_selected)


@when("^the user selects checkboxes (?P<checkboxes_selected>.*?)$")
def step(context, checkboxes_selected):
    common.deselect_all_checkboxes(context.webdriver)
    checkboxes_selected = checkboxes_selected.split(",")
    for checkbox_selected in checkboxes_selected:
        common.click_property_checkbox(context, checkbox_selected)


@when("^the user selects value (?P<dropdown_value>.*?) for property (?P<property_selected>.*?)$")
def step(context, dropdown_value, property_selected):
    checkbox = common.find_property_checkbox(context, property_selected)
    assert checkbox is not None, "checkbox for property '%s' could not be found" % property_selected

    dropdown = common.find_dropdown_for_checkbox(checkbox)
    assert dropdown is not None, "dropdown for property '%s' could not be found" % property_selected

    common.select_value_in_dropdown(dropdown, dropdown_value)


@when("^the user submits the selection with name (?P<name>.*?)$")
def step(context, name):
    common.create_variant_with_name(context.webdriver, name)


@when("^user types (?P<text>.*?) in the variants filter$")
def step(context, text):
    driver = context.webdriver
    input_filter = driver.find_element_by_css_selector("#left-column div.filter input")
    input_filter.send_keys(text)


@then("^a new variant with (?P<properties_generated>.*?) and name (?P<name>.*?) exists$")
def step(context, properties_generated, name):
    properties_generated = properties_generated.split(",")
    variant = common.get_newest_variant()
    assert variant.name == name, "expected name %s does not match the actual: %s" % (name, variant.name)
    assert len(variant.PropertyValues) == len(properties_generated), "expected newly generated property values length " \
                                                                     "'%d' does not match the actual: %d" % \
                                                                     (len(properties_generated),
                                                                      len(variant.PropertyValues))
    for property_value in variant.PropertyValues:
        property_name = property_value.Property.Name[""]
        assert property_name in properties_generated, "property %s is not part of the needed generated properties: " \
                                                      "%s" % (property_name, properties_generated)


@then("^a new variant with value (?P<dropdown_value>.*?) for property "
      "(?P<property_selected>.*?) exists$")
def step(context, dropdown_value, property_selected):
    variant = common.get_newest_variant()

    for property_value in variant.PropertyValues:
        if property_value.Property.Name[""] == property_selected:
            assert property_value.EnumValue.name == dropdown_value


@then("^(?P<number>.*?)variants named (?P<name>.*?) should be visible in the right table$")
def step(context, number, name):
    number = int(number)
    names = name.split(";")

    variant_headers = context.webdriver.find_elements_by_class_name("variant-header-label")
    variant_names = set([variant_header.text for variant_header in variant_headers if variant_header.text != ""])

    assert len(variant_names) == number, "%d variants were shown, but %d needed" % (len(variant_names), number)

    for name in names:
        assert any(
            name in variant_name for variant_name in variant_names), "variant %s is not visible, but should be" % name


@then("^the user is not allowed to create a new variant$")
def step(context):
    driver = context.webdriver
    common.waitForAjax(driver)

    # this will trow an exception if the button is not disabled
    disabled_button = driver.find_element_by_css_selector(".table-shadow #add-variant-button[disabled]")
