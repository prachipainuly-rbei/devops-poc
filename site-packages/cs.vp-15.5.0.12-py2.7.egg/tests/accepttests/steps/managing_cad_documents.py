#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

import os
import tempfile
from cdb.validationkit import given, when, then, run_with_added_roles, \
    run_with_roles, log, operation, getStateNumber, checkFile
from common import Model, \
    generateCADDocument, generateItem, \
    getStateName
from cdb.objects.cdb_file import CDB_File
from cs.vp.items import Item


# ------------------------------------------------------------
# Scenario Create New CAD-Document
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) creates a new CAD-Document$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def create(context):
        try:
            context.cad_document_len = len(Model.Query())
            context.cad_document = generateCADDocument(context.item)
        except Exception, e:
            log("Error creating the CAD-Document, details: %s" % e)
    return create(context)


@then("^a new CAD-Document is (?P<state>(?:not )?generated)$")
def step(context, state):
    if state == "generated":
        assert len(Model.Query()) - context.cad_document_len == 1, \
            "No CAD-Document was created"
    elif state == "not generated":
        assert len(Model.Query()) - context.cad_document_len == 0, \
            "A CAD-Document was created"
    else:
        assert False, "Unknown state '%s'" % state


# ------------------------------------------------------------
# Scenario Change CAD-Document
#
# ------------------------------------------------------------
@given("^a CAD-Document exists$")
@run_with_added_roles(["Documentation", "Engineering"])
def step(context):
    context.item = generateItem()
    context.cad_document = generateCADDocument(context.item)
    context.cad_document_len = len(Model.Query())
    context.item_len = len(Item.Query())


def getDocumentAttributesToChange():
    return {"titel": "title"}


@when("^(?P<role>.*?) changes this CAD-Document$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def change(context):
        try:
            operation("CDB_Modify",
                      context.cad_document,
                      user_input=getDocumentAttributesToChange())
        except Exception, e:
            log("Error modifying the CAD-Document, details: %s" % str(e))
    return change(context)


@then("^the changed CAD-Document is (?P<state>(?:not )?saved)$")
def step(context, state):
    res = Model.ByKeys(
        context.cad_document.z_nummer,
        context.cad_document.z_index)
    s_attrs = set(getDocumentAttributesToChange().items())
    if state == "saved":
        assert s_attrs.issubset(
            set(res.items())
        ), "The attributes differ"
    elif state == "not saved":
        assert not s_attrs.issubset(
            set(res.items())
        ), "The attributes differ"
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Copy CAD-Document
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) copies this CAD-Document$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def copy(context):
        try:
            context.copy = operation("CDB_Copy", context.cad_document)
        except Exception, e:
            log("Error copying the CAD-Document, details: %s" % str(e))
    return copy(context)


@then("^the CAD-Document is (?P<action>(?:not )?copied|(?:not )?deleted)$")
def step(context, action):
    res = Model.ByKeys(
        context.cad_document.z_nummer,
        context.cad_document.z_index)
    if action == "copied":
        assert len(Model.Query()) - context.cad_document_len == 1, \
            "Document not copied"
    elif action == "not copied":
        assert len(Model.Query()) - context.cad_document_len == 0, \
            "Document copied"
    elif action == "deleted":
        assert res is None, "The CAD-Document isn't deleted"
    elif action == "not deleted":
        assert context.cad_document == res, "The CAD-Document is deleted"
    else:
        assert False, "Unknown state"


@then("^the copy of the CAD-Document is "
      "(?P<state>(?:not )?allocated) to the item$")
def step(context, state):
    if state == "allocated":
        res = Model.ByKeys(
            context.copy.z_nummer,
            context.copy.z_index)
        assert res.Item is not None, \
            "The Item is not allocated"
        assert context.item == res.Item, "There is a different Item allocated"
    elif state == "not allocated":
        if hasattr(context, "copy"):
            res = Model.ByKeys(
                context.copy.z_nummer,
                context.copy.z_index)
            if res is not None:
                assert res.Item is None, "The Item is allocated"
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Delete CAD-Document
#
# ------------------------------------------------------------
@when("(?P<role>.*?) deletes this CAD-Document")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def delete(context):
        try:
            operation("CDB_Delete", context.cad_document)
        except Exception, e:
            log("Error deleting the CAD-Document, details: %s" % str(e))
    return delete(context)


# ------------------------------------------------------------
# Scenario Generate An Index Of A CAD-Document
#
# ------------------------------------------------------------
@given("^a released CAD-Document exists$")
@run_with_added_roles(["Design Release", "Engineering", "Documentation"])
def step(context):
    context.cad_document = generateCADDocument(context.item)
    context.cad_document_len = len(Model.Query())
    stateName1 = getStateName(context.cad_document.z_art, "Review")
    stateName2 = getStateName(context.cad_document.z_art, "Released")
    operation("CDB_Workflow", context.cad_document,
              user_input={"zielstatus": stateName1})
    operation("CDB_Workflow", context.cad_document,
              user_input={"zielstatus": stateName2})


@when("^(?P<role>.*?) generates an index of this CAD-Document$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def index(context):
        try:
            context.newindex = operation("CDB_Index", context.cad_document)
        except Exception, e:
            log("Error versioning the CAD-Document, details: %s" % str(e))
    return index(context)


@then("^an index of the original CAD-Document is "
      "(?P<action>(?:not )?generated)$")
def step(context, action):
    if action == "generated":
        assert len(Model.Query()) - context.cad_document_len == 1, \
            "No CAD-Document created"
        assert context.cad_document.z_nummer == context.newindex.z_nummer, \
            "The new index has not the same number"
    elif action == "not generated":
        assert len(Model.Query()) - context.cad_document_len == 0, \
            "A CAD-Document was created"
    else:
        assert False, "Unknown state"


@then("^the original CAD-Document is (?P<state>Released|Obsolete|Revision)$")
def step(context, state):
    res = Model.ByKeys(
        context.cad_document.z_nummer,
        context.cad_document.z_index)
    assert (res.z_status
            ==
            getStateNumber(res.z_art, state)
            ), "The CAD-Document is not in state %s" % state


# ------------------------------------------------------------
# Scenario Change State Of A Document
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) changes the state of this CAD-Document$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def change(context):
        context.to = context.table[0]["TO"]
        context.frm = context.table[0]["FROM"]
        try:
            context.cad_document.ChangeState(
                getStateNumber(context.cad_document.z_art, context.to)
            )
        except Exception, e:
            log("Error changing state the document, details: %s" % str(e))
    return change(context)


@then("^the changed state of the CAD-Document is (?P<state>(?:not )?saved)$")
def step(context, state):
    res = Model.ByKeys(
        context.cad_document.z_nummer,
        context.cad_document.z_index)
    if state == "saved":
        assert (res.z_status
                ==
                getStateNumber(res.z_art, context.to)
                ), "The state of the document hasn't changed"
    elif state == "not saved":
        if res is not None:
            assert (res.z_status
                    ==
                    getStateNumber(res.z_art, context.frm)
                    ), "The state of the document has changed"
        else:
            return True
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Release an Index
#
# ------------------------------------------------------------
@given("^an index of this CAD-Document is generated$")
def step(context):
    @run_with_added_roles(["Engineering"])
    def create(context):
        context.index = operation("CDB_Index", context.cad_document)
    return create(context)


@when("^(?P<role>.*?) releases the index of the CAD-Document")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def release(context):
        try:
            context.index.ChangeState(
                getStateNumber(context.index.z_art, "Review")
            )
            context.index.ChangeState(
                getStateNumber(context.index.z_art, "Released")
            )
        except Exception, e:
            log("Error releasing state the CAD-Document, details: %s" % str(e))
    return release(context)


@then("^the index of the CAD-Document is (?P<state>(?:not )?Released)$")
def step(context, state):
    if state == "Released":
        assert (context.index.z_status
                ==
                getStateNumber(context.index.z_art, "Released")
                ), "The CAD-Document is not released"
    elif state == "not Released":
        assert (context.index.z_status
                !=
                getStateNumber(context.index.z_art, "Released")
                ), "The CAD-Document is released"
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Import A File Into A CAD-Document
#
# ------------------------------------------------------------
@given("^a file exists$")
def step(context):
    f = tempfile.NamedTemporaryFile(delete=False)
    f.write(os.urandom(100))
    f.close()
    context.file = f.name


@when("^(?P<role>.*?) imports this file into the CAD-Document$")
def step(context, role):
    roles = set(role.split(", "))

    @run_with_roles(roles)
    def imp(context):
        context.file_len = len(context.cad_document.Files)
        try:
            CDB_File.NewFromFile(context.cad_document.cdb_object_id,
                                 context.file,
                                 True)
        except Exception, e:
            log("Error importing a file, details: %s" % str(e))
    return imp(context)


@then("^the file is (?P<state>(?:not )?embedded) into the CAD-Document$")
def step(context, state):
    context.cad_document.Reload()
    try:
        if state == "embedded":
            assert len(context.cad_document.Files) - context.file_len >= 0, \
                "No File associated"
            assert checkFile(context.file,
                             context.cad_document.getPrimaryFile()), \
                "The contents of the primary file differ"
        elif state == "not embedded":
            assert len(context.cad_document.Files) - context.file_len == 0, \
                "A File is associated"
    finally:
        os.remove(context.file)
