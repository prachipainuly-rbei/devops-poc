#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#


from cdb.validationkit import run_with_roles, operation, when, then
from common import Model
from cs.vp.items import ItemCategory, Item

item_categ = ItemCategory.Query()[0]

# ------------------------------------------------------------
# Scenario: A Non-Engineer Tries To Create A CAD-Document
#
# ------------------------------------------------------------


@when("^(?P<role>.*?) tries to create a CAD-Document$")
def step(context, role):
    context.CADDocument = None
    context.error = None

    @run_with_roles(set([role]))
    def createCADDocument(context):
        try:
            context.CADDocument = \
                operation("CDB_Create", Model,
                          user_input={},
                          preset={
                              "teilenummer": context.item.teilenummer,
                              "t_index": context.item.t_index,
                              "z_categ1": 144,  # Produkt/Teil
                              "z_categ2": 177   # CAD-Zeichnung
                          })
        except RuntimeError, context.error:
            pass
    return createCADDocument(context)


@then("he's (?P<result>.*) to do so")
def step(context, result):
    assert (
        (result == "permitted" and context.CADDocument is not None
         and context.error is None)
        or
        (result == "not permitted" and context.CADDocument is None
         and context.error is not None))


# ------------------------------------------------------------
# Scenario: A Non-Engineer Tries To Create An Item
#
# ------------------------------------------------------------


@when("^(?P<role>.*?) tries to create an item$")
def step(context, role):
    context.item = None
    context.error = None

    @run_with_roles(set([role]))
    def createItem(context):
        try:
            context.item = \
                operation("CDB_Create", Item,
                          user_input={},
                              preset={"benennung": "Blech",
                                      "t_kategorie": item_categ.kategorie,
                                      "mengeneinheit": "qm"})
        except RuntimeError, context.error:
            pass
    return createItem(context)


@then("he's (?P<result>.*) to create an item")
def step(context, result):
    assert (
        (result == "permitted" and context.item is not None
         and context.error is None)
        or
        (result == "not permitted" and context.item is None
         and context.error is not None)
        )


# -----------------------------------------------------------------
# Scenario A Non-Engineer Tries To Handle An Unreleased CAD-Document
#
# -----------------------------------------------------------------


@when(u"a (?P<role>.*) tries to (?P<action>.*) this CAD-Document")
def step(context, role, action):
    @run_with_roles(set([role]))
    def check():
        return context.cad_document.CheckAccess(action, "behave_test")
    context.right_granted = check()


@then("he's (?P<result>.*) the necessary permissions")
def step(context, result):
    assert(
        (result == "not granted" and not context.right_granted)
        or
        (result == "granted" and context.right_granted)
    )


# -----------------------------------------------------------------
# Scenario A Non-Engineer Tries To Handle An Unreleased Item
#
# -----------------------------------------------------------------


@when(u"a (?P<role>.*) tries to (?P<action>.*) this item")
def step(context, role, action):
    @run_with_roles(set([role]))
    def check():
        return context.item.CheckAccess(action, "behave_test")
    context.right_granted = check()


# ------------------------------------------------------------
# Scenario An Engineer Tries To Handle A Released CAD-Document
#
# ------------------------------------------------------------


@when(u"an engineer tries to (?P<action>.*) this released CAD-Document")
def step(context, action):
    @run_with_roles(["Engineering", "public"])
    def check():
        return context.cad_document.CheckAccess(action, "behave_test")
    context.right_granted = check()

# ------------------------------------------------------------
# Scenario An Engineer Tries To Handle A Released CAD-Document
#
# ------------------------------------------------------------


@when(u"an engineer tries to (?P<action>.*) this released Item")
def step(context, action):
    @run_with_roles(["Engineering", "public"])
    def check():
        return context.item.CheckAccess(action, "behave_test")
    context.right_granted = check()
