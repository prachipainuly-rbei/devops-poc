import {
    initCollapsedBlockActions, initCollapsedBlockStore, COLLAPSED_BLOCK_ID,
    initBlockPositionActions, initBlockPositionStore, BLOCK_POSITION_ID,
    initTypeInfoActions, initTypeInfoStore, TYPE_INFO_ID,
    initModelActions, initModelStore, MODEL_STORE_ID,
    initAttributeGroupActions, initAttributeGroupStore, ATTRIBUTE_GROUP_ID,
    ErrorAlert, error
} from 'cs-flux-components';
import {
    BOM_View, BOM_UsageView, PreviewFile,
    ContentHandler, ErrorHandler
} from 'cs-items';

import {Flux} from 'bflummox';

import React from 'react/addons';
import Immutable from 'immutable';


describe('rendering of error messages in case of error', function() {
    const _test = function(relshipName, Component) {
        return function () {
            const TestUtils = React.addons.TestUtils;

            const flux = new Flux();
            initCollapsedBlockActions(flux, "");
            initCollapsedBlockStore(flux, {});
            initBlockPositionActions(flux, "");
            initBlockPositionStore(flux, {});

            const props = {
                refName: "relship_name",
                currentObjectRelships: Immutable.Map().set(relshipName, error),
                title: "TEST",
                collapsed: false,
                object: Immutable.Map(),
                blockName: "TEST",
                flux: flux
            };

            var relshipList = TestUtils.renderIntoDocument(
                <Component {...props} />
            );

            // this throws an exception if it finds no ErrorAlerts, or more than
            // one
            TestUtils.findRenderedComponentWithType(relshipList, ErrorAlert);
        }
    };

    it('if the relationship Subparts is error, an error message will be rendered ' +
        'in the bill of materials', _test('Subparts', BOM_View));

    it('if the relationship Assemblies is error, an error message will be rendered ' +
        'in the usages list', _test('Assemblies', BOM_UsageView));

    it('if the relationship DocumentsCADDocuments is error, an error message will be rendered ' +
        'in the preview collapsible', _test('DocumentsCADDocuments', PreviewFile));

});


describe('display an error message in case of an http error', function() {
    beforeEach(function() {
        jasmine.Ajax.install();
        jasmine.clock().install();

        const flux = new Flux();

        // init stores
        initModelActions(flux);
        initModelStore(flux);
        initCollapsedBlockActions(flux, '');
        initCollapsedBlockStore(flux, {});
        initBlockPositionActions(flux, "");
        initBlockPositionStore(flux, {});
        initTypeInfoActions(flux);
        initTypeInfoStore(flux);
        initAttributeGroupActions(flux, 'fake_settings_url');
        initAttributeGroupStore(flux, {});

        this.flux = flux;
    });

    afterEach(function() {
        jasmine.Ajax.uninstall();
        jasmine.clock().uninstall();
    });

    const _test = (flux, err_code) => {
        const TestUtils = React.addons.TestUtils;

        const props = {
            partBaseUrl: "part_url",
            params: {
                nav_id: "part_nav_id"
            },
            flux: flux
        };

        const page = TestUtils.renderIntoDocument(
            <ContentHandler {...props} />
        );

        // Wait some time to let the browser execute the asynchronous action
        // 1ms is sufficient, we just need to give the control back to the
        // browser
        jasmine.clock().tick(1);
        // respond with an error to the fetchObject request
        jasmine.Ajax.requests.mostRecent().respondWith({
            status: err_code,
            responseText: 'error'
        });

        // Wait 10ms to let getJsonOnce delete the ajax call, so that
        // the other tests also run
        jasmine.clock().tick(11);

        // this throws an exception if it finds no ErrorAlerts, or more than
        // one

        const store = flux.getStore(MODEL_STORE_ID);
        store.addListener('change', function() {
            TestUtils.findRenderedComponentWithType(page, ErrorHandler);
        });
    };

    it('if the server responds with a 500 error, an error message is displayed',
        function() {
            _test(this.flux, 500)
        });

    it('if the server responds with a 404 error, an error message is displayed',
        function() {
            _test(this.flux, 404)
        });

    it('if the server responds with a 403 error, an error message is displayed',
        function() {
            _test(this.flux, 403)
        });
});
