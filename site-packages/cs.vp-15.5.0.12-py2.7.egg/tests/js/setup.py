# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2015 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module set_module_paths

This is the documentation for the set_module_paths module.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: setup.py 143401 2016-07-01 09:17:12Z gda $"

# Some imports
import io
import os
import sys
import json

from cdb import killableprocess
from cdb import static


def get_component_version(component_name):
    component = static.components_current.get_component(component_name)
    if component:
        with io.open(os.path.join(component.path, "bower.json")) as fp:
            bower_json = json.load(fp)
            return bower_json.get("version")


def get_component_paths(components):
    packages = components._components.keys()

    paths = set()
    for name in packages:
        component = components.get_component(name)
        paths.add((name, component.path))

    if components.fallback_collection is not None:
        paths.update(get_component_paths(components.fallback_collection))

    return paths


def _aliases():
    components = static.components_current
    return get_component_paths(components)


def aliases():
    return ";".join(["%s::%s" % (name, path) for name, path in _aliases()])


def js_path():
    return ";".join(set([os.path.dirname(path) for _, path in _aliases()]))


def generate_package_json():
    with io.open(os.path.join(os.curdir, "package_template.json")) as fp:
        package_json = json.load(fp)
        for dep in package_json["devDependencies"]:
            version = get_component_version(dep)
            if version is not None:
                package_json["devDependencies"][dep] = version
        with open(os.path.join(os.curdir, "package.json"), "w") as fq:
            json.dump(package_json, fq)


# Guard importing as main module
if __name__ == "__main__":
    generate_package_json()

    # shell=True necessary because otherwise killableprocess will not
    # read the environment variable PATH
    print killableprocess.check_output("npm install", shell=True)

    p = killableprocess.Popen("npm run build " + " ".join(sys.argv[1:]),
                              shell=True,
                              env=dict(os.environ,
                                       JS_PATH=js_path(),
                                       JS_ALIASES=aliases()),
                              stdout=killableprocess.PIPE,
                              stderr=killableprocess.STDOUT)
    for line in iter(p.stdout.readline, b''):
        print line.rstrip()
    p.stdout.close()
    p.wait()
