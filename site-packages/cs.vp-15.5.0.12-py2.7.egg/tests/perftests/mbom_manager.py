# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# https://www.contact-software.com/

"""
Performance Tests for the backend of the mbom manager.
Here we test the algorithms and the database queries.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: mbom_manager.py 181768 2018-08-07 10:50:33Z gda $"


import json
import logging
import collections

from pyperf import bench
from pyperf import timer

from cs.vp import items
from cs.vp import products
from cs.vp.bom import diffutil
from cs.vp.bom.diffutil import pages

from cdb import InstallScript
from cdb import sqlapi
from cdb.objects import org
from cdb.testcase import run_level_setup

EBOM = ("9509444", "")
MBOM = ("9510377", "")
ITEM = ("9509452", "")
DIFF_ITEM = ("9509518", "")
PRODUCT = "MBOM_PERFORMANCE"

logger = logging.getLogger("MbomManagerPerftest")


# We use a mock class for the page object instead of refactoring the module pages.py
# This way we enable backfilling
class PageMock(object):
    def __init__(self, data):
        self.data = data
        self.application = diffutil._getapp()

        # mock some methods for the FetchBom tests
        self.application.getURLPaths = lambda *args: collections.defaultdict(unicode)
        self.make_link = lambda *args: u""

    def get_form_data(self, name, dflt=None):
        return self.data.get(name, dflt)


class MbomManagerBench(bench.Bench):
    def setUpClass(self):
        if run_level_setup:
            run_level_setup()

        # THINK ABOUT: don't do this every time
        self.install_data()

        self.ebom = items.Item.ByKeys(teilenummer=EBOM[0], t_index=EBOM[1])
        assert self.ebom is not None, "cannot find ebom"

        self.mbom = items.Item.ByKeys(teilenummer=MBOM[0], t_index=MBOM[1])
        assert self.mbom is not None, "cannot find mbom"

        self.item = items.Item.ByKeys(teilenummer=ITEM[0], t_index=ITEM[1])
        assert self.item is not None, "cannot find item"

        self.diff_item = items.Item.ByKeys(teilenummer=DIFF_ITEM[0], t_index=DIFF_ITEM[1])
        assert self.diff_item is not None, "cannot find diff_item"

        self.product = products.Product.ByKeys(code=PRODUCT)
        assert self.product is not None, "cannot find product"

        self.organization = org.Organization.ByKeys(name="CONTACT Software")
        assert self.organization is not None, "cannot find organization"

        self.warmup()

    def warmup(self):
        self.call_api()

    def install_data(self):
        from data import testdata_mbom_performance
        InstallScript.run(["", "--autoinstall"], testdata_mbom_performance.getInstance())

    def call_api(self):
        pass

    def bench_call_api(self):
        times = []
        sql_counts = []

        for _ in range(self.args["iterations"]):
            sql_count_before = sqlapi.SQLget_statistics()['statement_count']
            with timer.Timer() as t:
                self.call_api()
            sql_count_after = sqlapi.SQLget_statistics()['statement_count']

            times.append(t.elapsed.total_seconds())
            sql_counts.append(sql_count_after - sql_count_before)

        self.storeResult(times, name="bench_runtime", type="time_series")
        self.storeResult(sql_counts, name="bench_sqlstms", type="count", unit="statements")


class ComputeDifferences(MbomManagerBench):
    def call_api(self):
        mock = PageMock({})
        pages.diff_table(mock, pages.URLSEPARATOR.join(EBOM), pages.URLSEPARATOR.join(MBOM))


class ComputeDifferencesWithVariant(MbomManagerBench):
    def call_api(self):
        mock = PageMock({
            "product_oid": self.product.cdb_object_id,
            "variant_id": 1
        })
        pages.diff_table(mock, pages.URLSEPARATOR.join(EBOM), pages.URLSEPARATOR.join(MBOM))


class ComputeDifferencesWithBomFilter(MbomManagerBench):
    def call_api(self):
        mock = PageMock({
            "bomfilter": json.dumps({"site_object_id": self.organization.cdb_object_id}),
        })
        pages.diff_table(mock, pages.URLSEPARATOR.join(EBOM), pages.URLSEPARATOR.join(MBOM))


class FetchBom(MbomManagerBench):
    def call_api(self):
        mock = PageMock({})
        pages.bom_by_item_id(mock, self.ebom.cdb_object_id)


class FetchBomWithVariant(MbomManagerBench):
    def call_api(self):
        mock = PageMock({
            "product_object_id": self.product.cdb_object_id,
            "variant_id": 1
        })
        pages.bom_by_item_id(mock, self.ebom.cdb_object_id)


class FetchBomWithFilter(MbomManagerBench):
    def call_api(self):
        mock = PageMock({
            "bomfilter": json.dumps({"site_object_id": self.organization.cdb_object_id}),
        })
        pages.bom_by_item_id(mock, self.ebom.cdb_object_id)


class SynchBom(MbomManagerBench):
    def call_api(self):
        path = [
            {"teilenummer": "9509444", "t_index": ""},
            {"baugruppe": "9509444", "b_index": "", "teilenummer": "9509451", "t_index": "", "position": 70, "variante": "", "auswahlmenge": "0.0"},
            {"baugruppe": "9509451", "b_index": "", "teilenummer": "9509452", "t_index": "", "position": 40, "variante": "", "auswahlmenge": "0.0"}
        ]
        mock = PageMock({
            "is_ebom": "true",
            "path": json.dumps(path)
        })
        pages.syncbom(
            mock, self.item.cdb_object_id, self.ebom.cdb_object_id, self.mbom.cdb_object_id)


class SynchBomReverse(MbomManagerBench):
    def call_api(self):
        path = [
            {"teilenummer": "9510377", "t_index": ""},
            {"baugruppe": "9510377", "b_index": "", "teilenummer": "9510378", "t_index": "", "position": 10, "variante": "", "auswahlmenge": "0.0"},
            {"baugruppe": "9510378", "b_index": "", "teilenummer": "9510381", "t_index": "", "position": 11, "variante": "", "auswahlmenge": "0.0"},
            {"baugruppe": "9510381", "b_index": "", "teilenummer": "9510382", "t_index": "", "position": 10, "variante": "", "auswahlmenge": "0.0"},
            {"baugruppe": "9510382", "b_index": "", "teilenummer": "9509451", "t_index": "", "position": 12670, "variante": "", "auswahlmenge": "0.0"},
            {"baugruppe": "9509451", "b_index": "", "teilenummer": "9509452", "t_index": "", "position": 40, "variante": "", "auswahlmenge": "0.0"}
        ]
        mock = PageMock({
            "is_ebom": "false",
            "path": json.dumps(path)
        })
        pages.syncbom(
            mock, self.item.cdb_object_id, self.ebom.cdb_object_id, self.mbom.cdb_object_id)


class StringSearch(MbomManagerBench):
    def call_api(self):
        mock = PageMock({
            "condition": "Rohr"
        })
        pages.stringsearch(mock, self.mbom.cdb_object_id)


class FindDifferences(MbomManagerBench):
    def call_api(self):
        mock = PageMock({})
        pages.find_differences_json(
            mock, self.diff_item.cdb_object_id, self.ebom.cdb_object_id, self.mbom.cdb_object_id)


class FindDifferencesWithVariant(MbomManagerBench):
    def call_api(self):
        mock = PageMock({
            "variant_id": 1
        })
        pages.find_differences_json(
            mock, self.diff_item.cdb_object_id, self.ebom.cdb_object_id, self.mbom.cdb_object_id,
            self.product.cdb_object_id
        )


class FindDifferencesWithFilter(MbomManagerBench):
    def call_api(self):
        mock = PageMock({
            "bomfilter": json.dumps({"site_object_id": self.organization.cdb_object_id}),
        })
        pages.find_differences_json(
            mock, self.diff_item.cdb_object_id, self.ebom.cdb_object_id, self.mbom.cdb_object_id)
