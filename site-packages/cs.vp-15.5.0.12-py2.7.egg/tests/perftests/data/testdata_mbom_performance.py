#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
Module test_data_fay

Update script for the installation of test data from Faymonville.

IMPORTANT: This is ONLY for test. DO NOT RELEASE!
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: testdata_mbom_performance.py 181768 2018-08-07 10:50:33Z gda $"

# Some imports
import sys

from cdb import sqlapi
from cdb import InstallScript

# Products to be exported (together with their MaxBOMs)
PRODUCTS = ["MBOM_PERFORMANCE"]

# Items to be exported, which are not MaxBOMs
ITEMS = []

# Documents, CAD Documents or Workspaces, which are not associated to
# an exported item
DOCUMENTS = []

# sqlite zickt (expression tree too large)
# I'll try to trick it this way

MAX_EXPRESSION_WIDTH = 300


def split_query(factory, collection, maxwidth):
    results = []
    for i in range((len(collection) / maxwidth) + 1):
        start = i * maxwidth
        end = (i + 1) * maxwidth

        excerpt = collection[start:end]
        if excerpt:
            results.extend(factory(excerpt))
    return results


class TestData (InstallScript.CDBDemoInstallationScript):
    def __init__(self):
        InstallScript.CDBDemoInstallationScript.__init__(
            self, __file__.decode(sys.getfilesystemencoding()),
            "Test data for acceptance tests")
        self._initialized = False

    def _load_data(self):
        if self._initialized:
            return

        from cs.vp.items import Item
        from cs.vp.products import Product
        from cs.vp.variants.properties import Property
        from cs.vp.variants.propertiescatalogue import CatalogueProperty
        from cs.vp.variants.propertiescatalogue import CatalogueFolder
        from cs.documents import Document

        # Build products and projects list
        products = Product.Query(Product.code.one_of(*PRODUCTS))
        self.product_object_ids = products.cdb_object_id

        # Build catalogue properties list
        self.catalogue_property_ids = filter(bool,
                                             Property.Query(Property.product_object_id.one_of(*self.product_object_ids)).catalogue_property_object_id)
        catalogue_properties = CatalogueProperty.Query(CatalogueProperty.cdb_object_id.one_of(*self.catalogue_property_ids))

        # Build catalogue folders list
        def get_ancestors(folder):
            if not folder:
                return []
            return [folder] + get_ancestors(folder.Parent)

        self.catalogue_folder_ids = []
        for prop in catalogue_properties:
            for folder in prop.Folders:
                self.catalogue_folder_ids += [f.cdb_object_id for f in get_ancestors(folder) if f.cdb_object_id != CatalogueFolder.RootObjectID]

        # Build items list
        items = []

        # Add product maxboms to the item list
        for product in products:
            for maxbom in product.MaxBoms:
                items += self.get_components_list(maxbom)
                for mbom in maxbom.ManufacturingViews:
                    if mbom not in product.MaxBoms:
                        items += self.get_components_list(mbom)

        # Add order boms to the item list
        for teilenummer, t_index in ITEMS:
            item = Item.ByKeys(teilenummer=teilenummer, t_index=t_index)
            if item:
                items += self.get_components_list(item)
        self.items = list(set(items))

        # Build document list
        conditions = []
        for teilenummer, t_index in self.items:
            conditions.append("(teilenummer='%s' AND t_index='%s')" %
                              (teilenummer, t_index))
        conditions += ["(z_nummer='%s' AND z_index='%s')" % keys
                       for keys in DOCUMENTS]

        def factory(conds):
            return Document.Query(" OR ".join(conds))
        documents = split_query(factory, conditions, MAX_EXPRESSION_WIDTH)

        self.documents = [(doc.z_nummer, doc.z_index) for doc in documents]
        self.document_oids = [doc.cdb_object_id for doc in documents]

        self._initialized = True

    def requires_control_file(self):
        return True

    @classmethod
    def get_components_list(cls, item):
        result = [(item.teilenummer, item.t_index)]
        for comp in item.Components:
            if comp.Item:
                result += cls.get_components_list(comp.Item)
        return result

    def get_product_ctrl(self):
        ctrl = [
                # Produkte
                "* FROM cdbvp_product WHERE cdb_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Activities
                "* FROM cdbblog_subscription WHERE channel_cdb_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),
                "* FROM cdbblog_posting WHERE context_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),
                "* FROM cdbblog_topic2posting WHERE topic_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),
                ]

        return ctrl

    def get_vm_ctrl(self):
        ctrl = [
                # Variantenmappings
                "* FROM cdbvp_variant_mapping WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Property folders
                "* FROM cdbvp_property_folder WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),
                "* FROM cdbvp_property_folder2property WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Modulzuordnungen
                "* FROM cdbvp_prop2subproduct_prop WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),
                "* FROM cdbvp_product2product WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Constraints
                "* FROM cdbvp_constraint WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Merkmalwerte
                "* FROM cdbvp_enum_def WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),
                "* FROM cdbvp_enum_def_prop_value WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Pr채dikate
                "* FROM cdbvp_predicate WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Sichten
                "* FROM cdbvp_product_view WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Merkmale
                "* FROM cdbvp_property WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),
                "* FROM cdbvp_property_dependency WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Merkmalbewertungen
                "* FROM cdbvp_property_value WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Artikelauspr채gungen
                # "* FROM cdbvp_variant2part WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Varianten
                "* FROM cdbvp_variant WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Terme
                "* FROM cdbvp_term WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Maximalst체cklisten (Zuordnungen)
                "* FROM cdbvp_product_bom WHERE product_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),

                # Catalogue properties
                "* FROM cdbvp_catalogue_property WHERE cdb_object_id IN (%s)" % InstallScript.quotejoin(self.catalogue_property_ids),
                "* FROM cdbvp_catalogue_value_folder WHERE property_object_id IN (%s)" % InstallScript.quotejoin(self.catalogue_property_ids),
                "* FROM cdbvp_catalogue_enum_def WHERE catalogue_property_object_id IN (%s)" % InstallScript.quotejoin(self.catalogue_property_ids),
                "* FROM cdbvp_catalogue_prop2folder WHERE property_object_id IN (%s)" % InstallScript.quotejoin(self.catalogue_property_ids),
                "* FROM cdbvp_catalogue_folder WHERE cdb_object_id IN (%s)" % InstallScript.quotejoin(self.catalogue_folder_ids),
                ]

        def factory(itms):
            return [
                # Auswahlpr채dikate
                "* FROM cdbvp_bom_predicate WHERE product_object_id IN (%s) AND %s" % (InstallScript.quotejoin(self.product_object_ids),
                                                                                       InstallScript.create_condition("cdbvp_bom_predicate",
                                                                                                                      ["baugruppe", "b_index"],
                                                                                                                      itms)),
                "* FROM cdbvp_bom_term WHERE product_object_id IN (%s) AND %s" % (InstallScript.quotejoin(self.product_object_ids),
                                                                                  InstallScript.create_condition("cdbvp_bom_term",
                                                                                                                 ["baugruppe", "b_index"],
                                                                                                                 itms)),

                # Diskrete Merkmalbewertungen
                "* FROM cdbvp_bom_mapping WHERE vpm_product_object_id IN (%s) AND %s" % (InstallScript.quotejoin(self.product_object_ids),
                                                                                         InstallScript.create_condition("cdbvp_bom_mapping",
                                                                                                                        ["baugruppe", "b_index"],
                                                                                                                        itms)),
                ]

        ctrl += split_query(factory, self.items, MAX_EXPRESSION_WIDTH)
        return ctrl

    def get_item_ctrl(self):
        def factory(itms):
            return [
                # Items
                "* FROM teile_stamm WHERE %s" % InstallScript.create_condition("teile_stamm", ["teilenummer", "t_index"], itms),

                # BOM positions
                "* FROM einzelteile WHERE %s" % InstallScript.create_condition("einzelteile", ["baugruppe", "b_index"], itms),

                # Prefixes
                "* FROM prefixes WHERE prefix IN (%s)" % InstallScript.quotejoin([item[0] for item in itms]),
            ]

        ctrl = split_query(factory, self.items, MAX_EXPRESSION_WIDTH)
        return ctrl

    def get_documents_ctrl(self):

        def factory(docs):
            return [
                # Documents
                "* FROM zeichnung WHERE %s" % InstallScript.create_condition("zeichnung", ["z_nummer", "z_index"], docs),
                "* FROM cdb_doc_rel WHERE %s" % InstallScript.create_condition("cdb_doc_rel", ["z_nummer", "z_index"], docs),
            ]
        ctrl = split_query(factory, self.documents, MAX_EXPRESSION_WIDTH)

        return ctrl

    def get_export_ctrl(self):
        self._load_data()
        ctrl = []

        ctrl += self.get_product_ctrl()
        ctrl += self.get_vm_ctrl()
        ctrl += self.get_item_ctrl()
        ctrl += self.get_documents_ctrl()

        return ctrl

    def get_export_ctrl_files(self):
        return []
        self._load_data()

        def factory(docs):
            return ["zeichnung WHERE %s" %
                    InstallScript.create_condition("zeichnung",
                                                   ["z_nummer", "z_index"],
                                                   docs)]

        # Documents
        result = split_query(factory, self.documents, MAX_EXPRESSION_WIDTH)

        result += [
            # Produkte
            "cdbvp_product WHERE cdb_object_id IN (%s)" % InstallScript.quotejoin(self.product_object_ids),
        ]

        return result

    def post_import(self, session):
        # initiate counter
        counters = [("cdbvp_property", "id", "cdbvp_property"),
                    ("cdbvp_property", "position", "cdbvp_property_position"),
                    ("cdbvp_enum_def", "value", "cdbvp_enum_def"),
                    ("cdbvp_constraint", "constraint_id", "cdbvp_constraint"),
                    ("cdbvp_bom_predicate", "predicate_id", "cdbvp_bom_predicate"),
                    ("cdbvp_bom_term", "term_id", "cdbvp_bom_term"),
                    ("cdbvp_catalogue_enum_def", "value", "cdbvp_catalogue_enum_def_value"),
                    ("teile_stamm", "teilenummer", "part_seq"),
                    # ("cdb_t_statiprot", "cdbprot_zaehler", "cdb_t_statiprot"),
                    ("cdbvp_predicate", "predicate_id", "cdbvp_predicate"),
                    ("cdbvp_term", "term_id", "cdbvp_term"),
                    ]

        for counter in counters:
            InstallScript.CDBInstallScriptBase.init_cdb_counter(*counter)


# Factory Method
def getInstance():
    return TestData()

if __name__ == "__main__":
    # Change sys.argv to unicode
    sys.argv = [arg.decode("utf-8") for arg in sys.argv]
    InstallScript.run(sys.argv, getInstance())
