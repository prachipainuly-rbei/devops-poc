.. _`15_3_1_changes`:

What's New in cs.vp 15.3.1?
###########################


Variants Management
===================

The minor release 15.3.1 comes with an extension of the variant management.
This includes following features:

- Persistent instantiation of Maximum BOMs with the instantiation wizard (see user manual).
- Variant Matrix as alternative UI for managing variants (see user manual).
- Property hierarchy inside a product (see user manual).
- Possibility to filter a Maximum BOM using python expressions (see administration manual).

All these changes are backward compatible. Only the last one requires data migration.


Reengineering MBOM Manager
==========================

In this release there has been a reengineering of the algorithm for computing
the differences between EBOMs and MBOMs. The new algorithm provides a better
performance and more reliable results.

.. important::

    The new algorithm bases on the new attribute ``mbom_mapping_tag`` of the
    class ``bom_item``. Every EBOM-position and its correspondent MBOM-position
    must have the same value in this attribute.

If the MBOM is constructed using the standard operations the value of the
attribute ``mbom_mapping_tag`` is automatically set.
If the MBOM is imported from a third system or constructed in any other way,
the interface is responsible for setting the attribute correctly.

Update tool
-----------

    If you already have MBOMs in your system, you need to update your data
    to set the attribute ``mbom_mapping_tag``.

    We provide an update tool which sets the attribute according to an heuristic.
    Since the heuristic is not always correct, the update tool **does not run
    automatically**.

    To run the update tool and have more information use the following
    powerscript command:

    .. code-block:: none

        powerscript -m cs.vp.bom.tools.make_mbom_mapping_tag -h


Powerscript API for BOMs
========================

With this release there is a powerscript API for efficiently querying BOM
structures.

The Powerscript module ``cs.vp.bom.bomqueries`` provide methods for
querying an entire product structure.

The module ``cs.vp.bom.diffutil.differences`` provide methods for comparing
EBOMs and MBOMs.

The module ``cs.vp.bom.mapping`` provide methods to map EBOM-positions with
MBOM-positions.

The module ``cs.vp.bom.usages`` provide methods for querying the usages
of one or more parts inside one or more product structures.

For more information see the Powerscript manual of *cs.vp*.


Update Tasks
============

cs.vp.variants.updates.v15_3_1_0.Init
-------------------------------------

This task will perform the necessary data migration related to the new feature
"Possibility to filter a Maximum BOM using python expressions".

cs.vp.variants.updates.v15_3_1_0.DropObsoleteVariantAttribute
-------------------------------------------------------------

Starting from this release the attribute ``cdbvp_variant_info_txt`` of the table
``cdbvp_variant`` is a multilanguage attribute and must not exist in the database.
This task will remove the column from the database table.

Changes in Service Level 15
===========================

Bugfix E038693: Instantiated assemblies have BOM predicates
-----------------------------------------------------------

With this bugfix BOM predicates and BOM terms are no longer copied when instantiating an
a maxBOM for a variant. This leads to some performance optimization of the MBOM Manager.

If you are using the MBOM Manager, it is important that you clean up your data to remove
any redundant bom predicate, which was created before the bugfix. Use the following tool:

.. code-block:: shell

    powerscript -m cs.vp.bom.tools.delete_redundant_predicates --help


Changes in Service Level 16
===========================

Bugfix E047328: Wrong type substitution when evaluating string predicates
-------------------------------------------------------------------------

Prior to this bugfix, string predicates would always try to convert property values to a numeric
type, regardless of the property type.

Example:

    If you had an alphanumeric property named `COLOR` with the string value `"300"`
    and the BOM predicate `COLOR == "300"`, then this predicate would never match, as the engine
    would have substituted the variable COLOR with the value `300` (as a number).

Now this behavior is fixed and the engine will substitute the variable `COLOR` with the correct
value `"300"` (as a unicode string).
