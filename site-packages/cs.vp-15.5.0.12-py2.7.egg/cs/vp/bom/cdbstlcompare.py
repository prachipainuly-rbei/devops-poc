#!/usr/bin/env powerscript
# -*- mode: python; coding: utf-8 -*-
# $Id: cdbstlcompare.py 180455 2018-07-12 09:35:14Z gda $
#
# Copyright (C) 1990 - 2002 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
Stuecklistenvergleich
"""

import sys
import copy
import time

import cdbwrapc

from cdb import dberrors
from cdb import ue
from cdb import misc
from cdb import sqlapi
from cdb import util
from cdb import cmsg
from cdb import classbody

from cs.vp.items import Item


@classbody.classbody
class Item(object):
    pass

    @classmethod
    def on_cdb_parts_list_comparison_pre_mask(cls, ctx):
        if len(ctx.objects) > 2:
            raise ue.Exception("cdbvp_stlcompare_only_two")
        if len(ctx.objects) > 0:
            ctx.set("baugruppe1", ctx.objects[0].dbkeys["teilenummer"])
            ctx.set("b_index1", ctx.objects[0].dbkeys["t_index"])
        if len(ctx.objects) > 1:
            ctx.set("baugruppe2", ctx.objects[1].dbkeys["teilenummer"])
            ctx.set("b_index2", ctx.objects[1].dbkeys["t_index"])

    @classmethod
    def on_cdb_parts_list_comparison_now(cls, ctx):
        compare_parts_lists(ctx)


def safe_insert(table, values):
    # insert a record in a table, if it's not already there
    # works by catching unique constraint errors
    # and reraising any other error

    # useful for assemblies, which have multiple occurrences inside
    # a product structure

    inserter = util.DBInserter(table)
    for k in values.keys():
        inserter.add(k, values[k])

    try:
        inserter.insert()
    except RuntimeError:
        ti = util.tables[table]
        keynames = ti.keyname_list().split(', ')
        keys = [u"%s" % values.get(keyname) for keyname in keynames]
        stmt = "1 from %s where %s" % (table, ti.key_condition(keys))

        t = sqlapi.SQLselect(stmt)
        if sqlapi.SQLrows(t) == 0:
            # not a unique constraint error
            raise


def compare_parts_lists(ctx):
    # Relationsnamen
    tname = 'einzelteile_v'           # Daten Quelle
    comptable1 = 'cdb_partslist_comp'  # Strukturdaten
    comptable2 = 'cdb_partslist_cval'  # Vergleichsergebnisse

    # Session ID und Timestamp
    session_id = util.nextval("cdb_parts_list_comp_session")
    session_timestamp = int(time.time())

    # cleanup old Sessions
    # Anzahl Tage nach denen alte Session gelöscht werden
    max_session_age = 1
    deprecation_time = session_timestamp - max_session_age * 60 * 60 * 24
    sqlapi.SQLdelete("from %s where session_timestamp<%s" % (
        comptable1, deprecation_time))
    sqlapi.SQLdelete("from %s where session_timestamp<%s" % (
        comptable2, deprecation_time))

    # Operationsparameter
    max_comp_depth = 99
    if ctx.dialog["depth"] == "":
        depth = max_comp_depth
    else:
        depth = int(ctx.dialog["depth"])
    compdepth = depth
    showsame = int(ctx.dialog["kumuliert"])

    # zu vergleichende Baugruppen
    an1 = ctx.dialog["baugruppe1"]
    ai1 = ctx.dialog["b_index1"]
    an2 = ctx.dialog["baugruppe2"]
    ai2 = ctx.dialog["b_index2"]

    cdef = cdbwrapc.CDBClassDef("bom_item")

    # zuvergleichende Attr. der Stücklistenpositionen
    comp_atts = ["menge", "netto_laenge"]
    comp_atts_name = {
        attr: cdef.getAttributeDefinition(attr).getLabel()
        for attr in comp_atts
    }

    # Schluesselattribute fuer Vergleich
    resultkey = 'position'
    keyatts = ['teilenummer', 't_index']

    # Wurzelobjekt einfuegen
    rootvalues = {"baugruppe1": '',
                  "b_index1": '',
                  "baugruppe2": '',
                  "b_index2": '',
                  "teilenummer1": an1,
                  "t_index1": ai1,
                  "teilenummer2": an2,
                  "t_index2": ai2,
                  "position": 0,
                  "typ": 0,
                  "tiefe": depth,
                  "kumuliert": showsame,
                  "session_id": session_id,
                  "session_timestamp": session_timestamp}
    inserter = util.DBInserter(comptable1)
    for k in rootvalues.keys():
        inserter.add(k, rootvalues[k])
    inserter.insert()

    # Suche & Vergleiche
    a1 = {"baugruppe": an1, "b_index": ai1}
    a2 = {"baugruppe": an2, "b_index": ai2}
    tosearch = [(a1, a2)]
    while compdepth > 0:
        nextsearch = []
        for (aa1, aa2) in tosearch:
            # Vergleichsanfang: Datensortierung
            compresults = compAttrs(tname, aa1, aa2, resultkey,
                                    keyatts, comp_atts)
            gn1 = aa1['baugruppe']
            gi1 = aa1["b_index"]
            gn2 = aa2['baugruppe']
            gi2 = aa2["b_index"]
            for pos in compresults.keys():
                c = compresults[pos]
                can1 = c.get("teilenummer1", '')
                cai1 = c.get("t_index1", '')
                can2 = c.get("teilenummer2", '')
                cai2 = c.get("t_index2", '')
                v1 = c.get("value1", {})
                v2 = c.get("value2", {})
                # Typen!
                t = 99  # Die Pos. ist in beiden BG. gleich.
                pve = True
                if can1 and can2:
                    # Vergleichswerte nur eintragen, wenn es die Position
                    # in beiden Baugruppen gibt
                    for anatt in comp_atts:
                        value1 = v1.get(anatt, '')
                        value2 = v2.get(anatt, '')
                        if value1 != value2:
                            pve = False
                            # Vergleichsergebnisse in Relation "stlvergleich2" einfuegen
                            ovalue2 = {"attr_name": anatt,
                                       "attr_benennung": comp_atts_name.get(anatt, anatt),
                                       "wert1": value1,
                                       "wert2": value2,
                                       "position": pos,
                                       "baugruppe1": gn1,
                                       "b_index1": gi1,
                                       "baugruppe2": gn2,
                                       "b_index2": gi2,
                                       "session_id": session_id,
                                       "session_timestamp": session_timestamp}
                            safe_insert(comptable2, ovalue2)
                if not can2:
                    t = 10  # Die Pos. nur in A vorhanden
                elif not can1:
                    t = 20  # Die Pos. nur in B vorhanden
                elif can1 != can2:
                    t = 30  # Die Pos. unterscheidet sich durch einen anderen Artikel
                    if not pve:
                        t = 60  # Die Pos. unterscheidet sich insgesamt
                elif cai1 != cai2:
                    t = 40  # Die Pos. unterscheidet sich durch eine andere Version des Artikels
                elif not pve:
                    t = 50  # Die Pos. unterscheidet sich in den Werten der Positionsattribute

                if not showsame and t == 99:
                    continue

                # Strukturdaten in Relation "stlvergleich" einfuegen
                ovalue1 = {"baugruppe1": gn1,
                           "b_index1": gi1,
                           "baugruppe2": gn2,
                           "b_index2": gi2,
                           "teilenummer1": can1,
                           "t_index1": cai1,
                           "teilenummer2": can2,
                           "t_index2": cai2,
                           "position": pos,
                           "typ": t,
                           "tiefe": depth,
                           "kumuliert": showsame,
                           "session_id": session_id,
                           "session_timestamp": session_timestamp}
                safe_insert(comptable1, ovalue1)

                newg1 = {"baugruppe": can1,
                         "b_index": cai1}
                newg2 = {"baugruppe": can2,
                         "b_index": cai2}
                nextsearch.append((newg1, newg2))
        tosearch = copy.copy(nextsearch)
        compdepth -= 1
        pass

    # Strukturdarstellung aufrufen
    interactive = 1
    classname = "cdb_partslist_comp"
    nextact = "CDB_PartsListComparison"
    search_cond = {"baugruppe1": '',
                   "b_index1": '',
                   "baugruppe2": '',
                   "b_index2": '',
                   "teilenummer1": an1,
                   "teilenummer2": an2,
                   "t_index1": ai1,
                   "t_index2": ai2,
                   "position": '0',
                   "session_id": "%d" % session_id}
    query = cmsg.Cdbcmsg(classname, nextact, interactive)
    for key in search_cond.keys():
        query.add_item(key, comptable1, search_cond[key])
    ctx.url("cdbcmsg:" + query.get_memfile().getvalue())


def compAttrs(table, o1, o2, resultkey, keyatts, comp_atts):
    """
    2 Objekte vergleichen
    """
    p1 = sqlapi.RecordSet2(table, util.tables[table].condition(o1.keys(), o1.values()))
    p2 = sqlapi.RecordSet2(table, util.tables[table].condition(o2.keys(), o2.values()))

    results = {}
    for p in p1:
        m = {}
        m = results.setdefault(p[resultkey], m)
        for k in keyatts:
            m[k + '1'] = p[k]
        for anatt in comp_atts:
            if not "value1" in m:
                m["value1"] = {}
            m["value1"][anatt] = p.get(anatt, '')
    for p in p2:
        m = {}
        m = results.setdefault(p[resultkey], m)
        for k in keyatts:
            m[k + '2'] = p[k]
        for anatt in comp_atts:
            if not "value2" in m:
                m["value2"] = {}
            m["value2"][anatt] = p.get(anatt, '')
    return results
