Ember.TEMPLATES["action-view"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', escapeExpression=this.escapeExpression;


  data.buffer.push("<i ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":tree-action-toggle :icon-caret-right view.expanding:hide")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\r\n    ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleAction", {hash:{
    'target': ("view")
  },hashTypes:{'target': "ID"},hashContexts:{'target': depth0},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("></i>\r\n<i ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":tree-action-toggle :icon-caret-down view.expanding::hide")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\r\n    ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleAction", {hash:{
    'target': ("view")
  },hashTypes:{'target': "ID"},hashContexts:{'target': depth0},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("></i>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["application"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1;


  stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  
});

Ember.TEMPLATES["bomcomponentnode"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n    <img class=\"tree-node-object-icon\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("treeNode.bomIcon")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/>\r\n");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n    <img class=\"tree-node-object-icon\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("treeNode.item.state_icon")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/>\r\n");
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, "treeNode.bomIcon", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  data.buffer.push(escapeExpression((helper = helpers['state-icon'] || (depth0 && depth0['state-icon']),options={hash:{
    'fillColor': ("treeNode.item.state_color")
  },hashTypes:{'fillColor': "ID"},hashContexts:{'fillColor': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "state-icon", options))));
  data.buffer.push(" ");
  stack1 = helpers._triageMustache.call(depth0, "treeNode.description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  
});

Ember.TEMPLATES["bomgroupnode"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n    <img class=\"tree-node-object-icon\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("treeNode.bomIcon")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/>\r\n");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n    <img class=\"tree-node-object-icon\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("treeNode.item.state_icon")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/>\r\n");
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, "treeNode.bomIcon", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n\r\n");
  data.buffer.push(escapeExpression((helper = helpers['state-icon'] || (depth0 && depth0['state-icon']),options={hash:{
    'fillColor': ("treeNode.item.state_color")
  },hashTypes:{'fillColor': "ID"},hashContexts:{'fillColor': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "state-icon", options))));
  data.buffer.push("\r\n");
  stack1 = helpers._triageMustache.call(depth0, "treeNode.description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/collapsible-block"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n");
  stack1 = helpers['if'].call(depth0, "buttonIcon", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n");
  stack1 = helpers['if'].call(depth0, "buttonTooltip", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  }
function program3(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n<button\r\n    ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":collapsible-button :btn :btn-mini buttonActive:active")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\r\n    ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "buttonAction", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("\r\n    ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("buttonTooltip")
  },hashTypes:{'title': "ID"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n    <img ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("buttonIcon")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/>\r\n</button>\r\n");
  return buffer;
  }

  data.buffer.push("<i ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":caret-icon expanded:caret-expanded:caret-hidden")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\r\n    ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleCaret", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("></i>\r\n<div class=\"caret-title\">");
  stack1 = helpers._triageMustache.call(depth0, "blocktitle", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push(" (");
  stack1 = helpers._triageMustache.call(depth0, "diffCount", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push(")</div>\r\n");
  stack1 = helpers['if'].call(depth0, "buttonAction", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n<div ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":collapsbile-content expanded::hide")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n");
  stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/debug-tool"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n    <table>\r\n        <thead>\r\n            <th>url</th>\r\n            <th>time</th>\r\n        </thead>\r\n    ");
  stack1 = helpers.each.call(depth0, "entries", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </table>\r\n");
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n        <tr>\r\n            <td>");
  stack1 = helpers._triageMustache.call(depth0, "url", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</td>\r\n            <td>");
  stack1 = helpers._triageMustache.call(depth0, "time", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("s</td>\r\n        </tr>\r\n    ");
  return buffer;
  }

  stack1 = (helper = helpers['modal-window'] || (depth0 && depth0['modal-window']),options={hash:{
    'isVisible': (true)
  },hashTypes:{'isVisible': "BOOLEAN"},hashContexts:{'isVisible': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "modal-window", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/diff-table"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\n                <b>Filter:</b> ");
  stack1 = helpers._triageMustache.call(depth0, "filter_txt", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n            ");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n            ");
  stack1 = helpers['if'].call(depth0, "hasVariants", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n        ");
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n                <div class=\"context-metadata span10 product-div\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("description")
  },hashTypes:{'title': "ID"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n                    ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'class': ("diff-table-select"),
    'content': ("products"),
    'selection': ("product"),
    'optionLabelPath': ("content.description"),
    'prompt': (" ")
  },hashTypes:{'class': "STRING",'content': "ID",'selection': "ID",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'class': depth0,'content': depth0,'selection': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push("\r\n\r\n                    ");
  stack1 = helpers.unless.call(depth0, "selectVariant", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n\r\n                    <span class=\"variant-description\">\r\n                    ");
  stack1 = helpers['if'].call(depth0, "variant", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(9, program9, data),fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n                    </span>\r\n                </div>\r\n            ");
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n                        <button accesskey=\"v\"\r\n                            ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': ("modalActive:active: :btn :variant-button"),
    'title': ("labels.cdbvp_elink_diffutils_select_variant")
  },hashTypes:{'class': "STRING",'title': "ID"},hashContexts:{'class': depth0,'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\r\n                            ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "showModalWindow", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push(">\r\n                                <img ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("catalogIcon")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(" ></button>\r\n                    ");
  return buffer;
  }

function program7(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n                        ");
  stack1 = helpers._triageMustache.call(depth0, "variant.description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n                    ");
  return buffer;
  }

function program9(depth0,data) {
  
  
  data.buffer.push("\r\n                        -\r\n                    ");
  }

function program11(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n          <div class=\"alert inplace alert-warning\">\r\n              ");
  stack1 = helpers._triageMustache.call(depth0, "errorMessage", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n          </div>\r\n      ");
  return buffer;
  }

  data.buffer.push("<div class=\"diff-table-toolbar\">\r\n    <div class=\"half-column lhs row-fluid\">\r\n        <div class=\"span4\">\r\n            ");
  data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
    'type': ("text"),
    'value': ("filterText"),
    'class': ("search_field"),
    'placeholder': ("labels.cdbvp_elink_diffutils_filter")
  },hashTypes:{'type': "STRING",'value': "ID",'class': "STRING",'placeholder': "ID"},hashContexts:{'type': depth0,'value': depth0,'class': depth0,'placeholder': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
  data.buffer.push("\n        </div>\n        <div class=\"span2\">\n            <div class=\"diff-table-filter-btns btn-group\">\n                ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "diffTableButton", {hash:{
    'classNames': ("show-assemblies-button"),
    'title': ("labels.cdbvp_bom_show_assemblies"),
    'icon': ("assembly.png"),
    'value': ("showAssemblies")
  },hashTypes:{'classNames': "STRING",'title': "ID",'icon': "STRING",'value': "ID"},hashContexts:{'classNames': depth0,'title': depth0,'icon': depth0,'value': depth0},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("\r\n\r\n                ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "diffTableButton", {hash:{
    'title': ("labels.cdbvp_bom_show_leaves"),
    'classNames': ("show-components-button"),
    'icon': ("component.png"),
    'value': ("showLeaves")
  },hashTypes:{'title': "ID",'classNames': "STRING",'icon': "STRING",'value': "ID"},hashContexts:{'title': depth0,'classNames': depth0,'icon': depth0,'value': depth0},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("\n            </div>\n        </div>\n        <div class=\"span6\">\n            ");
  stack1 = helpers['if'].call(depth0, "filter_txt", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n        </div>\n    </div>\n    <div class=\"half-column rhs with-padding\">\n        <button type=\"button\"\n            ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":btn :\n            btn-default :link-table-button linked:active")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\n            ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("labels.cdbvp_elink_diffutils_update_table")
  },hashTypes:{'title': "ID"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\n            ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toogleLink", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("\n            ><i class=\"icon-link icon-large\"></i></button>\n        ");
  stack1 = helpers['if'].call(depth0, "hasProducts", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </div>\r\n</div>\r\n<div class=\"row-fluid\">\r\n    <div class=\"span12 table_container\">\r\n\r\n        ");
  data.buffer.push(escapeExpression((helper = helpers['ember-table'] || (depth0 && depth0['ember-table']),options={hash:{
    'columns': ("columns"),
    'content': ("filteredContent"),
    'selection': ("selectedItem"),
    'sortAction': ("sort"),
    'rowHeight': (16),
    'ignorePart': ("ignorePart"),
    'ignoreDifference': ("ignoreDifference"),
    'deleteIgnore': ("deleteIgnore")
  },hashTypes:{'columns': "ID",'content': "ID",'selection': "ID",'sortAction': "STRING",'rowHeight': "INTEGER",'ignorePart': "STRING",'ignoreDifference': "STRING",'deleteIgnore': "STRING"},hashContexts:{'columns': depth0,'content': depth0,'selection': depth0,'sortAction': depth0,'rowHeight': depth0,'ignorePart': depth0,'ignoreDifference': depth0,'deleteIgnore': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "ember-table", options))));
  data.buffer.push("\r\n\r\n      ");
  stack1 = helpers.unless.call(depth0, "content.length", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </div>\r\n</div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/generic-table-td"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var stack1, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n	<img ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("value")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/>\r\n");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n	");
  stack1 = helpers._triageMustache.call(depth0, "value", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, "isImage", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  else { data.buffer.push(''); }
  
});

Ember.TEMPLATES["components/generic-table"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n          <div class=\"alert inplace alert-warning\">\r\n              ");
  stack1 = helpers._triageMustache.call(depth0, "errorMessage", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n          </div>\r\n      ");
  return buffer;
  }

  data.buffer.push("<div class=\"group-label\">\r\n");
  stack1 = helpers._triageMustache.call(depth0, "title", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</div>\r\n<div class=\"row-fluid\">\r\n	<div class=\"span12\">\r\n	<form class=\"filter_form\">\r\n		");
  data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
    'type': ("text"),
    'value': ("filterText"),
    'class': ("search_field"),
    'placeholder': ("filter_placeholder")
  },hashTypes:{'type': "STRING",'value': "ID",'class': "STRING",'placeholder': "ID"},hashContexts:{'type': depth0,'value': depth0,'class': depth0,'placeholder': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
  data.buffer.push("\r\n	</form>\r\n	</div>\r\n</div>\r\n<div class=\"row-fluid\">\r\n	<div class=\"span12 table_container\">\r\n      ");
  data.buffer.push(escapeExpression((helper = helpers['ember-table'] || (depth0 && depth0['ember-table']),options={hash:{
    'columns': ("columns"),
    'content': ("content"),
    'selection': ("selection"),
    'rowHeight': ("rowHeight"),
    'numFixedColumns': ("numFixedColumns")
  },hashTypes:{'columns': "ID",'content': "ID",'selection': "ID",'rowHeight': "ID",'numFixedColumns': "ID"},hashContexts:{'columns': depth0,'content': depth0,'selection': depth0,'rowHeight': depth0,'numFixedColumns': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "ember-table", options))));
  data.buffer.push("\r\n      ");
  stack1 = helpers.unless.call(depth0, "content.length", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n	</div>\r\n</div>");
  return buffer;
  
});

Ember.TEMPLATES["components/modal-window"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n    <button ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "buttonTriggered", "button.action", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
  data.buffer.push(" aria-hidden=\"true\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': ("button.classes")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "button.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</button>\r\n  	");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n    <button ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "buttonTriggered", "button.action", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
  data.buffer.push(" aria-hidden=\"true\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': ("button.classes")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "button.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</button>\r\n  ");
  return buffer;
  }

  data.buffer.push("<div class=\"modal-header\">\r\n    ");
  stack1 = helpers.each.call(depth0, "button", "in", "header_buttons", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    <div class=\"modal-header-slot\">\r\n      ");
  stack1 = helpers._triageMustache.call(depth0, "header", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </div>\r\n</div>\r\n<div class=\"modal-body\">\r\n  ");
  stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</div>\r\n<div class=\"modal-footer\">\r\n  ");
  stack1 = helpers._triageMustache.call(depth0, "footer", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n  ");
  stack1 = helpers.each.call(depth0, "button", "in", "footer_buttons", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</div>\r\n\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/preview-control"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n<div class=\"btn-group\">\r\n    <a ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":btn :btn-mini preview3D:active"),
    'title': ("labels.cdbvp_elink_diffutil_open_3d_preview")
  },hashTypes:{'class': "STRING",'title': "STRING"},hashContexts:{'class': depth0,'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\r\n        ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setPreviewMode", "3D", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["ID","STRING"],data:data})));
  data.buffer.push("\r\n        role=\"button\">3D</a>\r\n    <a ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":btn :btn-mini preview2D:active"),
    'title': ("labels.cdbvp_elink_diffutil_open_2d_preview")
  },hashTypes:{'class': "STRING",'title': "STRING"},hashContexts:{'class': depth0,'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\r\n        ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setPreviewMode", "2D", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["ID","STRING"],data:data})));
  data.buffer.push("\r\n        role=\"button\">2D</a>\r\n\r\n    ");
  stack1 = helpers['if'].call(depth0, "csThreedInstalled", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</div>\r\n<div class=\"preview-control-label\">\r\n    ");
  stack1 = helpers._triageMustache.call(depth0, "toplabel", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</div>\r\n<div class=\"refresh pull-left\" style=\"margin-right:10px;\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("labels.cdbvp_elink_diffutil_refresh")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n    <i class=\"icon-refresh\" style=\"vertical-align: bottom;\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "refreshAll", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("></i>\r\n</div>\r\n");
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n    <a ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":btn :btn-mini preview3Dcockpit:active"),
    'href': ("threedSynchUrl"),
    'title': ("labels.cdbvp_elink_diffutil_open_synched_cockpit")
  },hashTypes:{'class': "STRING",'href': "STRING",'title': "STRING"},hashContexts:{'class': depth0,'href': depth0,'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("\r\n        role=\"button\"\r\n        target=\"_threed\"\r\n        id=\"sync-threed-button\">\r\n        <img ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("sync3DIcon")
  },hashTypes:{'src': "STRING"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(" />\r\n    </a>\r\n    ");
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, "showPreviewControls", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/state-icon"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"state-icon\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'style': ("iconStyle")
  },hashTypes:{'style': "STRING"},hashContexts:{'style': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("></div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/tree-view-button"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n            <img class=\"op-button-icon\"");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("selectedOperation.icon")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(" />");
  stack1 = helpers._triageMustache.call(depth0, "selectedOperation.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n        ");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n            ");
  stack1 = helpers._triageMustache.call(depth0, "labels.cdbvp_elink_diffutils_operations", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n        ");
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n            <li class=\"head\">");
  stack1 = helpers._triageMustache.call(depth0, "labels.cdbvp_elink_diffutils_item_ops", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</li>\r\n            ");
  stack1 = helpers.each.call(depth0, "operation", "in", "_operations.item", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n       ");
  return buffer;
  }
function program6(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n                ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.TreeViewOperationView", {hash:{
    'operation': ("operation"),
    'optype': ("item")
  },hashTypes:{'operation': "ID",'optype': "STRING"},hashContexts:{'operation': depth0,'optype': depth0},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push("\r\n            ");
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n           <li class=\"head\">");
  stack1 = helpers._triageMustache.call(depth0, "labels.cdbvp_elink_diffutils_bom_item_ops", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</li>\r\n           ");
  stack1 = helpers.each.call(depth0, "operation", "in", "_operations.bom", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n       ");
  return buffer;
  }
function program9(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n               ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.TreeViewOperationView", {hash:{
    'operation': ("operation"),
    'optype': ("bom")
  },hashTypes:{'operation': "ID",'optype': "STRING"},hashContexts:{'operation': depth0,'optype': depth0},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push("\r\n           ");
  return buffer;
  }

  data.buffer.push("<div class=\"btn-group pull-right dropdown\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "addNodeToSelection", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push(">\r\n    <button ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":btn :btn-mini :op-button")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "executeOperation", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push(">\r\n        ");
  stack1 = helpers['if'].call(depth0, "selectedOperation", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </button>\r\n    <button ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":btn :btn-mini :dropup-button :dropdown-toggle")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "adjustMenu", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push(" data-toggle=\"dropdown\">\r\n        <span class=\"caret\"></span>\r\n    </button>\r\n    <ul class=\"dropdown-menu btn-mini drop-menu\">\r\n        ");
  stack1 = helpers['if'].call(depth0, "_operations.item.length", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n       ");
  stack1 = helpers['if'].call(depth0, "_operations.bom.length", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </ul>\r\n</div>\r\n<div class=\"no-float\"></div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/tree-view-node"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n            \r\n            ");
  data.buffer.push(escapeExpression((helper = helpers['tree-view-button'] || (depth0 && depth0['tree-view-button']),options={hash:{
    'rootNode': ("treeNode"),
    'selectedNodes': ("selectedNodes"),
    'selectedNode': ("selectedNode"),
    'operations': ("treeNode.operations"),
    'refreshBom': ("refreshBom"),
    'treeComponent': (""),
    'treeNode': ("treeNode"),
    'selectedOperationName': ("selectedOperationName"),
    'selectedOperationContext': ("selectedOperationContext")
  },hashTypes:{'rootNode': "ID",'selectedNodes': "ID",'selectedNode': "ID",'operations': "ID",'refreshBom': "STRING",'treeComponent': "ID",'treeNode': "ID",'selectedOperationName': "ID",'selectedOperationContext': "ID"},hashContexts:{'rootNode': depth0,'selectedNodes': depth0,'selectedNode': depth0,'operations': depth0,'refreshBom': depth0,'treeComponent': depth0,'treeNode': depth0,'selectedOperationName': depth0,'selectedOperationContext': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "tree-view-button", options))));
  data.buffer.push("\r\n        ");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n        ");
  stack1 = helpers['if'].call(depth0, "treeNode.expanded", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    ");
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n            ");
  stack1 = helpers['if'].call(depth0, "treeNode.predicates", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n        ");
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n                ");
  stack1 = helpers.each.call(depth0, "predicate", "in", "treeNode.predicates", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n            ");
  return buffer;
  }
function program6(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n                    ");
  data.buffer.push(escapeExpression((helper = helpers['tree-view-predicate'] || (depth0 && depth0['tree-view-predicate']),options={hash:{
    'predicate': ("predicate")
  },hashTypes:{'predicate': "ID"},hashContexts:{'predicate': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "tree-view-predicate", options))));
  data.buffer.push("\r\n                ");
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n        ");
  stack1 = helpers['if'].call(depth0, "cldNode.visible", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    ");
  return buffer;
  }
function program9(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n            ");
  data.buffer.push(escapeExpression((helper = helpers['tree-view-node'] || (depth0 && depth0['tree-view-node']),options={hash:{
    'treeNode': ("cldNode"),
    'treeComponent': ("treeComponent"),
    'selectedNodes': ("selectedNodes"),
    'viewSelector': ("viewSelector"),
    'expandLevel': ("nextExpandLevel"),
    'findNode': ("findNode"),
    'treeSearches': ("treeSearches"),
    'drag': ("drag"),
    'drop': ("drop"),
    'selectedOperationName': ("selectedOperationName"),
    'selectedOperationContext': ("selectedOperationContext")
  },hashTypes:{'treeNode': "ID",'treeComponent': "ID",'selectedNodes': "ID",'viewSelector': "ID",'expandLevel': "ID",'findNode': "ID",'treeSearches': "ID",'drag': "ID",'drop': "ID",'selectedOperationName': "ID",'selectedOperationContext': "ID"},hashContexts:{'treeNode': depth0,'treeComponent': depth0,'selectedNodes': depth0,'viewSelector': depth0,'expandLevel': depth0,'findNode': depth0,'treeSearches': depth0,'drag': depth0,'drop': depth0,'selectedOperationName': depth0,'selectedOperationContext': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "tree-view-node", options))));
  data.buffer.push("\r\n        ");
  return buffer;
  }

  data.buffer.push("<div ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":tree-action hasChildren::invisible :pull-left")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n    ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "actionView", {hash:{
    'expandingBinding': ("treeNode.expanded")
  },hashTypes:{'expandingBinding': "STRING"},hashContexts:{'expandingBinding': depth0},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push("\r\n</div>\r\n<div class=\"tree-node-structure\">\r\n    <div  ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":tree-current-node isSelectable:tree-selectable isHit:node-found isNavigated:node-navigated treeCssClasses"),
    'title': ("treeNode.tooltip")
  },hashTypes:{'class': "STRING",'title': "STRING"},hashContexts:{'class': depth0,'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleButtonVisibility", {hash:{
    'on': ("mouseEnter")
  },hashTypes:{'on': "STRING"},hashContexts:{'on': depth0},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push(">\r\n        ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "treeNodeView", {hash:{
    'treeComponent': ("treeComponent"),
    'drag': ("drag"),
    'drop': ("drop"),
    'treeNode': ("treeNode"),
    'isSelected': ("isSelected"),
    'selectedNodesBinding': ("selectedNodes")
  },hashTypes:{'treeComponent': "ID",'drag': "ID",'drop': "ID",'treeNode': "ID",'isSelected': "ID",'selectedNodesBinding': "STRING"},hashContexts:{'treeComponent': depth0,'drag': depth0,'drop': depth0,'treeNode': depth0,'isSelected': depth0,'selectedNodesBinding': depth0},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push("\r\n\r\n        ");
  stack1 = helpers['if'].call(depth0, "buttonVisible", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </div>\r\n    <div class=\"tree-child-nodes collapse\">\r\n    ");
  stack1 = helpers['if'].call(depth0, "treeNode.hasPredicates", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    ");
  stack1 = helpers.each.call(depth0, "cldNode", "in", "treeNode.renderContent", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </div>\r\n</div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/tree-view-predicate"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"tree-node-structure\">\r\n    <img ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("predicate.icon"),
    'class': (":tree-node-object-icon")
  },hashTypes:{'src': "ID",'class': "STRING"},hashContexts:{'src': depth0,'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/> ");
  stack1 = helpers._triageMustache.call(depth0, "predicate.text", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</div>");
  return buffer;
  
});

Ember.TEMPLATES["components/tree-view-toolbar"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n            ");
  stack1 = helpers['if'].call(depth0, "treeSearch.showNavigation", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n        ");
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n                ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "navigationView", {hash:{
    'treeSearchBinding': ("treeSearch"),
    'classNameBindings': ("treeSearch.cssClass"),
    'classNames': ("tree-search-navigation")
  },hashTypes:{'treeSearchBinding': "STRING",'classNameBindings': "STRING",'classNames': "STRING"},hashContexts:{'treeSearchBinding': depth0,'classNameBindings': depth0,'classNames': depth0},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push("\r\n            ");
  return buffer;
  }

  data.buffer.push("<div class=\"row-fluid\">\r\n    <div class=\"span4\">\r\n        <div class=\"tree-view-toolbar\">\r\n            <form ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "searchBOM", "", {hash:{
    'on': ("submit")
  },hashTypes:{'on': "STRING"},hashContexts:{'on': depth0},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
  data.buffer.push(">\r\n                ");
  data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
    'type': ("text"),
    'value': ("searchStringValue"),
    'placeholder': ("labels.cdbvp_elink_diffutils_search")
  },hashTypes:{'type': "STRING",'value': "ID",'placeholder': "ID"},hashContexts:{'type': depth0,'value': depth0,'placeholder': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
  data.buffer.push("\r\n            </form>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"span8 tree-view-navigator\">\r\n        ");
  stack1 = helpers.each.call(depth0, "treeSearch", "in", "sortedTreeSearches", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </div>\r\n</div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["components/tree-view"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push(escapeExpression((helper = helpers['tree-view-node'] || (depth0 && depth0['tree-view-node']),options={hash:{
    'treeNodeBinding': ("treeNode"),
    'treeComponent': (""),
    'viewSelectorBinding': ("viewSelector"),
    'expandLevelBinding': ("expandLevel"),
    'findNodeBinding': ("findNode"),
    'expandParent': ("expandParent"),
    'treeSearchesBinding': ("treeSearches"),
    'drag': ("drag"),
    'drop': ("drop"),
    'rootNode': ("treeNode"),
    'selectedNodesBinding': ("selectedNodes"),
    'selectedNodeBinding': ("selectedNode"),
    'operationsBinding': ("operations"),
    'refreshBom': ("refreshBom"),
    'treeComponent': ("")
  },hashTypes:{'treeNodeBinding': "STRING",'treeComponent': "ID",'viewSelectorBinding': "STRING",'expandLevelBinding': "STRING",'findNodeBinding': "STRING",'expandParent': "STRING",'treeSearchesBinding': "STRING",'drag': "ID",'drop': "ID",'rootNode': "ID",'selectedNodesBinding': "STRING",'selectedNodeBinding': "STRING",'operationsBinding': "STRING",'refreshBom': "STRING",'treeComponent': "ID"},hashContexts:{'treeNodeBinding': depth0,'treeComponent': depth0,'viewSelectorBinding': depth0,'expandLevelBinding': depth0,'findNodeBinding': depth0,'expandParent': depth0,'treeSearchesBinding': depth0,'drag': depth0,'drop': depth0,'rootNode': depth0,'selectedNodesBinding': depth0,'selectedNodeBinding': depth0,'operationsBinding': depth0,'refreshBom': depth0,'treeComponent': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "tree-view-node", options))));
  data.buffer.push("\r\n");
  return buffer;
  
});

Ember.TEMPLATES["diff-table-button"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', escapeExpression=this.escapeExpression;


  data.buffer.push("<img ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("view.iconUrl")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n");
  return buffer;
  
});

Ember.TEMPLATES["diffheadercell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\r\n            <a href=\"#\" data-toggle=\"dropdown\" class=\"dropdown pull-right filter-menu\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "adjustMenu", {hash:{
    'target': ("view")
  },hashTypes:{'target': "ID"},hashContexts:{'target': depth0},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push(">\r\n                <span><i class=\"icon-filter\"></i></span>\r\n            </a>\r\n            <ul class=\"dropdown-menu drop-menu\">\r\n                <li>");
  data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
    'type': ("checkbox"),
    'checked': ("view.allChecked"),
    'indeterminate': ("view.isIndeterminate")
  },hashTypes:{'type': "STRING",'checked': "ID",'indeterminate': "ID"},hashContexts:{'type': depth0,'checked': depth0,'indeterminate': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
  data.buffer.push("\r\n                    ");
  stack1 = helpers._triageMustache.call(depth0, "labels.cdbvp_elink_diffutil_all", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</li>\r\n                <li class=\"divider\"></li>\r\n                ");
  stack1 = helpers.each.call(depth0, "value", "in", "view.filterValues", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n            </ul>\r\n        ");
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\r\n                    <li>");
  data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{
    'type': ("checkbox"),
    'checked': ("value.checked")
  },hashTypes:{'type': "STRING",'checked': "ID"},hashContexts:{'type': depth0,'checked': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options))));
  stack1 = helpers._triageMustache.call(depth0, "value.value", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</li>\r\n                ");
  return buffer;
  }

  data.buffer.push("<div ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': ("view.content.contentPath :ember-table-content-container")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n    <span class=\"ember-table-content\">\r\n        <div class=\"sortIcon\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "sortByColumn", {hash:{
    'target': ("view")
  },hashTypes:{'target': "ID"},hashContexts:{'target': depth0},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push(">\r\n            ");
  stack1 = helpers._triageMustache.call(depth0, "view.sortIcon", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n        </div>\r\n        ");
  stack1 = helpers._triageMustache.call(depth0, "view.content.headerCellName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n\r\n        ");
  stack1 = helpers['if'].call(depth0, "view.filterValues", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </span>\r\n</div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["header-raw-cell"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression;


  data.buffer.push("<div ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': ("view.content.contentPath :ember-table-content-container")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n    <span class=\"ember-table-content\">\r\n        ");
  stack1 = helpers._triageMustache.call(depth0, "view.content.headerCellName", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </span>\r\n</div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["loading"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '';


  return buffer;
  
});

Ember.TEMPLATES["main"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n    <div class=\"row-fluid diffutil-prv-tbar-row row-layout header\">\r\n        ");
  data.buffer.push(escapeExpression((helper = helpers['preview-control'] || (depth0 && depth0['preview-control']),options={hash:{
    'csThreedInstalled': ("csThreedInstalled"),
    'threedUrl': ("threedUrl"),
    'linkBinding': ("previewLink"),
    'titleBinding': ("previewItem.nr"),
    'descriptionBinding': ("previewItem.description"),
    'placeholder': ("controller.labels.cdbvp_elink_diffutils_preview"),
    'previewMode': ("previewMode"),
    'showPreviewControls': (true),
    'refreshAll': ("refreshAll")
  },hashTypes:{'csThreedInstalled': "ID",'threedUrl': "ID",'linkBinding': "STRING",'titleBinding': "STRING",'descriptionBinding': "STRING",'placeholder': "ID",'previewMode': "ID",'showPreviewControls': "BOOLEAN",'refreshAll': "STRING"},hashContexts:{'csThreedInstalled': depth0,'threedUrl': depth0,'linkBinding': depth0,'titleBinding': depth0,'descriptionBinding': depth0,'placeholder': depth0,'previewMode': depth0,'showPreviewControls': depth0,'refreshAll': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "preview-control", options))));
  data.buffer.push("\r\n    </div>\r\n");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\r\n    ");
  data.buffer.push(escapeExpression((helper = helpers['preview-control'] || (depth0 && depth0['preview-control']),options={hash:{
    'showPreviewControls': (false)
  },hashTypes:{'showPreviewControls': "BOOLEAN"},hashContexts:{'showPreviewControls': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "preview-control", options))));
  data.buffer.push("\r\n    <div class=\"alert inplace alert-warning preview-warning\">\r\n    ");
  stack1 = helpers['if'].call(depth0, "hasMultipleMBOMs", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(6, program6, data),fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </div>\r\n");
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n        ");
  stack1 = helpers._triageMustache.call(depth0, "controller.labels.cdbvp_elink_diffutils_mbom_select", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    ");
  return buffer;
  }

function program6(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n        ");
  stack1 = helpers._triageMustache.call(depth0, "controller.labels.cdbvp_elink_diffutils_mbom_no_mbom_available", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    ");
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n            <div class=\"diffutil-treeview-tbar-row row-layout body\">\r\n                <div class=\"half-column lhs\">\r\n                    ");
  stack1 = helpers['if'].call(depth0, "lRootNode.isFulfilled", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n                </div>\r\n                <div class=\"half-column rhs with-padding\">\r\n                    ");
  stack1 = helpers['if'].call(depth0, "rRootNode.isFulfilled", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n                </div>\r\n            </div>\r\n            <div id=\"mbom-draggable-containment\" class=\"row-fluid diffutil-treeview-row row-layout body\">\r\n                ");
  stack1 = helpers['if'].call(depth0, "lRootNode.nodeId", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n            </div>\r\n        ");
  return buffer;
  }
function program9(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n                        ");
  data.buffer.push(escapeExpression((helper = helpers['tree-view-toolbar'] || (depth0 && depth0['tree-view-toolbar']),options={hash:{
    'treeNode': ("lRootNode"),
    'showNavigation': (true),
    'viewSelector': ("App.BomTreeNodeViewSelector"),
    'treeSearches': ("lTreeSearches"),
    'searchString': ("lSearchString")
  },hashTypes:{'treeNode': "ID",'showNavigation': "BOOLEAN",'viewSelector': "ID",'treeSearches': "ID",'searchString': "ID"},hashContexts:{'treeNode': depth0,'showNavigation': depth0,'viewSelector': depth0,'treeSearches': depth0,'searchString': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "tree-view-toolbar", options))));
  data.buffer.push("\r\n                    ");
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n                        ");
  data.buffer.push(escapeExpression((helper = helpers['tree-view-toolbar'] || (depth0 && depth0['tree-view-toolbar']),options={hash:{
    'treeNode': ("rRootNode"),
    'treeSearches': ("rTreeSearches"),
    'searchString': ("rSearchString")
  },hashTypes:{'treeNode': "ID",'treeSearches': "ID",'searchString': "ID"},hashContexts:{'treeNode': depth0,'treeSearches': depth0,'searchString': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "tree-view-toolbar", options))));
  data.buffer.push("\r\n                    ");
  return buffer;
  }

function program13(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n                    <div class=\"half-column lhs\">\r\n                        ");
  data.buffer.push(escapeExpression((helper = helpers['tree-view'] || (depth0 && depth0['tree-view']),options={hash:{
    'classNames': ("first-view"),
    'selectedNodesBinding': ("selectedNodes"),
    'selectedNodeBinding': ("selectedNode"),
    'operationsBinding': ("operations"),
    'treeNodeBinding': ("lRootNode"),
    'treeViewTitle': ("controller.labels.cdbvp_elink_diffutils_left_bom"),
    'viewSelector': ("App.BomTreeNodeViewSelector"),
    'expandLevel': ("expandLevelLeft"),
    'findNodeBinding': ("selectedItem.item_object_id"),
    'showNavigation': (true),
    'refreshBom': ("refreshBom"),
    'nodeClicked': ("nodeClicked"),
    'triggerSync': ("triggerSync"),
    'drag': (true),
    'treeSearches': ("lTreeSearches")
  },hashTypes:{'classNames': "STRING",'selectedNodesBinding': "STRING",'selectedNodeBinding': "STRING",'operationsBinding': "STRING",'treeNodeBinding': "STRING",'treeViewTitle': "ID",'viewSelector': "ID",'expandLevel': "ID",'findNodeBinding': "STRING",'showNavigation': "BOOLEAN",'refreshBom': "STRING",'nodeClicked': "STRING",'triggerSync': "STRING",'drag': "BOOLEAN",'treeSearches': "ID"},hashContexts:{'classNames': depth0,'selectedNodesBinding': depth0,'selectedNodeBinding': depth0,'operationsBinding': depth0,'treeNodeBinding': depth0,'treeViewTitle': depth0,'viewSelector': depth0,'expandLevel': depth0,'findNodeBinding': depth0,'showNavigation': depth0,'refreshBom': depth0,'nodeClicked': depth0,'triggerSync': depth0,'drag': depth0,'treeSearches': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "tree-view", options))));
  data.buffer.push("\r\n                    </div>\r\n                    <div class=\"half-column rhs\">\r\n                        <div class=\"btn sync\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "triggerSync", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("><img ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("sync_view_icon")
  },hashTypes:{'src': "ID"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("></div>\r\n                        ");
  data.buffer.push(escapeExpression((helper = helpers['tree-view'] || (depth0 && depth0['tree-view']),options={hash:{
    'classNames': ("second-view"),
    'selectedNodesBinding': ("selectedNodes"),
    'selectedNodeBinding': ("selectedNode"),
    'operationsBinding': ("operations"),
    'treeNodeBinding': ("rRootNode"),
    'treeViewTitle': ("controller.labels.cdbvp_elink_diffutils_right_bom"),
    'viewSelector': ("App.BomTreeNodeViewSelector"),
    'expandLevel': ("expandLevelRight"),
    'findNodeBinding': ("selectedItem.item_object_id"),
    'showNavigation': (true),
    'refreshBom': ("refreshBom"),
    'nodeClicked': ("nodeClicked"),
    'drag': (true),
    'drop': (true),
    'treeSearches': ("rTreeSearches")
  },hashTypes:{'classNames': "STRING",'selectedNodesBinding': "STRING",'selectedNodeBinding': "STRING",'operationsBinding': "STRING",'treeNodeBinding': "STRING",'treeViewTitle': "ID",'viewSelector': "ID",'expandLevel': "ID",'findNodeBinding': "STRING",'showNavigation': "BOOLEAN",'refreshBom': "STRING",'nodeClicked': "STRING",'drag': "BOOLEAN",'drop': "BOOLEAN",'treeSearches': "ID"},hashContexts:{'classNames': depth0,'selectedNodesBinding': depth0,'selectedNodeBinding': depth0,'operationsBinding': depth0,'treeNodeBinding': depth0,'treeViewTitle': depth0,'viewSelector': depth0,'expandLevel': depth0,'findNodeBinding': depth0,'showNavigation': depth0,'refreshBom': depth0,'nodeClicked': depth0,'drag': depth0,'drop': depth0,'treeSearches': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "tree-view", options))));
  data.buffer.push("\r\n                    </div>\r\n                ");
  return buffer;
  }

function program15(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\r\n    ");
  stack1 = (helper = helpers['collapsible-block'] || (depth0 && depth0['collapsible-block']),options={hash:{
    'blocktitle': ("labels.cdbvp_elink_diffutils_differences"),
    'classNames': ("diffutil row-layout footer diff-table-row"),
    'expanded': ("tableExpanded"),
    'diffCount': ("ndiffs")
  },hashTypes:{'blocktitle': "ID",'classNames': "STRING",'expanded': "ID",'diffCount': "ID"},hashContexts:{'blocktitle': depth0,'classNames': depth0,'expanded': depth0,'diffCount': depth0},inverse:self.noop,fn:self.program(16, program16, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "collapsible-block", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  }
function program16(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n        ");
  stack1 = helpers['if'].call(depth0, "rRootNode.nodeId", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n    ");
  return buffer;
  }
function program17(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n            <div class=\"diffutil-table-row\">\r\n                <div ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': ("span12")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n                    ");
  data.buffer.push(escapeExpression((helper = helpers['diff-table'] || (depth0 && depth0['diff-table']),options={hash:{
    'selectedItem': ("selectedItem"),
    'content': ("differences"),
    'headerContent': ("diffHeaderContent"),
    'hasProducts': ("hasProducts"),
    'hasVariants': ("hasVariants"),
    'selectVariant': ("selectVariant"),
    'product': ("product"),
    'products': ("products"),
    'variant': ("variant"),
    'linked': ("tableLinked"),
    'showModalWindow': ("showModalWindow"),
    'errorMessage': ("labels.cdbvp_elink_diffutils_no_differences"),
    'tableSizeChange': ("tableExpanded"),
    'ignore': ("ignoreDifference"),
    'deleteIgnore': ("deleteIgnore"),
    'filter_txt': ("filter_txt")
  },hashTypes:{'selectedItem': "ID",'content': "ID",'headerContent': "ID",'hasProducts': "ID",'hasVariants': "ID",'selectVariant': "ID",'product': "ID",'products': "ID",'variant': "ID",'linked': "ID",'showModalWindow': "STRING",'errorMessage': "ID",'tableSizeChange': "ID",'ignore': "STRING",'deleteIgnore': "STRING",'filter_txt': "ID"},hashContexts:{'selectedItem': depth0,'content': depth0,'headerContent': depth0,'hasProducts': depth0,'hasVariants': depth0,'selectVariant': depth0,'product': depth0,'products': depth0,'variant': depth0,'linked': depth0,'showModalWindow': depth0,'errorMessage': depth0,'tableSizeChange': depth0,'ignore': depth0,'deleteIgnore': depth0,'filter_txt': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "diff-table", options))));
  data.buffer.push("\n                </div>\n            </div>\n        ");
  return buffer;
  }

function program19(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\r\n    ");
  stack1 = (helper = helpers['modal-window'] || (depth0 && depth0['modal-window']),options={hash:{
    'isVisible': ("modalActive"),
    'header': ("labels.cdbvp_elink_diffutils_select_variant"),
    'footer_buttons': ("modalFooterButtons"),
    'header_buttons': ("modalHeaderButtons"),
    'buttonTriggered': ("modalButtonTriggered")
  },hashTypes:{'isVisible': "ID",'header': "ID",'footer_buttons': "ID",'header_buttons': "ID",'buttonTriggered': "STRING"},hashContexts:{'isVisible': depth0,'header': depth0,'footer_buttons': depth0,'header_buttons': depth0,'buttonTriggered': depth0},inverse:self.noop,fn:self.program(20, program20, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "modal-window", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  }
function program20(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n        <div class=\"container-fluid\">\r\n            ");
  stack1 = helpers['if'].call(depth0, "hasProducts", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(21, program21, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n            ");
  stack1 = helpers['if'].call(depth0, "variantsExists", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(23, program23, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n        </div>\r\n    ");
  return buffer;
  }
function program21(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n                <div class=\"row-fluid modal-products\">\r\n                    <div class=\"span1\">");
  stack1 = helpers._triageMustache.call(depth0, "labels.cdbvp_elink_diffutils_product", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</div>\r\n                    <div class=\"span11\">\r\n                        ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.Select", {hash:{
    'content': ("products"),
    'selection': ("product"),
    'optionLabelPath': ("content.description"),
    'prompt': (" ")
  },hashTypes:{'content': "ID",'selection': "ID",'optionLabelPath': "STRING",'prompt': "STRING"},hashContexts:{'content': depth0,'selection': depth0,'optionLabelPath': depth0,'prompt': depth0},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push("\r\n                    </div>\r\n                </div>\r\n            ");
  return buffer;
  }

function program23(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n                <div class=\"row-fluid modal-variants\">\r\n                    <div class=\"span12\">\r\n                        ");
  data.buffer.push(escapeExpression((helper = helpers['generic-table'] || (depth0 && depth0['generic-table']),options={hash:{
    'content': ("variants"),
    'filter': ("searchVariants"),
    'filter_placeholder': ("labels.cdbvp_elink_diffutils_search"),
    'selection': ("variant"),
    'numFixedColumns': (2),
    'rowHeight': (16),
    'headerContentBinding': ("variantTableHeader"),
    'tableSizeChange': ("variantTableExpanded")
  },hashTypes:{'content': "ID",'filter': "STRING",'filter_placeholder': "ID",'selection': "ID",'numFixedColumns': "INTEGER",'rowHeight': "INTEGER",'headerContentBinding': "STRING",'tableSizeChange': "ID"},hashContexts:{'content': depth0,'filter': depth0,'filter_placeholder': depth0,'selection': depth0,'numFixedColumns': depth0,'rowHeight': depth0,'headerContentBinding': depth0,'tableSizeChange': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "generic-table", options))));
  data.buffer.push("\r\n                    </div>\r\n                </div>\r\n            ");
  return buffer;
  }

function program25(depth0,data) {
  
  var buffer = '', helper, options;
  data.buffer.push("\r\n    ");
  data.buffer.push(escapeExpression((helper = helpers['debug-tool'] || (depth0 && depth0['debug-tool']),options={hash:{
    'entries': ("debugEntries")
  },hashTypes:{'entries': "ID"},hashContexts:{'entries': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "debug-tool", options))));
  data.buffer.push("\r\n");
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, "rRootNode.nodeId", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n<div ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":diffutil :row-layout :body tableExpanded")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n    <div class=\"row-layout container\">\r\n        <div class=\"diffutil-metadata-row row-layout header\">\r\n            ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "partMeta", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("\r\n        </div>\r\n        ");
  stack1 = helpers['if'].call(depth0, "rRootNode.nodeId", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    </div>\r\n</div>\r\n");
  stack1 = helpers['if'].call(depth0, "rRootNode.nodeId", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n\r\n");
  stack1 = helpers['if'].call(depth0, "modalFirstLoad", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n\r\n");
  stack1 = helpers['if'].call(depth0, "showDebugTool", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(25, program25, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n\r\n<div class=\"ajax-alerts\">\r\n</div>");
  return buffer;
  
});

Ember.TEMPLATES["navigation-view"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"tree-nav-action prev btn btn-mini btn-link\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "jumpToPrev", "treeSearch", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
  data.buffer.push(">\r\n    <i class=\"icon-step-backward\"></i>\r\n</div>\r\n<div class=\"tree-nav-info btn btn-mini btn-link\"  ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "jumpToCurrent", "treeSearch", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
  data.buffer.push(">\r\n    ");
  stack1 = helpers._triageMustache.call(depth0, "treeSearch.navIdxPlusOne", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push(" / ");
  stack1 = helpers._triageMustache.call(depth0, "treeSearch.content.length", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</div>\r\n<div class=\"tree-nav-action next btn btn-mini btn-link\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "jumpToNext", "treeSearch", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","ID"],data:data})));
  data.buffer.push(">\r\n    <i class=\"icon-step-forward\"></i>\r\n</div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["node-view"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1;


  stack1 = helpers._triageMustache.call(depth0, "treeNode.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  
});

Ember.TEMPLATES["partmeta"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression;


  data.buffer.push("<div class=\"row-fluid part-meta-inner\">\r\n    <div class=\"span6\">\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row-fluid part-meta-left\">\r\n                <div class=\"span2 meta-label\">\r\n                    ");
  stack1 = helpers._triageMustache.call(depth0, "labels.cdbvp_elink_diffutils_left_bom", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push(":\r\n                </div>\r\n                <div class=\"span10\">\r\n                    ");
  stack1 = helpers._triageMustache.call(depth0, "litem.description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"span6\">\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row-fluid\">\r\n                <div class=\"span2 meta-label\">\r\n                    ");
  stack1 = helpers._triageMustache.call(depth0, "labels.cdbvp_elink_diffutils_right_bom", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push(":\r\n                </div>\r\n                <div class=\"span10\">\r\n                    ");
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "select", {hash:{
    'contentBinding': ("itemList"),
    'optionLabelPath': ("content.description"),
    'prompt': (" "),
    'selection': ("ritemSelection")
  },hashTypes:{'contentBinding': "STRING",'optionLabelPath': "STRING",'prompt': "STRING",'selection': "ID"},hashContexts:{'contentBinding': depth0,'optionLabelPath': depth0,'prompt': depth0,'selection': depth0},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push("\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["tablecellview"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\r\n    <a class=\"btn btn-tiny ignore-button\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "ignore", {hash:{
    'target': ("view")
  },hashTypes:{'target': "STRING"},hashContexts:{'target': depth0},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push(">\r\n        <i class=\"icon-minus\"></i>\r\n    </a>\r\n");
  return buffer;
  }

  data.buffer.push("<span ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': ("view.content.attribute :ember-table-content")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\r\n    ");
  stack1 = helpers._triageMustache.call(depth0, "view.cellContent.text", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</span>\r\n");
  stack1 = helpers['if'].call(depth0, "view.content.ignore", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n");
  return buffer;
  
});

Ember.TEMPLATES["treeloading"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  


  data.buffer.push("loading...");
  
});

Ember.TEMPLATES["treenodecontextmenu"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n        <li><a ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'href': ("operation.url")
  },hashTypes:{'href': "STRING"},hashContexts:{'href': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("> <img ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("operation.icon")
  },hashTypes:{'src': "STRING"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/>");
  stack1 = helpers._triageMustache.call(depth0, "operation.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push(" </a></li>\r\n    ");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n        <li class=\"head\">");
  stack1 = helpers._triageMustache.call(depth0, "labels.cdbvp_elink_diffutils_bom_item_ops", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</li>\r\n        ");
  stack1 = helpers.each.call(depth0, "operation", "in", "view.treeNode.bomOperations", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    ");
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\r\n            <li><a ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'href': ("operation.url")
  },hashTypes:{'href': "STRING"},hashContexts:{'href': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("> <img ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("operation.icon")
  },hashTypes:{'src': "STRING"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/>");
  stack1 = helpers._triageMustache.call(depth0, "operation.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push(" </a></li>\r\n        ");
  return buffer;
  }

  data.buffer.push("<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">\r\n    <li class=\"head\">");
  stack1 = helpers._triageMustache.call(depth0, "labels.cdbvp_elink_diffutils_item_ops", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</li>\r\n    ");
  stack1 = helpers.each.call(depth0, "operation", "in", "view.treeNode.item.operations", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n    ");
  stack1 = helpers['if'].call(depth0, "view.treeNode.bomOperations.length", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</ul>\r\n");
  return buffer;
  
});

Ember.TEMPLATES["treeviewoperation"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, escapeExpression=this.escapeExpression;


  data.buffer.push("<a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "selectOperation", "operation", "view.optype", "rootNode.isEbomView", {hash:{
    'target': ("view")
  },hashTypes:{'target': "ID"},hashContexts:{'target': depth0},contexts:[depth0,depth0,depth0,depth0],types:["ID","ID","ID","ID"],data:data})));
  data.buffer.push(">\r\n    <img class=\"op-li\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'src': ("operation.icon")
  },hashTypes:{'src': "STRING"},hashContexts:{'src': depth0},contexts:[],types:[],data:data})));
  data.buffer.push("/>\r\n    ");
  stack1 = helpers._triageMustache.call(depth0, "operation.label", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\r\n</a>\r\n");
  return buffer;
  
});