App.TreeViewOperationView = Ember.View.extend({
    templateName: 'treeviewoperation',
    tagName: 'li',
    classNameBindings: ['disabled'],

    disabled: function() {
        return this.get('controller.multiSelect') && !this.get('operation').multi_select_op;
    }.property('operation', 'controller.multiSelect'),

    enabled: Ember.computed.not('disabled'),

    click: function(event) {
        if (this.get('disabled')) {
            event.stopPropagation();
        }
    },

    actions: {
        selectOperation: function(operation, context, isEbomView) {
            if (this.get('enabled')) {
                this.get('controller').send("selectOperation", operation, context, isEbomView);
            }
        }
    }
});

App.TreeViewButtonComponent = Ember.Component.extend({

    classNames: ['tree-view-button', 'pull-right'],

    selectedNodes: null,
    operations: null,
    selectedOperation: function() {
        var context = this.get('selectedOperationContext');
        var name = this.get('selectedOperationName');
        var multiSelect = this.get('multiSelect');

        if (context && name) {
            var global_operations = this.get('operations');
            var operations = global_operations ? global_operations.get(context) : null;
            if (operations) {
                if (this.get('isEbomView')) {
                    var operation = operations['ebom_ops'].findBy('label', name);
                } else {
                    var operation = operations['mbom_ops'].findBy('label', name);
                }
                if (!multiSelect || operation.multi_select_op) {
                    return operation;
                }
            }
        }
    }.property('selectedOperationName', 'selectedOperationContext', 'operations', 'multiSelect'),

    _operations: function() {
        if (this.get('rootNode.isEbomView')) {
            var item = this.get('operations.item.ebom_ops');
            var bom = this.get('operations.bom.ebom_ops');
        } else {
            var item = this.get('operations.item.mbom_ops');
            var bom = this.get('operations.bom.mbom_ops');
        }
        return Ember.Object.create({
            bom: bom,
            item: item
        });
    }.property('operations'),

    multiSelect: function() {
        return this.get('selectedNodes.content.length') > 1;
    }.property('selectedNodes.content.length'),

    _fetchOperationUrl: function(name, context, node) {
        // fetch url from server
        var url = App.get('apiUrlRoot') + name + '/' + context +
            '/operation_url';

        if (context == 'item') {
            var keys = {cdb_object_id: node.get('nodeId')};
        } else {
            var keys = {
                baugruppe: node.get('baugruppe'),
                b_index: node.get('b_index'),
                teilenummer: node.get('teilenummer'),
                t_index: node.get('t_index'),
                position: node.get('position'),
                variante: node.get('variante'),
                auswahlmenge: node.get('auswahlmenge')
            };
        }

        return App.ajax({
            url: url,
            data: keys,
            dataType: 'json'
        });
    },

    actions: {
        addNodeToSelection: function() {
            var selectedNodes = this.get('selectedNodes');
            if (!(selectedNodes.get('content').contains(this.get('treeNode')))) {
                selectedNodes.click(this.get('treeNode'), false, false);
            }
        },

        selectOperation: function(operation, context, isEbomView) {
            this.set('selectedOperationContext', context);
            this.set('selectedOperationName', operation.label);
            this.set('isEbomView', isEbomView);
            this.send('executeOperation');
        },

        adjustMenu: function() {
            var button = this.$('button:nth-child(1)');

            var menu = this.$('.dropdown-menu');
            menu.css('left', button.offset().left - 155 + 'px');
            menu.css('width', '230px');

            var top = button.offset().top + button.outerHeight();
            var bottom = top + menu.outerHeight();

            if (bottom <= $(window).height()) {
                menu.css('top', top + 'px');
            } else {
                // if the menu is to big for the page, open it upwards
                bottom = button.offset().top;
                menu.css('top', 'auto');
                menu.css('bottom', $(window).height() - bottom + 'px');
            }
        },

        executeOperation: function() {
            var self = this;

            var operation = this.get('selectedOperation');
            if (operation) {
                var exec_op = this;
                var content = this.get('selectedNodes.content');
                if (content.length == 1) {
                    // single select operation

                    this._fetchOperationUrl(operation.name,
                        this.get('selectedOperationContext'),
                        this.get('treeNode')).then(function(data) {
                        if (data.success) {
                            window.open(data.result, '_self');

                            if (operation.needsReload) {
                                self.sendAction('refreshBom',
                                                self.get('treeComponent'),
                                                self.get('treeNode'));
                            }

                            if (operation.unselect) {
                                content.removeObject(node);
                            }
                        } else {
                            cdb.elink.alert(data.message);
                        }
                    });
                } else if (content.length > 1) {
                    // multi select operations
                    if (this.get('selectedOperationContext') == "item") {
                        var pk = function(node) {
                            return {cdb_object_id: node.get('nodeId')};
                        };
                    } else {
                        var pk = function(node) {
                            return {
                                baugruppe: node.get('baugruppe'),
                                b_index: node.get('b_index'),
                                teilenummer: node.get('teilenummer'),
                                t_index: node.get('t_index'),
                                position: node.get('position'),
                                variante: node.get('variante'),
                                auswahlmenge: node.get('auswahlmenge')
                            }
                        };
                    }
                    var keys = this.get('selectedNodes.content').map(pk, this);

                    var exec_multi_select_op = function(exec_op, operation, content) {
                        App.ajax({
                            url: operation.custom_url,
                            data: {
                                opname: operation.opname,
                                keys: JSON.stringify(keys)
                            },
                            dataType: 'json',
                            type: 'post',
                            async: false
                        }).then(function(data) {
                            if (data.success) {
                                if (operation.needsReload) {
                                    content.forEach(function(item) {
                                        exec_op.sendAction('refreshBom',
                                        exec_op.get('treeComponent'), item);
                                    });
                                }
                                if (operation.unselect) {
                                    content.clear();
                                }
                            } else {
                                cdb.elink.alertCDBMessage(data.message);
                            }
                        });
                    };

                    if (operation.dialogText) {
                        cdb.elink.modal({
                            pre_mask: function(mask) {
                                $('<p>', {'class': 'alert'}).text(
                                    operation.dialogText).appendTo(mask.find('.modal-body'));
                                var dlgBtns = $.parseJSON(operation.dialogBtns);
                                mask.find('button.lbl-ok').text(dlgBtns.ok);
                                mask.find('button.lbl-cancel').text(dlgBtns.cancel);
                            },
                            ok: function() {
                                exec_multi_select_op(exec_op, operation, content);
                            },
                            cancel: function() { }
                        });
                    } else {
                        exec_multi_select_op(exec_op, operation, content);
                    }
                }
            }
        }
    }
});

App.TreeNodeViewSelector = Ember.Object.extend({
    actionViewClass: Ember.View.extend({
        expanding: false,
        templateName: 'action-view',
        actions: {
            toggleAction: function() {
                this.toggleProperty('expanding');
            }
        }
    }),
    nodeViewClass: Ember.View.extend({
        templateName: 'node-view'
    }),
    navigationViewClass: Ember.View.extend({
        templateName: 'navigation-view'
    }),

    viewFor: function(node) {
        return this.get('nodeViewClass');
    }
});

App.TreeViewComponent = Ember.Component.extend({
    classNames: ['tree-view-component'],
    classnameBindings: ['treeNode.item.is_mbom:ebom:mbom'],

    registerTreeSearches: function() {
        var self = this;
        this.get('treeSearches').addEnumerableObserver(this, {
            willChange: function(navigatedBy, removing, addCount) {},
            didChange: function(navigatedBy, removeCount, adding) {
                adding.forEach(function(item) {
                    item.set('controller', self);
                });
            }
        });
    }.on('init'),

    didInsertElement: function() {
        var self = this;

        this.$('input, textarea').placeholder();

        this.$().scroll(function() {
            self.renderVisibleArea();
        });

        this.setContainerHeight();
    },

    _setContainerHeight: function() {
        var container = this.$("> .tree-node");

        if (container) {
            var height = this.get('treeNode.listContent.length') * 17.15;
            container.height(height);
        }

        this.renderVisibleArea();
    },

    setContainerHeight: function() {
        Ember.run.once(this, "_setContainerHeight");
    }.observes('treeNode.listContent'),

    renderVisibleArea: function() {
        var viewport = this.$();
        var container = this.$("> .tree-node");
        var listContent = this.get('treeNode.listContent');

        if (viewport && container && listContent) {

            // Visible area (relative to container)
            var top = viewport.scrollTop();
            var bottom = top + viewport.height();

            // first visible index (approximate)
            //var begin = Math.max(Math.floor((top / container.height()) * listContent.length) - 10, 0);
            var begin = 0;
            // last visible index (approximate)
            var end = Math.ceil((bottom / container.height()) * listContent.length) + 10;

            // set visible flag
            Ember.beginPropertyChanges();
            listContent.slice(begin, end).forEach(function(node) {
                node.set('visible', true);
            });
            Ember.endPropertyChanges();
        }
    },

    // root
    treeNode: null,

    scrollToNode: function(node, effect) {
        var scrollContainer = this.$();

        var listContent = this.get('treeNode.listContent');
        if (listContent) {
            var index = listContent.indexOf(node);
            if (index >= 0) {
                // set visible flag
                Ember.beginPropertyChanges();
                listContent.slice(0, index+1).forEach(function(node) {
                    node.set('visible', true);
                });
                Ember.endPropertyChanges();

                Ember.run.schedule('afterRender', function() {
                    var container = scrollContainer[0];
                    var component = node.get('component');
                    if (component) {
                        var element = component.$()[0];
                        if (container && element) {
                            scrollIntoViewIfNeeded(container, element);
                        }
                    }
                });
            }
        }

        if (effect) {
            node.trigger('animate', effect);
        }
    },

    actions: {
        refreshBom: function(bom, node, reloadParent) {
            this.sendAction('refreshBom', bom, node, reloadParent);
        },

        triggerSync: function(bom, node) {
            this.sendAction('triggerSync');
        }
    }
});

App.TreeViewNodeComponent = Ember.Component.extend({
    classNames: ['tree-node'],
    classNameBindings: [
        'treeNode.item.is_mbom:mbom-node:ebom-node',
        'treeNode.item.is_assembly:assembly:bomitem'
    ],

    viewSelector: App.TreeNodeViewSelector.create({}),

    registerOnTreeNode: function() {
        var self = this;
        var treeNode = Ember.RSVP.resolve(this.get('treeNode'));
        treeNode.then(function(node) {
            node.set('component', self);
        });
    },

    animate: function() {
        var self = this;
        var treeNode = Ember.RSVP.resolve(this.get('treeNode'));
        treeNode.then(function(node) {
            node.on('animate', function(effect) {
                effect(self.$());
            });

            node.get('navigatedBy').forEach(function(treeSearch) {
                if (treeSearch.applyEffect) {
                    treeSearch.applyEffect(self.$());
                }
            });
        });
    }.on('init'),

    willDestroy: function() {
        if (this.get('treeNode.navigatedBy')) {
            this.get('treeNode.navigatedBy').removeEnumerableObserver(this);
        }
    },

    isNavigated: Ember.computed.notEmpty('treeNode.navigatedBy.[]'),
    isHit: Ember.computed.notEmpty('treeNode.hitBy.[]'),

    treeCssClasses: function() {
        var treeSearchClasses = this.get('treeNode.treeSearchClasses');
        if (treeSearchClasses) {
            return treeSearchClasses.join(' ');
        }
    }.property('treeNode.treeSearchClasses.[]'),

    actionView: function() {
        return this.get('viewSelector').get('actionViewClass');
    }.property('viewSelector'),

    treeComponent: null,

    isRoot: false,

    isSelected: function() {
        return this.get('selectedNodes.content').contains(this.get('treeNode'));
    }.property('treeNode', 'selectedNodes.content.[]'),

    treeNode: null,
    treeNodeView: function() {
        return this.get('viewSelector').viewFor(this.get('treeNode'));
    }.property('treeNode', 'viewSelector'),

    treeNodeHasContent: Ember.computed.notEmpty('treeNode.[]'),
    hasChildren: Ember.computed.or('treeNodeHasContent', 'treeNode.hasChildren', 'treeNode.hasPredicates'),

    collapsible: function() {
        return this.$('.tree-child-nodes.collapse:first');
    },

    expandCurrentNode: function(state) {
        var expanded = this.get('treeNode.expanded');

        if (expanded) {
            this.collapsible().addClass('in');
        } else {
            this.collapsible().removeClass('in');
        }
    }.observes('treeNode.expanded'),

    didInsertElement: function() {
        this.registerOnTreeNode();
        this.expandCurrentNode();
    },

    buttonVisible: false,

    refreshBom: "refreshBom",
    actions: {
        refreshBom: function(bom, node, reloadParent) {
            this.sendAction('refreshBom', bom, node, reloadParent);
        },
        toggleButtonVisibility: function() {
            this.set('buttonVisible', true);
        }
    }
});

App.TreeViewPredicateComponent = Ember.Component.extend({
    classNames: ['bom-tree-predicate']
});

App.TreeViewToolbarComponent = Ember.Component.extend({
    viewSelector: App.TreeNodeViewSelector.create({}),

    sortProperties: ['position'],
    sortedTreeSearches: Ember.computed.sort('treeSearches', 'sortProperties'),

    navigationView: function() {
        return this.get('viewSelector.navigationViewClass');
    }.property('viewSelector'),

    jumpToFirst: function(treeSearch) {
        treeSearch.set('navIdx', 0);
    },

    actions: {
        searchBOM: function(field) {
            var condition = this.get('searchStringValue');
            this.set('searchString', condition);
        },

        // navigations
        jumpToNext: function(treeSearch) {
            treeSearch.navigateForward();
        },
        jumpToPrev: function(treeSearch) {
            treeSearch.navigateBackward();
        },
        jumpToCurrent: function(treeSearch) {
            // TODO
        }
    }
});
