App.TreeSearch = Ember.ArrayProxy.extend({
    init: function() {
        this.set('content', Ember.A());

        this.initResults();
    },

    willDestroy: function() {
        this.clear();
        this._super();
    },

    /*
     * Following attributes must be set on creation
     */
    name: null,  // mandatory
    rootNode: null, // mandatory
    cssClass: "tree-search",  // optional

    /*
     * function called with (node) must return true/false
     * example function:
     *
     * function(node){
     *      return (node.get('id') === nodeSearch.get('searchId'));
     * }
     */
    match: null, // mandatory
    expand: function(node) { return false; }, // optional
    applyEffect: undefined,  // optional
    // whether to show a navigation for search result
    showNavigation: false,

    /*
     * Results
     */

    clear: function(context) {
        var self = this;

        var navNode = this.content.objectAt(this.get("navIdx"));
        navNode.get("navigatedBy").removeObject(this);

        this.content.forEach(function(node) {
            node.get("hitBy").removeObject(this);
        });

        this._super();
    },

    navIdx: 0,
    navIdxPlusOne: function() {
        return this.get("content.length") > 0 ? this.get("navIdx") + 1 : 0;
    }.property("navIdx", "content.length"),

    navigatedNode: function() {
        var navIdx = this.get("navIdx");
        return this.get("content").objectAt(navIdx);
    }.property("navIdx"),

    navIdxWillChange: function() {
        var navNode = this.content.objectAt(this.get("navIdx"));
        if (navNode) {
            navNode.get("navigatedBy").removeObject(this);
        }
    }.observesBefore("navIdx"),
    navIdxChanged: function() {
        var navNode = this.content.objectAt(this.get("navIdx"));
        if (navNode) {
            navNode.get("navigatedBy").pushObject(this);
        }

        this._navigate();
    }.observes("navIdx", "content.isFulfilled"),

    navigateForward: function() {
        if (this.get("navIdx") + 1 < this.get("content").length) {
            this.incrementProperty("navIdx");
        }
    },
    navigateBackward: function() {
        if (this.get("navIdx") > 0) {
            this.decrementProperty("navIdx");
        }
    },
    navigateCyclic: function() {
        if (this.get("content").length == 1) {
            var navNode = this.content.objectAt("0");
            navNode.get("navigatedBy").removeObject(this);
            navNode.get("navigatedBy").pushObject(this);
        } else {
            if (this.get("navIdx") + 1 < this.get("content").length) {
                this.incrementProperty("navIdx");
            } else {
                this.set("navIdx", 0);
            }
        }
    },

    _navigate: function() {
        var navIdx = this.get('navIdx');

        if (navIdx >= 0 && navIdx < this.content.length) {
            var node = this.get("content").objectAt(navIdx);
            if (node) {
                node.render();
                //node.expand();
                Ember.run.schedule('afterRender', node, "expand");
            }
        }
    },

    _initResults: function(node) {
        var self = this;

        var result = Ember.A([]);
        return Ember.RSVP.resolve(node).then(function(node) {
            return Ember.RSVP.hash({
                match: Ember.RSVP.resolve(self.match(node)).then(function(match) {
                    if (match) {
                        result.pushObject(node);
                        node.get("hitBy").pushObject(self);
                    }
                }),
                expand: Ember.RSVP.resolve(self.expand(node))
            }).then(function(data) {
                var expand = data.expand;
                var promise = Ember.RSVP.resolve(result);

                if (expand) {
                    // load nodes, but do not render!
                    promise = node.loadComponents().then(function(content) {
                        return Ember.RSVP.all(content.map(function(child) {
                            return self._initResults(child);
                        })).then(function(child_results) {
                            child_results.forEach(function(_res) {
                                result.pushObjects(_res);
                            });
                            return result;
                        });
                    });
                }
                return promise;
            });
        });
    },

    initResults: function() {
        var rootNode = this.get("rootNode");
        this._initResults(rootNode).then(function(content) {
            this.set("content", content);
        }.bind(this));
    }
});
