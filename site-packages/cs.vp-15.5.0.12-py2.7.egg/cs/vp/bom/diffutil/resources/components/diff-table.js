App.EmberTableComponent = Ember.Table.EmberTableComponent.extend({
    enableColumnReorder: false,
    hasFooter: false,

    /**
     * Setup Manual Resize
     *
     * Allow manual resizing of the table by toggling the property "tableSizeChange" on the controller
     * (see https://github.com/Addepar/ember-table/issues/114)
     */
    setupManualResize: function() {
        var parentController = this.get('targetObject');
        Ember.addObserver(parentController, 'tableSizeChange', this, function() {
            Ember.run.schedule('afterRender', this, function() {
                this.elementSizeDidChange();
            });
        });
    }.on('init'),

    actions: {
        sortByColumn: function(col) {
            this.sendAction('sortAction', col);
        }
    }
});

App.FilterValue = Ember.Object.extend({
    checked: true,
    value: null,
    column: null
});

App.HeaderCellView = Ember.Table.HeaderCell.extend({
    templateName: 'diffheadercell',

    classNameBindings: ['content.attribute'],

    sortIcon: function() {
        var ascState = this.get('content.asc');
        return ascState === null ? '' : (ascState ? '▲' : '▼');
    }.property('content.asc'),

    click: function(event) {
        if (!$(event.target).parents('a.dropdown').length > 0 ||
                $(event.target).parents('ul.dropdown-menu').length > 0) {
            event.stopPropagation();
        }
    },

    filterValues: Ember.computed.alias('content.filterValues'),

    allChecked: function(key, value) {
        if (value !== undefined) {
            // set property
            this.get('filterValues').forEach(function(item) {
                item.set('checked', value);
            });
        }

        return this.get('filterValues').isEvery('checked', true);
    }.property('filterValues.@each.checked'),

    isIndeterminate: function() {
        return this.get('filterValues').isAny('checked', true) && this.get('filterValues').isAny('checked', false);
    }.property('filterValues.@each.checked'),

    actions: {
        sortByColumn: function() {
            this.get('controller').send('sortByColumn', this.get('content'));
        },
        adjustMenu: function() {
            var button = this.$('a');
            var menu = this.$('ul.dropdown-menu');
            menu.css('left', button.offset().left - 155 + 'px');

            var top = button.offset().top + button.outerHeight();
            var bottom = top + menu.outerHeight();

            var isEntirelyVisible = top + menu.outerHeight() <=
                $(window).height();
            if (isEntirelyVisible) {
                menu.css('top', top + 'px');
            } else {
                // if the menu is to big for the page, open it upwards
                bottom = button.offset().top;
                menu.css('top', 'auto');
                menu.css('bottom', $(window).height() - bottom + 'px');
            }
        }
    }
});

App.TableCellView = Ember.Table.TableCell.extend({
    templateName: 'tablecellview',
    classNameBindings: ['content.attribute'],

    click: function(event) {
        var target = $(event.target);
        if (target.parents('.ignore-button').length > 0) {
            event.stopPropagation();
        }
    },

    actions: {
        ignore: function() {
            this.get('controller').sendAction(this.get('content.ignore'), this.get('cellContent.row'));
        }
    }
});

App.DiffTableComponent = Ember.Component.extend({
    classNames: ['diff-table'],
    filterText: null,
    sortConditions: Ember.A([]),
    showAssemblies: true,
    showLeaves: true,
    selectedItem: null,
    headerContent: Ember.A([]),
    linked: true,

    init: function() {
        this._super();
    },

    didInsertElement: function() {
        $('input, textarea').placeholder();
    },

    catalogIcon: function() {
        return this.get('urlpaths.localres') + 'catalog.png';
    }.property(),

    sortFunction: function() {
        var conditions = this.get('sortConditions');

        return function(a, b) {
            for (var i = 0; i < conditions.length; i++) {
                var condition = conditions[i];
                var fieldname = condition.get('attribute');
                var mode = condition.get('asc') ? 1 : -1;

                var lhs = Ember.get(a, fieldname);
                var rhs = Ember.get(b, fieldname);

                if (lhs > rhs) {
                    return 1 * mode;
                } else if (lhs < rhs) {
                    return -1 * mode;
                }
            }
            return 0;
        };
    }.property('sortConditions.[]'),

    sortedContent: function() {
        if (this.get('content.isFulfilled')) {
            var content = this.get('content.content');
            var result = content ? content.slice() : Ember.A();

            var sortFunction = this.get('sortFunction');
            if (sortFunction) {
                result.sort(sortFunction);
            }

            return result;
        } else {
            return Ember.A();
        }
    }.property('sortFunction', 'content.isFulfilled'),

    filterValues: function() {
        return this.get('columns').reduce(function(previousValue, item) {
            return previousValue.addObjects(item.get('filterValues'));
        }, Em.A());
    }.property('columns.@each.filterValues'),

    filteredContent: function() {
        var content = this.get('sortedContent');

        var filterText = this.get('filterText');
        var showAssemblies = this.get('showAssemblies');
        var showLeaves = this.get('showLeaves');
        var headerContent = this.get('headerContent');

        /* DO NOT DELETE THE FOLLOWING LINE!
           otherwise filterValues will not be computed and
           filterValues.@each.checked won't work!!
         */
        var filterValues = this.get('filterValues');

        return content.filter(function(entry) {
            if (filterText) {
                var match = headerContent.any(function(item) {
                    return ('' + entry[item.id]).toLowerCase().contains(filterText.toLowerCase());
                });
            } else {
                var match = true;
            }

            var button_state = (showAssemblies && !entry.get('is_leaf')) || (showLeaves  && entry.get('is_leaf'));

            var filter_menu = this.get('columns').every(function(column) {
                var entry_value = entry.get(column.get('attribute'));
                var value = column.get('filterValues').findBy('value', entry_value);

                return value === undefined || value.get('checked');
            });

            var visible = match && button_state && filter_menu;
            return visible;
        }, this);
    }.property('filterText', 'content.@each.ignored',
        'showAssemblies', 'showLeaves',
        'filterValues.@each.checked', 'sortedContent'),

    description: function() {
        var product = this.get('product');
        var variant = this.get('variant');

        return (product ? product.get('description') : '-') + ' ' +
            (variant ? variant.get('description') : '-');
    }.property('product', 'variant'),

    /*
     * Ember Table stuff
     */

    columns: function() {
        var optionals = ['maxWidth', 'defaultColumnWidth', 'canAutoResize'];
        var result = this.get('headerContent').map(function(item) {
            var column =  Ember.Table.ColumnDefinition.create({
                headerCellName: item.get('label'),
                attribute: item.get('id'),
                getCellContent: function(row) {
                    var attr = item.get('id');
                    return {
                        text: row.get(attr),
                        row: row
                    }
                },
                headerCellView: 'App.HeaderCellView',
                tableCellView: 'App.TableCellView',
                textAlign: 'left',
                asc: item.get('asc'),
                ignore: item.get('ignore'),
                filterValues: Ember.A(item.get('filterValues')).map(function(value) {
                    return App.FilterValue.create({
                        value: value.get('value'),
                        column: item.get('id'),
                        checked: value.get('default')
                    })
                })
            });

            // Set optional attributes
            for (var i = 0; i < optionals.length; i++) {
                var attr = optionals[i];
                if (item.get(attr) !== undefined) {
                    column.set(attr, item.get(attr));
                }
            }

            if (item.get('sortOnInit') === true) {
                this.send('sort', column);
            }

            return column;
        }, this);

        return result;
    }.property('headerContent'),

    actions: {
        sort: function(col) {
            var sortConditions = this.get('sortConditions');
            if (col.get('asc') === null) {
                col.set('asc', true);
            } else {
                col.set('asc', !col.get('asc'));
            }
            if (sortConditions.contains(col)) {
                sortConditions.removeObject(col);
            }
            sortConditions.insertAt(0, col);
        },
        select: function(row) {
            var selectedItem = this.get('selectedItem');
            if (selectedItem) {
                // clear selected
                selectedItem.set('selected', '');
            }
            // select clicked row
            row.set('selected', 'selected');
            // mark selected
            this.set('selectedItem', row);
        },
        showModalWindow: function() {
            this.sendAction('showModalWindow');
        },
        ignorePart: function(row) {
            this.sendAction('ignore', row.get('name'), row.get('content'));
        },
        ignoreDifference: function(row) {
            this.sendAction('ignore', row.get('name'), row.get('act_sbom'), row.get('content'));
        },
        deleteIgnore: function(row) {
            if (row.get('ignored')) {
                this.sendAction('deleteIgnore', row.get('name'), row.get('content'));
            }
        },
        toogleLink: function() {
            this.toggleProperty('linked');
        }
    }
});

App.DiffTableButtonView = Ember.View.extend({
    tagName: 'button',
    templateName: 'diff-table-button',
    attributeBindings: ['title'],
    classNameBindings: [':btn', 'value:active'],

    iconUrl: function() {
        return this.get('controller.urlpaths.localres') + this.get('icon');
    }.property('icon'),

    click: function() {
        this.toggleProperty('value');
    }
});
