App.Difference = App.CachedObject.extend({
    itemCache: "item_object_id"
});

App.IndexModel = App.CachedObject.extend({

    /*
     * Initialization
     */
    differencesReloadToggle: false,
    tableExpanded: true,
    tableLinked: true,
    variant: null,
    variantSearchStr: '',
    product: null,
    itemList: [],
    filter: {},

    init: function() {
        this._super();
    },

    /*
     * Cached properties
     */

    // Definition of the cached property `litem`
    litemCache: {
        name: "itemCache",
        key: "litem_object_id"
    },

    // Definition of the cached property `lbom`
    lbomCache: {
        name: "bomCache",
        key: "litem_object_id"
    },

    // Definition of the cached property `ritem`
    ritemCache: {
        name: "itemCache",
        key: "ritem_object_id"
    },

    // Definition of the cached property `rbom`
    rbomCache: {
        name: "bomCache",
        key: "ritem_object_id"
    },

    /*
     * Computed properties
     */
    _variants_search_length_lookup: '',
    _variants_search_length: 0,
    variants: function() {
        var self = this;
        var length = self.get('product.variantCount');
        var searchstr = self.get('variantSearchStr');
        if (searchstr !== '') {
            if (self.get('_variants_search_length_lookup') !== searchstr) {
                App.ajax({
                    url: App.get('apiUrlRoot') + '/' + self.get('product.cdb_object_id') + '/product_variants_meta',
                    data: {
                        searchStr: searchstr
                    },
                    dataType: 'json',
                    type: 'get',
                    async: true
                }, true, 'cdbvp_elink_diffutil_load_variants').then(function(data) {
                    if (data.success) {
                        length = data.result;
                        self.setProperties({'_variants_search_length_lookup': searchstr,
                                            '_variants_search_length': length});
                        self.notifyPropertyChange('variants');
                    } else {
                        cdb.elink.alertCDBMessage(data.message);
                    }
                });
                return Ember.A([]);
            } else {
                length = self.get('_variants_search_length');
                self.setProperties({'_variants_search_length_lookup': '',
                    '_variants_search_length': 0});
            }
        }
        var variantCache = App.PaginatedCachedArray.create({
            pageSize: 100,
            length: length,
            url: function(idx) {
                var url = App.get('apiUrlRoot');
                url += '/' + self.get('product.cdb_object_id');
                url += '/product_variants';
                return url;
            },
            data: function(idx, pagingData) {
                var data = {
                    startIdx: pagingData.startIdx,
                    page: pagingData.page,
                    pageSize: pagingData.pageSize,
                    searchStr: searchstr
                };
                return data;
            }
        });
        return variantCache;
    }.property('product', 'variantSearchStr'),

    variantsExists: function() {
        var searchstr = this.get('variantSearchStr');
        var variants = this.get('variants');
        // needed to reset search strings
        return searchstr == '' ? variants.length > 0 : true;
    }.property('variants'),

    // differences between the BOM of the left item
    // and the BOM of the right item
    _computeDifferences: function() {
        var litem = this.get('litem');
        var ritem = this.get('ritem');

        var params = getQueryParams();
        delete params._filtertext;
        var bomfilter = JSON.stringify(params);

        if (litem && ritem) {
            var url = App.get('apiUrlRoot') +
                litem.get('nr') + ';' + litem.get('idx') + '/' +
                ritem.get('nr') + ';' + ritem.get('idx') + '/diff_table';

            var data = {};

            var product = this.get('product');
            if (product) {
                data['product_oid'] = product.get('cdb_object_id');
            }

            var variant = this.get('variant');
            if (variant) {
                data['variant_id'] = variant.get('vid');
                data['signature'] = variant.get('signature');
            }

            data['filter'] = bomfilter;

            return App.PromiseObject.create({
                promise: App.ajax({
                    url: url,
                    dataType: 'json',
                    data: data,
                    type: 'post',
                    async: true
                }, true, 'cdbvp_elink_diffutil_load_difference_table').then(function(data) {
                    var tableContent = Ember.A([]);
                    if (data.success) {
                        $.each(data.result, function(i, elem) {
                            tableContent.pushObject(App.Difference.create(elem));
                        });
                    } else {
                        cdb.elink.alertCDBMessage(data.message);
                    }
                    return tableContent;
                }.bind(this))
            });
        }
    },

    differences: function() {
        if (!this.get('tableExpanded')) {
            this.set('reloadDifferencesWhenExpanded', true);
        }

        if (this.get('tableExpanded') && this.get('tableLinked') &&
                this.get('litem.isFulfilled') && this.get('ritem.isFulfilled')) {
            this.set('_differences', this._computeDifferences());
        }

        return this.get('_differences');
    }.property('litem.isFulfilled', 'ritem.isFulfilled', 'product',
        'variant', 'differencesReloadToggle', 'tableLinked')
});
