var DiffutilApp = Ember.Application.extend({
    Resolver: Ember.DefaultResolver.extend({
        //Get hbs templates when needed
        //If template is included in index.html, this one will be used
        //otherwise, the template will be loaded per ajax
        resolveTemplate: function(parsedName) {
            var template = this._super(parsedName);
            var templateName = parsedName.fullNameWithoutType.replace(/\./g, '/');
            if (!template && this.namespace.get('templateUrlRoot')) {
                var filePath = this.namespace.get('templateUrlRoot') + templateName + '.hbs';

                $.ajax({
                    url: filePath,
                    async: false,
                    success: function(response) {
                        template = Ember.TEMPLATES[templateName] = Ember.Handlebars
                                .compile(response);
                    }
                });
            }
            return template;
        }
    }),

    templateUrlRoot: function() {
        if (this.get('_templateUrlRoot') === undefined) {
            if (this.get('rootElement')) {
                this.set('_templateUrlRoot', Ember.$(this.get('rootElement')).data(
                    'template-url-root'));
            } else {
                this.set('_templateUrlRoot', '');
            }
        }
        return this.get('_templateUrlRoot');
    }.property(),

    apiUrlRoot: function() {
        if (this.get('_apiUrlRoot') === undefined) {
            if (this.get('rootElement')) {
                this.set('_apiUrlRoot', Ember.$(this.get('rootElement')).data(
                    'api-url-root'));
            } else {
                this.set('_apiUrlRoot', '');
            }
        }
        return this.get('_apiUrlRoot');
    }.property(),

    appDataUrl: function() {
        if (this.get('_appDataUrl') === undefined) {
            if (this.get('rootElement')) {
                this.set('_appDataUrl', Ember.$(this.get('rootElement')).data(
                    'app-data'));
            } else {
                this.set('_appDataUrl', '');
            }
        }
        return this.get('_appDataUrl');
    }.property(),

    _initAjax: function() {
        this.set('_ajaxCount', 0);
        this.set('_ajax', Ember.RSVP.resolve(null));
    }.on('init'),

    _ajaxTime: [],
    _ajaxLabels: [],
    _ajaxId: 0,

    ajax: function(args, displayLoader, label) {
        var app = this;

        if (displayLoader === undefined) {
            displayLoader = true;
        }

        if (displayLoader) {
            this.incrementProperty('_ajaxCount');
        }
        var _ajax = this.get('_ajax');

        this.set('_ajax', _ajax.then(function() {
            var start;
            var ajaxId = app.incrementProperty('_ajaxId');
            args.beforeSend = function() {
                start = new Date();
                if (label !== undefined) {
                    app.get('_ajaxLabels').pushObject({
                        id: ajaxId,
                        label: window.diffutilLabels[label]
                    });
                }
            };

            return Ember.$.ajax(args)
                    .then(function(data) {

                app.get('_ajaxTime').pushObject({
                    time: (new Date() - start) / 1000,
                    url: args.url
                });

                if (displayLoader) {
                    app.decrementProperty('_ajaxCount');
                }

                if (label !== undefined) {
                    app.get('_ajaxLabels').removeObject(
                        app.get('_ajaxLabels').findBy('id', ajaxId)
                    );
                }

                return Ember.RSVP.resolve(data);
            });
        }));
        return this.get('_ajax');
    },

    showAjaxLoader: function() {
        Ember.run.schedule('afterRender', this, function() {
            if (this.get('_ajaxCount') <= 0) {
                cdb.elink.stopWaiting();
                this.$('.ajax-alerts').css('display', 'none');
            } else {
                cdb.elink.startWaiting();
                this.$('.ajax-alerts').css('display', 'block');
            }
        });
    }.observes('_ajaxCount'),

    _observeLabels: function() {
        var app = this;
        this.get('_ajaxLabels').addEnumerableObserver(this, {
            willChange: function(navigatedBy, removing, addCount) {
                removing.forEach(function(obj) {
                    var el = app.$('.ajax-alerts div[data-id="' + obj.id + '"]');
                    if (el !== undefined) {
                        el.remove();
                    }
                });
            },
            didChange: function(navigatedBy, removeCount, adding) {
                adding.forEach(function(obj) {
                    var el = $('<div>', {
                        'data-id': obj.id
                    });
                    el.text(obj.label);
                    el.appendTo(app.$('.ajax-alerts'));
                });
            }
        });
    }.on('init'),

    willDestroy: function() {
        if (this.get('_ajaxLabels') !== undefined) {
            this.get('_ajaxLabels').removeEnumerableObserver(this);
        }
    }
});

var App = window.App = DiffutilApp.create({
    rootElement: '#diffutil',
    TreeNodeDict: {},
    ready: function() {
        // inject labels into all controllers
        this.register('labels:main', Ember.Object.extend(window.diffutilLabels), {singleton: true});
        this.inject('controller', 'labels', 'labels:main');
        this.inject('component', 'labels', 'labels:main');
        this.register('statecolors:main', Ember.Object.extend(window.statecolors), {singleton: true});
        this.inject('controller', 'statecolors', 'statecolors:main');
        this.register('urlpaths:main', Ember.Object.extend(window.urlpaths), {singleton: true});
        this.inject('controller', 'urlpaths', 'urlpaths:main');
        this.inject('component', 'urlpaths', 'urlpaths:main');
    },

    //DEBUG
    LOG_TRANSITIONS: true,
    LOG_TRANSITIONS_INTERNAL: true,
    LOG_BINDINGS: true,
    LOG_VIEW_LOOKUPS: true,
    LOG_STACKTRACE_ON_DEPRECATION: true,
    LOG_VERSION: true,
    debugMode: false
});
