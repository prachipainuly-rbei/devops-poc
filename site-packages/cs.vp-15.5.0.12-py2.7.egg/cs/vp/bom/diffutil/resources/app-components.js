App.StateIconComponent = Ember.Component.extend({
    classNames: ['state-icon-component'],
    fillColor: null,
    borderColor: null,
    iconStyle: function() {
        var fillColor = this.get('fillColor');
        var borderColor = this.get('borderColor');
        if (!fillColor) {
            fillColor = [255, 255, 255];
        }
        if (!borderColor) {
            borderColor = [0, 0, 0];
        }
        return 'background-color: rgb(' + String(fillColor)
                + '); border: 1px solid rgb(' + String(borderColor) + ');';
    }.property('fillColor', 'borderColor')
});

App.ModalWindowComponent = Ember.Component.extend({
    isVisible: false,
    classNames: ['modal', 'fade'],
    didInsertElement: function() {
        var self = this;
        this.$().on('hidden', function() {
            self.set('isVisible', false);
        });
        this._modal_hide();
    },
    _modal_hide: function() {
        var is_visible = this.get('isVisible');
        if (is_visible) {
            this.$().modal('show');
        } else {
            this.$().modal('hide');
        }
    }.observes('isVisible'),
    actions: {
        buttonTriggered: function(button_action) {
            // should be connected to parent view/component
            this.sendAction('buttonTriggered', button_action);
        }
    }
});

App.CollapsibleBlockComponent = Ember.Component.extend({
    attributeBindings: ['blocktitle', 'expanded'],
    classNames: ['collapsible-block'],
    actions: {
        toggleCaret: function() {
            this.set('expanded', !this.get('expanded'));
        },
        buttonAction: function() {
            if (this.get('isActive') !== undefined) {
                this.sendAction('buttonAction', !this.get('isActive'));
            } else {
                this.sendAction('buttonAction');
            }
        }
    }
});
