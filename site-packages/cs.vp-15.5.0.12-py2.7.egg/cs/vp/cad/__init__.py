#!/usr/bin/env powerscript
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

__revision__ = "$Id: __init__.py 166567 2017-10-12 07:15:17Z jfi $"

from cdb.classbody import classbody
from cdb import ue
from cdb import sqlapi

from cdb.objects import Object
from cdb.objects import Reference_1
from cdb.objects import Reference_N
from cdb.objects import ReferenceMethods_N
from cdb.objects import Forward
from cdb.objects import cdb_file

from cs import documents
from cs.documents import Document
from cs.vp.items import Item

fCADVariant = Forward(__name__ + ".CADVariant")


FILE_TYPE_PDF = "Acrobat"
FILE_TYPE_PNG = "PNG"


class CADVariant(Object):
    u"""Stores information about variants of documents from the Workspace Manager.
    This information is used in the automatic BOM creation (StÃ¼cklistenausleitung).
    """
    __maps_to__ = "cad_variant"
    __classname__ = "cad_variant"

    Item = Reference_1(Item, fCADVariant.teilenummer, fCADVariant.t_index)

    def _check_partno(self, ctx=None):
        """ Checks that the part number / index point to a valid part
        """
        if self.teilenummer and not self.Item:
            raise ue.Exception("part_number", self.teilenummer, self.t_index)

    event_map = {(('create', 'modify', 'copy'), 'pre'): ('_check_partno')
                 }


@classbody
class Document(object):
    CADVariants = Reference_N(
        CADVariant,
        CADVariant.z_nummer == Document.z_nummer,
        CADVariant.z_index == Document.z_index)

    def __get_primary_file_with_alternative_type(self, alternative_file_extension):
        primary_files = self.PrimaryFiles
        for primary_file in primary_files:
            for f in primary_file.DerivedFiles:
                if f.cdbf_type == alternative_file_extension:
                    return f
        return None

    def get_primary_pdf(self):
        """
        Searches for a pdf file with the same name as one of the primary files
        :return: CDB_File the file, if found, `None` else
        """
        return self.__get_primary_file_with_alternative_type(alternative_file_extension=FILE_TYPE_PDF)

    def get_primary_png(self):
        """
        Searches for a png file with the same name as one of the primary files
        :return: CDB_File the file, if found, `None` else
        """
        return self.__get_primary_file_with_alternative_type(alternative_file_extension=FILE_TYPE_PNG)


class Model(documents.Document):
    __classname__ = "model"
    __match__ = documents.Document.cdb_classname >= __classname__
