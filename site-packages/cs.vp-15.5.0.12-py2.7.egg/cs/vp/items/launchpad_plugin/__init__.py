#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
Register tiles by launchpad.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 139703 2016-04-08 11:46:14Z gda $"

from cdb import elink
from cdb import sig
from cdb import util

__all__ = []


@elink.using_template_engine("chameleon")
class LaunchpadPlugin(elink.Application):
    def setup(self):
        self.cssfile = ""
        self.make_tiles()

    def _tile(self, cssid, url, label, count=None):
        result = {"cssid": cssid,
                  "url": url,
                  "label": label}
        result["count"] = count
        return result

    def _label(self, name, lang):
        return util.get_label_with_fallback("cdbvp_launchpad_%s" % name, lang)

    def make_tiles(self):
        from cdb import cmsg
        from cdb import auth
        from cdb import i18n
        lang = i18n.default()
        from cs.vp.items import Item
        products = []
        url = cmsg.Cdbcmsg("part", "CDB_Search", False)
        url.add_item("mapped_cpersno_name", "", auth.get_name())
        product_amount = lambda: len(Item.Query(
                                "cdb_cpersno = '%s'" % (
                                    auth.get_attribute("personalnummer"))))
        products.append(self._tile("article-my",
                                   url.eLink_url(),
                                   self._label("my_article", lang),
                                   product_amount))

        url = cmsg.Cdbcmsg("part", "CDB_Search", False)
        url.add_item("mapped_cpersno_name", "", auth.get_name())
        url.add_item("status", "", 100)
        product_check_amount = \
            lambda: len(Item.Query(
                    u"cdb_cpersno = '%s' AND status = 100" % (
                        auth.get_attribute("personalnummer"))))
        products.append(self._tile("article-check",
                                   url.eLink_url(),
                                   self._label("my_article_check", lang),
                                   product_check_amount))

        url = cmsg.Cdbcmsg("part", "CDB_Search", True)
        products.append(self._tile("article-search",
                                   url.eLink_url(),
                                   self._label("article_search", lang)))

        url = cmsg.Cdbcmsg("part", "CDB_Create", True)
        products.append(self._tile("article-add",
                                   url.eLink_url(),
                                   self._label("article_new", lang)))
        self.category_label = Item._getClassDef().getTitle()
        self.tiles = products


# lazy initialization
app = None


@sig.connect("cs.launchpad.getplugins")
def get_launchpad_plugin():
    global app
    if app is None:
        app = LaunchpadPlugin()
    # return: (order, plugin-app)
    return (3, app)
