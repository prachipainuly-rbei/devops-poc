# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_items.py 153399 2017-02-09 14:16:20Z js $"

import unittest
import urllib2
from webtest import TestApp as Client
from cs.platform.web.root import Root
from cdb.testcase import RollbackTestCase, error_logging_disabled


class TestObject(RollbackTestCase):

    def setUp(self):
        """
        Set up the test case
        """
        try:
            from cs.vp.items import Item
        except ImportError:
            raise unittest.SkipTest("this test needs cs.vp")

        super(TestObject, self).setUp()

        self.created = Item.Create(
            teilenummer="000009",
            t_index="",
            benennung="test",
            t_kategorie="Einzelteil",
            gebrauchsstand="aktiv",
            t_bereich="IT",
            mengeneinheit="Stk",
            cdb_obsolete=0,
            item_maturity=10,
            cdb_status_txt='Draft',
            st_gewicht=0.0,
            cdb_objektart='part_ERP',
            materialnr_erp="000009",
            status=0,
            cdb_mpersno="caddok",
            cdb_mdate="05.12.2014 16:49:58",
            cdb_cpersno="caddok",
            cdb_cdate="05.12.2014 16:49:58"
        )

        app = Root()
        self.c = Client(app)

    def test_item_GET(self):
        oid = self.created.teilenummer
        response = self.c.get(u'/api/v1/collection/part/%s' % oid)
        self.assertEqual(response.json["benennung"], "test")

    def test_item_GET_invalid(self):
        oid = "invalid"
        with error_logging_disabled():
            response = self.c.get(u'/api/v1/collection/part/%s' % oid,
                                  expect_errors=True)
        self.assertEqual(response.status_code, 404)

    def test_versions_GET(self):
        oid = self.created.teilenummer
        response = self.c.get(u'/api/v1/collection/part/%s/versions' % oid)
        self.assertEqual(len(response.json), 1)
        self.assertEqual(map(urllib2.unquote, response.json[0]["relship:versions"]),
                         [u'http://localhost/api/v1/collection/part/000009@'])
        self.assertEqual(response.json[0]["cdb_status_txt"], "Draft")
        link = response.json[0]["@id"]
        response = self.c.get(link)
        self.assertEqual(response.json["t_index"], "")

    def test_versions_PUT(self):
        oid = self.created.teilenummer
        response = self.c.put_json(u'/api/v1/collection/part/%s/versions' % oid, {})
        self.assertEqual(len(response.json), 2)
        self.assertEqual(map(urllib2.unquote, response.json[0]["relship:versions"]),
                         [u'http://localhost/api/v1/collection/part/000009@',
                          u'http://localhost/api/v1/collection/part/000009@a'])
        link = response.json[1]["@id"]
        response = self.c.get(link)
        self.assertEqual(response.json["t_index"], "a")

    def test_versions_PUT_content(self):
        json = {
            'cdb::argument.t_index_neu': 'b'
        }
        oid = self.created.teilenummer
        response = self.c.put_json(u'/api/v1/collection/part/%s/versions' % oid, json)
        self.assertEqual(len(response.json), 2)
        self.assertEqual(map(urllib2.unquote, response.json[0]["relship:versions"]),
                         [u'http://localhost/api/v1/collection/part/000009@',
                          u'http://localhost/api/v1/collection/part/000009@b'])
        link = response.json[1]["@id"]
        response = self.c.get(link)
        self.assertEqual(response.json["t_index"], "b")

    def test_class_GET(self):
        oid = self.created.teilenummer
        response = self.c.get(u'/api/v1/collection/part/%s/class' % oid)
        # FIXME: create and use sample classification
        self.assertEqual(response.json['class'], None)

    def test_classify_PUT(self):
        raise unittest.SkipTest("This test needs to setup the required item class'")
        oid = self.created.teilenummer
        json = {
            "teile_stamm.sachgruppe": "Schraube",
            "teile_stamm.sachgruppe/schraube/schraube.l": "2.34",
            "teile_stamm.sachgruppe/schraube/schraube.dm": "4.56"
        }
        response = self.c.put_json(u'/api/v1/collection/part/%s/class' % oid, json)
        self.assertEqual(response.json['class'], "Schraube")
        self.assertEqual(response.json['properties']['dm']['value'], 4.56)
        self.assertEqual(response.json['properties']['l']['value'], 2.34)
