#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# -*- Python -*-
# $Id: mbom.py 176618 2018-04-27 12:29:21Z gda $
# CDB:Browse
# Copyright (C) 1990 - 2006 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
# File:     mbom.py
# Author:   aki
# Creation: 05.03.2014
# Purpose:

# pylint: disable-msg=E0102,W0142,W0212,W0201

import urllib
from cdb import constants
from cdb import sig
from cdb import ue
from cdb.classbody import classbody
from cdb.objects import ByID, Object
from cdb.objects import Reference_1
from cdb.objects import ReferenceMethods_1
from cdb.objects import Reference_N
from cdb.objects.org import Organization
from cdb.platform import mom
from cdbwrapc import CDBClassDef
import cdbwrapc

from cs.vp.items import Item


CREATE_MBOM_OP_NAME = u"cdb_create_mbom"
CREATE_MBOM_FROM_MBOM_OP_NAME = u"cdb_create_mbom_from_mbom"

MBOM_DEPENDENT_FIELDS = ['cdb_depends_on', 'site_object_id']


def _run(operation, cls_or_obj, **args):
    if isinstance(cls_or_obj, Object):
        cls_or_obj = cls_or_obj.ToObjectHandle()

    op = cdbwrapc.Operation(operation,
                            cls_or_obj,
                            mom.SimpleArguments(**args))
    op.run()

    result = op.getObjectResult()
    return result


@classbody
class Item(object):
    def getEngineeringView(self):
        if self.cdb_depends_on != '' and self.cdb_depends_on is not None:
            return Item.ByKeys(cdb_object_id=self.cdb_depends_on)

    EngineeringView = ReferenceMethods_1(Item, getEngineeringView)

    ManufacturingViews = Reference_N(Item, Item.cdb_depends_on == Item.cdb_object_id)
    ManufacturingSite = Reference_1(Organization, Organization.cdb_object_id == Item.site_object_id)

    def get_filter_dict(self, ctx):
        filter_text = ""
        filter_arguments = {}
        if "site_object_id" in ctx.dialog.get_attribute_names():
            if ctx.dialog.site_object_id:
                label = mom.fields.DDField.ByKeys("part", "site_object_id").Label['']
                value = ByID(ctx.dialog.site_object_id).GetDescription()
                filter_text = label + ": " + value
                filter_arguments["site_object_id"] = ctx.dialog.site_object_id

        return filter_arguments, filter_text

    @sig.connect(Item, "cdbvp_elink_diffutil", "now")
    def show_diffutil(self, ctx):
        from cs.vp.bom import diffutil

        app = diffutil._getapp()
        url = app.getModuleURL()

        filter_dict, filter_text = self.get_filter_dict(ctx)
        query_params = ""
        if filter_dict:
            filter_dict['_filtertext'] = filter_text
            query_params = urllib.urlencode(filter_dict)

        if not self.is_mbom:
            if "variant_id" in ctx.sys_args.get_attribute_names() and \
                    "product_object_id" in ctx.sys_args.get_attribute_names():
                url += "index/%s;%s/%s/%s?%s" % (self.teilenummer,
                                              self.t_index,
                                              ctx.sys_args["product_object_id"],
                                              ctx.sys_args["variant_id"],
                                              query_params)
            else:
                url += "index/%s;%s?%s" % (self.teilenummer, self.t_index, query_params)
        elif self.EngineeringView:
            if "variant_id" in ctx.sys_args.get_attribute_names() and \
                    "product_object_id" in ctx.sys_args.get_attribute_names():
                url += "index/%s;%s/%s/%s/?%s#mbom/%s/" % (self.EngineeringView.teilenummer,
                                                        self.EngineeringView.t_index,
                                                        ctx.sys_args["product_object_id"],
                                                        ctx.sys_args["variant_id"],
                                                        query_params,
                                                        self.cdb_object_id)
            else:
                url += "index/%s;%s?%s#mbom/%s/" % (self.EngineeringView.teilenummer,
                                                 self.EngineeringView.t_index,
                                                 query_params,
                                                 self.cdb_object_id)
        else:
            raise ue.Exception("cdbvp_elink_diffutils_ebom_not_available")

        ctx.url(url)

    def set_bom_info(self, ctx=None):
        """
        Called on create/copy/modify pre to update the
        bom_info field. The bom_info is displayed in
        part and bom_item description tags. The bom_info
        gives the user information whether an item is an mbom item
        and whether it depends on an EBOM item.
        """
        bom_info = ""
        if self.is_mbom:
            if self.cdb_depends_on:
                bom_info = "*mBOM"
            else:
                bom_info = "mBOM"
        self.bom_info = bom_info

    @sig.connect(Item, 'create', 'pre')
    @sig.connect(Item, 'copy', 'pre')
    @sig.connect(Item, 'modify', 'pre')
    def _set_bom_info(self, ctx):
        self.set_bom_info(ctx)

    @sig.connect(Item, 'create', 'pre')
    def _init_mbom_flag(self, ctx):
        if "is_mbom" in ctx.dialog.get_attribute_names() and ctx.dialog.is_mbom == '':
            ctx.set("is_mbom", "0")

    def mbom_flag_changed(self, ctx):
        """
        Called if the is_mbom field has been changed interactively.
        Sets dependent fields readonly/writeable and clears/restores the
        values of these fields.
        """
        if self.is_mbom:
            if ctx.action == "modify":
                ebom = Item.ByKeys(cdb_object_id=ctx.object.cdb_depends_on)
                if ebom:
                    self.materialnr_erp = ebom.materialnr_erp
            ctx.set_fields_writeable(MBOM_DEPENDENT_FIELDS)
            for field_name in MBOM_DEPENDENT_FIELDS:
                if field_name in ctx.object.get_attribute_names():
                    self[field_name] = ctx.object[field_name]
        else:
            for field_name in MBOM_DEPENDENT_FIELDS:
                self[field_name] = ""
            ctx.set_fields_readonly(MBOM_DEPENDENT_FIELDS)
            if ctx.action == "modify":
                self.materialnr_erp = self.calc_erp_number()

    def ebom_changed(self, ctx):
        if self.cdb_depends_on:
            item = Item.ByKeys(cdb_object_id=self.cdb_depends_on)
            if item:
                self.materialnr_erp = item.materialnr_erp

    @sig.connect(Item, 'modify', 'dialogitem_change')
    @sig.connect(Item, 'create', 'dialogitem_change')
    @sig.connect(Item, 'copy', 'dialogitem_change')
    def _mbom_attr_changed(self, ctx):
        if ctx.changed_item == 'is_mbom':
            self.mbom_flag_changed(ctx)
        elif ctx.changed_item == 'cdb_depends_on':
            self.ebom_changed(ctx)

    def validate_changed_ebom(self, ctx):
        if self.is_mbom and self.cdb_depends_on != ctx.object.cdb_depends_on:
            # For the first mBOM Version the eBOM assignment can be changed freely.
            # If more than one mBOM Index exists, all Versions must belong to the same eBOM.
            num_indexes = len(Item.KeywordQuery(teilenummer=self.teilenummer))
            old_ebom = Item.ByKeys(cdb_object_id=ctx.object.cdb_depends_on)
            if num_indexes > 1 and old_ebom:
                new_ebom = Item.ByKeys(cdb_object_id=self.cdb_depends_on)
                if not new_ebom or old_ebom.teilenummer != new_ebom.teilenummer:
                    raise ue.Exception('cdb_invalid_ebom_for_mbom', old_ebom.teilenummer)

    @sig.connect(Item, 'modify', 'post_mask')
    def _validate_changed_ebom(self, ctx):
        self.validate_changed_ebom(ctx)

    def setup_mbom_fields_on_copy(self, ctx):
        """
        Called on pre_mask to setup mbom related fields.
        """
        if not self.is_mbom:
            ctx.set_fields_readonly(MBOM_DEPENDENT_FIELDS)

    @sig.connect(Item, 'copy', 'pre_mask')
    def _setup_mbom_fields_on_copy(self, ctx):
        self.setup_mbom_fields_on_copy(ctx)

    def copy_bom_relship(self, ctx):
        if self.is_create_mbom_op(ctx):
            item = Item.ByKeys(cdb_object_id=ctx.sys_args.item_object_id)
            if 'question_copy_stl_relship_1st_level' in ctx.sys_args.get_attribute_names() and\
                    ctx.sys_args.question_copy_stl_relship_1st_level == ctx.MessageBox.kMsgBoxResultYes:
                for comp in item.Components:
                    _run(constants.kOperationCopy,
                         comp,
                         baugruppe=self.teilenummer,
                         b_index=self.t_index,
                         position=comp.position)

    @sig.connect(Item, 'create', 'post')
    def _copy_bom_relship(self, ctx):
        self.copy_bom_relship(ctx)

    def setup_mbom_fields_on_create(self, ctx):
        if self.is_create_mbom_op(ctx):
            blacklist = [
                'cdb_object_id',
                'teilenummer',
                't_index',
                'status',
                'cdb_status_txt',
                't_ersatz_fuer',
                't_ersatz_durch',
                't_pruefer',
                't_pruef_datum'
            ]

            item = Item.ByKeys(cdb_object_id=ctx.sys_args.item_object_id)
            cldef = self.GetClassDef()
            args = {}
            for attr in cldef.getAttributeDefs():
                attr_name = attr.getName()
                if attr_name not in blacklist:
                    if not attr.is_text():
                        args[attr_name] = getattr(item, attr_name)
                    elif attr_name in ctx.dialog.get_attribute_names():
                        ctx.set(attr_name, item.GetText(attr_name))

            args.update(teilenummer='#',
                        t_index='',
                        cdb_depends_on=item.cdb_object_id,
                        cdb_copy_of_item_id=item.cdb_object_id,
                        is_mbom=1,
                        materialnr_erp=item.materialnr_erp)
            self.Update(**args)
            ctx.set_fields_readonly(['cdb_depends_on', 'is_mbom'])
        if not self.is_mbom:
            ctx.set_fields_readonly(MBOM_DEPENDENT_FIELDS)

    @sig.connect(Item, 'create', 'pre_mask')
    def _setup_mbom_fields_on_create(self, ctx):
        self.setup_mbom_fields_on_create(ctx)

    def setup_mbom_fields_on_modify(self, ctx):
        readonly_attrs = set()
        num_indexes = len(Item.KeywordQuery(teilenummer=self.teilenummer))
        if num_indexes > 1:
            readonly_attrs.update(['is_mbom'])

        if not self.is_mbom:
            readonly_attrs.update(MBOM_DEPENDENT_FIELDS)
            if 'is_mbom' not in readonly_attrs and self.ManufacturingViews:
                readonly_attrs.add('is_mbom')
        ctx.set_fields_readonly(readonly_attrs)

    @sig.connect(Item, 'modify', 'pre_mask')
    def _setup_mbom_fields_on_modify(self, ctx):
        self.setup_mbom_fields_on_modify(ctx)

    def on_cdb_create_mbom_now(self, ctx):
        """
        Creates a MBOM item from an EBOM item by calling CDB_Create
        in interactive mode. Special behavior for this operation can be implemented
        in the standard create user exits. To identify the operation context `is_create_mbom_op`
        can be used.
        """
        if self.is_mbom:
            raise ue.Exception('cdb_operation_not_allowed_on_mbom', self.GetDescription())

        args = {"cdb::argument.%s" % ctx.action: "1"}

        # Add all system args beginning with mbom to pass them to the create operation.
        # These are the args that can be defined by outer operation contexts (e.g. cdb_create_mbom_and_replace)
        for name in ctx.sys_args.get_attribute_names():
            if name.startswith("mbom"):
                args["cdb::argument.%s" % name] = ctx.sys_args[name]

        if "question_copy_stl_relship_1st_level" not in ctx.dialog.get_attribute_names():
            msgbox = ctx.MessageBox("cdb_create_mbom_copy_stl_q",
                                    [],
                                    "question_copy_stl_relship_1st_level",
                                    ctx.MessageBox.kMsgBoxIconQuestion)
            msgbox.addYesButton(1)
            msgbox.addNoButton()
            ctx.show_message(msgbox)
        else:
            args.update(**{"cdb::argument.item_object_id": self.cdb_object_id,
                           "cdb::argument.question_copy_stl_relship_1st_level": ctx.dialog['question_copy_stl_relship_1st_level']})
            ctx.url(self.MakeURL("CDB_Create", **args))

    @staticmethod
    def is_create_mbom_op(ctx):
        """
        Returns true, if the operation context is a cdb_create_mbom operation.
        """
        return CREATE_MBOM_OP_NAME in ctx.sys_args.get_attribute_names()

    def on_cdb_create_mbom_from_mbom_pre_mask(self, ctx):
        if self.is_mbom:
            raise ue.Exception('cdb_operation_not_allowed_on_mbom', self.GetDescription())
        if "mbom_selection" in ctx.sys_args.get_attribute_names():
            ctx.skip_dialog()

    def on_cdb_create_mbom_from_mbom_post_mask(self, ctx):
        select_mbom_id = ctx.sys_args.mbom_selection \
            if "mbom_selection" in ctx.sys_args.get_attribute_names() \
            else ctx.dialog.mbom_selection
        item = ByID(select_mbom_id)
        if not item.is_mbom:
            raise ue.Exception('cdb_selected_item_is_not_a_mbom', item.GetDescription())

    def on_cdb_create_mbom_from_mbom_now(self, ctx):
        """
        Creates a new index of the selected MBOM and assigns it to self.
        """
        select_mbom_id = ctx.sys_args.mbom_selection \
            if "mbom_selection" in ctx.sys_args.get_attribute_names() \
            else ctx.dialog.mbom_selection
        item = ByID(select_mbom_id)
        args = {"cdb::argument.%s" % ctx.action: "1",
                "cdb::argument.item_object_id": self.cdb_object_id}

        # Add all system args beginning with mbom to pass them to the index operation.
        # These are the args that can be defined by outer operation contexts (e.g. cdb_create_mbom_and_replace)
        for name in ctx.sys_args.get_attribute_names():
            if name.startswith("mbom"):
                args["cdb::argument.%s" % name] = ctx.sys_args[name]

        ctx.url(item.MakeURL("CDB_Index", **args))

    def handle_create_mbom_from_mbom_post(self, ctx):
        if self.is_create_mbom_from_mbom_op(ctx):
            item = ByID(ctx.sys_args.item_object_id)
            pObj = self.getPersistentObject()
            pObj.Update(cdb_depends_on=item.cdb_object_id,
                        materialnr_erp=item.materialnr_erp)

    @sig.connect(Item, 'index', 'post')
    def _handle_create_mbom_from_mbom_post(self, ctx):
        self.handle_create_mbom_from_mbom_post(ctx)

    @staticmethod
    def is_create_mbom_from_mbom_op(ctx):
        """
        Returns true, if the operation context is a cdb_create_mbom_from_mbom operation.
        """
        return CREATE_MBOM_FROM_MBOM_OP_NAME in ctx.sys_args.get_attribute_names()

    @staticmethod
    def get_released_mboms(materialnr_erp, site_object_id):
        return Item.Query("materialnr_erp='%s' and is_mbom=1 and site_object_id='%s' and status in (200, 300)" %
                          (materialnr_erp, site_object_id))

    @sig.connect(Item, 'state_change', 'pre')
    def _check_released_mboms(self, ctx):
        self.check_released_mboms(ctx)

    def check_released_mboms(self, ctx):
        if not self.is_mbom or not self.materialnr_erp or self.status != 200:
            return
        released_mboms = self.get_released_mboms(self.materialnr_erp, self.site_object_id)
        msite_name = self.ManufacturingSite.name if self.ManufacturingSite else ""
        if len(released_mboms) > 0:
            raise ue.Exception("cdb_release_mbom_err",
                               self.materialnr_erp, msite_name, released_mboms[0].GetDescription())

    @sig.connect(Item, 'wf_step', 'post_mask')
    def _handle_release_mbom(self, ctx):
        self.handle_release_mbom(ctx)

    def handle_release_mbom(self, ctx):
        if not self.is_mbom or self.status != 200 or not self.cdb_depends_on:
            return

        # ebom must be released first
        ebom = Item.ByKeys(cdb_object_id=self.cdb_depends_on)
        if ebom.status in (0, 100):
            raise ue.Exception("cdb_release_mbom_err2")

        if self.materialnr_erp:
            # Ensure that only one mBOM per materialnr_erp and manufacturing site is released
            released_mboms = self.get_released_mboms(self.materialnr_erp, self.site_object_id)
            if released_mboms:
                if not "question_release_mbom" in ctx.dialog.get_attribute_names():
                    other_ebom = Item.ByKeys(cdb_object_id=released_mboms[0].cdb_depends_on)
                    replacements = [self.materialnr_erp,
                                    self.ManufacturingSite.name if self.ManufacturingSite else "",
                                    released_mboms[0].teilenummer, released_mboms[0].t_index,
                                    other_ebom.teilenummer, other_ebom.t_index,
                                    self.teilenummer, self.t_index,
                                    ebom.teilenummer, ebom.t_index,
                                    ]
                    msgbox = ctx.MessageBox("cdb_release_mbom_question",
                                            replacements,
                                            "question_release_mbom",
                                            ctx.MessageBox.kMsgBoxIconQuestion)
                    msgbox.addYesButton(1)
                    msgbox.addCancelButton()
                    ctx.show_message(msgbox)
                else:
                    # bisher freigegebene mBOM ung�ltig setzen
                    released_mboms[0].ChangeState(180)
