/**
 * Application
 */

function cdbElinkVariantEditor(appContext) {
    // Application Name
    this.appName = 'VariantEditor';
    // Application Context
    this.appContext = appContext;
    // Application event namespace
    this.eventNS = '.cdbvp';
    // URL for standard ajax calls
    this.ajaxRootURL = cdb.elink.baseURL +
            'powerscript/cs.vp.variants.apps.generatorui/';

    // Object attributes
    this.oTable = null;
    this.oSettings = null;
    this.aSelected = new cdbElinkRowSelection('#grid', appContext);
    this.aSelected.ranges_selectable = true;
    this.metrics = {};
    this.tableColumns = [];
    this.disabled_buttons = [];
    this.dropdown_open = false;
    this.meta_data_columns_visible = true;
    this.cache = {};
}

cdbElinkVariantEditor.prototype = new cdbElinkBase();

/* Help-function for performing ajax calls */

cdbElinkVariantEditor.prototype.ajax_call = function(name, data, callback) {
    $.ajax({
        url: this.ajaxRootURL + name,
        traditional: true,
        data: data,
        dataType: 'JSON',
        type: 'POST',
        async: false,
        success: function(serverdata) {
            if (serverdata.success) {
                callback(serverdata);
            } else {
                // setTimeout is needed since Internet Exploder produces an error
                // if an alert is opened within a modal dialog
                setTimeout(function() {
                    cdb.elink.alertCDBMessage(serverdata.message);
                });
            }
        },
        error: function(jqXHR, textStatus) {
            // setTimeout is needed since Internet Exploder produces an error
            // if an alert is opened within a modal dialog
            setTimeout(function() {
                cdb.elink.alert(textStatus);
            });
        }
    });
};

/* Initialize application */

cdbElinkVariantEditor.prototype.start = function() {
    var app = this;

    this.columnFilters = {};

    $(document).ready(function() {
        if (meta_data_columns_visible !== null) {
            app.meta_data_columns_visible = meta_data_columns_visible;
        }
        $(document).click(app.dropdown_handler.bind(app));
        $('.dropdown').click(app.dropdown_handler.bind(app));
        $(window).resize(function() {
            // resize from small to big needs this workaround
            $('#grid').css('width', $('#grid').parent().width());
            app.oTable.fnAdjustColumnSizing();
        });
    });
    /* hide buttons */
    this.ajax_call('json_get_hidden_toolbarbuttons', {
        state_id: this.context.attr('data-elink-cdbvp-state_id')
    }, function(data) {
        var hidden_buttons = data.result;
        $.each(hidden_buttons, function() {
            $('#' + this).hide();
        });
    });

    // Get table columns and initialize data table
    this.ajax_call('json_get_column_infos', {
        state_id: this.context.attr('data-elink-cdbvp-state_id')
    }, function(data) {
        app.tableColumns = data.result;
        app.init_variant_table(false, data.result);
    });

    // Setup comboboxes for additional view selection
    this.ajax_call('json_get_views', {
        state_id: this.context.attr('data-elink-cdbvp-state_id')
    }, function(data) {
        var html = '';
        var iLen = data.selectable_views.length;
        var disabled = false;
        for (var i = 0; i < iLen; i++) {
            if (i > 0) {
                disabled = true;
            }
            html += app.fnCreateViewSelect(data.selectable_views,
                    'view_selector_' + i, true, disabled);
        }
        if (html) {
            var view_icon = $('#view_icon');
            var view_selection_area = $('#view_selector');
            view_icon.removeClass('hidden');
            view_selection_area.append(html);
            $('.select_view', view_selection_area).change(function() {
                app.select_view(this);
            });
        }
    });

    /* Click event handler */
    $('#grid tbody tr').live('click', function(ev) {
        app.update_button_states();
    });

    /* Event handler menu 'show in CAD-system' */
    $('#show_in_cad_button_menu li').click(function(event) {
        var li = $(event.currentTarget);

        if (!li.hasClass("disabled")) {
            // Update Button
            var button = $('#show_in_cad_button');

            var li_icon = li.data('button-icon');
            button.find('img').attr('src', li_icon);

            var li_title = li.data('button-label');
            button.attr('title', li_title);

            var li_json_name = li.data('button-json');
            button.data('json-name', li_json_name);

            var li_open_new_window = li.data('open-new-window');
            button.data('open-new-window', li_open_new_window);

            var li_multiselect = li.data('multiselect');
            button.data('multiselect', li_multiselect);
            if (li_multiselect === 1) {
                button.removeAttr("disabled");
            }

            if (app.aSelected.length === 1 || li_multiselect === 1) {
                app.show_in_cad();
            }
        }
    });

    $("input[name='maxbom']").click(function(event) {
        var el = $(event.currentTarget);

        $("span[data-maxbom][data-maxbom!='" + el.data("maxbom") + "']").hide();
        $("span[data-maxbom][data-maxbom='" + el.data("maxbom") + "']").show();
    });
};

cdbElinkVariantEditor.prototype.confirm_dialog = function(text, callback) {
    cdb.elink.modal({
        pre_mask: function(mask) {
            mask.find('.modal-header .modal-header-slot i')
            .removeClass('icon-info-sign')
            .addClass('icon-warning-sign');

            $('<p>', {'class': 'alert'})
                .text(text)
                .appendTo(mask.find('.modal-body'));
        },
        show: true,
        ok: callback,
        cancel: null
    });
};

cdbElinkVariantEditor.prototype.setup_editable = function() {
    var app = this;

    // setup jeditable
    setTimeout(function() {
        $('.DTFC_Cloned .editable').editable(function(value, settings) {
            var row = $(this).parents('tr').attr('data-cdb-elink-row-id');
            var vindex = $(this).parents('tr').attr('data-cdb-elink-row-vindex');

            if (row) {
                app.ajax_call('edit_variant_name', {
                    state_id: app.context.attr('data-elink-cdbvp-state_id'),
                    row: row,
                    name: value
                }, function(data) {
                    app.oTable.fnUpdate(data.result, vindex, 2);
                }.bind(this));
            }
        }, {
            onblur: 'submit',
            placeholder: '-',
            tooltip: labels.cdbvp_variant_name_placeholder
        });
    }, 0);
};

/**
 * Ajax/JSON functions
 */

cdbElinkVariantEditor.prototype.csv_export = function() {
    var args = {'state_id': this.context.attr('data-elink-cdbvp-state_id')};

    for (var i = 0; i < this.oSettings.aoPreSearchCols.length; i++) {
        args['col_' + i] = this.oSettings.aoPreSearchCols[i].sSearch;
    }

    this.ajax_call('export_csv', args, function(data) {
        window.location = data.url;
    });
};

cdbElinkVariantEditor.prototype.create_manual_variant = function() {
    var args = [];

    for (var i = 0; i < this.oSettings.aoPreSearchCols.length; i++) {
        args.push(this.oSettings.aoPreSearchCols[i].sSearch);
    }

    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id'),
        'values': args
    };

    var app = this;
    this.ajax_call('create_manual_variant', data, function() {
        app.oTable.fnReloadAjax();
    });

};

cdbElinkVariantEditor.prototype.exclude_variants_from_solution_space = function() {
    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id'),
        'selected_rows': this.aSelected.selected
    };

    var app = this;
    this.ajax_call('exclude_variants_from_solution_space', data, function() {
        app.reload_table();
    });
};

cdbElinkVariantEditor.prototype.sync_selection = function() {
    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id'),
        'selected_rows': this.aSelected.selected
    };

    var app = this;
    this.ajax_call('grid_sync', data, function() {
        app.aSelected.resetSelection();
        app.oTable.fnReloadAjax();
        app.update_button_states();
    });
};

cdbElinkVariantEditor.prototype.show_in_cad = function() {
    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id'),
        'selected_row': this.aSelected.selected,
        'selected_maxbom_oid': $("input[name='maxbom']:checked").val()
    };

    var button = $('#show_in_cad_button');
    var json_name = button.data('json-name');
    var open_new_window = button.data('open-new-window');

    this.ajax_call(json_name, data, function(serverdata) {
        if (!embedded_mode && open_new_window == 1) { // == is ok here
            window.open(serverdata.url, '_blank');
        } else {
            window.location = serverdata.url;
        }
    });
};

cdbElinkVariantEditor.prototype.show_filtered_bom = function() {
    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id'),
        'selected_row': this.aSelected.selected,
        'selected_maxbom_oid': $("input[name='maxbom']:checked").val()
    };

    this.ajax_call('show_filtered_bom', data, function(serverdata) {
        window.location = serverdata.url;
    });
};

cdbElinkVariantEditor.prototype.show_bom_comparison = function() {
    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id'),
        'selected_rows': this.aSelected.selected,
        'selected_maxbom_oid': $("input[name='maxbom']:checked").val()
    };

    this.ajax_call('show_bom_comparison', data, function(serverdata) {
        window.location = serverdata.url;
    });
};

cdbElinkVariantEditor.prototype.show_bom_report = function() {
    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id'),
        'selected_row': this.aSelected.selected,
        'selected_maxbom_oid': $("input[name='maxbom']:checked").val()
    };

    this.ajax_call('show_bom_report', data, function(serverdata) {
        window.location = serverdata.url;
    });
};

cdbElinkVariantEditor.prototype.reload_table = function() {
    // clear server side state
    var scrollLeft = $(window).scrollLeft();
    var scrollTop = $(window).scrollTop();
    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id')
    };

    var app = this;
    this.ajax_call('table_reload', data, function(serverdata) {
        app.tableColumns = serverdata.result;
        app.reset_table();
        app.init_variant_table(true, serverdata.result);
        app.update_button_states();
    });

    $(window).scrollLeft(scrollLeft);
    $(window).scrollTop(scrollTop);
};

cdbElinkVariantEditor.prototype.delete_saved_variants = function() {
    var app = this;
    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id'),
        'selected_rows': this.aSelected.selected
    };

    this.confirm_dialog(labels.cdbvp_confirm_delete_variants, function() {
        app.ajax_call('delete_variants', data, function() {
            app.aSelected.resetSelection();
            app.oTable.fnReloadAjax();
            app.update_button_states();
        });
    });
};

cdbElinkVariantEditor.prototype.instantiate_max_bom = function() {
    var data = {
        'state_id': this.context.attr('data-elink-cdbvp-state_id'),
        'selected_row': this.aSelected.selected,
        'selected_maxbom_oid': $("input[name='maxbom']:checked").val()
    };

    var app = this;
    this.ajax_call('instantiate_max_bom', data, function(serverdata) {
        window.location = serverdata.url;
        app.reload_table();
    });
};

/* Function to create the selection lists */

cdbElinkVariantEditor.prototype.fnCreateSelect = function(aData, isSolutionColumn, selectedValue) {
    if (aData) {
        var iLen = aData.length;
        if (iLen) {
            var r = '<select class="select_filter';
            if (isSolutionColumn) {
                r += ' solution_column';
            }
            r += '"><option value=""></option>';
            for (var i = 0; i < iLen; i++) {
                r += '<option value="' + aData[i] + '"';
                if (selectedValue !== undefined && aData[i] === selectedValue) {
                    r += ' selected';
                }

                r += '>' + aData[i] +
                        '</option>';
            }
            return r + '</select>';
        }
    }
    return '&nbsp;';
};

cdbElinkVariantEditor.prototype.fnCreateViewSelect = function(aData, name,
        add_empty_option, readonly) {
    var iLen = aData.length;
    if (iLen) {
        var r = '<select class="select_view" name="' + name + '"';
        if (readonly) {
            r += ' disabled';
        }
        r += '>';
        if (add_empty_option) {
            r += '<option value=""></option>';
        }

        for (var i = 0; i < iLen; i++) {
            r += '<option value="' + aData[i][0] + '">' + aData[i][1] +
                    '</option>';
        }
        return r + '</select>';
    }
    return '&nbsp;';
};

cdbElinkVariantEditor.prototype.reset_table = function() {
    var app = this;
    app.oTable.fnDestroy();
    $('#grid thead').html('');
    $('#grid tbody').html('');
};

/*
 * Initialize the variant table
 */

cdbElinkVariantEditor.prototype._disable_buttons = function() {
    var data = {state_id: this.context.attr('data-elink-cdbvp-state_id')};
    var app = this;
    this.ajax_call('json_get_disabled_toolbarbuttons',
        data,
        function(serverdata) {
            app.disabled_buttons = serverdata.result;

            $(app.disabled_buttons).each(function() {
                $('#' + this).attr('disabled', 'disabled');
            });
        });
};

cdbElinkVariantEditor.prototype._init_datatables = function(column_list) {
    var app = this;

    // build aoColumnDefs for DataTable
    var column_data = [];
    var counter = 0;
    var fix_column_width = ['state', 'id', 'outer_solution_number',
        'mapping_state_icon_0', 'number_of_variants_0'];

    $.each(column_list, function() {
        if (fix_column_width.contains(this.id)) {
            if (this.id === 'state') {
                column_data.push({
                    'aTargets': [counter],
                    'sTitle': this.name,
                    'sWidth': '70px'
                });
            } else {
                column_data.push({
                    'aTargets': [counter],
                    'sTitle': this.name,
                    'sWidth': '10px'
                });
            }
        } else {
            column_data.push({
                'aTargets': [counter],
                'sTitle': this.name
            });
        }
        counter += 1;
    });

    // dynamically build two column header rows
    // for filtering and column names
    var head = $('#grid thead');
    var search_row = '<tr id="search">\n';
    var naming_row = '<tr>';
    jQuery.each(column_data, function() {
        search_row += '<th class="searchable"/>\n';
        naming_row += '<th/>\n';
    });
    search_row += '</tr>\n';
    naming_row += '</tr>\n';
    head.html(search_row + naming_row);

    // set filters
    var searchCols = column_list.map(function(_, i) {
        var value = app.columnFilters[i];
        if (value === undefined) {
            return null;
        } else {
            return {
                search: value
            };
        }
    });

    /* Initialise the DataTable */
    var oInit = {
        bJQueryUI: true,
        bScrollCollapse: false,
        sScrollY: '400',
        sScrollX: '100%',
        bAutoWidth: false,

        // Disable sorting, because it cannot be implemented
        // consistently in combination with non persistent
        // variants
        // from a solver.
        bSort: false,

        // Pagination
        bPaginate: true,
        aLengthMenu: [50, 100, 250, 500, 1000],
        iDisplayLength: 50,
        sPaginationType: 'full_numbers',

        // Setup for server side processing
        bServerSide: true,
        bProcessing: true,
        sAjaxSource: app.context.attr('data-elink-cdbvp-json_data_url'),
        sAjaxDataProp: 'grid_data',

        // setup columns
        aoColumnDefs: column_data,
        searchCols: searchCols,

        fnServerParams: function(aoData) {
            aoData.push({
                'name': 'state_id',
                'value': app.context.attr('data-elink-cdbvp-state_id')
            });
        },
        fnServerData: function(sSource, aoData, fnCallback) {
            $.ajax({'dataType': 'json',
                'type': 'POST',
                'url': sSource,
                'data': aoData,
                'success': [function(serverdata) { // weitere
                                                     // daten von
                                                     // der json
                                                     // response
                                                     // abgreifen
                                if (serverdata.success) {
                                    app.metrics = serverdata.metrics;
                                } else {
                                    cdb.elink.alertCDBMessage(serverdata.message);
                                }
                            }, fnCallback]
            });
        },

        fnInfoCallback: function(oSettings, iStart, iEnd,
                iMax, iTotal, sPre) {
            // Original:
            // Showing 1 to 50 of 10,001 entries
            // Showing 1 to 50 of 5001 entries (filtered from
            // 10,001 total entries)
            // Neu, wenn noch nicht alles aufgelöst wurde, die
            // Anzahl also unbekannt ist:
            // Showing 1 to 50 of 100 resolved entries. More
            // data is available but not resolved yet.
            // The theoretical solution space size is 10291.
            var result;

            if (app.metrics.all_solved === 1) {
                result = sPre;
            } else {
                var solution_space = app.oTable.dataTableSettings[0]
                        .fnFormatNumber(app.metrics.size_solution_space);

                result = labels.cdbvp_elink_show_result_footer.format(iStart, iEnd, iTotal) + ' <br>' +
                        labels.cdbvp_elink_show_solution_size.format(solution_space) + '.';
            }
            if (app.metrics.n_properties) {
                result += '<br>' + labels.cdbvp_elink_show_prop_footer.format(
                    app.metrics.n_properties, app.metrics.n_constraints);
            }
            if (app.metrics.n_views) {
                result += labels.cdbvp_elink_show_view_footer.format(app.metrics.n_views);
            }

            return result;
        },

        fnDrawCallback: function() {
            // hide the 'Last' button of pagination controls
            // as long as not all variants have been solved.
            if (app.metrics.all_solved === 1) {
                $('div#grid_paginate.dataTables_paginate span#grid_last.last').show();
            } else {
                $('div#grid_paginate.dataTables_paginate span#grid_last.last').hide();
            }
            // enable/disable button to create manual variants
            // Der Button ist enabled, wenn alle Merkmale
            // ausgewählt sind
            // und kein Ergebnis in der Variantentabelle
            // vorliegt.

            // Prüfen, ob alle Merkmale ausgewählt
            // wurden.
            var all_selected = !$('div.dataTables_scrollHead select.solution_column').is(function() {
                return $(this).val() === '';
            });
            $('td').each(function(index, td) {
                $(td).attr('title', $(td).text());
            });
            if (app.metrics.iTotalRecords === 0 && all_selected) {
                $('#create_manual_variant').removeAttr('disabled');
            } else {
                $('#create_manual_variant').attr('disabled', 'disabled');
            }

            app.setup_editable();
        },
        sDom: '<"H"lr>t<"F"ip>',
        oLanguage: {
            sSearch: 'Search all columns:',
            'sInfoThousands': ' ',
            oPaginate: {
                sPrevious: labels.cdbvp_elink_prev_footer,
                sNext: labels.cdbvp_elink_next_footer,
                sFirst: labels.cdbvp_elink_first_footer,
                sLast: labels.cdbvp_elink_last_footer
            },
            sInfo: labels.cdbvp_elink_info_footer.format('_START_', '_END_', '_TOTAL_'),
            sLengthMenu: labels.cdbvp_elink_menu_entries.format('_MENU_')
        }

    };

    this.aSelected.dtfnPreDrawCallback = function(oSettings) {
        if (app.metrics.pager_resetted === 1) {
            app.update_button_states();
        }

        return true;
    };

    this.aSelected.fnResetRowsOnRedrawCallback = function(oSettings) {
        // disable buttons
        app.update_button_states();
    };

    this.aSelected.fnSelectionChangedCallback = function() {
        app.update_button_states();
        if (app.fixedColumns !== undefined) {
            app.fixedColumns.fnUpdate();
        }

        app.setup_editable();
    };

    oInit = this.aSelected.registerDTCallbackMixIn(oInit);

    this.oTable = $('#grid').dataTable(oInit);
    this.oSettings = this.oTable.fnSettings();
};

cdbElinkVariantEditor.prototype.init_variant_table = function(reset,
        column_list) {
    var app = this;
    if (column_list !== undefined) {
        app.cache['column_list'] = column_list;
    } else {
        column_list = app.cache['column_list'];
    }

    this._disable_buttons();

    // destroy old table on reset
    if (reset) {
        app.reset_table();
    }

    this._init_datatables(column_list);

    /* Add a select menu for each TH element in the table header */
    this.setup_column_filters();

    if (obj_type !== "property") {
        this.setup_fixed_columns();

        $('<img id="fix_columns_button" onclick="variant_editor.toggle_meta_data_columns(this)" src="' +
                this.context.attr("data-elink-cdbvp-localres-url") +
                'images/freeze_columns.png" class="metadata" ' +
                'style="margin-right: 10px" ' +
                'title="' + labels.cdbvp_elink_toggle_md + '"></i>')
                .prependTo($('div.dataTables_length'));
    }
    $(
            '<img id="reload_button" src="' +
                    this.context.attr("data-elink-cdbvp-localres-url") +
                    'images/refresh.png" onclick="variant_editor.reload_table()" title="' +
                    labels.cdbvp_elink_reload + '" style="margin-right: 10px;"/>')
            .prependTo($('div.dataTables_length'));

    $(function() {
        $('.rollover').hover(function() {
            var currentImg = $(this).attr('src');
            $(this).attr('src', $(this).attr('hover'));
            $(this).attr('hover', currentImg);
        }, function() {
            var currentImg = $(this).attr('src');
            $(this).attr('src', $(this).attr('hover'));
            $(this).attr('hover', currentImg);
        });
    });
};

cdbElinkVariantEditor.prototype.update_button_states = function() {
    // Speichern Button nur clickbar wenn mindestens
    // eine Zeile ausgew?hlt worden ist
    if (this.aSelected.length === 0) {
        $('#save_button').attr('disabled', 'disabled');
        $('#delete_saved_variants').attr('disabled', 'disabled');
        $('#exclude_variants').attr('disabled', 'disabled');
    } else {
        $('#save_button').removeAttr('disabled');
        $('#delete_saved_variants').removeAttr('disabled');
        $('#exclude_variants').removeAttr('disabled');
    }

    // Produkt?bersicht, St?cklistenreport und CATIA Button nur clickbar wenn
    // genau
    // eine Zeile ausgew?hlt worden ist
    if (this.aSelected.length !== 1) {
        var disable_button = true;
        var disable_dropdown = true;

        var show_in_cad_button = $('#show_in_cad_button');
        if (this.aSelected.length > 1 && show_in_cad_button.data('multiselect') === 1) {
            disable_button = false;
        }

        if (disable_button === true) {
            show_in_cad_button.attr('disabled', 'disabled');
        }

        $("#show_in_cad_button_menu li").each(function(_, el) {
            if ($(el).data("multiselect") === 1) {
                disable_dropdown = false;
            } else {
                $(el).addClass("disabled");
            }
        });

        if (disable_dropdown === true) {
            $('#show_in_cad_button_drop').attr('disabled', 'disabled');
        }

        $('#show_bom_button').attr('disabled', 'disabled');
        $('#show_bom_report_button').attr('disabled', 'disabled');
        $('#instantiate_max_bom_button').attr('disabled', 'disabled');
    } else {
        $('#show_in_cad_button').removeAttr('disabled');
        $('#show_in_cad_button_drop').removeAttr('disabled');
        $("#show_in_cad_button_menu li").each(function(_, el) {
            $(el).removeClass("disabled");
        });

        $('#show_bom_button').removeAttr('disabled');
        $('#show_bom_report_button').removeAttr('disabled');
        $('#instantiate_max_bom_button').removeAttr('disabled');
    }

    // Variantenvergleich Button nur clickbar wenn genau
    // zwei Zeile ausgew?hlt worden sind
    if (this.aSelected.length < 2) {
        $('#show_bom_comparison_button').attr('disabled', 'disabled');
    } else {
        $('#show_bom_comparison_button').removeAttr('disabled');
    }

    // Disable buttons, which should always be disabled
    $(this.disabled_buttons).each(
            function() {
                $('#' + this).attr('disabled', 'disabled');
            });
};

cdbElinkVariantEditor.prototype.toggle_meta_data_columns = function(caller) {
    var app = this;
    var scrollLeft = $(window).scrollLeft();
    var scrollTop = $(window).scrollTop();
    if (app.meta_data_columns_visible === true) {
        app.meta_data_columns_visible = false;
    } else {
        app.meta_data_columns_visible = true;
    }
    app.init_variant_table(true);
    scrollLeft = $(window).scrollLeft(scrollLeft);
    scrollTop = $(window).scrollTop(scrollTop);
};

cdbElinkVariantEditor.prototype.setup_fixed_columns = function() {
    var app = this;
    app.oTable.fnAdjustColumnSizing();
    app.fixedColumns = new $.fn.dataTable.FixedColumns(app.oTable, {
        leftColumns: app.meta_data_columns_visible ? 4 : 0
    });
};

cdbElinkVariantEditor.prototype.setup_column_filters = function() {
    var app = this;
    this.ajax_call('json_get_column_filter_values', {
        state_id: this.context.attr('data-elink-cdbvp-state_id')
    }, function(data) {
        $('#search th').each(function(i) {
            this.innerHTML = app.fnCreateSelect(data.filter_values[i],
                                                data.is_solution_column[i],
                                                app.columnFilters[i]);
            $('select', this).change(function() {
                var value = $(this).val();
                app.columnFilters[i] = value;
                app.oTable.fnFilter(value, i);
            });
        });
    });
};

cdbElinkVariantEditor.prototype.map_column_filters = function(columnFilters, oldColumns, newColumns) {
    var result = {};
    var filterIds = Object.keys(columnFilters);

    filterIds.forEach(function(oldIndex) {
        var column = oldColumns[oldIndex];
        if (column !== undefined && column !== null) {
            var columnId = column.id;
            if (columnId !== undefined && columnId !== null) {
                var newIndex = newColumns.findIndex(function(col) {
                    return col.id == columnId;
                });

                if (newIndex !== undefined && newIndex !== null) {
                    var value = columnFilters[oldIndex];
                    result[newIndex] = value;
                }
            }
        }
    });

    return result;
};

cdbElinkVariantEditor.prototype.select_view = function() {
    var scrollLeft = $(window).scrollLeft();
    var scrollTop = $(window).scrollTop();
    var view_ids = [];
    var filled_to_index = -1;
    $('.select_view').each(function(i) {
        view_ids.push(this.value);
        if (this.value !== '') {
            filled_to_index = i;
        }
    });

    if (filled_to_index !== -1) {
        $('#show_hide_properties').removeClass('hidden');
    } else {
        $('#show_hide_properties').addClass('hidden');
    }

    var app = this;
    this.ajax_call('json_view_selected', {
        state_id: this.context.attr('data-elink-cdbvp-state_id'),
        views: view_ids
    }, function(data) {
        app.columnFilters = app.map_column_filters(
            app.columnFilters, app.tableColumns, data.result
        );
        app.tableColumns = data.result;
        // reset row selection
        app.aSelected.resetSelection();
        app.reset_table();
        app.init_variant_table(true, data.result);
        app.update_button_states();
        var count = 0;
        $('.select_view').each(function() {
            if (count > filled_to_index + 1) {
                this.disabled = true;
            } else {
                this.disabled = false;
            }
            var val = this.value;

            // disabled selected values
            $('option', this).each(function() {
                if (this.value) {
                    if ($.inArray(this.value, view_ids) !== -1) {
                        if (val !== this.value) {
                            this.disabled = true;
                        }
                    } else {
                        this.disabled = false;
                    }
                }
            });
            count += 1;
        });

    });

    /**
     * Update Dropdown
     */

    // Empty dropdown list
    $('#dropdown-form').children(':not(.template)').remove();

    // Fetch new list elements from server
    var data = {state_id: this.context.attr('data-elink-cdbvp-state_id'),
            view_ids: view_ids};
    this.ajax_call('json_get_view_properties', data, function(data) {
        $(data.result).each(function(index) {
            $(this).each(function() {
                var id = this[0];
                var name = this[1];
                var hidden = this[2];

                var li = $('#dropdown-form .template').clone();

                li.attr('data-prop-id', id);
                li.children('a:first-child').append(name);
                li.removeClass('hidden template');

                if (hidden) {
                    li.children('a:first-child').addClass('deactivated');
                }

                /**
                 * Event handlers
                 */
                li.click(function() {
                    $(this).toggleClass('deactivated');
                });

                $('#dropdown-form').append(li);
            });
            if (index < data.result.length - 1) {
                $('#dropdown-form').append($('<li>', {'class':'divider'}));
            }
        });
    });
    $(window).scrollLeft(scrollLeft);
    $(window).scrollTop(scrollTop);
};

cdbElinkVariantEditor.prototype.dropdown_handler = function(event) {
    // Inside Event Handlers this is the DOM element on which the
    // EH is being executed.
    var app = this;

    if ($(event.target).parents('#dropdown-form').length === 0) {
        if (app.dropdown_open) {
            app.hide_properties();
            app.dropdown_open = false;
        } else if ($(event.target).parents('.dropdown').length !== 0) {
            app.dropdown_open = true;
        }
    }
};

cdbElinkVariantEditor.prototype.hide_properties = function() {
    if (this.dropdown_open) {
        var hidden_props = [];
        $('#dropdown-form').children('li.deactivated').map(function() {
            hidden_props.push($(this).attr('data-prop-id'));
        });

        var view_ids = [];
        $('.select_view').each(function() {
            if ($(this).val() !== '') {
                view_ids.push($(this).val());
            }
        });

        var app = this;
        var data = {state_id: this.context.attr('data-elink-cdbvp-state_id'),
                    view_ids: view_ids,
                    hidden_props: hidden_props};
        this.ajax_call('json_hide_properties', data, function(serverdata) {
            app.tableColumns = serverdata.result;

            // reset row selection
            app.aSelected.resetSelection();
            app.init_variant_table(true, serverdata.result);
            app.update_button_states();
        });
    }
};

cdbElinkVariantEditor.prototype.show_hide_product_details = function() {
    var prod_details = $('#product_details');
    prod_details.toggle('blind');

    var t = $('#toggle');
    var img_url = this.context.attr('data-elink-cdbvp-localres-url');
    if (t.attr('src') === img_url + 'images/closed.png') {
        t.attr('src', img_url + 'images/open.png');
    } else {
        t.attr('src', img_url + 'images/closed.png');
    }
};

var variant_editor = new cdbElinkVariantEditor('#context-div');
cdb.elink.addApplication('cdb.elink.vp_rowselection', variant_editor.aSelected);
cdb.elink.addApplication('cdb.elink.varianteditor', variant_editor);

$.fn.dataTableExt.oApi.fnReloadAjax = function(oSettings, sNewSource,
        fnCallback, bStandingRedraw) {
    if (typeof sNewSource !== 'undefined' && sNewSource !== null) {
        oSettings.sAjaxSource = sNewSource;
    }
    this.oApi._fnProcessingDisplay(oSettings, true);
    var that = this;
    var iStart = oSettings._iDisplayStart;
    this.fnDraw();
};

// disable autom. reload by cdb operations to avoid
// loss of solver and pager state, filtering, selected MaxBOM
// and selected rows.
try {
    window.external.cdbEFEnableNotifyChanges(false);
} catch (e) {
}

/**
 * Picture Uploader
 */

var pictureUploader = new cdbElinkPictureUploader();

pictureUploader.prepareModal = function(event) {
    var wtitle = $('#context-div').attr(
            'data-elink-picture-uploder-window-title');
    this.setWindowTitle(wtitle);
};

// Tell cdb.elink to run uploader.
cdb.elink.addApplication('cdb.elink.pictureuploader', pictureUploader);
