/**
 * cdbElinkRowSelection
 *
 * Object to handle row selection in datatables
 */

function cdbElinkRowSelection(appContext) {
    // Application Name
    this.appName = 'dataTableRowSelection';
    this.appContext = appContext;

    // Application event namespace
    this.eventNS = '.datatablerowselection.cdbelink';
    this.ranges_selectable = false;
    this.allow_empty_selection = true;
    this.selected = [];
    this.selectedIDs = {};
    this.length = 0;
    this.last_selected = null;
    this.fnSelectionChangedCallback = null;
    this.fnResetRowsOnRedrawCallback = null;
    this.fnResetRowsCallback = null;
    this.dtfnRowCallback = null;
    this.dtfnPreDrawCallback = null;
    this.changed=false;
}

// Inherit elinkBase
cdbElinkRowSelection.prototype = new cdbElinkBase();

cdbElinkRowSelection.prototype.start = function (){
    this.context.on(
            this.nsEvents('click'),
            'tbody tr',
            this.appEventHandler('rowHandler')
    );
    if (this.ranges_selectable){
        this.context.addClass('unselectable');
    }
};

cdbElinkRowSelection.prototype.registerDTCallbackMixIn = function(oInit) {
    var app = this;
    oInit.fnRowCallback=function(nRow, aData, iDisplayIndex, iDisplayIndexFull){
        app._dtRowHandler(app, nRow, aData, iDisplayIndex, iDisplayIndexFull);
        if(typeof(app.dtfnRowCallback)=='function'){
            app.dtfnRowCallback(nRow, aData, iDisplayIndex, iDisplayIndexFull);
        }
    };
    oInit.fnPreDrawCallback=function(oSettings){
        app._dtPreDrawHandler(app, oSettings);
        if(typeof(app.dtfnPreDrawCallback)=='function'){
            app.dtfnPreDrawCallback(oSettings);
        }
    };
    return oInit;
};

cdbElinkRowSelection.prototype.rowHandler = function(event){
    var app = this;
    var target;
    if($(event.currentTarget).prop('tagName') === 'TR'){
        target = $(event.currentTarget);
    } else if ($(event.target).prop('tagName') === 'TD'){
        target = $(event.target).parent();
        if (target.prop('tagName')!=='TR') {
            target=undefined;
        }
    }

    if(target !== undefined){
        var row_id = target.data('cdb-elink-row-id');
        app.select(row_id, event.ctrlKey, event.shiftKey,
            target.data('cdb-elink-cdb_object_id'));
    }
};

cdbElinkRowSelection.prototype._dtRowHandler = function(app,nRow, aData, iDisplayIndex, iDisplayIndexFull){
    var rowObj = $(nRow);
    var check=false;
    var cdb_obj_id=rowObj.data('cdb-elink-cdb_object_id');
    if( ((aData.DT_RowId !== undefined) &&
            app.contains(aData.DT_RowId)) ||
        ((cdb_obj_id !== undefined) &&
            app.contains(null,cdb_obj_id))
        ){
        $(nRow).addClass('row_selected');
    } else {
        $(nRow).removeClass('row_selected');
    }
    $(nRow).attr('data-cdb-elink-row-vindex', iDisplayIndex);
    $(nRow).attr('data-cdb-elink-row-id', aData.DT_RowId);
    if(app.ranges_selectable){
        $('td',$(nRow)).attr("unselectable", "on");
    }
    return nRow;
};

cdbElinkRowSelection.prototype._dtPreDrawHandler = function(app,oSettings){
    var reset=true;
    if(typeof(app.fnResetRowsOnRedrawCallback) == 'function'){
        reset=app.fnResetRowsOnRedrawCallback(oSettings);
        if(reset === undefined){reset=true;}
    }
    if(reset){
        app.resetSelection();
    }
};

cdbElinkRowSelection.prototype._fireSelectionChanged = function(){
    if(typeof(this.fnSelectionChangedCallback) == 'function'){
        if(this.changed){
            this.fnSelectionChangedCallback(this.getSelectedRows());
            this.changed = false;
        }
    }
};

cdbElinkRowSelection.prototype.contains = function (row,row_object_id) {
    if(row_object_id === undefined){
        return this.selected.indexOf(row) !== -1;
    } else {
        return this.selectedIDs.hasOwnProperty(row_object_id);
    }

};

cdbElinkRowSelection.prototype.checkSelectable = function(elem) {
  return true;
}

cdbElinkRowSelection.prototype.push = function(row, row_object_id) {
  if(row_object_id !== undefined){
      var elem = $('tr[data-cdb-elink-cdb_object_id='+row_object_id+']',this.context);
  } else {
      var elem = $('tr[data-cdb-elink-row-id='+row+']',this.context);
  }
  if(elem && elem.length){
    if (this.checkSelectable(elem)) {
      if(elem.data('cdb-elink-cdb_object_id') != undefined){
        this.selectedIDs[elem.data('cdb-elink-cdb_object_id')]=row;
      }
      elem.addClass('row_selected');
      this.selected.push(row);
      this.length++;
      this.changed=true;
    }
  }
};

cdbElinkRowSelection.prototype.remove = function (row,row_object_id) {
    var elem = $('#' + row,this.context);
    var index = this.selected.indexOf(row);
    this.selected.splice(index, 1);
    if(row_object_id !== undefined){
        elem = $('tr[data-cdb-elink-cdb_object_id='+row_object_id+']',this.context);
        delete this.selectedIDs[row_object_id];
    }
    if(elem){
        elem.removeClass('row_selected');
    }
    this.length--;
    this.changed=true;
};

cdbElinkRowSelection.prototype.toggle = function (row,row_object_id) {
    if (this.contains(row,row_object_id)){
        if(this.length != 1 || this.allow_empty_selection){
            this.remove(row,row_object_id);
        }
    } else {
        this.push(row,row_object_id);
    }
};

cdbElinkRowSelection.prototype.resetSelection = function () {
    var elem;
    var count=0;
    if(typeof(this.fnResetRowsCallback)=='function'){
        this.fnResetRowsCallback(this.selected,this.selectedIDs);
    }
    for(var key in this.selectedIDs){
        elem = $('tr[data-cdb-elink-cdb_object_id='+key+']',this.context).removeClass('row_selected');
        count+=1;
    }
    if(count<this.length){
        $.each(this.selected, function (index, value) {
            elem = $("#" + value,this.context).removeClass('row_selected');
            elem = $("tbody tr[data-cdb-elink-row-id="+value+"]",this.context).removeClass('row_selected');
            count+=1;
        });
    }
    this.selectedIDs = {};
    this.selected = [];
    this.length = 0;
    this.last_selected = null;
    this.changed=true;
};

cdbElinkRowSelection.prototype.select = function (row, ctrlKey, shiftKey, row_object_id) {
    var start, end;

    row = parseInt(row, 10);
    if (this.last_selected === null)
        start = end = row;
    else {
        start = Math.min(this.last_selected, row);
        end = Math.max(this.last_selected, row);
    }
    if (!shiftKey || start == end) {
        if (!ctrlKey && (this.length != 1 || !this.contains(row, row_object_id))){
            this.resetSelection();
        }
        this.toggle(row,row_object_id);
    } else {
        if (!ctrlKey)
            this.resetSelection();
        if(this.ranges_selectable){
            for ( var i = start; i <= end; i++) {
                this.push(/*row=*/ i, /*row_object_id=*/ undefined);
            }
        } else {
            this.toggle(row,row_object_id);
        }
    }

    this.last_selected = row;
    this._fireSelectionChanged();
};

/**
 * get selected rows
 * @return {ids,elems,count}
 */

cdbElinkRowSelection.prototype.getSelectedRows = function(){
    var app=this;
    var selected_row_dict = {};
    var elem;
    var row;
    var count=0;
    var ids = [];
    for (row in app.selectedIDs) {
        if (app.selectedIDs.hasOwnProperty(row)) {
            elem = $('tr[data-cdb-elink-cdb_object_id='+row+']',app.context);
            if(elem !== undefined){
                selected_row_dict[row]= elem;
                count++;
            }
            ids.push(row);
        }
    }
    if (count < app.length) {
        for (var i; i < app.selected.length; i++) {
            row = app.selected[i];
            elem = $('#'+row,app.context);
            if (elem === undefined) {
                elem = $('tr[data-cdb-elink-row-id='+row+']',app.context);
            }
            ids.push(row);
            selected_row_dict[row] = elem;
            elem = $('#'+row,app.context);
            if (elem === undefined) {
                elem = $('tr[data-cdb-elink-row-id='+row+']',app.context);
            }
            ids.push(row);
            selected_row_dict[row] = elem;
        }
    }
    return {
        ids: ids,
        elems: selected_row_dict,
        count: app.length
    };
};
