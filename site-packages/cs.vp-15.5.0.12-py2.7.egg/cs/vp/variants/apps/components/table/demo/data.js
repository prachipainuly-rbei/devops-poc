// jshint esversion:6

import Immutable from 'immutable';
import { TableCellCustom }  from './components';
import { TableCellTree }    from '../table-components';
import { TreeTools } from 'cs-vp-utils';
import _ from 'lodash';

import {
    SELECTION_MODE_BOTH,
    SELECTION_MODE_COL,
    SELECTION_MODE_ROW

} from '../table-constants';

export function filterRowCallback(filterText, row) {
    if (row.get('assembly').indexOf(filterText) > -1) {
        return true;
    }
    if (row.get('item').indexOf(filterText) > -1) {
        return true;
    }
    if (row.get('status').indexOf(filterText) > -1) {
        return true;
    }
    return false;
}

export function filterColumnCallback(filterText, col) {
    if (col.get('label').indexOf(filterText) > -1) {
        return true;
    }
    return false;
}

const long_text = require('raw!./inferno.txt');

const long_cols = long_text.split('\n').reduce(
    (result, text, index) =>  result.set('col' + index, text),
    Immutable.Map()
);

const EXPAND_TO_LEVEL = 4;
let counter = 0;
const data = TreeTools.visitBottomUpDepthFirst(
    Immutable.fromJS(require('./mammalia.json')),
    (node, depth) => Immutable.Map({
        _id: counter++,
        assembly: node.get('description'),
        status: 'offen',
        item: 'Part ' + (counter-1),
        _expanded: depth <= EXPAND_TO_LEVEL ? true : false,
        _children: node.get('children')
    }).merge(long_cols)
);


const tabledata = Immutable.fromJS({
    filterField: {
        callback: filterText => row => filterRowCallback(filterText, row),
        label: 'Zeilenfilter',
        placeholder: 'Bitte Filterbegriff eingeben',
        visible: true
    },
    filterFieldCol: {
        callback: filterText => col => filterColumnCallback(filterText, col),
        label: 'Spaltenfilter',
        placeholder: 'Bitte Filterbegriff eingeben',
        visible: true
    },
    header: {
        fixedColumns: 3,
        visible: true
    },
    cols :
    [
        {
            key                  : 'assembly',
            label                : 'Baugruppe',
            canHide              :  false,
            classNameHeader      : 'assembly-header',
            classNameHeaderLabel : 'assembly-header-label',
            classNameHeaderIcon  : 'assembly-header-icon',
            classNameCell        : 'assembly-cell',
            classNameCellContent : 'assembly-cell-content',
            cellComponent        : TableCellTree,
            fixed                : true,
            indent               : 15,
            selectionMode        : SELECTION_MODE_ROW,
            visible              : true
        },
        {
            key                  : 'status',
            label                : 'Status',
            canHide              :  false,
            classNameHeader      : 'status-header',
            classNameHeaderLabel : 'status-header-label',
            classNameHeaderIcon  : 'status-header-icon',
            classNameCell        : 'status-cell',
            classNameCellContent : 'status-cell-content',
            fixed                : true,
            selectionMode        : SELECTION_MODE_ROW,
            visible              : true
        },
        {
            key                  : 'item',
            label                : 'Zugeordneter Artikel',
            canHide              :  false,
            classNameHeader      : 'part-header',
            classNameHeaderLabel : 'part-header-label',
            classNameHeaderIcon  : 'part-header-icon',
            classNameCell        : 'part-cell',
            classNameCellContent : 'part-cell-content',
            cellComponent        : TableCellCustom,
            fixed                : true,
            selectionMode        : SELECTION_MODE_BOTH,
            visible              : true
        }
    ].concat(_.range(30).map(n => ({
        key: 'col' + n,
        label: 'Column ' + n,
        canHide: true,
        selectionMode : SELECTION_MODE_COL,
        visible: true
    })))
}).set('rows', data.get('_children'));


export default tabledata;
