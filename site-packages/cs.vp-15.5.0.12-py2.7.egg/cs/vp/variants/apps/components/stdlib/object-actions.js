/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: object-actions.js 164057 2017-08-28 11:55:14Z gda $"
 */

// construct action objects as FSAs, see
// https://github.com/acdlite/flux-standard-action

// jshint esversion:6

import jQuery from 'jquery';

function fetching(url) {
    return {
        type: "FETCHING_URL",
        meta: {url: url}
    };
}

export function fetchError(url, err) {
    return {
        type: "FETCH_ERROR",
        payload: err,
        error: true,
        meta: {url: url}
    };
}

export function acknowledgeErrors() {
    return {
        type: "ACK_ERRORS"
    };
}

function receivedObject(url, object) {
    return {
        type: "RECEIVED_OBJECT",
        payload: object,
        meta: {url: url}
    };
}

function receivedCollection(url, objects) {
    return {
        type: "RECEIVED_COLLECTION",
        payload: objects,
        meta: {url: url}
    };
}

function receivedRelshipN(url, targets) {
    return {
        type: "RECEIVED_RELSHIP_N",
        payload: targets,
        meta: {url: url}
    };
}

function receivedRelship1(url, target) {
    return {
        type: "RECEIVED_RELSHIP_1",
        payload: target,
        meta: {url: url}
    };
}

export function receivedRelship(relship) {
    return (dispatch) => {
        if (relship.hasOwnProperty('targets')) {
            dispatch(receivedRelshipN(relship['@id'], relship.targets));
            relship.targets.forEach(target => {
                if (target.hasOwnProperty('@id')) {
                    dispatch(receivedObject(target['@id'], target));
                    if (target.hasOwnProperty('system:resolved_relships')) {
                        target['system:resolved_relships'].forEach(resolved_relship => {
                            dispatch(receivedRelship(resolved_relship));
                        });
                    }
                }
            });
        } else {
            dispatch(receivedRelship1(relship['@id'], relship.target));
            if (relship.target) {
                if (relship.target.hasOwnProperty('@id')) {
                    dispatch(receivedObject(relship.target['@id'], relship.target));
                }
                if (relship.target.hasOwnProperty('system:resolved_relships')) {
                    relship.target['system:resolved_relships'].forEach(resolved_relship => {
                        dispatch(receivedRelship(resolved_relship));
                    });
                }
            }
        }
    };
}

export function fetchObject(url, viewname = null, followUpActions = null, params = null) {
    const request_url = viewname ? (url + '/+' + viewname) : url;
    const request_params = params ? params : {};
    const followingActions = followUpActions ? followUpActions : [];
    return dispatch => {
        dispatch(fetching(url));
        return jQuery.ajax({
            dataType: 'json',
            url: request_url,
            data: request_params
        }).done(data => {
            dispatch(receivedObject(url, data));
            followingActions.forEach(action => {
                dispatch(action(data));
            });
            return data;
        }).fail(err => dispatch(fetchError(url, err)));
    };
}

export function fetchObjectBatch(url, viewname, params = null, followUpActions = null) {
    const request_url = viewname ? (url + '/+' + viewname) : url;
    const request_params = params ? params : {};
    const followingActions = followUpActions ? followUpActions : [];
    return dispatch => {
        dispatch(fetching(url));
        return jQuery.ajax({
            dataType: 'json',
            url: request_url,
            data: request_params
        }).done(data => {
            dispatch(receivedCollection(url, data.objects));
            if (data.hasOwnProperty('relships')) {
                data.relships.forEach(relship => {
                    dispatch(receivedRelship(relship));
                });
            }
            followingActions.forEach(action => {
                dispatch(action(data));
            });
        }).fail(err => dispatch(fetchError(url, err)));
    };
}

export function fetchCollection(url, params, followUpActions = null) {
    const request_params = params ? params : {};
    const followingActions = followUpActions ? followUpActions : [];
    return dispatch => {
        dispatch(fetching(url));
        return jQuery.ajax({
            dataType: 'json',
            url: url,
            data: request_params
        }).done(data => {
            dispatch(receivedCollection(url, data.objects));
            followingActions.forEach(action => {
                dispatch(action(data));
            });
            return data;
        })
        .fail(err => dispatch(fetchError(url, err)));
    };
}

export function fetchRelship(url, viewname = 'complete-target', params, followUpActions = []) {
    const request_url = viewname ? (url + '/+' + viewname) : url;
    const request_params = params ? params : {};
    return dispatch => {
        dispatch(fetching(url));
        jQuery.ajax({
            dataType: 'json',
            url: request_url,
            data: request_params
        }).then(
            relship => {
                dispatch(receivedRelship(relship));
            },
            err => {
                dispatch(fetchError(url, err));
            }
        ).then(() => {
            followUpActions.forEach(action => {
                dispatch(action());
            });
        });
    };
}

export function fetchRelships(relships, followUpActions = null) {
    return dispatch => {
        const followingActions = followUpActions ? followUpActions : [];
        return Promise.all(relships.map(relship => {
            return new Promise((resolve, reject) => {
                const url = relship.get('url');
                const request_url = relship.get('viewName') ?
                    (url + '/+' + relship.get('viewName')) : url;
                const request_params = relship.get('params') ? relship.get('params') : {};
                dispatch(fetching(url));

                jQuery.ajax({
                    dataType: 'json',
                    url: request_url,
                    data: request_params
                }).then(
                    relship => {
                        dispatch(receivedRelship(relship));
                        resolve();
                    },
                    err => {
                        dispatch(fetchError(url, err));
                        reject();
                    }
                );
            });
        })).then(() => {
            followingActions.forEach(action => {
                dispatch(action());
            });
        }, () => {
            //console.log('NOT fetched all relships');
        });
    };
}

export function fetchObjectWithRelships(url, viewname, relships) {
    const request_url = viewname ? (url + '/+' + viewname) : url;
    return dispatch => {
        dispatch(fetching(url));
        return jQuery.ajax({
            dataType: 'json',
            url: request_url
        }).done(data => {
            dispatch(receivedObject(url, data));
            relships.forEach(ref => {
                const refAndView = ref.split('/');
                const ref_url = data['system:relships'].relships[refAndView[0]];
                const view = (refAndView.length > 1) ? refAndView[1] : 'complete-target';
                dispatch(fetchRelship(ref_url, view));
            });
        })
            .fail(err => dispatch(fetchError(url, err)));
    };
}

function editingObject(object, newValues) {
    return {
        type: "EDITING_OBJECT",
        payload: {object, values: newValues}
    };
}

export function editObject(obj, newValues) {
    const url = obj.get('@id');
    const settings = {
        method: "PUT",
        dataType: "json",
        contentType: "application/json; charset=UTF-8",
        data: JSON.stringify(newValues),
        processData: false
    };
    return dispatch => {
        dispatch(editingObject(obj, newValues));
        return jQuery.ajax(url, settings)
            .done(data => dispatch(receivedObject(url, data)))
            .fail(err => dispatch(fetchError(url, err)));
    };
}

export function createObject(
    collectionUrl, values, refetchRelships = [], viewname = null, followUpActions = []
) {
    const settings = {
        method: "POST",
        dataType: "json",
        contentType: "application/json; charset=UTF-8",
        data: JSON.stringify(values),
        processData: false
    };
    const url = viewname ? collectionUrl + '/+' + viewname : collectionUrl;

    return dispatch => {
        return jQuery.ajax(url, settings)
            .done(data => {
                dispatch(receivedCollection(collectionUrl, data));
                refetchRelships.forEach(urlAndView => {
                    dispatch(fetchRelship(...urlAndView));
                });

                followUpActions.forEach(action => {
                    dispatch(action(data));
                });
            })
            .fail(err => dispatch(fetchError(collectionUrl, err)));
    };
}

export function createSingleObject(
    collectionUrl, values, refetchRelships = [], viewname = null, followUpActions = []
) {
    const settings = {
        method: "POST",
        dataType: "json",
        contentType: "application/json; charset=UTF-8",
        data: JSON.stringify(values),
        processData: false
    };
    const url = viewname ? collectionUrl + '/+' + viewname : collectionUrl;

    return dispatch => {
        return jQuery.ajax(url, settings)
            .done(data => {
                dispatch(receivedObject(collectionUrl, data));
                refetchRelships.forEach(urlAndView => {
                    dispatch(fetchRelship(...urlAndView));
                });

                followUpActions.forEach(action => {
                    dispatch(action(data));
                });
            })
            .fail(err => dispatch(fetchError(collectionUrl, err)));
    };
}
