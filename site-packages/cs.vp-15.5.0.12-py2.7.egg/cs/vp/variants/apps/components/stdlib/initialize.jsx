/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id$"
 */

import React from 'react';
import ReactDOM from 'react-dom';
import {createStore, combineReducers, applyMiddleware} from 'redux';
import thunk from 'redux-thunk';
import {Provider } from 'react-redux';
import {Router, Route, IndexRoute, browserHistory} from 'react-router';
import {syncHistoryWithStore, routerReducer} from 'react-router-redux';

import gateway from './action-gateway';
import {Registry} from './registry';

const logger = store => next => action => {
    Console.log('dispatching', action);
    const result = next(action);
    Console.log('next state', store.getState());
    return result;
};

Registry.registerReducer("routing", routerReducer);

export function initApplication(config) {
    const {basePathElements, frameComponentName, actionMapping} = config;
    const middlewares = config.debug ? [thunk, logger] : [thunk];
    if (actionMapping !== undefined) {
        middlewares.push(gateway(actionMapping));
    }

    const createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);

    const frameComponent = Registry.findComponent(frameComponentName);

    // Get registered reducer functions here, so that all JS files are already
    // loaded and the component registrations are done.
    const store = createStoreWithMiddleware(combineReducers(Registry.getReducers()));
    const history = syncHistoryWithStore(browserHistory, store);
    ReactDOM.render(
        <Provider store={store}>
            <Router history={history}>
                {
                    basePathElements && basePathElements.map(basePathElement => {
                        const component =
                            Registry.findComponent(basePathElement['indexComponentName']);
                        return (
                            <Route
                                component={frameComponent}
                                key={basePathElement['basePath']}
                                path={basePathElement['basePath']}
                            >
                                <IndexRoute component={component} config={config} />
                            </Route>
                        );
                    })
                }
            </Router>
        </Provider>,
        document.getElementById('application-root')
    );
}
