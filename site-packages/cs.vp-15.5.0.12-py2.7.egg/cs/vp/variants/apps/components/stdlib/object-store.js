/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: object-store.js 164057 2017-08-28 11:55:14Z gda $"
 */

import Immutable from 'immutable';

export function objectsById(state = Immutable.Map(), action) {
    // Workaround: unescape relship ids
    const escapeObject = obj =>
        obj.setIn(
            ["system:relships", "relships"],
            obj.getIn(["system:relships", "relships"]).map(unescape)
        );

    switch (action.type) {
        case "RECEIVED_OBJECT": {
            const payload = Immutable.fromJS(action.payload);
            return state.set(payload.get('@id'), escapeObject(payload));
        }
        case "RECEIVED_COLLECTION":
        case "RECEIVED_RELSHIP_N": {
            const tmp =
                action.payload
                    .filter(x => typeof x === "object" && x !== null)
                    .map(o => [o['@id'], Immutable.fromJS(o)]);
            return (tmp.length > 0) ? state.mergeDeep(Immutable.Map(tmp).map(escapeObject)) : state;
        }
        case "RECEIVED_RELSHIP_1":
            if ((action.payload === null) || (typeof (action.payload) === "string")) {
                return state;
            }
            else {
                return state.set(action.payload['@id'], escapeObject(Immutable.fromJS(action.payload)));
            }
        case "EDITING_OBJECT": {
            const {object, values} = action.payload;
            return state.mergeIn([object.get('@id')], values);
        }
        default:
            return state;
    }
}

const escapeUrl = url => unescape(url.split('?')[0]);

export function relshipsById(state = Immutable.Map(), action) {
    switch (action.type) {
        case "RECEIVED_RELSHIP_N": {
            const orig = state.get(action.meta.url);
            const oids = action.payload.map(o => (typeof o === "string") ? o : o['@id']);
            if (orig === undefined) {
                return state.set(action.meta.url, Immutable.OrderedSet(oids));
            }
            else {
                const updated = orig.intersect(oids).union(oids);
                return state.set(escapeUrl(action.meta.url), updated);
            }
        }
        case "RECEIVED_RELSHIP_1":
            return state.set(
                    escapeUrl(action.meta.url),
                    (action.payload === null)
                        ? null
                        : ((typeof (action.payload) === "string") ?
                            action.payload : action.payload['@id']));
        default:
            return state;
    }
}

export function fetchingById(state = Immutable.Set(), action) {
    switch (action.type) {
        case "FETCHING_URL":
            return state.add(escapeUrl(action.meta.url));
        case "FETCH_ERROR":
        case "RECEIVED_OBJECT":
        case "RECEIVED_COLLECTION":
        case "RECEIVED_RELSHIP_N":
        case "RECEIVED_RELSHIP_1":
            return state.delete(escapeUrl(action.meta.url));
        default:
            return state;
    }
}

export function errorsById(state = Immutable.Map(), action) {
    switch (action.type) {
        case "FETCHING_URL":
        case "RECEIVED_OBJECT":
        case "RECEIVED_COLLECTION":
        case "RECEIVED_RELSHIP_N":
        case "RECEIVED_RELSHIP_1":
            return state.delete(action.meta.url);
        case "FETCH_ERROR":
            return action.error ? state.set(action.meta.url, action.payload) : state;
        case "ACK_ERRORS":
            return Immutable.Map();
        default:
            return state;
    }
}
