/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: list-actions.js 164057 2017-08-28 11:55:14Z gda $"
 */

 // jshint esversion:6

import {
    ROW_ID,
    ROW_SELECTED,
    ROW_VISIBLE
} from './list-constants';

export const FILTER_CHANGE = 'FILTER_CHANGE';
export const SELECT_LIST_ENTRY = 'SELECT_LIST_ENTRY';
export const SET_INITIAL_STATE = 'SET_INITIAL_STATE';
export const SET_LIST = 'SET_LIST';
export const SET_CONTEXT = 'SET_LIST_CONTEXT';
export const APPEND_TO_LIST = 'APPEND_TO_LIST';

export function activateKey(containerId) {
    return (list, key) => {
        const visibleListEntries = list.filter(
            (listEntry) => {
                return listEntry.get(ROW_VISIBLE, true);
            }
        );
        if (visibleListEntries.isEmpty()) {
            return (selectListEntry(containerId))('');
        }
        let selectedEntry;
        let lastEntry;
        for (const listEntry of visibleListEntries) {
            if (selectedEntry && key === 'down') {
                return (selectListEntry(containerId))(listEntry.get(ROW_ID));
            }
            if (listEntry.get(ROW_SELECTED, false)) {
                selectedEntry = listEntry;
                if (key === 'up') {
                    const selectMe = lastEntry ? lastEntry : visibleListEntries.last();
                    return (selectListEntry(containerId))(selectMe.get(ROW_ID));
                }
            }
            lastEntry = listEntry;
        }
        return (selectListEntry(containerId))(visibleListEntries.first().get(ROW_ID));
    };
}


export function filterChange(containerId) {
    return (callback, text) => {
        return {
            type: FILTER_CHANGE,
            filterText: text,
            callback,
            containerId
        };
    };
}


export function selectListEntry(containerId) {
    return (id) => {
        return {
            type: SELECT_LIST_ENTRY,
            id,
            containerId
        };
    };
}


export function setInitialState(containerId) {
    return (state) => {
        return {
            type: SET_INITIAL_STATE,
            state,
            containerId
        };
    };
}


export function setContent(containerId) {
    return (content) => ({
        type: SET_LIST,
        list: content,
        containerId
    });
}

export function setListContext(containerId) {
    return context => ({
        type: SET_CONTEXT,
        context,
        containerId
    });
}

export function push(containerId) {
    return (entry) => ({
        type: APPEND_TO_LIST,
        entry,
        containerId
    });
}
