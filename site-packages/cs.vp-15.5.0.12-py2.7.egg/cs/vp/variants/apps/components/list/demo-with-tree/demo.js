// jshint esversion:6

require('./app.css');

import React                                              from 'react';

import { createStore, combineReducers, applyMiddleware }  from 'redux';
import { Provider }                                       from 'react-redux';
import thunk                                              from 'redux-thunk';

import { Col, Grid, Row }                                 from 'react-bootstrap';

import listContainerFactory                               from '../index';
import { reducer as listReducerFactory }                  from '../index';
import { actions as listActionsFactory }                  from '../index';

import treeContainerFactory                               from '../../tree/index';
import { reducer as treeReducerFactory }                  from '../../tree/index';
import { actions as treeActionsFactory }                  from '../../tree/index';

import logger                                             from './logger';
import listdata                                           from './data';
import treedata                                           from './treedata';

const ListContainerId = 'List';
const ListContainer   = listContainerFactory(ListContainerId);
const ListActions     = listActionsFactory(ListContainerId);

const LeftTreeContainerId = 'LeftTree';
const LeftTreeContainer   = treeContainerFactory(LeftTreeContainerId);
const LeftTreeActions     = treeActionsFactory(LeftTreeContainerId);

const RightTreeContainerId = 'RightTree';
const RightTreeContainer   = treeContainerFactory(RightTreeContainerId);
const RightTreeActions     = treeActionsFactory(RightTreeContainerId);

const createStoreWithMiddleware = applyMiddleware(thunk)(createStore);
let reducers = {
    logger
};
reducers[ListContainerId]  = listReducerFactory(ListContainerId);
reducers[LeftTreeContainerId]  = treeReducerFactory(LeftTreeContainerId);
reducers[RightTreeContainerId]  = treeReducerFactory(RightTreeContainerId);
const store = createStoreWithMiddleware(combineReducers(reducers));

store.dispatch(ListActions['setInitialState'](listdata));
store.dispatch(LeftTreeActions['setInitialTreeState'](treedata));
store.dispatch(RightTreeActions['setInitialTreeState'](treedata));

class DemoApp extends React.Component {
    render() {
        return (
            <Grid>
                <Row>
                    <Col className="col"
                        lg={4}
                        md={6}
                        xs={12}
                    >
                        <LeftTreeContainer {...this.props}/>
                    </Col>
                    <Col className="col"
                        lg={4}
                        md={6}
                        xs={12}
                    >
                        <RightTreeContainer {...this.props}/>
                    </Col>
                    <Col className="col"
                        lg={4}
                        md={6}
                        xs={12}
                    >
                        <ListContainer {...this.props}/>
                    </Col>
                </Row>
            </Grid>
        );
    }
}

React.render(
    <Provider store={store} >
        <DemoApp/>
    </Provider>,
    document.getElementById('container')
);
