/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: list-reducers.js 164057 2017-08-28 11:55:14Z gda $"
 */

 // jshint esversion:6

import Immutable from 'immutable';
import {filterList, selectListEntry} from './list-tools';

import {
    FILTER_CHANGE,
    SELECT_LIST_ENTRY,
    SET_INITIAL_STATE,
    SET_LIST,
    SET_CONTEXT,
    APPEND_TO_LIST,
    VALUE
} from './list-actions';

import {
    FILTER_FIELD,
    LIST,
    CONTEXT
} from './list-constants';

const defaultState = Immutable.fromJS({
    filterField: {
        callback: filterText => listEntry => listEntry.get('_text').indexOf(filterText) > -1,
        placeholder: '',
        visible: true
    },
    list: []
});

const listReducer = (state = defaultState, action) => { // jshint ignore:line
    let list;
    let updatedList;

    switch (action.type) {
        case FILTER_CHANGE:
            list = state.get(LIST);
            updatedList = list.map(listEntry => filterList(listEntry, action.callback));
            return state.updateIn([FILTER_FIELD, VALUE],
                () => action.filterText).set(LIST, updatedList);

        case SELECT_LIST_ENTRY:
            list = state.get(LIST);
            updatedList = list.map(listEntry => selectListEntry(listEntry, action.id));
            return state.set(LIST, updatedList);
        case SET_INITIAL_STATE:
            return (action.state) ? action.state : state;
        case SET_LIST:
            return state.set(LIST, action.list);
        case SET_CONTEXT:
            return state.set(CONTEXT, action.context);
        case APPEND_TO_LIST:
            list = state.get(LIST);
            updatedList = list.push(action.entry);
            return state.set(LIST, updatedList);
        default:
            return state;
    }
};

const chainReducers = (...reducers) => reducers.reduce(
    (lhs, rhs) => (
        (state, action) => {
            return rhs(lhs(state, action), action);
        }
    ),
    function(state = Immutable.Map()) {
        return state;
    }
);

const reducer = chainReducers(
    listReducer
);


export default function(containerId) {
    return (state, action) => {
        if (containerId === action.containerId) {
            return reducer(state, action);
        } else {
            return state === undefined ? defaultState : state;
        }
    };
}
