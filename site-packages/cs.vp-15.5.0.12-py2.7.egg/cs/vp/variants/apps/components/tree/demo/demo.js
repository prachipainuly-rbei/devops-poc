require('./app.css');

import React from 'react';
import { createStore, combineReducers, applyMiddleware } from 'redux';
import { connect, Provider } from 'cs-web-components-externals';

import treeContainerFactory from '../index';
import { reducer as treeReducerFactory }  from '../index';
import { actions as treeActionsFactory }  from '../index';

import { TreeTools } from 'cs-vp-utils';

import wiki from './reducers';
import * as wikiActions from './actions';
import { TreeNodeCustomRenderer, WikiPanel } from './components';

import thunk from 'redux-thunk';
import Immutable from 'immutable';

const logger = store => next => action => {
    console.log('dispatching', action)
    let result = next(action)
    console.log('next state', store.getState())
    return result
}


const rootNode = TreeTools.visitTopDownDepthFirst(
    Immutable.fromJS(require('./mammalia.json')), node => {
        return Immutable.Map({
            id: node.get('description'),
            content: node.get('description'),
            expanded: false,
            children: node.get('children'),
            has_children: node.get('children').size > 0
        })
    }
);


const initialState = {
    NodeRendererComponent: TreeNodeCustomRenderer,
    node: rootNode,
    searchField: {
        label: 'Suche',
        placeholder: 'Bitte Suchbegriff eingeben',
        visible: true,
        searchId: 'simple-text-search'
    },
    searches: {
        'simple-text-search': {
            cssclass: 'simple-search-match',
            match: (node, search) => {
                if (search !== '' && node.get('content').indexOf(search) != -1) {
                    return true;
                } else {
                    return false;
                }
            },
            resultCnt: 0,
            navigatedIdx: 0,
            navigationCSSClass: 'simple-search-navigated',
            matchedNodeIds: [],
            idFieldPathList: ['id']
        }
    }
}

const TreeContainerId = 'demoTree';
const TreeContainer = treeContainerFactory(TreeContainerId);
const TreeActions = treeActionsFactory(TreeContainerId);

const actions = Object.assign({}, wikiActions, TreeActions)


const createStoreWithMiddleware = applyMiddleware(thunk)(createStore);
let reducers = {
    wiki,
    logger
};
reducers[TreeContainerId]=treeReducerFactory(TreeContainerId);
const store = createStoreWithMiddleware(combineReducers(reducers));

const demo_content = Immutable.fromJS(initialState);
store.dispatch(TreeActions['setInitialTreeState'](demo_content));

const ReduxWikiPanel = connect(
    state => state,
    wikiActions
)(WikiPanel);


class DemoApp extends React.Component {
    render() {
        return (
            <div>
                <div id="left-column">
                    <TreeContainer {...this.props} />
                </div>
                <div id="main-panel">
                    <ReduxWikiPanel {...this.props} />
                </div>
            </div>
        );
    }
}


React.render(
    <Provider store={store} >
        <DemoApp/>
    </Provider>,
    document.getElementById('container')
);
