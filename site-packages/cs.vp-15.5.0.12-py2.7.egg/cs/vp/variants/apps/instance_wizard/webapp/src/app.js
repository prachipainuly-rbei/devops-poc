// jshint esversion:6

import jQuery from 'jquery';
import React from 'react';
import PropTypes from 'prop-types';
import Immutable from 'immutable';
import {
    Registry, getAppSetup,
    fetchCollection
} from 'cs-web-components-base';
import {connect, ImmutablePropTypes} from 'cs-web-components-externals';
import {
    Button, Col, Grid, Glyphicon, Navbar, Row,
    Modal
} from 'react-bootstrap';

import {constants as tableConstants} from 'cs-vp-table-component';

import {
    PropertyTreeContainerId,
    BOMTreeContainerId,
    PropertyRestTreeActions,
    BOMRestTreeActions,
    PropertyTreeContainer,
    BOMTreeContainer,
    ToDoListContainerId,
    ToDoListContainer,
    ToDoListActions
} from './init';
import {BomTreeRenderer,
         shallUpdateToDoArticleSelectionRenderer,
         ToDoArticleSelectionRenderer} from './renderer';
import {
    propertyTreeSimpleSearch,
    bomTreeSimpleSearch,
    bomTreePredicateSearch,
    mergeSearches
} from './searches';
import {
    bomTreeSimpleSearchAction
} from './searches';
import {
    setConfig,
    setContext,
    loadPartListForTreeNode,
    selectBOMTreeNode,
    instantiatePart,
    openDropdown,
    startLoading,
    stopLoading,
    syncTodoListSelectionToTree,
    fetchProduct
} from './actions';

require('./app.css');


class IndexComponent extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            showLeftColumn: false,
            focussedContainerId: undefined,
            showErrorDialog: false
        };
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.errorsById.size > this.props.errorsById.size) {
            this.setState({showErrorDialog: true});
        }
    }

    componentDidMount() {
        const {
            fetchProduct, setContext, setConfig,
            setPropertyRestTreeConfig, setBOMRestTreeConfig,
            startLoading, setInitialTodoListState
        } = this.props;

        const config = getAppSetup().get('cs-vp-instance-wizard');
        setConfig(config);

        jQuery('.index-component').focusin(this.updateFocussedComponent.bind(this));


        const productId = config.get('product_object_id');
        const variantId = config.get('variant_id');
        const teileNummer = config.get('teilenummer');
        const teileIndex = config.get('t_index');

        const context = {
            product_object_id: productId,
            variant_id: variantId,
            teilenummer: teileNummer,
            t_index: teileIndex
        };
        setContext(context);

        const variant_url =
            config.getIn(['links', 'base_urls', 'variant']) + '/' + variantId + '@' + productId;
        const optional_t_index = teileIndex ? teileIndex : '';
        const maxbom_url =
            config.getIn(['links', 'base_urls', 'part']) +
                '/' + teileNummer + '@' + optional_t_index;
        const searches = mergeSearches(bomTreePredicateSearch, bomTreeSimpleSearch);

        setPropertyRestTreeConfig(
            config.get('labels'),
            variant_url,
            config.getIn(['treeDownReferences', PropertyTreeContainerId]),
            null,
            PropertyTreeContainerId,
            true,
            propertyTreeSimpleSearch,
            'simple-text-search'
        );

        setBOMRestTreeConfig(
            config.get('labels'),
            maxbom_url,
            config.getIn(['treeDownReferences', BOMTreeContainerId]),
            BomTreeRenderer,
            BOMTreeContainerId,
            true,
            searches,
            'simple-backend-text-search',
            this.props.bomTreeSimpleSearchAction
        );

        const todoListTable = Immutable.fromJS({
            filterField: {
                callback: filterText => row => {
                    if (row.get('assembly').indexOf(filterText) > -1) {
                        return true;
                    }
                    if (row.get('item').indexOf(filterText) > -1) {
                        return true;
                    }
                    return false;
                },
                placeholder: config.getIn(['labels', 'cdbvp_variants_web_filter_placeholder']),
                visible: true
            },
            header: {
                visible: true
            },
            cols:
            [
                {
                    key: 'assembly',
                    label: config.getIn(['labels', 'baugruppe']),
                    classNameHeader: 'assembly-header',
                    classNameHeaderLabel: 'assembly-header-label',
                    classNameHeaderIcon: 'assembly-header-icon',
                    classNameCell: 'assembly-cell',
                    classNameCellContent: 'assembly-cell-content',
                    indent: 15,
                    selectionMode: tableConstants.SELECTION_MODE_ROW,
                    visible: true
                },
                {
                    key: 'item',
                    label: config.getIn(['labels', 'cdbvp_variants_assigned_part']),
                    classNameHeader: 'part-header',
                    classNameHeaderLabel: 'part-header-label',
                    classNameHeaderIcon: 'part-header-icon',
                    classNameCell: 'part-cell',
                    classNameCellContent: 'part-cell-content',
                    cellComponent: ToDoArticleSelectionRenderer,
                    cellComponentUpdateCallback: shallUpdateToDoArticleSelectionRenderer,
                    selectionMode: tableConstants.SELECTION_MODE_ROW,
                    visible: true,
                    keyMapping: {'alt+down': openDropdown}
                }
            ],
            rows: []
        });
        startLoading();
        setInitialTodoListState(todoListTable);

        fetchProduct(config.get("initial_data").toJS());
    }

    updateFocussedComponent(evt) {
        let focussedContainerId = undefined;
        [
            BOMTreeContainerId,
            PropertyTreeContainerId,
            ToDoListContainerId
        ].forEach(containerId => {
            const target = jQuery(evt.target);
            if (
                target.hasClass(containerId) ||
                jQuery('.' + containerId).find(evt.target).length > 0
            ) {
                focussedContainerId = containerId;
            }
        });
        this.setState({focussedContainerId: focussedContainerId});
    }

    toggleLeft() {
        this.setState({showLeftColumn: !this.state.showLeftColumn});
    }

    toggleLeftKeyHandler(e) {
        // FIXME: explain magic numbers or use constants with readable names
        if ([13, 32, 37, 39].indexOf(e.keyCode) !== -1) {
            if (e.keyCode === 32) {
                e.preventDefault();
            }
            this.setState({showLeftColumn: !this.state.showLeftColumn});
        }
        e.stopPropagation();
    }

    saveInstance() {
        this.props.instantiatePart();
    }

    close(instance) {
        if (this.props.config.get('isCDBPC')) {
            try {
                window.open(instance['system:structure_url']);
                window.onbeforeunload = null;
                window.external.cdbEFClose();
            } catch (e) {
                //console.log(e);
            }
        }
    }

    ackErrors(evt) {
        // this.props.acknowledgeErrors();
        this.setState({showErrorDialog: false});
        evt.stopPropagation();
        evt.preventDefault();
    }

    render() {
        const {
            config, errorsById, loading,
            loadPartListForTreeNode, selectBOMTreeNode,
            syncTodoListSelectionToTree
        } = this.props;
        const {
            showLeftColumn, focussedContainerId
        } = this.state;

        if (!config || config.size === 0) {
            return (<div/>);
        }

        const title = config.get('title');
        const labels = config.get('labels');

        const brand = (
            <span className="visible-lg-inline visible-md-inline">{title}</span>
        );
        const icon = (
            <Button
                bsSize="sm"
                className="toggle-icon"
                onClick={this.toggleLeft.bind(this)}
                onKeyDown={this.toggleLeftKeyHandler.bind(this)}
                tabIndex={11}
                title={showLeftColumn ?
                    labels.get('cdbvp_variants_web_hide_variant_details') :
                    labels.get('cdbvp_variants_web_show_variant_details')}
            >
                <Glyphicon glyph={showLeftColumn ? 'menu-left' : 'menu-right'}/>
            </Button>
        );
        const propertyTreeTitle = labels.get('cdbvp_variants_variant');
        const todoListTitle = labels.get('cdbvp_variants_todo');
        const BOMTreeTitle = labels.get('cs_items_bom');
        const titlebar = (
            <Navbar
                fixedTop
                fluid
                id="navbar-head"
            >
                <Navbar.Header>
                    <Navbar.Brand>
                        {brand}
                    </Navbar.Brand>
                </Navbar.Header>
                <Button
                    bsStyle="primary"
                    className={'navbar-btn'}
                    onClick={this.saveInstance.bind(this)}
                    tabIndex={1}
                >
                    {labels.get('cdbvp_variants_shape_now')}
                    <Glyphicon glyph={'ok'} style={{'marginLeft': '10px'}} />
                </Button>
            </Navbar>
        );

        const leftColWidth = showLeftColumn ? 3 : 0;
        const mainColWidth = showLeftColumn ? 4 : 6;
        const rightColWidth = showLeftColumn ? 5 : 6;
        const leftCol = showLeftColumn ? (
            <Col className="col" id="left-column"
                lg={leftColWidth}
            >
                <div className="label-line">
                    <h4>{propertyTreeTitle}</h4>
                </div>
                <div className="content-line">
                    <PropertyTreeContainer
                        className={PropertyTreeContainerId}
                        hasFocus={PropertyTreeContainerId === focussedContainerId}
                        key={PropertyTreeContainerId}
                        tabIndex={20}
                    />
                </div>
            </Col>
        ) : undefined;

        const instance = (
            this.props.instance && this.props.instance.length > 0
            ? this.props.instance[0]
            : {}
        );
        if (this.props.instance && this.props.instance.length > 0) {
            this.close(instance);
        }

        const instanceCreatedModal = !this.props.instance ? undefined : (
            <Modal show={this.props.instance}>
                <Modal.Header>
                    <Modal.Title>{labels.get('cdbvp_instance_created')}</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <a href={instance['system:url']}>{instance['system:description']}</a>
                </Modal.Body>
                <Modal.Footer>
                    <Button
                        bsStyle="primary"
                        onClick={this.close.bind(this)}
                    >
                        {labels.get('cdbvp_variants_web_close')}
                    </Button>
                </Modal.Footer>
            </Modal>
        );

        const errorModal = this.state.showErrorDialog ? (
            <Modal show={this.state.showErrorDialog}>
                <Modal.Header>
                    <Modal.Title>{labels.get('cdbvp_variants_web_error')}</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {
                        Object.keys(errorsById.toJS()).map(url => {
                            const error = errorsById.get(url);
                            const message = (
                                error.status > 0 ?
                                labels.get('cdbvp_variants_web_ajax_err')
                                    .replace('{status_code}', error.status) :
                                labels.get('cdbvp_variants_web_ajax_0')
                            );
                            return (<div key={url}>{message}</div>);
                        })
                    }
                </Modal.Body>
                <Modal.Footer>
                    <Button bsStyle="primary"
                        onClick={this.ackErrors.bind(this)}
                    >
                        {labels.get('cdbvp_variants_web_close')}
                    </Button>
                </Modal.Footer>
            </Modal>
        ) : undefined;

        return (
            <div>
                {
                    loading ? (
                        <div className="loader">
                            <div className="waiting-with-huge-endless-loader">
                                &nbsp;
                            </div>
                        </div>
                    ) : undefined
                }
                <div className="index-component" role="application">
                    {titlebar}
                    {icon}
                    <Grid className="grid">
                        <Row>
                            {leftCol}
                            <Col className="col" id="main-column"
                                lg={mainColWidth}
                            >
                                <div className="label-line">
                                    <h4>{todoListTitle}</h4>
                                </div>
                                <div className="content-line">
                                    <ToDoListContainer
                                        className={ToDoListContainerId}
                                        config={config}
                                        hasFocus={ToDoListContainerId === focussedContainerId}
                                        key={ToDoListContainerId}
                                        keyBlacklistSelector={'.dropdown-toggle, a[role=menuitem]'}
                                        loadPartListForTreeNode={loadPartListForTreeNode}
                                        onSelection={selectBOMTreeNode}
                                        tabIndex={30}
                                    />
                                </div>
                            </Col>
                            <Col className={'col ' + BOMTreeContainerId}
                                id="right-column"
                                lg={rightColWidth}
                            >
                                <div className="label-line">
                                    <h4>{BOMTreeTitle}</h4>
                                </div>
                                <div className="content-line">
                                    <BOMTreeContainer
                                        config={config}
                                        hasFocus={BOMTreeContainerId === focussedContainerId}
                                        onSelection={syncTodoListSelectionToTree}
                                        tabIndex={40}
                                    />
                                </div>
                            </Col>
                        </Row>
                    </Grid>
                    {instanceCreatedModal}
                    {errorModal}
                </div>
            </div>
        );
    }

    shouldComponentUpdate(nextProps, nextState) {
        const shouldUpdate =
            this.props.instance !== nextProps.instance ||
            !this.props.errorsById.equals(nextProps.errorsById) ||
            this.props.loading !== nextProps.loading ||
            this.state !== nextState;
        return shouldUpdate;
    }
}

IndexComponent.propTypes = {
    // acknowledgeErrors: PropTypes.func.isRequired, // action
    bomTreeSimpleSearchAction: PropTypes.func.isRequired, // action
    config: ImmutablePropTypes.map.isRequired,
    errorsById: ImmutablePropTypes.map.isRequired,
    fetchCollection: PropTypes.func.isRequired, // action
    fetchProduct: PropTypes.func.isRequired, // action
    instance: PropTypes.any.isRequired,
    instantiatePart: PropTypes.func.isRequired, // action
    loadPartListForTreeNode: PropTypes.func.isRequired, // action
    loading: PropTypes.bool.isRequired,
    selectBOMTreeNode: PropTypes.func.isRequired, // action
    setBOMRestTreeConfig: PropTypes.func.isRequired, // action
    setConfig: PropTypes.func.isRequired, // action
    setContext: PropTypes.func.isRequired, // action
    setInitialTodoListState: PropTypes.func.isRequired, // action
    setPropertyRestTreeConfig: PropTypes.func.isRequired, // action
    startLoading: PropTypes.func.isRequired, // action
    syncTodoListSelectionToTree: PropTypes.func.isRequired, // action
};

const reduxIndexComponent = connect(state => {
    const {errorsById} = state;

    const result = Object.assign({
        errorsById: errorsById
    }, state["cs-vp-instance-wizard"]);
    return result;
}, {
    // acknowledgeErrors,
    bomTreeSimpleSearchAction,
    setConfig,
    setContext,
    loadPartListForTreeNode,
    instantiatePart,
    fetchCollection,
    fetchProduct,
    // fetchObjectBatch,
    selectBOMTreeNode,
    setInitialTodoListState: ToDoListActions['setInitialState'],
    setBOMRestTreeConfig: BOMRestTreeActions['setConfig'],
    setPropertyRestTreeConfig: PropertyRestTreeActions['setConfig'],
    startLoading,
    stopLoading,
    syncTodoListSelectionToTree
})(IndexComponent);

Registry.registerComponent(
    'cs.vp.variants.apps.instance_wizard.index_component', reduxIndexComponent);
