import React from 'react';
import PropTypes from 'prop-types';
import Immutable from 'immutable';
import jQuery from 'jquery';
import {RestObjectRenderer} from 'cs-vp-utils';
import {ButtonGroup, MenuItem, DropdownButton} from 'react-bootstrap';
import {getAppSetup} from 'cs-web-components-base';
import {connect, ImmutablePropTypes} from 'cs-web-components-externals';
import {constants as tableConstants} from 'cs-vp-table-component';

import {editTodoListCell} from './actions';

export class BomTreeRenderer extends React.Component {
    render() {
        const {config, node} = this.props;

        let description = node.getIn(['content', 'system:description']);
        const iconSrc = node.getIn(['content', 'system:icon_link']);
        const statusFillColor = node.getIn(['content', 'system:current_status', 'color']);

        let cssClasses = 'tree-node-renderer';
        if (config.getIn(['links', 'type_urls', 'item']) === node.getIn(['content', '@type'])) {
            cssClasses = 'tree-node-renderer item';
        }

        if (config.getIn(['links', 'type_urls', 'bom_item']) === node.getIn(['content', '@type'])) {
            description = node.getIn(['content', 'system:bom_item_description']);
            cssClasses = 'tree-node-renderer bom_item';
        }

        const statusIcon = statusFillColor ? {fillColor: statusFillColor} : undefined;
        return (
            <RestObjectRenderer
                cssClasses={cssClasses}
                description={description}
                iconSrc={iconSrc}
                statusIcon={statusIcon}
            />
        );
    }
    shouldComponentUpdate(nextProps) {
        const shouldUpdate = this.props.config !== nextProps.config ||
                             !this.props.node.equals(nextProps.node);
        return shouldUpdate;
    }
}

BomTreeRenderer.propTypes = {
    config: PropTypes.object.isRequired,
    node: PropTypes.object.isRequired
};


export const shallUpdateToDoArticleSelectionRenderer = () => true;

class _ToDoArticleSelectionRenderer extends React.Component {
    shouldComponentUpdate(nextProps) {
        return shallUpdateToDoArticleSelectionRenderer(this.props, nextProps);
    }

    componentDidUpdate() {
        const {
            row, col,
            loadPartListForTreeNode, setGrabFocus
        } = this.props;

        const openValue = row.get(col.get(tableConstants.KEY) + '_opened');
        const reactInput = this.dropDown;

        if (openValue) {
            if (!row.get('_item_list')) {
                loadPartListForTreeNode(row);
            }
            const domSelect = jQuery(reactInput).find('.dropdown-menu li a').first();
            if (domSelect) {
                domSelect.focus();
                setGrabFocus(false);
            }
        }
    }

    getConfig() {
        return getAppSetup().get('cs-vp-instance-wizard');
    }

    changeAssignedPart(eventKey, evt) {
        evt.preventDefault();
        evt.stopPropagation();

        const config = this.getConfig();
        const firstEntry = Immutable.Map({
            _text: config.getIn(['labels', 'cdbvp_variants_new_article']),
            _id: 'NEW'
        });
        const optionList = !this.props.row.get('_item_list') ?
            Immutable.List([firstEntry]) : this.props.row.get('_item_list');
        const selectedOption = optionList.filter(option => option.get('_id') === eventKey).get(0);
        this.props.editCell(this.props.row, '_item_id', eventKey);
        this.props.editCell(this.props.row, 'item', selectedOption.get('_text'));
    }
    onToggle(isOpen) {
        if (false === isOpen) {
            this.props.setGrabFocus(true);
        }
        this.props.editCell(
            this.props.row, this.props.col.get(tableConstants.KEY) + '_opened', isOpen);
    }
    render() {
        const {row, col, hasFocus, table} = this.props;
        const config = this.getConfig();

        const firstEntry = Immutable.Map({
            _text: config.getIn(['labels', 'cdbvp_variants_new_article']),
            _id: 'NEW'
        });
        const optionList = !this.props.row.get('_item_list') ?
            Immutable.List([firstEntry]) : this.props.row.get('_item_list');
        const is_focused = hasFocus &&
            table.getIn([tableConstants.TABLE, tableConstants.FOCUSED_COL_KEY]) ===
                col.get(tableConstants.KEY) &&
            table.getIn([tableConstants.TABLE, tableConstants.FOCUSED_ROW_ID]) ===
                row.get(tableConstants.ROW_ID);
        const openValue = row.get(col.get(tableConstants.KEY) + '_opened');
        const opend = (is_focused && openValue) ? (is_focused && openValue) : undefined;
        const dropDown = (
            <ButtonGroup justified>
                <DropdownButton
                    bsSize="xsmall"
                    className="app-dropdown"
                    id={'dropdown-' + this.props.row.get(tableConstants.ROW_ID)}
                    key="dropdown"
                    onSelect={this.changeAssignedPart.bind(this)}
                    onToggle={this.onToggle.bind(this)}
                    open={opend}
                    pullRight
                    ref={dropDown => this.dropDown = dropDown}
                    title={
                        <span className="dropdown-title" title={this.props.row.get('item')}>
                            {this.props.row.get('item')}
                        </span>
                    }
                >
                    {optionList.map(child => (
                        <MenuItem
                            eventKey={child.get('_id')}
                            href="#"
                            id={'option ' + child.get('_id')}
                            key={child.get('_id')}
                            title={child.get('_text')}
                        >
                            {child.get('_text')}
                        </MenuItem>
                    ))}
                </DropdownButton>
            </ButtonGroup>
        );
        return (
            <div className="table-cell-content">
                {dropDown}
            </div>
        );
    }
}
_ToDoArticleSelectionRenderer.propTypes = {
    col: ImmutablePropTypes.map.isRequired,
    editCell: PropTypes.func.isRequired,
    hasFocus: PropTypes.bool.isRequired,
    loadPartListForTreeNode: PropTypes.func.isRequired,
    row: ImmutablePropTypes.map.isRequired,
    setGrabFocus: PropTypes.func.isRequired,
    table: PropTypes.object.isRequired
};
_ToDoArticleSelectionRenderer.defaultProps = {
    keys: {
    }
};


export const ToDoArticleSelectionRenderer = connect(state => state, {
    editCell: editTodoListCell
})(_ToDoArticleSelectionRenderer);
