# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: main.py 176176 2018-04-19 07:39:24Z gda $"

import json

from cdb import rte
from cdb import sig
from cdb import util
from cs.web.components.base.main import BaseApp
from cs.web.components.base.main import BaseModel
from cs.platform.web.base import base_app
from cs.platform.web.base import byname_app
from cs.platform.web.base.base_app import LAYOUT
from cs.platform.web.util import render_file_template

from cs.vp import variants

__docformat__ = "restructuredtext en"
__revision__ = "$Id: main.py 176176 2018-04-19 07:39:24Z gda $"

# Exported objects
__all__ = []


class InstanceWizardApp(BaseApp):
    def update_app_setup(self, app_setup, model, request):
        super(InstanceWizardApp, self).update_app_setup(app_setup, model, request)

        from cs.vp.variants.apps.instance_wizard.view import _setup
        app_setup["cs-vp-instance-wizard"] = _setup(model, request)

        self.include("jquery", "2.1.0")
        self.include("cs-vp-utils", "15.5.0")
        self.include("cs-vp-tree-component", "15.5.0")
        self.include("cs-vp-rest-tree-component", "15.5.0")
        self.include("cs-vp-list-component", "15.5.0")
        self.include("cs-vp-table-component", "15.5.0")
        self.include("cs-vp-variants-apps-instance_wizard", "15.5.0")


class InstanceWizardModel(BaseModel):
    """ Web UI model """

    # Labels used in the web app
    LABELS = [
        u"cs_items_bom",
        u"cdbvp_variants_articles",
        u"cdbvp_variants_properties",
        u"cdbvp_variants_todo",
        u"cdbvp_variants_web_filter",
        u"cdbvp_variants_web_filter_placeholder",
        u"cdbvp_variants_web_hide_variant_details",
        u"cdbvp_variants_web_search",
        u"cdbvp_variants_web_search_placeholder",
        u"cdbvp_variants_web_show_variant_details",
        u"baugruppe",
        u"cdbvp_state",
        u"cdbvp_variants_assigned_part",
        u"cdbvp_variants_open",
        u"cdbvp_variants_edited",
        u"cdbvp_variants_new_article",
        u"cdbvp_variants_variant",
        u"cdbvp_instance_created",
        u"cdbvp_instantiate_max_bom",
        u"cdbvp_variants_shape_now",
        u"cdbvp_variants_web_close",
        u"cdbvp_variants_web_ajax_err",
        u"cdbvp_variants_web_ajax_0",
        u"cdbvp_variants_web_error"
    ]

    def __init__(
        self, absorb, product_object_id, variant_id,
        teilenummer, t_index=""
    ):
        super(InstanceWizardModel, self).__init__()
        self.absorb = absorb

        self.product_object_id = product_object_id
        self.variant_id = variant_id
        self.variant = variants.Variant.ByKeys(product_object_id=product_object_id, id=variant_id)

        self.teilenummer = teilenummer
        self.t_index = t_index

    @property
    def labels(self):
        """ Returns a dict (label id, localized string) containing all the
            labels that are used in the search app.
        """
        result = {lbl: util.Labels()[lbl] for lbl in self.LABELS}
        return result

    def get_path(self, request):
        """ Return the root path of current app. The absorbed parts are removed.
        """
        fullpath = request.link(self)
        if not self.absorb:
            return fullpath
        idx = fullpath.rfind(self.absorb)
        return fullpath if idx < 0 else fullpath[:idx]

    @property
    def class_labels(self):
        from cdbwrapc import CDBClassDef
        cdef = CDBClassDef("part")
        return {cd.getClassname(): cd.getDesignation()
                for cd in (cdef,) + cdef.getSubClasses(True)}


# because morepath can not have two paths for the same model class (which doesn't make sense)
class InstanceWizardModelWithIndex(InstanceWizardModel):
    pass


class InstanceWizardInitialModel(InstanceWizardModel):
    pass


class InstanceWizardInitialModelWithIndex(InstanceWizardModel):
    pass


@byname_app.BynameApp.mount(app=InstanceWizardApp, path="instance_wizard")
def _mount_items_app():
    return InstanceWizardApp()


@InstanceWizardApp.path(
    path='/{product_object_id}/{variant_id}/{teilenummer}/{t_index}',
    model=InstanceWizardModelWithIndex
)
def _get_item_index_wizard(absorb, product_object_id, variant_id, teilenummer, t_index):
    return InstanceWizardModelWithIndex(absorb, product_object_id, variant_id, teilenummer, t_index)


@InstanceWizardApp.path(
    path='/{product_object_id}/{variant_id}/{teilenummer}',
    model=InstanceWizardModel
)
def _get_item_wizard(absorb, product_object_id, variant_id, teilenummer):
    return InstanceWizardModel(absorb, product_object_id, variant_id, teilenummer)


@InstanceWizardApp.view(model=InstanceWizardModel, name="app_component", internal=True)
def _setup(self, request):
    return "cs.vp.variants.apps.instance_wizard.index_component"


@InstanceWizardApp.view(model=InstanceWizardModel, name="base_path", internal=True)
def get_base_path(self, request):
    return "/byname/instance_wizard"
