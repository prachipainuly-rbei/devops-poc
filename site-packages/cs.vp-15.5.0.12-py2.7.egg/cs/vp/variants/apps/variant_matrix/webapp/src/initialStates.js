// jshint esversion:6

import Immutable from 'immutable';

import {
    openDropdown,
    toggleCheckbox
} from './actions';

import {
    PartListRenderer,
    shallUpdateTableCellPropertyValueRenderer,
    TableCellPropertyCheckRenderer,
    TableCellPropertyValueRenderer,
    TableCellValueRenderer,
    TableHeaderNewVariantRenderer
} from './renderer';

import {
    variantFilterCallback
} from './tools';


import {
    TableCellTree
} from 'cs-vp-table-component';

import {
    constants as tableConstants
} from 'cs-vp-table-component';

export const FILTER_KEY = 'propertyFilter';
export const FILTER_VALUE_KEY = 'propertyFilterValue';
export const FILTER_VALUES_KEY = 'propertyValues';

export function createInitialArticleListState(labels) {
    return Immutable.fromJS({
        ListEntryComponent: PartListRenderer,
        filterField: {
            callback: filterText => listEntry => listEntry.get('_text').indexOf(filterText) > -1,
            placeholder: labels.get('cdbvp_variants_web_filter_placeholder'),
            visible: false
        },
        list: [],
        listContext: {},
        labels: {
            operations: labels.get('cdb_module2cdb_operations'),
            operation_abc: 'Operation abc',
            operation_xyz: 'Operation xyz'
        }
    });
}

export function createInitialVariantTableState(labels, variants, rows = [], callbacks = {}) {
    return Immutable.fromJS({
        callbacks: callbacks,
        table: {
            displayShowAllColumnsButton: true,
            showAllColumnsButtonLabel: labels.get('cdbvp_variants_web_show_all_variants')
        },
        filterField: {
            callback: filterText => row => {
                if (row.get('propertyName').indexOf(filterText) > -1) {
                    return true;
                }
                return false;
            },
            placeholder: labels.get('cdbvp_variants_web_filter_properties_placeholder'),
            visible: false
        },
        filterFieldCol: {
            callback: variantFilterCallback,
            placeholder: labels.get('cdbvp_variants_web_filter_variants_placeholder'),
            visible: true
        },
        header: {
            visible: true
        },
        cols:
        [
            {
                key: 'propertyName',
                label: labels.get('cdbvp_variants_properties'),
                cellComponent: TableCellTree,
                classNameHeader: 'property-header',
                classNameHeaderLabel: 'property-header-label',
                classNameHeaderIcon: 'property-header-icon',
                classNameCell: 'property-cell',
                classNameCellContent: 'property-cell-content',
                fixed: true,
                indent: 15,
                tree: true,
                visible: true
            },
            {
                key: 'propertyFilter',
                colspan: 2,
                label: labels.get('cdbvp_variants_web_evaluation'),
                cellComponent: TableCellPropertyCheckRenderer,
                classNameHeader: 'check-header',
                classNameHeaderLabel: 'check-header-label',
                classNameHeaderIcon: 'check-header-icon',
                classNameCell: 'check-cell',
                classNameCellContent: 'check-cell-content',
                fixed: true,
                headerComponent: TableHeaderNewVariantRenderer,
                keyMapping: {'space': toggleCheckbox},
                visible: true
            },
            {
                key: 'propertyFilterValue',
                colspan: 0,
                cellComponent: TableCellPropertyValueRenderer,
                cellComponentUpdateCallback: shallUpdateTableCellPropertyValueRenderer,
                classNameHeader: 'value-header',
                classNameHeaderLabel: 'value-header-label',
                classNameHeaderIcon: 'value-header-icon',
                classNameCell: 'value-cell',
                classNameCellContent: 'value-cell-content',
                fixed: true,
                keyMapping: {'alt+down': openDropdown},
                visible: true
            }
        ].concat(variants
            .map(variant => makeVariantCol(variant))
            .toArray()
        ),
        rows
    });
}

export function makeVariantCol(variant) {
    return Immutable.Map({
        key: variant.get('@id'),
        cellComponent: TableCellValueRenderer,
        label: variant.get('name') ?
            variant.get('id') + ': ' + variant.get('name') :
            variant.get('system:description'),
        canHide: true,
        classNameHeader: 'variant-header',
        classNameHeaderLabel: 'variant-header-label',
        classNameHeaderIcon: 'variant-header-icon pull-right',
        classNameCell: 'variant-cell',
        classNameCellContent: 'variant-cell-content',
        selectionMode: tableConstants.SELECTION_MODE_COL,
        visible: true
    });
}
