import jQuery from 'jquery';
import React from 'react';
import PropTypes from 'prop-types';
import {Registry, getAppSetup} from 'cs-web-components-base';
import {connect, ImmutablePropTypes} from 'cs-web-components-externals';

import {
    Button,
    ButtonGroup,
    Col,
    Glyphicon,
    Grid,
    FormGroup,
    FormControl,
    ControlLabel,
    Modal,
    Navbar,
    Row
} from 'react-bootstrap';

import {
    constants as tableConstants,
    walkTableRows
} from 'cs-vp-table-component';

import {
    createVariant,
    fetchProduct,
    newVariant,
    setConfig,
    setContext,
    IS_LOADING,
    IS_VARIANT_VALID,
    NEW_VARIANT,
    SELECTED_VARIANT
} from './actions';

import {
    FILTER_KEY,
    FILTER_VALUE_KEY,
    createInitialArticleListState
} from './initialStates';

import {
    variantFilterCallback
} from './tools';

import {
    ArticleListContainerId,
    ArticleListContainer,
    ArticleListActions,
    VariantTableContainerId,
    VariantTableContainer,
    VariantTableActions,
    namespace
} from './init';

//import { acknowledgeErrors, Registry, initApplication, fetchObjectBatch } from 'cs-vp-std-lib-component';


require('./app.css');

class IndexComponent extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            focussedContainerId: undefined,
            showRightColumn: true,
            showErrorDialog: false
        };
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.errorsById.size > this.props.errorsById.size) {
            this.setState({showErrorDialog: true});
        }
    }

    componentDidMount() {
        const {
            setConfig, setContext,
            setInitialArticleListState, fetchProduct
        } = this.props;

        const config = getAppSetup().get(namespace);
        setConfig(config);

        jQuery('.index-component').focusin(this.updateFocussedComponent.bind(this));

        const product_base_url = config.getIn(['links', 'base_urls', 'product']);
        const productId = config.get('product_object_id');
        const labels = config.get('labels');

        const product_url = product_base_url + '/' + productId;
        const context = {
            product_object_id: productId
        };
        setContext(context);

        //this.props.startLoading();
        setInitialArticleListState(createInitialArticleListState(labels));
        fetchProduct(product_url + '/variant_matrix', context);
    }

    showAll() {
        const {variantTable, filterTableCols} = this.props;
        const filterText = variantTable.getIn([
            tableConstants.FILTER_FIELD_COL, tableConstants.VALUE]);
        filterTableCols(variantFilterCallback(filterText));
    }

    toggleRight() {
        this.setState({showRightColumn: !this.state.showRightColumn});
    }

    toggleRightKeyHandler(e) {
        // FIXME: explain magic numbers
        if ([13, 32, 37, 39].indexOf(e.keyCode) !== -1) {
            if (e.keyCode === 32) {
                e.preventDefault();
            }
            this.toggleRight();
        }
        e.stopPropagation();
    }

    updateFocussedComponent(evt) {
        let focussedContainerId = undefined;
        [ArticleListContainerId, VariantTableContainerId].forEach(containerId => {
            const target = jQuery(evt.target);
            if (
                target.hasClass(containerId) ||
                jQuery('.' + containerId).find(evt.target).length > 0
            ) {
                focussedContainerId = containerId;
            }
        });
        this.setState({focussedContainerId: focussedContainerId});
    }

    ackErrors(evt) {
        //this.props.acknowledgeErrors();
        this.setState({showErrorDialog: false});
        evt.stopPropagation();
        evt.preventDefault();
    }

    render() {
        const {
            config, variantContext,
            createVariant, newVariant,
            variantTable, errorsById
        } = this.props;
        const {
            showRightColumn, focussedContainerId,
            showErrorDialog
        } = this.state;

        if (config === undefined || config.size === 0) {
            return <div />;
        }

        const title = config.get('title');
        const brand = (
            <span className="visible-lg-inline visible-md-inline">{title}</span>
        );
        const toggleIcon = (
            <Button
                bsSize="sm"
                className="toggle-icon"
                onClick={this.toggleRight.bind(this)}
                onKeyDown={this.toggleRightKeyHandler.bind(this)}
                tabIndex={11}
                title={
                    showRightColumn ?
                    config.getIn(['labels', 'cdbvp_variants_web_hide_variant_details']) :
                    config.getIn(['labels', 'cdbvp_variants_web_show_variant_details'])
                }
            >
                <Glyphicon glyph={showRightColumn ? 'menu-right' : 'menu-left'}/>
            </Button>
        );
        const modal = variantContext.get(NEW_VARIANT) ?
            <NewVariantModal
                createVariant={createVariant}
                labels={config.get('labels')}
                newVariant={newVariant}
                variantContext={variantContext}
                variantTable={variantTable}
            /> : undefined;
        const errorModal = showErrorDialog ? (
            <Modal show={showErrorDialog}>
                <Modal.Header>
                    <Modal.Title>
                        {config.getIn(['labels', 'cdbvp_variants_web_error'])}
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {
                        Object.keys(errorsById.toJS()).map(url => {
                            const error = errorsById.get(url);
                            const message = (
                                error.status > 0 ?
                                config.getIn(['labels', 'cdbvp_variants_web_ajax_err'])
                                    .replace('{status_code}', error.status) :
                                config.getIn(['labels', 'cdbvp_variants_web_ajax_0'])
                            );
                            return (<div key={url}>{message}</div>);
                        })
                    }
                </Modal.Body>
                <Modal.Footer>
                    <Button bsStyle="primary" onClick={this.ackErrors.bind(this)}>
                        {config.getIn(['labels', 'cdbvp_variants_web_close'])}
                    </Button>
                </Modal.Footer>
            </Modal>
        ) : undefined;

        const mainColWidth = showRightColumn ? 8 : 12;
        const rightCol = showRightColumn ?
            <Col className="col" id="right-column"
                lg={4}
            >
                <div className="variant-metadata">
                    <VariantMetadata
                        key="VariantMetadata"
                        labels={config.get('labels')}
                        variant={variantContext.get(SELECTED_VARIANT)}
                    />
                </div>
                <h4>{config.getIn(['labels', 'cdbvp_variants_shaped_assemblies'])}</h4>
                <div className="article-list">
                    <ArticleListContainer
                        className={ArticleListContainerId}
                        hasFocus={ArticleListContainerId === focussedContainerId}
                        key={ArticleListContainerId}
                        keyBlacklistSelector={'.dropdown-toggle, a[role=menuitem]'}
                        tabIndex={60}
                    />
                </div>
            </Col> : undefined;

        const loader = variantContext.get(IS_LOADING, true) ?
            <div className="loader">
                <div className="waiting-with-huge-endless-loader">&nbsp;</div>
            </div> : undefined;

        return (
            <div>
                {loader}
                <div className="index-component" role="application">
                    <VariantMatrixNavbar brand={brand}/>
                    {toggleIcon}
                    <Grid className="grid">
                        <Row>
                            <Col className="col" id="left-column"
                                lg={mainColWidth}
                            >
                                {modal}
                                {errorModal}
                                <VariantTableContainer
                                    className={VariantTableContainerId}
                                    containerId={VariantTableContainerId}
                                    hasFocus={VariantTableContainerId === focussedContainerId}
                                    key={VariantTableContainerId}
                                    keyBlacklistSelector={'.dropdown-toggle, a[role=menuitem]'}
                                    labels={config.labels}
                                    newVariant={newVariant}
                                    tabIndex={30}
                                    variantContext={variantContext}
                                />
                            </Col>
                            {rightCol}
                        </Row>
                    </Grid>
                </div>
            </div>);
    }
}
IndexComponent.propTypes = {
    config: PropTypes.object.isRequired,
    createVariant: PropTypes.func.isRequired,
    errorsById: ImmutablePropTypes.map.isRequired,
    fetchProduct: PropTypes.func.isRequired,
    filterTableCols: PropTypes.func.isRequired,
    newVariant: PropTypes.func.isRequired,
    setConfig: PropTypes.func.isRequired,
    setContext: PropTypes.func.isRequired,
    setInitialArticleListState: PropTypes.func.isRequired,
    variantTable: PropTypes.object.isRequired,
    variantContext: ImmutablePropTypes.map.isRequired
};

class VariantMatrixNavbar extends React.Component {

    shouldComponentUpdate() {
        return false;
    }

    render() {
        return (
            <Navbar fixedTop fluid
                id="navbar-head"
            >
                <Navbar.Header>
                    <Navbar.Brand>
                        {this.props.brand}
                    </Navbar.Brand>
                </Navbar.Header>
            </Navbar>
        );
    }
}
VariantMatrixNavbar.propTypes = {
    brand: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.string
    ]).isRequired
};

class VariantMetadata extends React.Component {

    perform(operation) {
        window.open(operation.get('href'), '_blank');
    }

    render() {
        const {variant, labels} = this.props;
        const label = labels !== undefined ? labels.get('cdbvp_name') : '';

        if (variant) {
            const description = variant.get('system:description');
            const operations = variant.get('system:variant_matrix_operations');
            if (operations) {
                return (
                    <div>
                        <ButtonGroup className="operations">
                            {operations.map(operation => (
                                <Button bsSize="sm"
                                    className="button"
                                    id={operation.get('name')}
                                    key={operation.get('name')}
                                    onClick={() => this.perform(operation)}
                                    tabIndex={40}
                                    title={operation.get('label')}
                                >
                                    <img className="object-icon" src={operation.get('iconUrl')}/>
                                </Button>
                            ))}
                        </ButtonGroup>
                        <h4>{labels.get('cdbvp_variants_selected_variant')}</h4>
                        <div className="variant-description">
                            <div title={variant.get('name')}>
                                {label + ': ' + variant.get('name')}</div>
                            <div title={description}>{description}</div>
                        </div>
                    </div>
                );
            }
            else {
                return (
                    <div className="without-operations">
                        <h4>{labels.get('cdbvp_variants_selected_variant')}</h4>
                        <div className="variant-description">
                            <div title={variant.get('name')}>
                                {label + ': ' + variant.get('name')}
                            </div>
                            <div title={description}>{description}</div>
                        </div>
                    </div>
                );

            }
        } else {
            return (
                <div className="without-operations">
                    <h4>{labels.get('cdbvp_variants_selected_variant')}</h4>
                </div>
            );
        }
    }
}

VariantMetadata.propTypes = {
    labels: ImmutablePropTypes.map,
    variant: PropTypes.object
};


class NewVariantModal extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            variantName: undefined
        };
    }

    newVariantModalOk() {
        this.props.newVariant(false);
        this.props.createVariant(this.state.variantName);
    }

    newVariantModalCancel() {
        this.props.newVariant(false);
    }

    variantNameChange(variantName) {
        this.setState({variantName: variantName});
    }

    render() {
        const {variantContext, variantTable, labels} = this.props;

        let propertySelected = false;
        for (const row of walkTableRows(variantTable.get('rows'))) {
            if (row.get(FILTER_VALUE_KEY) || row.get(FILTER_KEY)) {
                propertySelected = true;
                break;
            }
        }

        let errorMessage = undefined;
        if (false === variantContext.get(IS_VARIANT_VALID)) {
            errorMessage = labels.get('cdbvp_variants_web_invalid_variant_err');
        }
        if (false === propertySelected) {
            errorMessage = labels.get('cdbvp_variants_web_select_property_err');
        }

        const content = (undefined === errorMessage) ?
            <Modal.Body>
                <FormGroup>
                    <ControlLabel>{labels.get('cdbvp_name')}</ControlLabel>
                    <FormControl
                        autoFocus
                        onChange={
                            (e) => {
                                this.variantNameChange(e.target.value);
                            }
                        }
                        onKeyPress={
                            (e) => {
                                if ('Enter' === e.key) {
                                    this.newVariantModalOk();
                                }
                            }
                        }
                        type="text"
                    />
                </FormGroup>
            </Modal.Body> :
            <Modal.Body>{errorMessage}</Modal.Body>;


        const footer = (undefined === errorMessage) ? (
            <Modal.Footer>
                <Button onClick={this.newVariantModalOk.bind(this)}>
                    {labels.get('cdbvp_variants_new_variant')}
                </Button>
                <Button onClick={this.newVariantModalCancel.bind(this)}>
                    {labels.get('button_cancel')}
                </Button>
            </Modal.Footer>
        ) : (
            <Modal.Footer>
                <Button autoFocus
                    onClick={this.newVariantModalCancel.bind(this)}
                >
                    {labels.get('button_close')}
                </Button>
            </Modal.Footer>
        );

        return (
            <Modal onHide={this.newVariantModalCancel.bind(this)}
                show={variantContext.get(NEW_VARIANT)}
            >
                <Modal.Header closeButton>
                    <Modal.Title>{labels.get('cdbvp_variants_new_variant')}</Modal.Title>
                </Modal.Header>
                {content}
                {footer}
            </Modal>
        );
    }
}
NewVariantModal.propTypes = {
    createVariant: PropTypes.func.isRequired,
    labels: ImmutablePropTypes.map.isRequired,
    newVariant: PropTypes.func.isRequired,
    variantContext: PropTypes.object.isRequired,
    variantTable: PropTypes.object.isRequired
};


const reduxIndexComponent = connect(state => {
    const {errorsById} = state;

    return Object.assign({
        errorsById
    }, state[namespace]);
}, {
    // acknowledgeErrors,
    createVariant,
    fetchProduct,
    filterTableCols: VariantTableActions['filterColumns'],
    newVariant,
    setConfig,
    setContext,
    setInitialArticleListState: ArticleListActions['setInitialState'],
})(IndexComponent);


Registry.registerComponent('cs-vp-variant-matrix-index_component', reduxIndexComponent);
