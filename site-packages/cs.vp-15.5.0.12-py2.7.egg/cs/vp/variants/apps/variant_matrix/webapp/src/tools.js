// jshint esversion:6

import Immutable from 'immutable';

import {
    FILTER_KEY,
    FILTER_VALUE_KEY
} from './initialStates';

import {
    constants as tableConstants,
    walkVisibleTableRows
} from 'cs-vp-table-component';

export const variantFilterCallback = filterText => (state, column) => {
    const valueKey = column.get(tableConstants.KEY);
    const visibleRows = Immutable.List(
        walkVisibleTableRows(state.get(tableConstants.ROWS).toArray())
    );
    if (visibleRows.size === 0) {
        return false;
    }
    for (const row of visibleRows.toArray()) {
        const check = row.get(FILTER_KEY);
        const checkValue = row.get(FILTER_VALUE_KEY);

        const value = row.get(valueKey);
        const valueFromPropertyValue = getValueFromPropertyValue(value);

        if (checkValue && parseInt(checkValue) !== valueFromPropertyValue) {
            return false;
        }
        if (check && (value === undefined || value.size === 0)) {
            return false;
        }
    }
    if (filterText) {
        return (column.get('label').indexOf(filterText) > -1);
    }
    else {
        return true;
    }
};

export function getValueFromPropertyValue(propertyValue) {
    if (propertyValue === undefined || propertyValue.get('disabled') === true) {
        return false;
    }

    const value = propertyValue.get('value');
    if (value === undefined) {
        return true;
    }

    return value;
}

export const activateCheckboxes = (table, row, editCell) => {
    // walk up and activate checkboxes ...
    const visibleRows = Array.from(walkVisibleTableRows(table.get(tableConstants.ROWS)));
    visibleRows.reverse();
    let thisRow;
    let lastRowLevel = row.get(tableConstants.ROW_LEVEL);
    for (const currentRow of visibleRows) {
        if (currentRow.get(tableConstants.ROW_ID) === row.get(tableConstants.ROW_ID)) {
            thisRow = currentRow;
            if (0 === currentRow.get(tableConstants.ROW_LEVEL)) {
                break;
            }
        }
        if (thisRow && lastRowLevel !== currentRow.get(tableConstants.ROW_LEVEL)) {
            editCell(currentRow, FILTER_KEY, true);
            lastRowLevel = currentRow.get(tableConstants.ROW_LEVEL);
            if (0 === currentRow.get(tableConstants.ROW_LEVEL)) {
                break;
            }
        }
    }
};
