#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbHfor behave
# All rights reserved.
# http://www.contact.de/
#
from cdb import util, sqlapi, testcase, auth, CADDOK
from cdb.objects import org
from cdb.uberserver import usutil
from cdb.uberserver.management import Management
from cdb.validationkit import generateUser
from cdb.validationkit.SwitchRoles import _switch_roles
import cdbwrapc
import datetime
import os
import logging
import re

from selenium import webdriver
from selenium.common.exceptions import WebDriverException


__docformat__ = "restructuredtext en"
__revision__ = "$Id: environment.py 179775 2018-06-29 12:36:22Z khi $"

LOG = logging.getLogger(__name__)
TIMEOUT = 20
WEB_DRIVER_ROLES = {
    # Mapping: Gherkin tag <> CDB role
    # "productmanager": ["public", "cs.vptests", "Product: Manager"],
    "public": ["public"]
}


class EventListener(util.DBEventListener):
    __listener = None

    def __init__(self):
        super(EventListener, self).__init__()
        self.__events = []

    def notify(self, relation, event):
        self.__events.append(
            (event.m_event,
             relation,
             event.m_keys.items()))

    def rollback(self):
        def generateWhere(keys):
            where = ""
            for key, value in keys:
                where += "%s='%s' AND " % (key, value)
            return where[:-5]
        try:
            self.doUnregister()
            self.__events.reverse()
            for t, relation, keys in self.__events:
                if t == util.kRecordInserted:
                    sqlapi.SQLdelete("FROM %s where %s" % (relation,
                                     generateWhere(keys)))
        finally:
            self.clear()
            self.doRegister()

    def clear(self):
        self.__events = []

    @classmethod
    def getListener(cls):
        if not EventListener.__listener:
            EventListener.__listener = EventListener()
        return EventListener.__listener


def get_server_url():
    """Returns the url under which extern (and intern) users can access the portal"""
    srv = testcase.require_service("cdb.uberserver.services.apache.Apache")
    return srv.get_url(withuserandpass=False)


def ensure_running_service_daemon(context):
    """If a service daemon isn't already running, then a temporary one gets started"""
    svc = Management()
    if svc._check_if_its_up(usutil.UBERSERVER):
        context.temp_service_daemon = None
    else:
        svc.start()
        context.temp_service_daemon = svc


def setup_webdriver(context, browser="firefox"):
    try:
        if browser == "ie":
            driver = webdriver.Ie()
        elif browser == "chrome":
            driver = webdriver.Chrome()
        else:
            driver = webdriver.Firefox()
    except WebDriverException as ex:
        LOG.exception(ex)
        LOG.error("IEDriver not installed or in path? Using Firefox as fallback.\n%s" % ex)
        driver = webdriver.Firefox()

    driver.implicitly_wait(TIMEOUT)
    context.webdriver = driver
    login_webdriver(context)


def get_safe_int(possible_int):
    try:
        return int(possible_int)
    except ValueError:
        return 0


def get_platform_version():
    from cdb.comparch.packages import Package
    version = Package.ByKeys("cs.platform").version
    exp = re.compile("(?P<major>\d*).(?P<minor>\d*).(?P<sl>\d*)")

    match = exp.match(version)
    if match is not None:
        return {
            group: get_safe_int(match.group(group))
            for group in ["major", "minor", "sl"]
        }


def login_webdriver(context, username=None, password=None):
    driver = context.webdriver

    # login
    driver.get(context.server_url + "login")

    from steps import common
    driver.implicitly_wait(TIMEOUT)

    # from service level 15.1.10 there is a new login page,
    # so we need to treat it differently
    version = get_platform_version()
    if version is not None and (
        version["major"] >= 15 and
        version["minor"] >= 1 and
        version["sl"] >= 10
    ):
        lang_btn = driver.find_element_by_css_selector(
            ".cs-web-components-theme-static-language-box > .btn")
        lang_btn.click()

        language_de = driver.find_element_by_css_selector(
            ".cs-web-components-theme-static-language-box .dropdown-menu a[data-lang='de']")
        language_de.click()
    elif version is not None and (
        version["major"] >= 15 and
        version["minor"] >= 2 and
        version["sl"] >= 0
    ):
        lang_btn = driver.find_element_by_css_selector(
            ".cs-web-components-theme-static-language-box > .btn")
        lang_btn.click()

        language_de = driver.find_element_by_css_selector(
            ".cs-web-components-theme-static-language-box > .dropdown-menu a[data-lang='de']")
        language_de.click()
    else:
        accordion = driver.find_element_by_class_name("accordion-toggle")
        accordion.click()

        select = driver.find_element_by_id("language")
        language_de = select.find_element_by_css_selector("option[value=de]")
        common.waitForElementVisibility(driver, language_de)
        language_de.click()

    field = driver.find_element_by_name("username")
    field.clear()
    field.send_keys(auth.get_login() if username is None else username)
    if password is not None:
        field = driver.find_element_by_name("password")
        field.send_keys(password)

    field.submit()

    common.waitForSuccessfulLogin(driver)
    context.webdriver_logged_in = True


def logout_webdriver(context):
    driver = context.webdriver
    try:
        from steps import common
        common.waitForAjax(driver)
    except WebDriverException:
        pass

    driver.get(context.server_url + "server/__quit__")


def switch_login_webdriver(context, username=None, password=None):
    logout_webdriver(context)
    login_webdriver(context, username, password)


def terminate_temp_service_daemon(context):
    if context.temp_service_daemon:
        try:
            context.temp_service_daemon.shutdown()
        except Exception as ex:
            LOG.exception(ex)


def before_scenario(context, scenario):
    listener = EventListener.getListener()
    listener.doRegister()
    tags = set(scenario.tags + scenario.feature.tags)
    driver_roles = reduce(lambda lhs, rhs: lhs.union(rhs),
                          [WEB_DRIVER_ROLES[tag]
                           for tag in WEB_DRIVER_ROLES
                           if tag in tags], set())
    old_roles = getattr(context, "_old_roles") if hasattr(context, "_old_roles") else []
    if driver_roles and driver_roles != set(old_roles):
        context._old_roles = _switch_roles(driver_roles)
        switch_login_webdriver(context)


def after_step(context, step):
    if step.status == "failed":
        timestamp = datetime.datetime.now().toordinal()
        filename = "%s--%s--%s.png" % (context.scenario.name, step.name, timestamp)
        logdir = CADDOK.get("LOGDIR", CADDOK.TMPDIR)
        filepath = os.path.join(logdir, filename)
        LOG.info("saving screenshot to %s", filepath)
        driver = context.webdriver
        driver.get_screenshot_as_file(filepath)

        filename = "%s--%s--%s.log" % (context.scenario.name, step.name, timestamp)
        filepath = os.path.join(logdir, filename)
        LOG.info("saving browser log to %s", filepath)
        log = [
            "%(level)s %(message)s" % err
            for err in driver.get_log("browser")
        ]
        with open(filepath, "w") as f:
            f.write("\n".join(log))


def after_scenario(context, scenario):
    listener = EventListener.getListener()
    listener.rollback()
    listener.doUnregister()


def before_all(context):
    # Create a new User to use for testing and login as this one
    users = org.User.KeywordQuery(personalnummer="behave_test")
    if len(users) > 0:
        context.user = users[0]
    else:
        context.user = generateUser("behave_test")
        context.user.password = ""  # dirty workaround for E038880
    # Remove all role assigments
    org.CommonRoleSubject.KeywordQuery(subject_id="behave_test").Query("role_id != 'public'").Delete()
    # Log him in
    assert cdbwrapc.set_user(context.user.personalnummer),\
        "The User couldn't be logged in"
    # run CDB server
    ensure_running_service_daemon(context)

    # setup webdriver
    # we use ie here because we have problem using selenium 2.45.0 with
    # firefox 37.0.2 and 38.0.1
    context.server_url = get_server_url()
    # setup_webdriver(context, browser="firefox")
    setup_webdriver(context, browser="chrome")


def after_all(context):
    from steps import common
    cdbsrv_close_url = context.server_url + "server/__quit__"
    # Logout Elink Session
    context.webdriver.get(cdbsrv_close_url)
    context.webdriver.quit()

    # shutdown CDB server
    terminate_temp_service_daemon(context)

    # Delete the created user
    if hasattr(context, "user"):
        context.user.Delete()
