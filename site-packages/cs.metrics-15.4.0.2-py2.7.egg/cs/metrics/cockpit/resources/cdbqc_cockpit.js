function cdbElinkQCCockpit(appContext) {
    // Application Name
    this.appName = 'KPI Cockpit';
    // Application event namespace
    this.eventNS = '.cockpit.qc.cdbelink';
    // Fallback container css class
    this.defaultContainerClass = '.cdbqc-cockpit';
    // Fallback modal container css class
    this.defaultModalContainerClass = '.cdbqc-cockpit-modal';
    this.containerclass='';
    this.container=undefined;
    this.modal_container=undefined;
    this.dataTable=undefined;
    this.dtDropDown=undefined;
    this.keyTable=undefined;
    this.settingsInitialized=false;
    this.defaultAppId = 'cdb.elink.qc.cockpit';
    this.ajaxRootURL = cdb.elink.baseURL + 'powerscript/cs.metrics.cockpit.cockpit';
    this.started=false;
    // component:{activation_state,modal?}
    this.components = {"table":[1,0,"div.qctable"],
        "history":[1,0,"div.history_dia"],
        "historylegend":[1,0,"div.history_legend_dia"],
        "qctitle":[1,0,"div.qc_title"],
        "actions":[1,0,"div.activity_dia"],
        "tablecontrol":[1,0,"div.qc_kpi_tab_control_row"]};
}

function cdbElinkQCObjectCockpit(appContext) {
    this.appContext = appContext;
    // Application Name
    this.appName = 'KPI Cockpit';
    // Application event namespace
    this.eventNS = '.obj.cockpit.qc.cdbelink';
    this.containerclass = '.cdbqc-obj-cockpit';
    this.modal_containerclass = '.cdbqc-obj-cockpit-modal';
    this.defaultAppId = 'cdb.elink.qc.obj_cockpit';
    this.ajaxRootURL = cdb.elink.baseURL + 'powerscript/cs.metrics.cockpit.obj_cockpit';
    this.components = {"table":[1,0,"div.qctable"],
            "history":[1,0,"div.history_dia"],
            "historylegend":[1,0,"div.history_legend_dia"],
            "qctitle":[1,0,"div.qc_title"],
            "actions":[1,0,"div.activity_dia"],
            "tablecontrol":[1,0,"div.qc_kpi_tab_control_row"]};
    this.container=undefined;
    this.modal_container=undefined;
    this.dataTable=undefined;
    this.keyTable=undefined;
    this.settingsInitialized=false;
    this.started=false;
}

function cdbElinkQCProcessCockpit(appContext) {
    this.appContext = appContext;
    // Application Name
    this.appName = 'Process KPI Cockpit';
    // Application event namespace
    this.eventNS = '.prc.cockpit.qc.cdbelink';
    this.containerclass = '.cdbqc-prc-cockpit';
    this.modal_containerclass = '.cdbqc-prc-cockpit-modal';
    this.defaultAppId = 'cdb.elink.qc.prc_cockpit';
    this.ajaxRootURL = cdb.elink.baseURL + 'powerscript/cs.metrics.cockpit.prc_cockpit';
    this.components = {"table":[1,0,"div.qctable"],
            "history":[1,0,"div.history_dia"],
            "historylegend":[1,0,"div.history_legend_dia"],
            "qctitle":[1,0,"div.qc_title"],
            "actions":[1,0,"div.activity_dia"],
            "tablecontrol":[1,0,"div.qc_kpi_tab_control_row"]};
    this.container=undefined;
    this.modal_container=undefined;
    this.dataTable=undefined;
    this.keyTable=undefined;
    this.settingsInitialized=false;
    this.started=false;
}

cdbElinkQCCockpit.prototype = new cdbElinkBase();
cdbElinkQCObjectCockpit.prototype = new cdbElinkQCCockpit();
cdbElinkQCProcessCockpit.prototype = new cdbElinkQCCockpit();

cdbElinkQCCockpit.prototype.getModalComponents = function(){
    var modal_components = [];
    for(var comp_key in this.components){
        if(this.components.hasOwnProperty(comp_key) && this.components[comp_key][1]==1){
            modal_components.push(comp_key);
        }
    }
    return modal_components;
};

cdbElinkQCCockpit.prototype.isModalComponent = function(component){
    var modal_components = this.getModalComponents();
    return (modal_components.indexOf(component) != -1);
};

cdbElinkQCCockpit.prototype.getActiveComponents = function(){
    var active_components = {};
    for(var comp_key in this.components){
        if(this.components.hasOwnProperty(comp_key) && this.components[comp_key][0]==1){
            active_components[comp_key]=this.components[comp_key][1];
        }
    }
    return active_components;
};

cdbElinkQCCockpit.prototype.isComponentActive = function(component){
    return component in this.getActiveComponents();
};

cdbElinkQCCockpit.prototype.getComponentContainer = function(component){
    var active = this.isComponentActive(component);
    if(active){
        if(this.components.hasOwnProperty(component)){
            var modal = this.components[component][1]==1;
            var component_selector = this.components[component][2];
            var component_container=$(component_selector,this.getCockpitContainer(modal));
            if(component_container.length > 0){
                return component_container;
            } else {
                cdb.elink.alert('qc cockpit component container not found ('+component+')');
            }
        } else {
            cdb.elink.alert('qc cockpit component '+component+' not configured');
        }
    } else {
        return null;
    }
};

cdbElinkQCCockpit.prototype.getCockpitContainer = function(modal){
    var modal_components = this.getModalComponents();
    var modal_components_active = modal_components.length > 0;
    if (this.container === undefined || !this.container.is(this.containerclass)) {
        this.container = $(this.containerclass, this.appContext).first();
        if(this.container.length === 0){
            this.container = $(this.defaultQCContainerClass, this.container).first();
        }
    }
    if(this.modal_container === undefined || !this.modal_container.is(this.modal_containerclass)){
        this.modal_container = $(this.modal_containerclass, this.appContext).first();
        if(this.container.length === 0){
            this.modal_container = $(this.defaultModalContainerClass, this.container).first();
        }
    }
    if(this.modal_container.length===0 && modal_components_active){
        cdb.elink.alert('qc cockpit modal container is missing');
    }
    if(this.container.length===0 && !modal_components_active){
        cdb.elink.alert('qc cockpit container is missing');
    }
    if(modal){
        return this.modal_container;
    } else {
        return this.container;
    }
};

cdbElinkQCCockpit.prototype.initializeSettings = function (settings){
    if(typeof(settings)=='object'){
        var settingvalues = ["qc_cockpit_app","appID","initial_cell_focus","initial_searchfield_value",
            "initial_selected_rows","options_local_res",
            "initial_labels_red","initial_labels_green",
            "initial_labels_green","initial_labels_warning",
            "initial_aoColumnDefs_bVisibles",
            "initial_toggleHiddenColumns", "initial_no_data",
            "initial_aaSorting","initial_labels_click_to_edit",
            "state_column","kpi_column","grp_column","unit_column","target_value_column",
            "act_value_column","op_column","hidden_state_column",
            "qgrade_js_dict", "aggregated", "manual", "tt_eff", "tt_dead",
            "tt_resp", "tt_state", "tt_cost", "tt_name", "action_assignment_url",
            "action_url", "qc_green", "qc_red",
            "prc_act_val_decimals","obj_act_val_decimals","obj_aggr_val_decimals",
            "restore_columns"];
        var check=true;
        for(var entry in settingvalues){
            var tmpcheck = settings.hasOwnProperty(settingvalues[entry]);
            check = check && tmpcheck;
        }
        if(check){
            this.qc_cockpit_app = settings.qc_cockpit_app;
            if(settings.appID===''){
                this.appID=this.defaultAppId;
            } else {
                this.appID = settings.appID;
            }
            this.actions = [];
            this.tipData = [];
            this.selected_rows = {};
            this.ctrlKey = false;
            this.focus_save_req = false;
            this.initial_cell_focus = settings.initial_cell_focus;
            this.initial_searchfield_value= settings.initial_searchfield_value;
            this.initial_selected_rows= settings.initial_selected_rows;
            this.options_local_res= settings.options_local_res;
            this.initial_labels_red= settings.initial_labels_red;
            this.initial_labels_green= settings.initial_labels_green;
            this.initial_labels_warning= settings.initial_labels_warning;
            this.initial_aoColumnDefs_bVisibles= settings.initial_aoColumnDefs_bVisibles;
            this.initial_toggleHiddenColumns= settings.initial_toggleHiddenColumns;
            this.initial_no_data = settings.initial_no_data;
            this.initial_aaSorting= settings.initial_aaSorting;
            this.initial_labels_click_to_edit = settings.initial_labels_click_to_edit;
            this.restore_columns = settings.restore_columns;
            this.state_column = settings.state_column;
            this.kpi_column = settings.kpi_column;
            this.grp_column = settings.grp_column;
            this.unit_column = settings.unit_column;
            this.target_value_column = settings.target_value_column;
            this.act_value_column = settings.act_value_column;
            this.op_column = settings.op_column;
            this.hidden_state_column = settings.hidden_state_column;
            this.qgrade_js_dict = settings.qgrade_js_dict;
            this.aggregated = settings.aggregated;
            this.manual = settings.manual;
            this.tt_eff = settings.tt_eff;
            this.tt_dead = settings.tt_dead;
            this.tt_resp = settings.tt_resp;
            this.tt_state = settings.tt_state;
            this.tt_cost = settings.tt_cost;
            this.tt_name = settings.tt_name;
            this.action_create_url_prefix = settings.action_assignment_url;
            this.action_show_url_prefix = settings.action_url;
            this.qc_green = settings.qc_green;
            this.qc_red = settings.qc_red;
            this.obj_aggr_val_decimals = settings.obj_aggr_val_decimals;
            this.obj_act_val_decimals = settings.obj_act_val_decimals;
            this.prc_act_val_decimals = settings.prc_act_val_decimals;
            switch(this.qc_cockpit_app){
            case "qc_object":
                this.act_val_decimals = this.obj_act_val_decimals;
                break;
            case "qc_process":
                this.act_val_decimals = this.prc_act_val_decimals;
                break;
                default:
                    cdb.elink.alert('unkown cockpit app');
            }
            this.settingsInitialized = true;
            this.action_optimal_highlighted = false;
            this.action_optimal_generated = false;
            this.action_optimal_qcid = undefined;
            this.event_handlers_registered = false;
            this.context_object_kpi_id = undefined;
        } else {
            cdb.elink.alert("failed to load qc cockpit");
        }
    } else {
        cdb.elink.alert("failed to load qc cockpit: no settings");

    }
};

cdbElinkQCCockpit.prototype.findSettings = function(){
    if(qc_cockpit_settings!==undefined && typeof(qc_cockpit_settings)=='object'){
        if(this.appContext!==undefined && qc_cockpit_settings.hasOwnProperty(this.appContext)){
            return qc_cockpit_settings[this.appContext];
        } else {
            if((this.appContext===undefined || !$(this.appContext).is(this.containerclass)) && qc_cockpit_settings.hasOwnProperty('div'+this.containerclass)){
                return qc_cockpit_settings['div'+this.containerclass];
            } else {
                cdb.elink.alert('failed to load qc cockpit: no settings');
            }
        }
    }
};

cdbElinkQCCockpit.prototype.start = function (){
    var tmpStarted = this.started;
    var qcsettings = this.findSettings();
    cdb.elink.setPageRefresh(false);
    if(this.settingsInitialized){
        this.started=true;
    } else {
        this.initializeSettings(qcsettings);
        if(!this.settingsInitialized){
            cdb.elink.alert("failed to load qc cockpit: no valid settings");
        } else {
            this.started=true;
        }
    }
    if(this.started===true && tmpStarted === false){
        this.cockpit_load(true);
    }
};

cdbElinkQCCockpit.prototype.startIfNotStarted = function (){
    if(!this.started){
        this.start();
    }
};

cdbElinkQCCockpit.prototype.setContextObjectKPI = function(cdb_object_id){
    if(cdb_object_id !== undefined){
        this.context_object_kpi_id = cdb_object_id;
    }
};

cdbElinkQCCockpit.prototype.getFirstQCID = function(){
    var tabcontainer = this.getComponentContainer('table');
    if(tabcontainer){
        return $('table.qctable tbody tr',tabcontainer).first().data('elink-cdb_object_id');
    }
};

cdbElinkQCCockpit.prototype.getFocus = function(startup){
    var cellfocus;
    var rowid;
    var qcid;
    var tabcontainer = this.getComponentContainer('table');
    if(tabcontainer){
        if((!startup || this.initial_cell_focus[1] == -1 ) && this.global_qcid !== undefined){
            cellfocus = this.findReadableCellFocusByQCID(this.global_qcid);
        } else {
            if(this.initial_cell_focus[1] == -1){
                qcid = this.getFirstQCID();
                rowid = this.getCurrentRowIdByQCID($('table.qctable tbody tr',tabcontainer).first().data('elink-cdb_object_id'));
                if(qcid !== undefined && rowid !== undefined){
                    this.initKeyTable([this.findReadableCellFocusByQCID(qcid),rowid]);
                } else {
                    this.initKeyTable([0,0]);
                }
            }
        }
    }
    if(cellfocus === undefined){
        cellfocus = this.initial_cell_focus;
    }
    return cellfocus;
};

cdbElinkQCCockpit.prototype.cockpit_load = function (startup) {
    this.setupDataTable();
    if(this.getComponentContainer('table') && this.getComponentContainer('tablecontrol')){
        this.dtDropDown = new cdbElinkColumnDropDown(this.getComponentContainer('tablecontrol'));
        this.dtDropDown.setDataTable(this.dataTable);
        this.dtDropDown.reset_text = this.restore_columns;
        this.dtDropDown.fnColumnClickPostCallbacks.push(this.fnShowHide);
        this.dtDropDown.fnDropDownOpenCallbacks.push(function(p1,p2,p3){
            if(p3.keyTable){
                p3.keyTable.block=true;
            }
        });
        this.dtDropDown.fnDropDownCloseCallbacks.push(function(p1,p2,p3){
            if(p3.keyTable){
                p3.keyTable.block=false;
            }
        });
        this.dtDropDown.global_params = this;
        this.dtDropDown.context =this.getComponentContainer('tablecontrol');
        this.dtDropDown.start();
    }
    this.unregisterEventHandlers();
    this.registerEventHandlers();
    this.fnFilterSearch();
    this.preSelectUserEntries();
    this.setupEditFields();
    this.initKeyTable(this.getFocus(startup));
};

cdbElinkQCCockpit.prototype.setupDataTable = function(){
    var tabcontainer = this.getComponentContainer('table');
    if(tabcontainer){
        this.setContainerVisible(tabcontainer);
        var aoColumnDefs = [
                            {
                                "bSortable": false,
                                "aTargets": [ this.state_column ]
                            },
                            {
                                "bSortable": false,
                                "aTargets": [ this.op_column ]
                            },
                            {
                                "sType": "elink-float",
                                "aTargets": [ this.act_value_column ]
                            },
                            {
                                "sSortDataType" : "elink-float",
                                "aTargets": [ this.act_value_column ]
                            }
                        ];
        var invisibleDefs = this.initial_aoColumnDefs_bVisibles;

        for(var i=0;i<invisibleDefs.length;i++){
            aoColumnDefs.push(invisibleDefs[i]);
        }
        this.dataTable = $('table.qctable',tabcontainer).dataTable( {
            "aaSorting": this.initial_aaSorting,
            "aoColumnDefs": aoColumnDefs ,
            "bPaginate": false,
            "bInfo":false,
            "bAutoWidth":false,
            "oColVis": {
                "aiExclude": [ this.hidden_state_column ],
                "buttonText": this.initial_toggleHiddenColumns,
                "bRestore": true
            },
            "oLanguage": {
                "sSearch": "",
                "sZeroRecords": this.initial_no_data
            },
            "oSearch":
            {
                "sSearch": ""
            },
            "bSortCellsTop": true
        });
    }
};

cdbElinkQCCockpit.prototype.initKeyTable = function (cell_focus) {
    var that = this;
    var tabcontainer = this.getComponentContainer('table');
    if(tabcontainer && !that.keyTable){
        if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
            that.keyTable = new KeyTable({
                "table": $('table.qctable',tabcontainer)[0],
                "datatable": that.dataTable,
                "focus": cell_focus,
                "initScroll": false
            });
            that.keyTable.event.esc( null, null, function () {} );
            $("table.qctable tbody td.target",tabcontainer).trigger("reset");
            if(that.qc_cockpit_app=='qc_object'){
                $("table.qctable tbody td.val",tabcontainer).trigger("reset");
            }
            // Navigation with arrow keys
            $('table.qctable tbody td',tabcontainer).each(function() {
                that.keyTable.event.focus(this, function(nCell){
                    if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
                        if (that.focus_save_req){
                            that.saveUserSettings();
                            that.focus_save_req=false;
                        }
                        if (($(nCell).hasClass('target')) || ($(nCell).hasClass('val')) && (!that.editMode)) {
                            that.getExpr(nCell.innerHTML);
                        }
                        if((that.ctrlKey === false) && (that.global_qcid != $(nCell.parentNode).data("elink-cdb_object_id"))) {
                            // go into single mode
                            that.multiMode=false;
                            $(that.dataTable.fnSettings().aoData).each(function(){
                                $(this.nTr).removeClass('row_selected');
                                delete that.selected_rows[$(this.nTr).data("elink-cdb_object_id")];
                            });
                            that.tmp_global_qcid = that.global_qcid;
                            $(nCell.parentNode).addClass('row_selected');
                            that.global_qcid = $(nCell.parentNode).data("elink-cdb_object_id");
                            that.selected_rows[that.global_qcid] = true;
                            var render_id = [];
                            render_id.push(that.global_qcid);
                            that.action_optimal_highlighted = false;
                            that.actionMixToggle();
                            that.saveUserSettings();
                            that.generateHistory(render_id);
                            that.generateActions(render_id);
                        }
                    }
                });
            });

            $('table.qctable tbody td.target',tabcontainer).each(function() {
                that.keyTable.event.action(this, function (nCell) {
                    if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
                        // Block KeyTable from performing any events while jEditable is in edit mode
                        that.keyTable.block = true;
                        setTimeout( function () { $(nCell).trigger('keyedit'); }, 0 );
                    }
                });
            });

            $('table.qctable tbody td.target',tabcontainer).editable(function(value) {
                if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
                    that.keyTable.block = false;
                    return that.editTarget(value, this);
                }
            },{
                "event":"edit",
                "type":"float",
                "decimals":that.act_val_decimals,
                "validation":false,
                "cssclass":"qcinputfield",
                "placeholder": that.initial_labels_click_to_edit,
                "onreset": function(){
                    if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
                        setTimeout( function () { that.keyTable.block = false; }, 0);
                        that.clearEditMode();
                    }
                }
            });
            switch(that.qc_cockpit_app){
                case "qc_object":
                    $('table.qctable tbody tr[data-elink-cdbqc-obj-cockpit-uneditable=0] td.val',tabcontainer).editable(function(value) {
                        that.keyTable.block = false;
                        return that.editValue(value, this);
                    },{
                        "event":"edit",
                        "type":"float",
                        "decimals":that.act_val_decimals,
                        "cssclass":"qcinputfield",
                        "placeholder": that.initial_labels_click_to_edit,
                        "onreset": function(){
                            if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
                                setTimeout( function () { that.keyTable.block = false; }, 0);
                                that.clearEditMode();
                            }
                        }
                    });
                    $('table.qctable tbody td.val',tabcontainer).each(function() {
                        that.keyTable.event.action(this, function (nCell) {
                            if ((that.dataTable.fnSettings().fnRecordsDisplay() > 0) && that.isValueEditable(nCell) ){
                                // Block KeyTable from performing any events while jEditable is in edit mode
                                that.keyTable.block = true;
                                setTimeout( function () { $(nCell).trigger('keyedit'); }, 0 );
                            }
                        });
                    });
                    break;
                case "prc_object":
                    break;
            }
        }
    }
};

cdbElinkQCCockpit.prototype.actionMixToggle = function(){
    var that = this;
    var actioncontainer = this.getComponentContainer('actions');
    var icon_obj;
    if(actioncontainer){
        icon_obj = $('a.toggleOptimalActions',actioncontainer).children('i');
        if(that.action_optimal_highlighted){
            icon_obj.removeClass('icon-star-empty');
            icon_obj.addClass('icon-star');
        } else {
            icon_obj.removeClass('icon-star');
            icon_obj.addClass('icon-star-empty');
        }
    }
};

cdbElinkQCCockpit.prototype.registerEventHandlers = function(){
    var that = this;
    var tablecontainer = this.getComponentContainer('table');
    var tablecontrolcontainer = this.getComponentContainer('tablecontrol');
    var actioncontainer = this.getComponentContainer('actions');
    var f2 = 113;
    if(!this.event_handlers_registered){
        if(actioncontainer){
            $('a.toggleOptimalActions',actioncontainer).on('click'+this.eventNS+this.appID,function(e){
                if (that.global_qcid === undefined){
                    if (that.action_optimal_highlighted && that.context_object_kpi_id == that.action_optimal_qcid) {
                        that.unhighlightOptimalActions();
                    } else {
                        that.showOptimalActions([that.context_object_kpi_id]);
                    }
                } else {
                    if (that.action_optimal_highlighted && that.global_qcid == that.action_optimal_qcid) {
                        that.unhighlightOptimalActions();
                    } else {
                        that.showOptimalActions([that.global_qcid]);
                    }
                }
                that.actionMixToggle();
            });
        }
        if(tablecontainer){
        // on window due to keytables eventkeyhandler which is bound to document
        $(window).on("keydown"+this.eventNS+this.appID,function(e){
            if(e.ctrlKey){
                that.ctrlKey=true;
            }
            if(e.keyCode == f2){
                that.editNow();
            }
        });
        $(window).on("keyup"+this.eventNS+this.appID,function(e){
            if(e.ctrlKey){

            } else {
                that.ctrlKey=false;
            }
        });
            if(tablecontrolcontainer){
                this.setContainerVisible(tablecontrolcontainer);
                // add click handler to each header td to observe sorting

                $('input.filter_search',tablecontrolcontainer).on('keyup'+this.eventNS+this.appID,function (e){
                    that.fnFilterSearch();
                });
                $('input.filter_search',tablecontrolcontainer).on('blur'+this.eventNS+this.appID,function (e){
                    that.saveUserSettings();
                });
            }

            that.dataTable.fnSortListener( $('table.qctable thead td.state',tablecontainer)[0], that.hidden_state_column );
            //Navigation by click (mouse-selection)
            $('table.qctable tbody tr',tablecontainer).on("click"+this.eventNS+this.appID,function (e) {
                if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
                    that.keyTable.block=false;
                    e = e || window.event;
                    var render_elements = [];
                    var tmpMultiMode = that.multiMode;
                    that.global_qcid = $(this).data("elink-cdb_object_id");
                    var tmpRow = $(this).hasClass('row_selected');
                    if (e.ctrlKey) {
                        that.ctrlKey = true;
                    } else {
                        that.ctrlKey = false;
                        for (var i=0; i<that.dataTable.fnGetNodes().length; i++) {
                            $(that.dataTable.fnGetNodes(i)).removeClass('row_selected');
                        }
                        for(var key in that.selected_rows) {
                            delete that.selected_rows[key];
                        }
                    }
                    // single select case
                    if ($(this).hasClass('row_selected')) {
                        if((that.selected_rows_length() > 1) || (that.ctrlKey === false)) {
                        $(this).removeClass('row_selected');
                        delete that.selected_rows[that.global_qcid];
                        }
                    } else {
                        $(this).addClass('row_selected');
                        that.selected_rows[that.global_qcid]=true;
                    }
                    // multi select case

                    for (var qcid in that.selected_rows) {
                        render_elements.push(qcid);
                    }

                    if ((that.ctrlKey === true) && ((that.tmp_global_qcid != that.global_qcid) || (that.selected_rows_length() > 1))) {
                        that.multiMode = true;
                    } else {
                        that.multiMode = false;
                    }
                    var rowChange = false === (tmpRow === $(this).hasClass('row_selected')); // only if changed
                    if((that.tmp_global_qcid != that.global_qcid) || (that.multiMode != tmpMultiMode) || rowChange){
                        if(that.tmp_global_qcid != that.global_qcid){
                            that.focus_save_req = true;
                        } else {
                            that.saveUserSettings();
                        }
                        that.action_optimal_highlighted=false;
                        that.actionMixToggle();
                        that.generateHistory(render_elements);
                        that.generateActions(render_elements);
                    }
                    that.tmp_global_qcid = that.global_qcid;
                }
            });

            $("table.qctable thead td",tablecontainer).on("click"+this.eventNS+this.appID,function() {
                that.saveUserSettings();
            });

            $("table.qctable tbody td.target",tablecontainer).on('mouseedit'+this.eventNS+this.appID,function (e){
                if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
                    if(!that.editMode){
                        that.setMouseEdit($(this)[0].innerHTML);
                        $($(this).find('input')).focus();
                        $(this).trigger('edit');
                        that.checkExpression($(this));
                    }
                }
            });

            $("table.qctable tbody td.target",tablecontainer).on('click'+this.eventNS+this.appID,function (e){
                if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
                    var tr_obj = $($(this).closest('tr'));
                    var tglobal_qcid = that.global_qcid;
                    var gqcid = tr_obj.data('elink-cdb_object_id');
                    var tmp_obj = $("table.qctable tbody tr[data-elink-cdb_object_id="+that.tmp_global_qcid+"]",tablecontainer);
                    if(tglobal_qcid != gqcid){
                        if(that.qc_cockpit_app == 'qc_object'){
                            tmp_obj.children('td.val').trigger('reset');
                        }
                        tmp_obj.children('td.target').trigger('reset');
                    }
                    $(this).trigger('mouseedit');
                    e.stopPropagation();
                }
            });

            $("table.qctable tbody td.target",tablecontainer).on('keyedit'+this.eventNS+this.appID,function(e){
                if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
                    if(!that.editMode){
                        that.editMode=true;
                        $(this).trigger('edit');
                        that.checkExpression(this);
                    }
                }
            });

            $('table.qctable tbody td.ops a.commentbutton',tablecontainer).on('click'+this.eventNS+this.appID,function(e){
                that.loadActivities(this);
                e.stopPropagation();
            });
            $('table.qctable tbody td.ops a.computebutton.enabled',tablecontainer).on('click'+this.eventNS+this.appID,function(e){
                var td_elem = $(this).closest('td');
                that.computeQCID(td_elem);
                e.stopPropagation();
                e.preventDefault();
            });

            $('table.qctable tbody td.ops a.computebutton.disabled',tablecontainer).on('click'+this.eventNS+this.appID,function(e){
                e.stopPropagation();
            });

            // specific event handlers per qc_cockpit_app
            switch(that.qc_cockpit_app){
                case "qc_object":
                    $("table.qctable tbody td.val",tablecontainer).on('click'+this.eventNS+this.appID,function (e){
                        if ((that.dataTable.fnSettings().fnRecordsDisplay() > 0) && that.isValueEditable(this) ){
                            var tr_obj = $($(this).closest('tr',tablecontainer));
                            var tglobal_qcid = that.global_qcid;
                            var gqcid = tr_obj.data('elink-cdb_object_id');
                            var tmp_obj = $("table.qctable tbody tr[data-elink-cdb_object_id="+that.tmp_global_qcid+"]",tablecontainer);
                            if(tglobal_qcid != gqcid){
                                tmp_obj.children('td.val').trigger('reset');
                                tmp_obj.children('td.target').trigger('reset');
                            }
                            $(this).trigger('mouseedit');
                            e.stopPropagation();
                        }
                    });
                    $("table.qctable tbody td.val",tablecontainer).on('keyedit'+this.eventNS+this.appID,function(e){
                        if ((that.dataTable.fnSettings().fnRecordsDisplay() > 0) && that.isValueEditable(this) ){
                            if(!that.editMode){
                                that.editMode=true;
                                $(this).trigger('edit');
                            }
                        }
                    });

                    $("table.qctable tbody td.val",tablecontainer).on('mouseedit'+this.eventNS+this.appID,function (e){
                        if ((that.dataTable.fnSettings().fnRecordsDisplay() > 0) && that.isValueEditable(this) ){
                            if(!that.editMode){
                                that.setMouseEdit($(this)[0].innerHTML);
                                $($(this).find('input')).focus();
                                $(this).trigger('edit');
                                that.checkExpression(this);
                            }
                        }
                    });
                    $('table.qctable tbody td.ops a.applyaggrbutton.disabled',tablecontainer).on('click'+this.eventNS+this.appID,function(e){
                        e.stopPropagation();
                    });
                    $('table.qctable tbody td.ops a.applyaggrbutton.enabled',tablecontainer).on('click'+this.eventNS+this.appID,function(e){
                        that.applyAggrValue(this);
                        e.stopPropagation();
                    });
                    break;
                case "qc_process":
                    break;
                default:
                    cdb.elink.alert("registerEventHandlers: failed to register event handlers - unkown qc_cockpit_app");
            }
        }
        this.event_handlers_registered = true;
    }
};

cdbElinkQCCockpit.prototype.unregisterEventHandlers = function(){
    var that = this;
    var tablecontainer = this.getComponentContainer('table');
    var tablecontrolcontainer = this.getComponentContainer('tablecontrol');
    var actioncontainer = this.getComponentContainer('actions');
    if(this.event_handlers_registered){
        if(tablecontainer){
            $(window).off(this.eventNS+this.appID);
            if(actioncontainer){
                $('a.toggleOptimalActions').off(this.eventNS+this.appID);
            }

            if(tablecontrolcontainer){
                // add click handler to each header td to observe sorting
                $('form.qcdropdownform li.columnswitch',tablecontrolcontainer).off(this.eventNS+this.appID);
                $('input.filter_search',tablecontrolcontainer).off(this.eventNS+this.appID);
                $('input.filter_search',tablecontrolcontainer).off(this.eventNS+this.appID);
            }

            //Navigation by click (mouse-selection)
            $('table.qctable tbody tr',tablecontainer).off(this.eventNS+this.appID);
            //needed for keytable
            $('table.qctable',tablecontainer).off("click");
            $("table.qctable thead td",tablecontainer).off(this.eventNS+this.appID);
            $("table.qctable thead td.state",tablecontainer).off('click');
            $("table.qctable thead td.state",tablecontainer).off('keypress');
            $("table.qctable thead td.state",tablecontainer).off('selectstart');
            $("table.qctable tbody td.target",tablecontainer).off(this.eventNS+this.appID);
            $("table.qctable tbody td.target",tablecontainer).off('edit');
            $('table.qctable tbody td.ops a.commentbutton',tablecontainer).off(this.eventNS+this.appID);
            $('table.qctable tbody td.ops a.computebutton.enabled',tablecontainer).off(this.eventNS+this.appID);
            $('table.qctable tbody td.ops a.computebutton.disabled',tablecontainer).off(this.eventNS+this.appID);
            // specific event handlers per qc_cockpit_app
            switch(that.qc_cockpit_app){
                case "qc_object":
                    $("table.qctable tbody td.val",tablecontainer).off(this.eventNS+this.appID);
                    $("table.qctable tbody td.val",tablecontainer).off('edit');
                    $('table.qctable tbody td.ops a.applyaggrbutton.disabled',tablecontainer).off('click'+this.eventNS+this.appID);
                    $('table.qctable tbody td.ops a.applyaggrbutton.enabled',tablecontainer).off('click'+this.eventNS+this.appID);
                    break;
                case "qc_process":
                    break;
                default:
                    cdb.elink.alert("registerEventHandlers: failed to register event handlers - unkown qc_cockpit_app");
            }
        }
        this.event_handlers_registered = false;
    }
};

cdbElinkQCCockpit.prototype.destroy = function(){
    var history_container = this.getComponentContainer('history');
    var action_container = this.getComponentContainer('actions');
    var table_container = this.getComponentContainer('table');
    var that=this;
    if(that.keyTable){
        that.destroyKeyTable();
    }
    that.unregisterEventHandlers();
    if(that.dataTable){
        that.dataTable.fnDestroy();
        that.dataTable=undefined;
    }
    if(history_container){
        $("div.history_content_pan",history_container).off("plotunselected");
        $("div.history_content",history_container).off("plothover");
        $("div.history_content",history_container).off("plotselected");
        $("div.history_content_pan",history_container).off("plotselected");
        $("div.history_content",history_container).off("resize");
        $("div.history_content_pan",history_container).off("resize");
    }
    if(action_container){
        $("div.activity_content",action_container).off("plotclick");
        $("div.activity_content",action_container).off("plothover");
        $("div.activity_content",action_container).off("resize");
    }
    for(var key in that.components){
        that.setContainerHidden(that.getComponentContainer(key));
    }
    that.started=false;
    that.settingsInitialized=false;
    that.global_qcid=undefined;
    that.global_edit_expression=undefined;
    if(table_container){
        $('table.qctable tbody td.target',table_container).each(function(){
            if($(this).text()===that.initial_labels_click_to_edit){
                $(this).text('');
            }
        });
    }
};

cdbElinkQCCockpit.prototype.reload=function(){
    this.destroy();
    this.start(false);
};

cdbElinkQCCockpit.prototype.fnShowHide = function( iCol, addData ){
    if(addData === undefined){
        addData = this;
    }
    var tablecontainer = addData.getComponentContainer('table');
    var tablecontrolcontainer = addData.getComponentContainer('tablecontrol');
    if(tablecontainer && tablecontrolcontainer){
        addData.unregisterEventHandlers();
        addData.registerEventHandlers();
        addData.resetKeyTable();
        if(addData.dtDropDown.dropdown_open){
            if(addData.keyTable){
                addData.keyTable.block=true;
            }
        } else {
            if(addData.keyTable){
                addData.keyTable.block=false;
            }
        }
        addData.saveUserSettings();
    }
};

/* Handle value of search field */
cdbElinkQCCockpit.prototype.fnFilterSearch = function() {
    var tablecontrol = this.getComponentContainer('tablecontrol');
    var tablecontainer = this.getComponentContainer('table');
    if(tablecontrol && tablecontainer){
        var searchfield_value = $("input.filter_search",tablecontrol).attr("value");
        if (searchfield_value != this.initial_searchfield_value) {
            this.dataTable.fnFilter(searchfield_value);
        }
    }
};

/* Select first entry in table on load including graphics */
cdbElinkQCCockpit.prototype.preSelectUserEntries = function() {
    var user_selected_rows = this.initial_selected_rows;
    var tablecontainer = this.getComponentContainer('table');
    var qc_id = [];
    var tr;
    var i;
    var rowid;
    var fqcid;
    if(tablecontainer){
        for(i=0;i<user_selected_rows.length;i++){
            if(user_selected_rows[i] == -1){
                fqcid = this.getFirstQCID();
                if(fqcid !== undefined){
                    tr = $('table.qctable tbody tr[data-elink-cdb_object_id='+fqcid+']',tablecontainer);
                    if(tr !== undefined){
                        this.global_qcid = fqcid;
                        qc_id.push(this.global_qcid);
                        $(tr).addClass('row_selected');
                        this.selected_rows[this.global_qcid]=true;
                    }
                }
            } else {
                tr = this.dataTable.fnGetNodes(user_selected_rows[i]);
                if(tr){
                    this.global_qcid = $(tr).data("elink-cdb_object_id");
                    qc_id.push(this.global_qcid);
                    $(tr).addClass('row_selected');
                    this.selected_rows[this.global_qcid]=true;
                }
            }
        }
        if(qc_id.length > 0){
            this.generateHistory(qc_id);
            this.generateActions(qc_id);
        }
    }
};

cdbElinkQCCockpit.prototype.setupEditFields = function() {
    var that = this;
    var tablecontainer = this.getComponentContainer('table');
    if(tablecontainer){
        $('table.qctable tbody td.target',tablecontainer).each(function() {
            that.global_edit_expression = this.innerHTML;
            $(this).addClass("qceditable");
        });
        switch(that.qc_cockpit_app) {
            case "qc_object":
                $('table.qctable tbody td.val',tablecontainer).each(function() {
                    if ((that.dataTable.fnSettings().fnRecordsDisplay() > 0) && that.isValueEditable(this) ){
                        that.global_edit_expression = this.innerHTML;
                        $(this).addClass("qceditable");
                    }
                });
                break;
            case "qc_process":
                break;
        }
    }
};

/* Save usersettings */
cdbElinkQCCockpit.prototype.saveUserSettings = function(){
    var that=this;
    var tablecontrolcontainer = that.getComponentContainer('tablecontrol');
    var tablecontainer = that.getComponentContainer('table');
    var searchquery;
    var aaSorting;
    var sortingCol;
    var sortingDir;
    var visibleCols = [];
    var user_selected_rows = [];
    var tr_obj;
    var qcid;
    var pos;
    if(tablecontrolcontainer){
        searchquery = $("input.filter_search",tablecontrolcontainer).attr("value");
    } else {
        searchquery="";
    }
    if(tablecontainer){
        aaSorting = that.dataTable.fnSettings().aaSorting;
        for(var i=0;i<that.dataTable.fnSettings().aoColumns.length;i++){
            if(that.dataTable.fnSettings().aoColumns[i].bVisible){
                visibleCols.push(i);
            }
        }
        if (that.dataTable.fnSettings().fnRecordsDisplay() > 0){
            for(qcid in that.selected_rows){
                if (qcid != "undefined"){
                    tr_obj = $('table.qctable tbody tr[data-elink-cdb_object_id='+qcid+']',tablecontainer);
                    if (tr_obj.length == 1) {
                        pos = that.dataTable.fnGetPosition(tr_obj[0]);
                        user_selected_rows.push(pos);
                    }
                }
            }
        }
    }
    if (user_selected_rows.length===0){
        user_selected_rows="";
    }
    if (visibleCols.length===0){
        visibleCols="";
    }
    if (aaSorting!==undefined) {
        sortingCol = aaSorting[0][0];
        sortingDir = aaSorting[0][1];
    } else {
        sortingCol = that.hidden_state_column;
        sortingDir = "desc";
    }
    var user_settings = {
            "searchquery":searchquery,
            "visibleCols":visibleCols,
            "sortingCol": sortingCol,
            "sortingDir": sortingDir,
            "selectedRows" : user_selected_rows,
            "cellfocus": this.getCurrentKeyTablePosition()
    };
    $.ajax({
        url: that.ajaxRootURL + "/set_user_settings",
        dataType: "json",
        type: "POST",
        async: false,
        traditional: true,
        data: user_settings,
        success: function (result) {
            if(result.success == 1){
            } else {
                cdb.elink.alertCDBMessage(result.message);
            }
        }
    });
};

/* keys.fnGetCurrentPosition fix for sorting */
cdbElinkQCCockpit.prototype.getCurrentKeyTablePosition = function(){
    var rowid;
    var keypos;
    var cellfocus;
    if((this.keyTable !== undefined) && (this.global_qcid !== undefined)){
        rowid = this.getCurrentRowIdByQCID(this.global_qcid);
        keypos = this.keyTable.fnGetCurrentPosition();
        if((rowid !== undefined) && (keypos!==undefined)){
            return [keypos[0],rowid];
        }
    } else {
        if(this.global_qcid !== undefined){
            cellfocus = this.findReadableCellFocusByQCID(this.global_qcid);
            if(cellfocus !== undefined){
                return cellfocus;
            }
        }
    }
    return [1,-1];
};

/* Save target expression in a global variable, because input-field doesn't contain targetvalue */
cdbElinkQCCockpit.prototype.getExpr = function(exp) {
    this.global_edit_expression = exp;
};

cdbElinkQCCockpit.prototype.generateGraphs = function(elems,qc_modal_title){
    this.generateHistory(elems,qc_modal_title);
    this.generateActions(elems,qc_modal_title);
};

/* Generate data to plot history graphic
 * @param elems:
 *      array of selected entries (qc ids)
 */
cdbElinkQCCockpit.prototype.generateHistory = function(elems, qc_modal_title) {
    this.startIfNotStarted();
    var that = this;
    var historycontainer = this.getComponentContainer('history');
    var historylegendcontainer = this.getComponentContainer('historylegend');
    var qctitlecontainer = this.getComponentContainer('qctitle');
    var data_success = false;
    if(qc_modal_title !== undefined){
        var qc_modal_title_container = $('div.modal-header h3.qc_modal_title',that.getCockpitContainer(true));
        if(qc_modal_title_container){
            qc_modal_title_container.text(qc_modal_title);
        }
    }

    if(historycontainer && historylegendcontainer){
        if (elems.length>=1) {
            that.setContainerVisible(historycontainer);
            elems.push("dummy");
            var senddata = ({
                qc_ids : elems,
                qc_cockpit_app : that.qc_cockpit_app
            });
            var label;
            $.ajax({
                url: that.ajaxRootURL + "/gethistorydata",
                dataType: "json",
                type: "POST",
                async: false,
                traditional: true,
                data: senddata,
                success: function (data) {
                    if (data.success == 1) {
                        elems.pop();
                        that.plot_history_data(elems, data);
                        if((elems[0] in data) && ('qcd_name' in data[elems[0]])){
                            if ('qcd_unit_name' in data[elems[0]]) {
                                label=data[elems[0]].qcd_name+" [ "+data[elems[0]].qcd_unit_name+" ]";
                            } else {
                                label=data[elems[0]].qcd_name;
                            }
                        }
                        data_success=true;
                    } else {
                        cdb.elink.alertCDBMessage(data.message);
                    }
                }
            });
            if (elems.length==1){
                that.setContainerHidden(historylegendcontainer);
                that.setContainerVisible($("h3.qc_title",qctitlecontainer));
                $("h3.qc_title",qctitlecontainer).text(label);
            } else {
                that.setContainerVisible(historylegendcontainer);
                that.setContainerHidden($("h3.qc_title",qctitlecontainer));
            }
            if(that.isModalComponent('history') && data_success){
                that.setModalContainerVisible();
            }
        }
        if(!data_success){
            that.setContainerHidden($("div.history_dia_container"),historycontainer);
            that.setContainerHidden(historylegendcontainer);
        }
    }
};

cdbElinkQCCockpit.prototype.toggleContainerVisibility = function(obj,mode){
    if(obj){
        if(mode && mode == 'hidden'){
            this.setContainerHidden(obj);
        } else if(mode && mode == 'visible'){
            this.setContainerVisible(obj);
        } else if(obj.hasClass('hidden')){
            this.setContainerVisible(obj);
        } else if(obj.hasClass('visible')){
            this.setContainerHidden(obj);
        }
    }
};

cdbElinkQCCockpit.prototype.setModalContainerVisible = function(){
    var that=this;
    var modal_container = that.getCockpitContainer(true);
    var modal_container_body = modal_container.children('modal-body');
    var initial_modal_class = 'kpi_modal';
    var initial_modal_bodyclass = 'kpi_modal_body';
    var singlemode = '_single_graph';
    var single;
    var modal_class;
    var modal_bodyclass;
    if(!that.isModalComponent('table') && !(that.isModalComponent('actions') && that.isModalComponent('history'))){
        modal_class = initial_modal_class+singlemode;
        modal_bodyclass = initial_modal_bodyclass+singlemode;
        single=true;
    } else {
        modal_class = initial_modal_class;
        modal_bodyclass = initial_modal_bodyclass;
        single=false;
    }
    var modal_container_invisible = modal_container.css('display')=='none';
    if(modal_container_invisible){
        // reset span6 classes
        $('div[data-elink-spanclass=span6]').each(function(){
            $(this).removeClass('span6');
            $(this).addClass('span6');
        });
        // give single graph the full space of modal dialog
        if(single){
            modal_container.find('div.visible').removeClass('span6').addClass('span12');
        }
        modal_container.removeClass(initial_modal_class);
        modal_container.removeClass(initial_modal_class+singlemode);
        modal_container.addClass(modal_class);
        modal_container_body.removeClass(initial_modal_bodyclass);
        modal_container_body.removeClass(initial_modal_bodyclass+singlemode);
        modal_container_body.addClass(modal_bodyclass);
        modal_container.modal();
    }
};

cdbElinkQCCockpit.prototype.setContainerVisible = function(obj){
    if(obj){
        obj.removeClass('hide');
        obj.addClass('visible');
    }
};
cdbElinkQCCockpit.prototype.setContainerHidden = function(obj){
    if(obj){
        obj.removeClass('visible');
        obj.addClass('hide');
    }
};

/* Generate data to plot action graphic
 * @param elems:
 *      array of selected entries (qc ids)
 */
cdbElinkQCCockpit.prototype.generateActions = function(elems, qc_modal_title, optimalmix) {
    this.startIfNotStarted();
    var that = this;
    var actioncontainer = this.getComponentContainer('actions');
    var historylegendcontainer = this.getComponentContainer('historylegend');
    var qctitlecontainer = this.getComponentContainer('qctitle');
    var act_val;
    var target_val;
    var label;
    var data_success = false;
    var op_type;
    if(qc_modal_title !== undefined){
        var qc_modal_title_container = $('div.modal-header h3.qc_modal_title', that.getCockpitContainer(true));
        if(qc_modal_title_container){
            qc_modal_title_container.text(qc_modal_title);
        }
    }
    if(actioncontainer){
        if (elems.length==1) {
            if(historylegendcontainer){
                that.setContainerHidden(historylegendcontainer);
            }
            that.setContainerVisible(actioncontainer);
            var position = that.getRowIdByQCID(elems[0]);
            if (position === undefined) {
                act_val = "";
                target_val = "";
            } else {
                act_val = that.dataTable.fnGetData(position, that.act_value_column);
                if (act_val.length === 0) {
                    act_val = "";
                } else {
                    act_val = cdbFloatPlugin.strToFloat(act_val);
                }

                target_val = that.dataTable.fnGetData(position, that.target_value_column);
                if ((target_val.length === 0) || (target_val === "undefined")) {
                    target_val = "";
                }
            }
            var qc_id = elems[0];
            if (qc_id === undefined) {
                qc_id = "";
            }

            if(optimalmix !== undefined){
                op_type = '';
            } else {
                op_type = 'Zeige alle**';
            }

            $.ajax({
                url: that.ajaxRootURL + "/getActionData",
                dataType: "json",
                type: "POST",
                async: false,
                data: {
                    qc_id: qc_id,
                    op_type: op_type,
                    act_value: act_val,
                    target_value: target_val.replace(/&gt;/g, ">").replace(/&lt;/g, "<")
                },
                success: function (data){
                    if (data.success == 1) {
                        if('qcd_unit_name' in data && data.qcd_unit_name!=''){
                            label=data.qcd_name+" [ "+data.qcd_unit_name+" ]";
                        } else {
                            label=data.qcd_name;
                        }
                        if(data.optimal_mix !== undefined){
                            that.plot_action_data(data.data, qc_id, data.unit_name, data.targets,data.act_value,data.target_value,data.optimal_mix);
                        } else {
                            that.plot_action_data(data.data, qc_id, data.unit_name, data.targets,data.act_value,data.target_value);
                        }

                        //Set url for newActivityButton
                        $('a.newActivityButton').attr("href", data.create_action_url);

                        if (elems.length==1){
                            that.setContainerHidden(historylegendcontainer);
                            that.setContainerVisible($("h3.qc_title",qctitlecontainer));
                            $("h3.qc_title",qctitlecontainer).text(label);
                        }
                        data_success=true;
                    } else{
                        cdb.elink.alertCDBMessage(data.message);
                    }
                }});
            if(that.isModalComponent('actions') && data_success){
                that.setModalContainerVisible();
            }
        }
        if(!data_success){
            that.setContainerHidden(actioncontainer);
        }
    }
};

cdbElinkQCCockpit.prototype._adjustTrafficLight = function(color,img_obj,position){
    var that = this;
    var tablecontainer = that.getComponentContainer('table');
    if(tablecontainer){
        if(img_obj !== undefined && position !== undefined){
            if (color != 'warning' && color != 'default') {
                img_obj.attr('src', that.options_local_res+"images/status_" + color + ".svg");
                if (color == 'rot'){
                    img_obj.attr('alt', that.initial_labels_red);
                    img_obj.attr('title', that.qc_red);
                    that.dataTable.fnUpdate(that.initial_labels_red,position[0], that.hidden_state_column);
                } else {
                    img_obj.attr('alt',that.initial_labels_green);
                    img_obj.attr('title',that.qc_green);
                    that.dataTable.fnUpdate(that.initial_labels_green,position[0], that.hidden_state_column);
                }
            } else {
                img_obj.attr('src', that.options_local_res+"images/spacer.svg");
                that.dataTable.fnUpdate(that.initial_labels_warning,position[0], that.hidden_state_column);
            }
        }
    }
};

cdbElinkQCCockpit.prototype.editTarget = function(value, obj) {
    var that = this;
    var tablecontainer = that.getComponentContainer('table');
    var qc_id = ""+$(obj).closest('tr').data("elink-cdb_object_id");
    var img_tag = $(obj).closest('tr').children("td.state").children("img");
    var position = that.dataTable.fnGetPosition(obj);

    $.ajax({
        url: that.ajaxRootURL + "/save_target_value",
        dataType: "json",
        type: "POST",
        async: false,
        data: ({
            qc_id : qc_id,
            target_value : value.replace(/&gt;/g, ">").replace(/&lt;/g, "<")
        }),
        success: function (data){
            if (data.success == 1) {
                that.global_edit_expression = value.replace(/&gt;/g, ">").replace(/&lt;/g, "<");
                if(tablecontainer){
                    that.dataTable.fnUpdate(value,position[0],that.target_value_column);
                    that._adjustTrafficLight(data.color, img_tag, position);
                }
            } else {
                value = that.unwrapTargetExpression();
                cdb.elink.alertCDBMessage(data.message);
            }
        }
    });
    that.clearEditMode();
    // only update actions if needed
    if((qc_id == that.global_qcid) && (that.selected_rows_length()==1)){
        that.generateActions([that.global_qcid]);
    }
    return(value);
};

cdbElinkQCCockpit.prototype.clearEditMode = function(){
    this.editMode = false;
};

cdbElinkQCCockpit.prototype.editValue = function(value, obj, qgrade_id){
    var that = this;
    var tablecontainer = this.getComponentContainer('table');
    var qgrade_name = "";
    if(qgrade_id === undefined){
        qgrade_id = that.manual;
    }
    if(qgrade_id && qgrade_id in that.qgrade_js_dict){
        qgrade_name = that.qgrade_js_dict[qgrade_id];
    }
    var qc_id = ""+$(obj).closest('tr').data("elink-cdb_object_id");
    var img_tag = $(obj).closest('tr').children("td.state").children("img");
    var position = that.dataTable.fnGetPosition(obj);
    var svalue;

    if (value === "") {
        svalue = value;
    } else {
        var fvalue = cdbFloatPlugin.strToFloat(value);
        if(cdbFloatPlugin.validateInput(value, that.obj_act_val_decimals, true)){
                svalue = fvalue;
                value = cdbFloatPlugin.floatToStr(svalue, that.obj_act_val_decimals);
        } else {
            svalue = "NaN";
        }
    }

    $.ajax({
        url: that.ajaxRootURL + "/save_actual_value",
        dataType: "json",
        type: "POST",
        async: false,
        data: ({
            qc_id : qc_id,
            act_value : svalue,
            qgrade: qgrade_id
        }),
        success: function (data){
            if (data.success == 1) {
                if(tablecontainer){
                    that.dataTable.fnUpdate(value,position[0],that.act_value_column);
                    that._adjustTrafficLight(data.color, img_tag, position);
                    $(obj).parent().children("td.qgrade").text(qgrade_name);
                    $(obj).parent().children("td.qgrade").data('qgrade_id', qgrade_id);
                }
            } else {
                value = that.unwrapTargetExpression();
                cdb.elink.alertCDBMessage(data.message);
            }
        }
    });
    that.clearEditMode();
    if(qc_id in that.selected_rows){
        var render_elements = [];
        for (var row in that.selected_rows){
            render_elements.push(row);
        }
        that.generateHistory(render_elements);
        that.generateActions(render_elements);
    }
    return(value);
};

cdbElinkQCCockpit.prototype.isValueEditable = function(td){
    var td_obj = $(td);
    if(td_obj && td_obj.hasClass('val')){
        return (!parseInt(td_obj.closest('tr').data('elink-cdbqc-obj-cockpit-uneditable'),10) && !td_obj.hasClass('aggreditable'));
    }
};

cdbElinkQCCockpit.prototype.editNow = function(){
    var tablecontainer = this.getComponentContainer('table');
    if(tablecontainer){
        if (this.selected_rows_length() == 1){
            var selected_qcid = null;
            var selected_qcid_obj = null;
            var selected_qcid_editfield = null;
            for(var qcid in this.selected_rows){
                if (qcid != "undefined"){
                    selected_qcid = qcid;
                }
            }
            if (selected_qcid !== null){
                selected_qcid_obj = $('table.qctable tbody tr[data-elink-cdb_object_id='+selected_qcid+']',tablecontainer);
            }
            if(selected_qcid_obj){
                selected_qcid_editfield = selected_qcid_obj.children('td.target');
            }
            if((selected_qcid_editfield)){
                // simulate click on field
                selected_qcid_editfield.trigger('mouseedit');
            }
        }
    }
};

cdbElinkQCCockpit.prototype.applyAggrValue = function(obj){
    var tr_obj = $(obj).closest('tr');
    var val_obj = tr_obj.children('td.val');
    var aggr_text = tr_obj.children('td.aggr').text();
    var edit_val;
    if(aggr_text && val_obj && aggr_text !== ""){
        edit_val = this.editValue(aggr_text, val_obj[0], this.aggregated);
    }
};

cdbElinkQCCockpit.prototype.selected_rows_length = function(){
    var count = 0;
    for (var i in this.selected_rows) {
        count ++;
    }
    return count;
};

cdbElinkQCCockpit.prototype.setMouseEdit = function(exp){
    this.editMode = true;
    this.keyTable.block = true;
    this.getExpr(exp);
};

/* Check expression before show it */
cdbElinkQCCockpit.prototype.checkExpression = function(obj) {
    var input = $($(obj).children()[0]).children()[0];
    if (input !== undefined) {
        if (this.global_edit_expression == this.initial_labels_click_to_edit) {
            input.value = "";
        } else {
            input.value = this.global_edit_expression.replace(/&gt;/g, ">").replace(/&lt;/g, "<");
        }
    }
    if ($(obj).hasClass('target') || ($(obj).hasClass('val') && (this.isValueEditable(obj)))) {
        $(obj).addClass("qceditable");
    }
};

cdbElinkQCCockpit.prototype.computeQCID = function(td_elem){
    var that = this;
    var tablecontainer = this.getComponentContainer('table');
    if(tablecontainer){
        if(td_elem !== undefined){
            var tr_elem = td_elem.closest('tr');
            var qcid = tr_elem.data('elink-cdb_object_id');
            var img_tag = tr_elem.children('td.state').children('img');
            var position = that.dataTable.fnGetPosition(td_elem[0]);
            $.ajax({
                url: that.ajaxRootURL + "/compute",
                dataType: "json",
                type: "POST",
                async: false,
                data: ({
                    qc_id: qcid
                }),
                success: function (result) {
                    if(result.success == 1){
                        if(tr_elem!==undefined){
                            if(result.tar_val !== ''){
                                tr_elem.children('td.target').text(result.tar_val);
                            } else {
                                tr_elem.children('td.target').text(that.initial_labels_click_to_edit );
                            }

                            if(typeof(result.act_val)=='number'){
                                tr_elem.children('td.val').text(cdbFloatPlugin.floatToStr(
                                    result.act_val, that.act_val_decimals));
                            } else {
                                tr_elem.children('td.val').text(result.act_val);
                            }
                            if(typeof(result.aggr_val)=='number'){
                                tr_elem.children('td.aggr').text(cdbFloatPlugin.floatToStr(
                                    result.aggr_val, that.obj_aggr_val_decimals));
                            } else {
                                tr_elem.children('td.aggr').text(result.aggr_val);
                            }
                            that._adjustTrafficLight(result.checktarget, img_tag, position);
                        }
                    } else {
                        cdb.elink.alertCDBMessage(result.message);
                    }
                }
            });
            if(that.selected_rows.hasOwnProperty(qcid)){
                var render_elements = [];
                for (var qc_id in that.selected_rows) {
                    render_elements.push(qc_id);
                }
                that.generateHistory(render_elements);
                that.generateActions(render_elements);
            }
        }
    }
};

/* Set url for 'new action' button */
cdbElinkQCCockpit.prototype.setURL = function(btn,mode,predefined_cdb_object_id) {
    var tablecontainer = this.getComponentContainer('table');
    var actioncontainer = this.getComponentContainer('actions');
    var cdb_object_id;
    if(!cdb.elink.openedInCDBPC && btn !== undefined){
        $(btn).attr('target','_blank');
    }
    if(predefined_cdb_object_id !== undefined){
        cdb_object_id = predefined_cdb_object_id;
    }
    if(tablecontainer || actioncontainer){
        switch(mode){
            case "action_show":
                if(cdb.elink.openedInCDBPC){
                    window.location.href = this.action_show_url_prefix+"?action_object_id="+cdb_object_id+"&qc_object_id="+this.global_qcid;
                } else {
                    window.open(this.action_show_url_prefix+"?action_object_id="+cdb_object_id+"&qc_object_id="+this.global_qcid);
                }
                break;
        }
    }
};

cdbElinkQCCockpit.prototype.loadActivities = function(btn){
    var cdb_object_id = $(btn).closest('tr').data('elink-cdb_object_id');
    if(cdb_object_id){
        cdbBlogApp.loadPostingListInto(
                 $("#popup_modal").find('.modal-body'),
               {"topic_id": cdb_object_id, "cnt": ''},
        function() {
            cdbBlogApp.readLabels();
        });
        $("#popup_modal").modal("show");
    }
};

cdbElinkQCCockpit.prototype.findReadableCellFocusByQCID = function(qcid){
    var tablecontainer = this.getComponentContainer('table');
    var rowid;
    var cellfocus;
    var new_visible_td_list;
    var i;
    if(qcid !== undefined){
        rowid = this.getCurrentRowIdByQCID(qcid);
        cellfocus = [0,rowid];
        new_visible_td_list = $('table.qctable tbody tr[data-elink-cdb_object_id='+qcid+']',tablecontainer).children('td');
        // use first node with text content in focused row
        for(i=0;i<new_visible_td_list.length;i++){
            if(($(new_visible_td_list[i]).contents().length > 0) && ($(new_visible_td_list[i]).children().length === 0)){
                cellfocus[0]=i;
                break;
            }
        }
        return cellfocus;
    }
};

cdbElinkQCCockpit.prototype.resetKeyTable = function(){
    var tablecontainer = this.getComponentContainer('table');
    var qcid;
    var cellfocus;
    if(tablecontainer && this.keyTable !== undefined && this.keyTable !== null){
        if(this.global_qcid !== undefined){
            qcid = this.global_qcid;
        } else {
            qcid = $('table.qctable tbody td.focus', tablecontainer).closest('tr').data('elink-cdb_object_id');
        }
        if(qcid !== undefined){
            cellfocus = this.findReadableCellFocusByQCID(qcid);
        }
        if(cellfocus === undefined){
            cellfocus = this.initial_cell_focus;
        }
        this.destroyKeyTable();
        this.initKeyTable(cellfocus);
    }
};

/* finds current row id by qc id (for use with keytable's fnSetPosition) */
cdbElinkQCCockpit.prototype.getCurrentRowIdByQCID = function(qc_id){
    var tablecontainer = this.getComponentContainer('table');
    if(tablecontainer){
        var cur_tr_list = $('table.qctable tbody tr',tablecontainer);
        if(cur_tr_list){
            for(var i=0;i<cur_tr_list.length;i++){
                if($(cur_tr_list[i]).data('elink-cdb_object_id')==qc_id){
                    return i;
                }
            }
        }
    }
    return -1;
};

/* Get label for headline of history graphic
 * @param label:
 *      quality character id
 * @return
 *      html formatted qc-labeltext (and if avaiable, qc-unit)
*/
cdbElinkQCCockpit.prototype.getLegendLabel = function(label) {
    var row_index = this.getRowIdByQCID(label);
    var label_name;
    var label_unit;
    var label_grp;
    if (row_index === undefined) {
        label_name = "";
        label_unit = "";
    } else {
        label_name = this.dataTable.fnGetData(row_index, this.kpi_column);
        label_unit = this.dataTable.fnGetData(row_index, this.unit_column);
        if (this.grp_column > 0) {
            label_grp = this.dataTable.fnGetData(row_index, this.grp_column);
        }
    }
    if (label_grp !== undefined) {
        return "<h3>" + label_name + " [ " + label_grp + " ] </h3>";
    } else if (label_unit !== ""){
        return "<h3>" + label_name + " [ " + label_unit + " ] </h3>";
    } else {
        return "<h3>" + label_name + "</h3>";
    }
};

/* Plot history graphic
*   @param elems:
*   array of selected entries (qc ids)
*   @param data:
*   dictionary with history value pairs (date, value)
*/
cdbElinkQCCockpit.prototype.plot_history_data = function(elems, data) {
    var historycontainer = this.getComponentContainer('history');
    var historylegendcontainer = this.getComponentContainer('historylegend');
    if(historycontainer && historylegendcontainer){
        var that = this;
        var options = { colors : [ '#99CCFF', '#6699FF', '#3399FF' ],
                points: { show: true },
                lines: { show: true },
                xaxis: { mode: "time", timezone: "browser" },
                yaxis: { panRange: true,
                        tickFormatter: function (val, axis) {
                            return cdbFloatPlugin.floatToStr(val, axis.tickDecimals);
                        }
                },
                selection: { mode: "x" },
                grid: { hoverable: true,
                        backgroundColor: { colors: ["#fff", "#eee"] }
                        },
                legend:{container: historylegendcontainer,
                        labelFormatter: function (label){
                            return that.getLegendLabel(label);
                            },
                        show: true
                        },
                pan: { interactive: true }
            };
        var options_overview = {
                colors : [ '#99CCFF', '#6699FF', '#3399FF' ],
                series: {
                    lines: { show: true, lineWidth: 1 },
                    shadowSize: 0
                },
                xaxis: { ticks: [], mode: "time", timezone: "browser" },
                yaxis: { ticks: [], min: 0, autoscaleMargin: 0.1 },
                selection: { mode: "x" },
                legend:{show: false}
        };

        var plot_data=[];
            for (var i=0;i< elems.length;i++){
                var history_data_dict = {};
                var history_data=[];
                var hist_entries = data[elems[i]];
                if(hist_entries && ('gdata' in hist_entries)){
                    var hist_gdata_entries = hist_entries.gdata;
                    for (var j=0; j < hist_gdata_entries.length; j++) {
                        var entry = hist_gdata_entries[j];
                        if (entry.length==3) {
                            var history_date = new Date(entry[0]);
                            history_data.push([history_date, entry[1], entry[2], hist_entries.qcd_name]);
                        } else {
                            cdb.elink.alert("invalid qc history entry");
                        }
                    }
                }
                history_data_dict.label=elems[i];
                history_data_dict.data=history_data;
                plot_data.push(history_data_dict);
            }
            $.plot($("div.history_content",historycontainer), plot_data, options);
            var overview = $.plot($("div.history_content_pan",historycontainer), plot_data, options_overview);

            $("div.history_content_pan",historycontainer).off("plotunselected");
            $("div.history_content_pan",historycontainer).on("plotunselected", function (event) {
                var plot = $.plot($('div.history_content',historycontainer), plot_data, options);
            });
            $("div.history_content_pan",historycontainer).off("plotselected");
            $("div.history_content_pan",historycontainer).on("plotselected", function (event, ranges) {
                var plot = $.plot($("div.history_content",historycontainer), plot_data,
                $.extend(true, {}, options, {
                    xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to }
                }));
            });
            $("div.history_content",historycontainer).off("plotselected");
            $("div.history_content",historycontainer).on("plotselected", function (event, ranges) {
                var plot = $.plot($("div.history_content",historycontainer), plot_data, $.extend(true, {}, options, {
                    xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to }
                }));
                overview.setSelection(ranges, true);
            });

            var previousPoint = {};
            previousPoint.series=-1;
            previousPoint.data=-1;
            $("div.history_content",historycontainer).off("plothover");
            $("div.history_content",historycontainer).on("plothover", function (event, pos, item) {
                $("#x").text(pos.x.toFixed(2));
                $("#y").text(pos.y.toFixed(2));
                if (item) {
                    if (previousPoint.series != item.seriesIndex || previousPoint.data != item.dataIndex) {
                        var history_data = item.series.data;
                        var plotcontainer_offset = historycontainer.offset();
                        var plotcontainer_position = historycontainer.position();
                        var left_offset = (-1 * plotcontainer_offset.left)+plotcontainer_position.left;
                        var top_offset = (-1 * plotcontainer_offset.top) + plotcontainer_position.top;
                        previousPoint.series=item.seriesIndex;
                        previousPoint.data=item.dataIndex;
                        $("div.tooltip",historycontainer).remove();
                        var x = item.datapoint[0].toFixed(2);
                        var y = item.datapoint[1].toFixed(2);
                        var itemdate = new Date(parseInt(x,10));
                        var year = itemdate.getFullYear();
                        var month = itemdate.getMonth()+1;
                        var day = itemdate.getDate();
                        var index = item.dataIndex;
                        var grade = history_data[index][2];
                        var qcdname = history_data[index][3];
                        that.showTooltip(20,-20,left_offset,top_offset,item.pageX, item.pageY,qcdname+":<br/>"+
                        cdbFloatPlugin.floatToStr(item.datapoint[1], that.act_val_decimals ) + " (" + day+"."+month+"."+year + "), "+grade,historycontainer);
                    }
                } else {
                    $("div.tooltip",historycontainer).remove();
                    previousPoint.series=-1;
                    previousPoint.data=-1;
                }
            });
    }
};

/* finds origin row id by qc id (for use with fnGetData) */
cdbElinkQCCockpit.prototype.getRowIdByQCID = function(qc_id) {
    var tablecontainer = this.getComponentContainer('table');
    if(tablecontainer){
        for (var i = 0; i < this.dataTable.fnSettings().aoData.length; i++) {
            if($(this.dataTable.fnSettings().aoData[i].nTr).data('elink-cdb_object_id') == qc_id) {
                return i;
            }
        }
    }
};

cdbElinkQCCockpit.prototype.plot_action_data = function(python_data, qc_id, unit_name, targets, act_field, target_field, optimal_mix) {
    var that = this;
    var actioncontainer = this.getComponentContainer('actions');
    if(actioncontainer){
        var action_bars1 = [];
        var action_bars2 = [];
        var hidden_bars = [];
        var highlight_list = [];
        var act_bar = [];
        var target_bars = [];
        var myTicks = [[0,labels.cdbqc_cockpit_actual]];
        var unit = unit_name;
        var css_setting_act_obj = $('div.flot_act_val_css_attributes');
        var css_setting_actbar_obj = $('div.flot_action_bar_css_attributes');
        var css_setting_acteffect_obj = $('div.flot_action_effect_css_attributes');
        var css_setting_acthighlight_obj = $('div.flot_action_highlight_css_attributes');
        var act_val_fill_color;
        var act_val_color;
        var act_bar_fill_color;
        var act_bar_color;
        var act_effect_color;
        var act_effect_fill_color;
        var act_highlight_fill_color;
        var act_highlight_color;
        var max_val;
        var min_val;
        var max_value;
        var action_plot;
        var action_highlight_list;
        var i;
        var j;
        if(css_setting_act_obj){
            act_val_fill_color = css_setting_act_obj.css('background-color');
            act_val_color = css_setting_act_obj.css('color');
        } else {
            act_val_fill_color = "rgba(204, 150, 153, 0.7)";
            act_val_color = "#FF9999";
        }
        if(css_setting_actbar_obj){
            act_bar_fill_color = css_setting_actbar_obj.css('background-color');
            act_bar_color = css_setting_actbar_obj.css('color');
        } else {
            act_bar_fill_color = "rgba(153, 204, 255, 0.7)";
            act_bar_color = "#99CCFF";
        }
        if(css_setting_acteffect_obj){
            act_effect_fill_color = css_setting_acteffect_obj.css('background-color');
            act_effect_color = css_setting_acteffect_obj.css('color');
        } else {
            act_effect_fill_color = "rgba(190, 190, 190, 0.7)";
            act_effect_color = "rgb(190, 190, 190)";
        }

        if(css_setting_acthighlight_obj){
            act_highlight_fill_color = css_setting_acthighlight_obj.css('background-color');
            act_highlight_color = css_setting_acthighlight_obj.css('color');
        } else {
            act_highlight_fill_color = "rgba(0, 0, 205, 0.7)";
            act_highlight_color = "#77AADD";
        }

        $("div.activity_content",actioncontainer).off("plotclick");
        $("div.activity_content",actioncontainer).off("plothover");

        if(typeof(act_field)=='number'){
            that.act_field_value = parseFloat(act_field);
        } else {
            that.act_field_value = parseFloat(act_field.replace(",", "."));
        }
        that.target_field_value = parseFloat(target_field);

        act_bar.push([0, parseFloat(that.act_field_value)]);
        if(that.typeOf(python_data) == 'array') {
            max_val = that.act_field_value;
            min_val = that.act_field_value;
            if(that.typeOf(python_data[0]) == 'array') {
                //Fall 1. Balken ploten
                for (i = 0; i < python_data.length; i++) {
                    var effect = parseFloat(python_data[i]);
                    if(effect > 0) {
                        //Positive Effekte
                        if (that.act_field_value >= 0) {
                            action_bars2.push([i+1, that.act_field_value+effect]);
                            action_bars1.push([i+1, (that.act_field_value)]);
                        } else {
                            action_bars1.push([i+1, that.act_field_value+effect]);
                            action_bars2.push([i+1, (that.act_field_value)]);
                        }
                    } else {
                        //Negative Effekte
                        if (that.act_field_value >= 0) {
                            action_bars2.push([i+1, that.act_field_value]);
                            action_bars1.push([i+1, (that.act_field_value+effect)]);
                        } else {
                            action_bars1.push([i+1, that.act_field_value]);
                            action_bars2.push([i+1, (that.act_field_value+effect)]);
                        }
                    }
                    myTicks.push([i+1, "M"+(i+1)]);
                    that.actions[i] = python_data[i][1];
                    max_val = Math.max(max_val, that.act_field_value+effect);
                    min_val = Math.min(min_val, that.act_field_value+effect);
                    if(optimal_mix !== undefined && optimal_mix.length > 0){
                        //Fall 2. Optimale Balken makieren
                        for(j = 0; j < optimal_mix.length; j++) {
                            if(that.actions[i] == optimal_mix[j]) {
                                highlight_list.push([targets.length,[i+1,0,that.act_field_value]]);
                            }
                        }
                        this.action_optimal_generated = true;
                        this.action_optimal_qcid = qc_id;
                    }
                }
                target_bars = that.buildTarget(targets, python_data.length, Math.max(max_val*1.2, 0), Math.min(min_val*1.2, 0));
            }
        } else {
            //Fall 3. Nur Soll-Balken ploten
            if(python_data.length === 0 && targets.length > 0) {
                var last = targets[targets.length-1];
                if (last[1] == "inf") {
                    max_value = last[0]*1.2;
                    if (max_value < that.act_field_value){
                        max_value = that.act_field_value*1.2;
                    }
                    if(max_val !== undefined && max_val > max_value){
                        max_value = max_val*1.2;
                    }
                } else {
                    max_value = last[1];
                }
                target_bars = that.buildTarget(targets, python_data.length+1, max_value, null);
            }
        }
        if(max_val === undefined){
            max_val = that.act_field_value;
        }

        if(min_val === undefined){
            min_val = null;
        }

        if(myTicks.length == 1){
            hidden_bars.push([1,0]);
            myTicks.push([1,'']);
        }

        //Ist-Wert
        var act_serie = { data: act_bar,
                bars: { show: true,
                    barWidth: 0.3,
                    align: 'center',
                    fill: 1,
                    fillColor: act_val_fill_color },
                    color: act_val_color,
                    highlightColor: act_highlight_fill_color
        };
        var action_serie1 = { data: action_bars1,
                bars: { show: true,
                    barWidth: 0.3,
                    align: 'center',
                    fill: 1,
                    fillColor: act_bar_fill_color },
                    color: act_bar_color,
                    highlightColor: act_highlight_fill_color
        };
        var action_serie2 = { data: action_bars2,
                bars: { show: true,
                    barWidth: 0.3,
                    align: 'center',
                    fill: 1,
                    fillColor: act_effect_fill_color },
                    color: act_effect_color,
                    highlightColor: act_highlight_fill_color
        };
        var hidden_serie = {data: hidden_bars,
                bars: { show: false,
                    barWidth: 0.3,
                    align: 'center'}
        };
        var plot = $.plot($("div.activity_content",actioncontainer), target_bars.concat([action_serie2, action_serie1, act_serie,hidden_serie]), {
            series: { stack: 0,
                lines: { show: false,
                    fill: true,
                    steps: false },
                    bars: { show: true,
                        barWidth: 0.3,
                        align: 'center',
                        fill: true }
            },
            grid: { clickable: true ,
                autoHighlight: false,
                hoverable: true,
                backgroundColor: { colors: ["#fff", "#eee"] }
            },
            xaxis: { ticks: myTicks },
            yaxis: { axisLabel: unit,
                max: Math.max(max_val*1.2, 0),
                min: Math.min(min_val*1.2, 0),
                tickFormatter: function (val, axis) {
                    return cdbFloatPlugin.floatToStr(val, axis.tickDecimals);
                }
            }
        });

        that.action_plot = plot;
        that.action_highlight_list = highlight_list;
        $("div.activity_content",actioncontainer).on("plotclick", function (event, pos, item) {
            if(item) {
                var item_index = item.datapoint[0];
                if(item_index > 0){
                    that.setURL(undefined,'action_show', that.actions[item.datapoint[0]-1]);
                }
            }
        });

        var previousPoint = null;
        $("div.activity_content",actioncontainer).on("plothover", function (event, pos, item) {
        if (item) {
            if (previousPoint != item.dataIndex) {
                    var item_index = item.datapoint[0];
                    if(item_index > 0){
                        var action_container_offset = actioncontainer.offset();
                        var action_container_position = actioncontainer.position();
                        var left_offset = (-1 * action_container_offset.left)+action_container_position.left;
                        var top_offset = (-1 * action_container_offset.top) + action_container_position.top;
                        that.getTooltipData(that.actions[item.datapoint[0]-1],qc_id);
                        previousPoint = item.dataIndex;
                        $("div.tooltip",actioncontainer).remove();
                        var x = item.datapoint[0].toFixed(2);
                        var y = item.datapoint[1].toFixed(2);
                        that.showTooltip(0,-125,left_offset,top_offset,
                                item.pageX, item.pageY,
                                that.tt_name +
                                ": " + that.tipData[0] +
                                "<br/>" + that.tt_cost +
                                ": " + that.tipData[1] +
                                "<br/>" + that.tt_state +
                                ": " + that.tipData[2] +
                                "<br/>" + that.tt_resp + ": " +
                                that.tipData[3] + "<br/>" +
                                that.tt_dead + ": " +
                                that.tipData[4] + "<br/>" +
                                that.tt_eff + ": " +
                                that.tipData[5],
                                actioncontainer);
                    }
            }
        } else {
            $("div.tooltip",actioncontainer).remove();
            previousPoint = null;
        }
        });
    }
};

cdbElinkQCCockpit.prototype.showOptimalActions = function(elems,qc_modal_title){
    this.generateActions(elems, qc_modal_title, true);
    this.highlightOptimalActions();
};

cdbElinkQCCockpit.prototype.highlightOptimalActions = function() {
    if((this.action_optimal_qcid == this.global_qcid) ||
            (this.global_qcid === undefined && this.action_optimal_qcid == this.context_object_kpi_id)){
        this.action_optimal_highlighted = this.action_highlight_list.length> 0;
        for(var i=0;i<this.action_highlight_list.length;i++){
            this.action_plot.highlight(this.action_highlight_list[i][0],this.action_highlight_list[i][1]);
        }
    }
};

cdbElinkQCCockpit.prototype.unhighlightOptimalActions = function() {
    if((this.action_optimal_qcid == this.global_qcid) ||
            (this.global_qcid === undefined && this.action_optimal_qcid == this.context_object_kpi_id)){
        this.action_optimal_highlighted = false;
        for(i=0;i<this.action_highlight_list.length;i++){
            this.action_plot.unhighlight(this.action_highlight_list[i][0],this.action_highlight_list[i][1]);
        }
    }
};

cdbElinkQCCockpit.prototype.unwrapTargetExpression = function() {
    var form_obj = $(this.global_edit_expression);
    if ((form_obj) && (form_obj.length > 0)){
        return $(this.global_edit_expression).children("input")[0].value;
    } else {
        return this.global_edit_expression;
    }
};

cdbElinkQCCockpit.prototype.destroyKeyTable = function(){
    var i;
    var document_events;
    var event_handler_ref;
    var tablecontainer = this.getComponentContainer('table');
    if(tablecontainer && this.keyTable !== undefined && this.keyTable !== null){
        // clear focus
        $("table.qctable tbody td",tablecontainer).removeClass('focus');
        // remove keys.event listener
        this.keyTable.event.remove.esc(null, null);
        switch(this.qc_cockpit_app){
            case "qc_object":
                var val_tds = $("table.qctable tbody td.val",tablecontainer);
                if(val_tds){
                    for(i=0;i<val_tds.length;i++){
                        this.keyTable.event.remove.focus(val_tds[i]);
                        this.keyTable.event.remove.action(val_tds[i]);
                    }
                }
                break;
            case "qc_process":
                var target_tds = $("table.qctable tbody td.target",tablecontainer);
                if(target_tds){
                    for(i=0;i<target_tds.length;i++){
                        this.keyTable.event.remove.focus(target_tds[i]);
                        this.keyTable.event.remove.action(target_tds[i]);
                    }
                }
                break;
            default:
                cdb.elink.alert("unkown qc_cockpit app");
        }
        // reset global event listeners of keytable
        if ( jQuery.browser.mozilla || jQuery.browser.opera ){
            $(document).off("keypress");
        } else {
            $(document).off("keydown");
        }
        $('table.qctable tbody td',tablecontainer).die("click");

        // disable only keytable click handler on document
        document_events = $(document).data('events');
        if(document_events !== undefined && document_events.hasOwnProperty('click')){
            for(i=0;i<document_events.click.length;i++){
                if(document_events.click[i].namespace===""){
                    event_handler_ref = document_events.click[i].handler;
                    if(event_handler_ref){
                        $(document).off('click',event_handler_ref);
                    }
                }
            }
        }

        // delete reference to keytable
        this.keyTable=null;
    }
};

/* Show tooltips for actions in actions graphic
 * @params x, y:
 *
 * @param contents:
 *
 */
cdbElinkQCCockpit.prototype.showTooltip = function(left_adjustment,top_adjustment,left_offset,top_offset, x, y, contents,container) {
    var tooltip = $('<div class="tooltip">' + contents + '</div>').css( {
    position: 'absolute',
    display: 'none',
    top: y+top_offset+top_adjustment,
    left: x+left_offset+left_adjustment,
    border: '1px solid #fdd',
    padding: '2px',
    'background-color': '#fee',
    opacity: 0.80
    });
    tooltip.appendTo(container).fadeIn(200);
    tooltip = $('div.tooltip',container);
    var twidth = tooltip.width();
    var toffset = tooltip.offset().left;
    if((toffset+twidth)> (container.offset().left+container.width())){
        tooltip.css('left',x+left_offset-(twidth+left_adjustment));
        tooltip = $('div.tooltip',container);
        var tmpwidth = tooltip.width();
        // check whether tooltip has resized
        if(tmpwidth > twidth){
            tooltip.css('left',x+left_offset-(tmpwidth+left_adjustment));
        }
    }

};

/* Display the targetrange in sction graphic
 * @param targets:
 *
 * @param n:
 *
 * @params max_val, min_val:
 *      minimum/maximum values in target expression
 * @return
 *      data for plotting targetrange in graphic
 *
 */
cdbElinkQCCockpit.prototype.buildTarget = function(targets, n, max_val, min_val) {
    var result = [];
    var offst = 0.1;
    var css_setting_obj = $('div.flot_target_css_attributes');
    var color;
    if(css_setting_obj){
        color = css_setting_obj.css('color');
    } else {
        color = "rgb(100, 255, 100)";
    }
    var stack = 1;

    function build_serie(from, to) {
        return {
            data: [[-0.15, to, from], [n+0.15, to, from]],
            bars: { show: false },
            lines: { show: true, fill: true, lineWidth:0},
            color: color,
            stack: stack++
        };
    }

    for(var i = 0; i < targets.length; i++) {
        var from = targets[i][0];
        if (targets[i][0] == "-inf") {
            from = min_val;
        }

        var to = targets[i][1];
        if(targets[i][1] == "inf") {
            to = max_val;
        }

        var offset = 0;
        if (targets[i][1] == targets[i][0]) {
            offset = offst;
        }

        result.push(build_serie(from-offset, to+offset));
    }

    return result;
};

/*
*   Ajax request to obtain the Tooltipdata
*
*   @param action_id
*   Needs the id of the specific action
*/
cdbElinkQCCockpit.prototype.getTooltipData = function(action_id,qcid) {
    var that=this;
    if(qcid && action_id){
        $.ajax({
            url: that.ajaxRootURL + "/getTooltipData",
            dataType: "json",
            type: "POST",
            async: false,
            data: ({
                action_id: action_id,
                qc_id: qcid
            }),
            success: function (result) {
                if(result.success == 1){
                    //Tooltip Felder füllen
                    that.tipData[0] = result.data[0];
                    that.tipData[1] = result.data[1];
                    that.tipData[2] = result.data[2];
                    that.tipData[3] = result.data[3];
                    that.tipData[4] = result.data[4];
                    that.tipData[5] = result.data[5];
                } else {
                    cdb.elink.alertCDBMessage(result.message);
                }
            }
        });
    }
};

/*
*   typeOf function which is capable of array type
*
*   @param obj
*   object to identify the type of
*   @return
*   type of object
*/
cdbElinkQCCockpit.prototype.typeOf = function(obj) {
  if ( typeof(obj) == 'object' ) {
    if (obj.length)
      return 'array';
    else
      return 'object';
    } else
  return typeof(obj);
};

if($.fn.dataTableExt.oSort !== undefined){
    /* Two custom functions (asc and desc) for string sorting */
    $.fn.dataTableExt.oSort['string-case-asc']  = function(x,y) {
        return ((x < y) ? -1 : ((x > y) ?  1 : 0));
    };

    $.fn.dataTableExt.oSort['string-case-desc'] = function(x,y) {
        return ((x < y) ?  1 : ((x > y) ? -1 : 0));
    };
    $.fn.dataTableExt.oSort['elink-float-asc'] = function(x,y){
        var x_fval = cdbFloatPlugin.strToFloat(x);
        var y_fval = cdbFloatPlugin.strToFloat(y);
        if(!isNaN(x) && !isNaN(y)){
            x=x_fval;
            y=y_fval;
        }
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    };
    $.fn.dataTableExt.oSort['elink-float-desc'] = function(x,y){
        return $.fn.dataTableExt.oSort['elink-float-asc'](x,y)*-1;
    };
}

//=== Blog app. ===
var cdbBlogApp = new cdbElinkBlogPosting('#elink_page_content div#popup_modal');
cdbBlogApp.reloadPostingURL = cdbBlogApp.defaultReloadPostingURL;
//Tells cdb.elink to run blog.
cdb.elink.addApplication('cdb.elink.cdbblog', cdbBlogApp);
