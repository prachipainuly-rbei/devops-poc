#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
Module ldaputil

Basic Mapper functions for the LDAP Schema configuration

"""

__revision__ = "$Id: ldaputil.py 169828 2017-12-04 10:28:24Z wen $"

# Some imports


# Exported objects
__all__ = ['mapuser_upn',
           'dn2hash',
           'mapdomain',
           'rndpassword']


def mapuser_upn(values):
    """
    Split usernames of the form name@domain

    Returns a 2-tuple for use with OK keys.
    """
    result = []
    for val in values:
        newval = val.split('@')[0]
        result.append(newval)
    return tuple(result)


def dn2hash(values):
    """
    Map a value to some SHA256 hash value

    This can be used to map a variable length
    distinguishedName value to a fixed length
    login field.
    """
    import hashlib
    result = []
    for val in values:
        ho = hashlib.new('sha256')
        ho.update(val)
        newval = ho.hexdigest()
        result.append(newval)
    return tuple(result)


def mapdomain(values):
    r"""
    Split a name of the form 'DOMAIN\User'

    This can be used for an OK mapper.
    """
    parts = values[0].split('\\')
    if len(parts) > 1:
        return (parts[1], parts[0].upper())
    else:
        return (parts[0],)


def rndpassword(values):
    """
    Create a random password for use with LDAP-Mappers

    This can be used as the mapper that targets
    'angestellter.password' when creating Users via LDAP.
    """
    import os
    return (os.urandom(16).encode('hex').upper(),)
