#!/usr/bin/env python
# $Id: report_server.py 174356 2018-03-13 10:01:48Z kbu $
#
# Copyright (C) 1990 - 2009 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
XMLRPC server for PowerReports
 - serialization of report creation requests
 - remote report creation
"""

import io
import optparse
import os
import socket
import sys
import traceback

from SimpleXMLRPCServer import SimpleXMLRPCServer

from cdb import CADDOK, fsutil, misc
from cdb.fls import allocate_server_license
from cdb.platform.gui import Message

from cs.tools.powerreports.reportserver.report_generator import ReportGenerator
from cs.tools.powerreports.reportserver.reportlib import log
from cs.tools.powerreports.reportserver.xmlrpc_binary import WithXMLBinary

__docformat__ = "restructuredtext en"
__revision__ = "$Id: report_server.py 174356 2018-03-13 10:01:48Z kbu $"

__all__ = ['ReportServer']


# class to be published
class ReportServer(WithXMLBinary):

    def __init__(self):
        super(ReportServer, self).__init__()
        allocate_server_license("POWERREPORTS_004")
        # just one workdir is needed, job processing is serialized by xmlrpc
        self.workdir = os.path.normpath(os.path.join(CADDOK.TMPDIR, "report_server"))
        log("ReportServer.__init__(): workdir is '%s'" % self.workdir)

    def _cleanup(self):
        fsutil.wipedir(self.workdir)

    def create(self, template_basename, template_bin, xml_basename, xml_bin, args):
        """Create report specified by args, report template and xml data."""
        try:
            # setup result protocol
            ret = {"status": "",
                   "excel.ok": 0,
                   "pdf.ok": 0}

            log("ReportServer.create(): START")
            # cleanup workdir
            self._cleanup()
            # get attached binaries: report template and xml data
            tname = self.unwrap_binary(template_bin,
                                       misc.jail_filename(self.workdir,
                                                          template_basename))
            xname = self.unwrap_binary(xml_bin,
                                       misc.jail_filename(self.workdir,
                                                          xml_basename))
            log("  unwrapped '%s' and '%s'" % (template_basename, xml_basename))

            sys_args = args.get("__sys_args__", {})

            log("  report '%s' requested by '%s'" % (template_basename,
                                                     sys_args.get("persno", "<unknown>")))
            log("  args '%s'" % args)
            make_excel = "Excel" in sys_args["report_format"]
            make_pdf = "PDF" in sys_args["report_format"]
            make_elink = (sys_args["report_format"] == "E-Link")

            gen_ret = ReportGenerator().create_report(
                self.workdir,
                tname, xname,
                sys_args.get("target", "%s Report" % Message.GetMessage("branding_product_name")),
                (make_pdf or make_elink))
            ret["status"] = gen_ret["status"]

            # attach report files (if any)
            if ret["status"] == "OK":
                excel = gen_ret["xls"]
                pdf = gen_ret["pdf"]
                if excel and (make_excel or make_elink):
                    ret["excel.ok"] = 1
                    ret["excel.report"] = self.wrap_binary(excel)
                    ret["excel.target_basename"] = os.path.basename(excel)
                if pdf and (make_pdf or make_elink):
                    ret["pdf.ok"] = 1
                    ret["pdf.report"] = self.wrap_binary(pdf)
                    ret["pdf.target_basename"] = os.path.basename(pdf)

        except Exception:
            logdata = "".join(traceback.format_exception(*sys.exc_info()))
            log(logdata, 0, misc.kLogErr)
            ret["status"] = logdata
        log("ReportServer.create(): END, result is %s" % ret)
        return ret

    def ping(self):
        log("ReportServer.ping()")
        return True


def _main():
    log('Server process started')
    parser = optparse.OptionParser(usage=__doc__)
    parser.disable_interspersed_args()
    parser.add_option("--portfile", action="store",
                      help="Write port this server is running to given file")
    parser.add_option("--port", action="store", default="0",
                      help="Port number to use for the report server")
    parser.add_option("--interface", default="",
                      help="Listen to this network interface")
    (options, args) = parser.parse_args()

    # Instantiate and bind to localhost:port
    # interface="" (default) means listening to all active interfaces
    server = SimpleXMLRPCServer((options.interface, int(options.port)))
    if options.portfile:
        fname = options.portfile.decode(sys.getfilesystemencoding())
        assert isinstance(fname, unicode)
        with io.open(fname, "w", encoding="utf-8") as pfile:
            # This is the port, the server has bind to.
            pfile.write(u"%s" % (server.server_address[1]))

    # Register example object instance
    server.register_instance(ReportServer())
    log("report_server.py: running instance of ReportServer "
        "listening on endpoint '%s:%d'" % (
            socket.getfqdn(server.server_address[0]),
            server.server_address[1]))

    # run!
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    _main()
