#!/usr/bin/env python
# $Id: report_proxy.py 116006 2014-10-22 08:04:41Z kbu $
#
# Copyright (C) 1990 - 2009 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
XMLRPC Proxy PowerReports Server

"""
__docformat__ = "restructuredtext en"
__revision__ = "$Id: report_proxy.py 116006 2014-10-22 08:04:41Z kbu $"


import os
import xmlrpclib

from cdb import misc
from cs.tools.powerreports.reportserver.reportlib import log
from cs.tools.powerreports.reportserver.xmlrpc_binary import WithXMLBinary

__all__ = ['ReportProxy']


# client side (xmlrpc) implementation
# server side implementation: ReportServer (report_server.py)
class ReportProxy(WithXMLBinary):

    def __init__(self):
        from cdb.platform.uberserver import Services
        # Per Definition gibt es nur einen ReportServer pro Installation und
        # nicht etwa einen pro Site.
        reportserver = Services.get_random_service(
            "cs.tools.powerreports.powerreports_server.PowerReportsServer",
            None)
        if reportserver:
            self.server = xmlrpclib.ServerProxy(reportserver.get_url())
            # check connectivity
            # FIXME: in newer python versions you could set a timeout
            log("ReportProxy.__init__(): trying to ping report server at '%s'" %
                (reportserver.get_url()))
            self.server.ping()
        else:
            self.server = None

    def create(self, workdir, template_fname, xml_fname, in_args):
        ret = {"status": "No running report server found",
               "xls": None,
               "pdf": None}
        if not self.server is None:
            out_args = self.server.create(os.path.basename(template_fname),
                                          self.wrap_binary(template_fname),
                                          os.path.basename(xml_fname),
                                          self.wrap_binary(xml_fname),
                                          in_args)
            if out_args["excel.ok"]:
                fname = out_args["excel.target_basename"].decode("utf-8")
                assert isinstance(fname, unicode)
                # assumes the filename is in dbtab encoding
                ret["xls"] = self.unwrap_binary(out_args["excel.report"],
                                                misc.jail_filename(workdir, fname))
            if out_args["pdf.ok"]:
                fname = out_args["pdf.target_basename"].decode("utf-8")
                assert isinstance(fname, unicode)
                # assumes the filename is in dbtab encoding
                ret["pdf"] = self.unwrap_binary(out_args["pdf.report"],
                                                misc.jail_filename(workdir, fname))
            ret["status"] = out_args["status"]
            if ret["status"] != "OK":
                log("ReportProxy.create: error from xml peer:\n%s" % ret["status"], 0, misc.kLogErr)
        return ret

if __name__ == "__main__":
    # check connectivity
    proxy = ReportProxy()
    # if we are here, no exception occured
    print "connected to http://%s:%d succeeded" % (proxy.host, proxy.port)
