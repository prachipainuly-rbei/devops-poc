import React from 'react';
import {Alert} from 'react-bootstrap';
import {Component} from 'react';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {WithOperationTrigger, WithOperations,
    getAppSetup, fetchType, Button} from 'cs-web-components-base';
import {formatStr} from '../i18n.js';


class GenerateButton extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            initialRun: false
        };
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.operations !== this.operations) {
            const operation = nextProps.operations.get(0);
            if (operation && !this.state.initialRun) {
                this.setState({initialRun: true});
                this.props.runOperation(operation);
            }
        }
    }

    render() {
        const operation = this.props.operations.get(0);
        if (operation === undefined) {
            return (<Alert>Operation undefined.</Alert>);
        }
        return (
            <Button.TextButton
                onClick={() => this.props.runOperation(
                    operation)}
                label={formatStr("generate_report_button")} />
        );
    }
}

GenerateButton.propTypes = {
    contextObject: ImmutablePropTypes.map,
    operations: ImmutablePropTypes.list,
    runOperation: PropTypes.func,
};

const GenerateButtonWithOperation = WithOperationTrigger(GenerateButton);

class PowerReportButton extends React.Component {
    constructor(props) {
        super(props);
        this.OperationButton = WithOperations(
            GenerateButtonWithOperation,
            {
                contextType: 'cdbxml_source',
                operationNames: ['cdbxml_excel_report']
            }
        );
    }

    componentDidMount() {
        const {fetchType} = this.props;
        fetchType(getAppSetup().get('metaClassLink'));
    }

    render() {
        return (
            <this.OperationButton/>
        );
    }
}

PowerReportButton.propTypes = {
    fetchType: PropTypes.func.isRequired,
};

const Wrapper = connect(undefined, {fetchType})(PowerReportButton);

export default class PowerReport extends Component {
    render() {
        return (
            <div>
                <Wrapper/>
            </div>
        );
    }
}
