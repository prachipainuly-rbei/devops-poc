#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
# $Id: powerreports_server.py 174356 2018-03-13 10:01:48Z kbu $
#
# Copyright (C) 1990 - 2010 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
# File:     powerreports_server.py
# Author:   js
# Creation: 13.01.10
# Purpose:

"""
Module powerreports_server.py

This is the documentation for the powerreports_server.py module.
"""

__docformat__ = "restructuredtext en"

import os
import shlex
import sys
import tempfile

from twisted.internet.defer import succeed

from cdb import misc
from cdb import CADDOK
from cdb import rte
from cdb.uberserver.process import Process
from cdb.uberserver import usutil


class ProcessDead(RuntimeError):
    """The process died."""
    pass


class InvalidPortError(RuntimeError):
    """An invalid port number was written to the port file."""
    pass


class PowerReportsServer(Process):
    """Start CDB Power Reports Server"""
    def __init__(self, site):
        super(PowerReportsServer, self).__init__(
            site,
            "Power Reports Server",
            [],
            rte.runtime_tool("powerscript"))
        self.portfile = None
        self.svc_port = None

    @classmethod
    def is_supported_by_platform(self):
        return sys.platform == 'win32'  # prevent attempts installing it on linux

    def check_config(self):
        """Check whether given configuration is valid from point of this
        service. Raise an Exception in case of error"""
        from cdb.platform.uberserver import Services
        my_name = self.fqpyname()
        my_services = Services.get_services(my_name, None)
        if len(my_services) > 1:
            raise RuntimeError("There is more than one %s"
                               " configured in this instance.:\n%s" %
                               (my_name, "\n".join([unicode(svc) for svc in my_services])))

    @classmethod
    def install(cls, svcname, host, site, *args, **kwargs):
        """Install basic default configuration for this service"""
        from cdb.platform.uberserver import Services
        # Nur auf Windows und nur einmal pro Instanz
        if not svcname:
            svcname = cls.fqpyname()
        if sys.platform == "win32" and not Services.get_services(svcname, None):
            super(PowerReportsServer, cls).install(svcname, host, site, *args, **kwargs)
            opts = {"--port": "",
                    "--user": "powerreports_service"}
            return cls._create_basic_configuration(
                svcname,
                host,
                site,
                arguments="",
                autostart=True,
                options=opts,
                )

    def get_args(self):
        # override cdb.uberserver.process.get_args and flip the order of the
        # arguments, so that "report_server.py" receives them instead of
        # "powerscript.exe"
        args = []
        args.extend(["-m", "cs.tools.powerreports.reportserver.report_server"])
        if self.node.arguments:
            # Do not remove str(): shlex.split at least on windows can't handle
            # unicode strings (see also cdb.uberserver.process)
            args.extend(shlex.split(str(self.node.arguments),
                                    posix=sys.platform != "win32"))
        for name, value in self.options().items():
            if value:
                if name == "--user":
                    # This is in argument for the powerscript interpreter
                    args = [name, value] + args
                else:
                    args += [name, value]
        args.extend(["--portfile", self.portfile.name])
        args.extend(["--interface", self.node.interface])
        # args is a list, so expand each part of it
        return [os.path.expandvars(a) for a in args]

    def is_alive(self):
        """Check if the server is alive

           The power reports server is considered alive if:
           - The subprocess is still alive
           AND
           - The server is starting up or a port is set
        """
        process_alive = super(PowerReportsServer, self).is_alive()
        service_alive = bool(self.portfile or self.svc_port is not None)
        return bool(process_alive and service_alive)

    def start(self):
        """Start the service."""
        if self.is_alive():
            return succeed(self)

        self.portfile = tempfile.NamedTemporaryFile("r+",
                                                    dir=CADDOK.TMPDIR,
                                                    delete=False, suffix=".port",
                                                    prefix="reportsrv")

        try:
            start_deferred = super(PowerReportsServer, self).start()
        except Exception:
            self._remove_portfile(None)
            raise

        start_deferred.addCallback(self._check_portfile)
        start_deferred.addErrback(self._remove_portfile)
        return start_deferred

    def _remove_portfile(self, failure):
        """Cleanup the portfile in case of early startup errors"""
        try:
            self.portfile.close()
            os.unlink(self.portfile.name)
        except:
            pass
        self.portfile = None
        return failure

    def _check_portfile(self, svc):
        """Poll the portfile for a valid portnumber of the service"""
        # den Port auf dem der Reportserver läuft auslesen und in die DB
        # schreiben
        TIMEOUT = 120.0

        def matcher(content):
            if not super(PowerReportsServer, self).is_alive():
                raise ProcessDead()

            data = content.strip()
            if data:
                try:
                    port = int(data)
                except ValueError:
                    raise InvalidPortError("Invalid Port received: %s" % content)
                if 0 < port < 65536:
                    return True
                else:
                    raise InvalidPortError("Port out of valid range 1-65535 received: %s" % content)
            return False

        assert self.portfile, "No Port File anymore"

        poller = usutil.FilePoller(poll_file=self.portfile.name,
                                   poll_file_fd=self.portfile,
                                   poll_timeout=TIMEOUT,
                                   matchfunc=matcher)

        # poller takes care of the file
        self.tf = None

        poll_deferred = poller.run()
        poll_deferred.addCallback(self._setup_port)
        poll_deferred.addErrback(self._port_error)
        # defer to the poller
        return poll_deferred

    def _setup_port(self, content):
        """Set the port in the database"""
        myport = int(content)
        # check is performaned by matcher, so assert here
        assert 0 < myport < 65536, "Invalid Port passed"
        self.set_port(myport)
        self.svc_port = myport

        # The next callback expects a svc instance, so return self
        return self

    def _port_error(self, failure):
        """No port number found, handle error cases."""
        # stop the server first
        self.stop()

        # check what failed and re-raise all other exceptions
        ex = failure.check(usutil.Timeout, InvalidPortError, ProcessDead)
        if ex == usutil.Timeout:
            self.log("Timeout occurred while waiting for ReportServer to start", 0, misc.kLogErr)
        elif ex == InvalidPortError:
            self.log(failure.getErrorMessage(), 0, misc.kLogErr)
        elif ex == ProcessDead:
            self.log("ReportServer process died.", 0, misc.kLogErr)
        return failure

    def stop(self):
        try:
            super(PowerReportsServer, self).stop()
        finally:
            # ALWAYS reset port on stop
            self.set_port(0)
            self.svc_port = 0

    def __str__(self):
        if self.is_alive():
            return '%s is running' % (self.servicename)
        else:
            return '%s is *NOT* running' % (self.servicename)

    def get_service_url(self):
        return self.node.get_url(False)

    def get_admin_url(self):
        return ""
