# !/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

import io
import os
import sys
import urllib

from cdb import CADDOK, elink, objects

from cs.tools.powerreports.reportserver import reportlib

ELINK_LABELS = {}


class Report(elink.Template):
    """ Die benoetigte MHT-Datei und den Titel des
        Reports ermitteln, Encoding muss entsprechend
        gesetzt werden, da im Titel Umlaute vorkommen koennen."""

    __template__ = "report.html"

    def render(self, context, **varkw):

        # Dateiname (*.pdf)
        if "filename" in varkw:
            filename = varkw.get("filename", "")
            context.filename = filename.replace('\\', '/')

        # Titel (des Reports)
        if "title" in varkw:
            title = varkw.get("title", "")
            title = urllib.unquote(title)
            title = unicode(title)

        # Exceldatei
        if "excel" in varkw:
            excel = varkw.get("excel", "")
            context.excel = excel.replace('\\', '/')

        # Reportsprache
        language = varkw.get("lang", "")

        # Reporttyp
        rep_exec_type = varkw.get("exectype", "")

        # Reportformat
        report_format = varkw.get("format", "")

        # Subreport (Titel)
        if "subreport" in varkw:
            subrep = varkw.get("subreport", "")
            subrep = urllib.unquote(subrep)
            subrep = unicode(subrep)

        #URL erstellen
        if "oid" in varkw:
            obj_id = varkw.get("oid", "")
            obj = objects.ByID(obj_id)
            myargs = {'cdb::argument.cdbxml_report_subreport': "subrepflag",
                      'cdb::argument.cdbxml_report_skip_dlg': 1,
                      'cdb::argument.cdbxml_report_lang': language,
                      'cdb::argument.cdbxml_rep_exec_type': rep_exec_type,
                      'cdb::argument.cdbxml_report_format': report_format}
            url = obj.MakeURL("cdbxml_excel_report", plain=0, **myargs)
            url = urllib.unquote(url)
            url = url.replace("subrepflag", subrep)
            context.url = url
        else:
            context.url = None

        return {"page_title": title}


# Elink-Application Klasse
@elink.using_template_engine("chameleon")
class ReportApp(elink.Application):

    def setup(self):
        self.add("report", Report())


# lazy instantiation
_APP = None


def _getapp():
    global _APP
    if _APP is None:
        _APP = ReportApp("Report Panel Application")
    return _APP


def handle_request(req):
    """Shortcut to the app"""
    return _getapp().handle_request(req)


class ReportRequest(object):

    def __init__(self, filepath, **kwargs):
        self.path = None
        self.filepath = filepath
        self.type = ""
        self.subtype = ""
        self.base_uri = "%s/" % reportlib.getConfValue("REPORT_ELINK_SERVER_URL")
        self.image_uri = "%sresources/images/" % self.base_uri
        form_data = {}
        # Wrap strings to unicode, because this is called
        # by powerscript instead of http request =>
        # the parameters are not served in template encoding
        # but in system encoding!
        charset = sys.getdefaultencoding()
        for k in kwargs:
            if isinstance(kwargs[k], str):
                form_data[k] = kwargs[k].decode(charset)
            else:
                form_data[k] = kwargs[k]
        self.form_data = form_data
        self.script_name = ""

    def text(self):
        data = ""
        assert isinstance(self.filepath, unicode)
        with io.open(self.filepath, "r", encoding="utf-8") as fobj:
            data = fobj.read()
        return data

    def write(self, data):
        assert isinstance(self.filepath, unicode)
        with io.open(self.filepath, "w", encoding="utf-8") as fobj:
            fobj.write(unicode(data))


def renderHtml(fname, **form_data):
    fpath = os.path.join(CADDOK.TMPDIR, fname)
    req = ReportRequest(fpath, **form_data)
    tpl = _getapp()._pathmap["report"]
    if tpl:
        elink.setCurrentRequest(req)
        tpl._render(req)
    return fpath
