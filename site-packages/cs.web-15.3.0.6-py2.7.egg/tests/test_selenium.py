from selenium.webdriver.common.action_chains import ActionChains

from cs.web.components.favorites import model
from cs.web.automation import WebTest, SidebarMixin, ModalMixin

PERSNO = 'caddok'


class FavoritesTest(WebTest, SidebarMixin, ModalMixin):
    def setUp(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        self._favorite = model.Favorite.Create(
            cdb_cpersno=PERSNO,
            title='testeintrag',
            frontend_url='/info/organization/131',
            icon_url='/resources/icons/byname/cdb_organization?')

        super(FavoritesTest, self).setUp()

    def test_favorites(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        with self.sidebar_expanded() as sidebar_element:
            # Get the collapsible, wait until its control is visible, then click
            favorites_collapsible = self.get_ce_element('FavoritesView', parent=sidebar_element)
            favorites_button = favorites_collapsible.get_ce_element('CollapsibleControl')
            self.wait_for(lambda _: favorites_button.is_displayed())
            if favorites_button.get_ce_state() == 'collapsed':
                favorites_button.click()

            self.run_edit_dialog(favorites_collapsible, favorites_button, 1)
            self.run_edit_dialog(favorites_collapsible, favorites_button, 0)

            self.run_delete_dialog(favorites_collapsible, favorites_button, 1)
            self.run_delete_dialog(favorites_collapsible, favorites_button, 0)

            favorites_button.click()  # Einklappen

    def run_edit_dialog(self, favorites_collapsible, favorites_button, button_index):
        # --------------- Edit: Hover for Controls
        entry_0 = favorites_collapsible.get_ce_element('FavoriteEntry_1')
        self.wait_for(lambda _: entry_0.is_displayed())

        label_text = entry_0.text.strip()

        hover_action = ActionChains(self._driver).move_to_element(favorites_button)
        hover_action.perform()

        hover_action = ActionChains(self._driver).move_to_element(entry_0)
        hover_action.perform()

        edit_button = entry_0.get_ce_element('EditButton')
        self.wait_for(lambda _: edit_button.is_displayed())
        edit_button.click()
        # ----------------------------------

        # ---------------- Edit: Modal is visible
        text_field = self.get_modal().get_ce_element('TextField')
        self.wait_for(lambda _: text_field.is_displayed())
        text_field.find_element_by_tag_name("input").send_keys("Renamed Test Favorite")

        footer = self.get_modal().get_ce_element('ModalFooter')
        footer.find_elements_by_tag_name('button')[button_index].click()
        self.wait_for(lambda _: not self.get_modal())
        # ---------------- Modal is gone

        # Return label before, label after
        return entry_0.text.strip(), label_text

    def run_delete_dialog(self, favorites_collapsible, favorites_button, button_index):
        # --------------- Cancel: Hover for Controls
        entry_0 = favorites_collapsible.get_ce_element('FavoriteEntry_1')
        self.wait_for(lambda _: entry_0.is_displayed())

        hover_action = ActionChains(self._driver).move_to_element(favorites_button)
        hover_action.perform()

        hover_action = ActionChains(self._driver).move_to_element(entry_0)
        hover_action.perform()

        delete_button = entry_0.get_ce_element('DeleteButton')
        self.wait_for(lambda _: delete_button.is_displayed())
        delete_button.click()
        # ----------------------------------

        # ---------------- Cancel: Modal is visible
        footer = self.get_modal().get_ce_element('ModalFooter')
        self.wait_for(lambda _: footer.is_displayed())
        footer.find_elements_by_tag_name('button')[button_index].click()
        self.wait_for(lambda _: not self.get_modal())
        # ---------------- Modal is gone
