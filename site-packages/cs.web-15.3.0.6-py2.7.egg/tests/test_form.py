#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
"""
from cdb.objects.org import Person
from cs.web.automation import WebTest

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_form.py 153293 2017-02-08 10:52:04Z cla $"

from cs.web.automation import WebTest, TableMixin, ModalMixin
from nose.tools import eq_, ok_


class TestEditUser(WebTest):
    def setUp(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        self.init_web_ui("http://localhost/info/person/caddok")

    def test_aborting_modify_operation(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        text_changed_to = 'personal number changed'
        self.wait_for(lambda _: self.get_ce_element('CDB_Modify'))
        edit_button = self.get_ce_element('CDB_Modify')
        self.wait_for(lambda _: self.get_ce_element('angestellter.login'))
        person_field = self.get_ce_element('angestellter.login')
        text_original = person_field.get_attribute('value')
        read_only = person_field.get_attribute('readonly')
        if edit_button and read_only:
            edit_button.click()
            self.wait_for(
                lambda _: (not person_field.get_attribute('readonly')))
            read_only = person_field.get_attribute('readonly')
            ok_(not read_only)

            # Check the existence of buttons
            tool_bar_element = self.get_ce_element('form-action-toolbar')
            buttons = tool_bar_element.find_elements_by_tag_name('button')
            eq_(len(buttons), 2)

        # editing text
        person_field.clear()  # clean the text field
        person_field.send_keys(text_changed_to)
        text_changed = person_field.get_attribute('value')
        eq_(text_changed, text_changed_to)

        # cancel modify operation
        tool_bar_element = self.get_ce_element('form-action-toolbar')
        cancel_op = tool_bar_element.get_ce_element('type-1')
        cancel_op.click()
        self.wait_for(lambda _: person_field.get_attribute('readonly'))
        self.wait_for(lambda _: person_field.get_attribute('value') == text_original)

    def test_oking_modify_operation(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        text_changed_to = 'lastname changed'
        edit_button = self.wait_for_element('CDB_Modify', is_displayed=True)
        person_field = self.wait_for_element('angestellter.lastname', is_displayed=True)
        ok_(edit_button and person_field.get_attribute('readonly'))

        edit_button.click()
        self.wait_for(lambda _: (not person_field.get_attribute('readonly')))
        ok_(not person_field.get_attribute('readonly'))  # assert edit mode active

        # editing text
        person_field.clear()  # clean the text field
        person_field.send_keys(text_changed_to)
        text_changed = person_field.get_attribute('value')
        eq_(text_changed, text_changed_to)

        # cancel modify operation
        tool_bar_element = self.get_ce_element('form-action-toolbar')
        ok_op = tool_bar_element.get_ce_element('type-0')
        ok_op.click()
        self.wait_for(lambda _: person_field.get_attribute('readonly'))


class TestNewUser(WebTest, TableMixin, ModalMixin):
    def setUp(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        self.init_web_ui("http://localhost/info/person?action=create&cdb_class=angestellter&display_name=Anwender")

    def test_cancel_catalog(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        organization_field = self.wait_for_element('cdb_org.orgname', is_displayed=True)
        open_catalog_button = organization_field.get_ce_element('TableCatalog.opencatalog')
        open_catalog_button.click()

        self.wait_for_element('TableCatalog.cancelcatalog', is_displayed=True).click()

    def input_text_field(self, key, value):
        self.wait_for_element(key, is_displayed=True).send_keys(value)

    def input_table_catalog(self, key, index):
        field = self.wait_for_element(key, is_displayed=True)
        self.create_action_chains().move_to_element(field).perform()
        open_catalog_button = field.get_ce_element('TableCatalog.opencatalog')
        open_catalog_button.click()

        self.wait_for(lambda _: self.get_modal())
        table_rows = self.get_table_rows(self.get_modal())
        radio_button = table_rows[index].find_element_by_xpath('//*[@type=\'radio\']')
        self.create_action_chains().move_to_element(radio_button).click().perform()

        self.wait_for_element('TableCatalog.submitcatalog', is_displayed=True).click()

    def test_create_user(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        self.input_text_field('angestellter.personalnummer', 'foobah')
        self.input_text_field('angestellter.lastname', 'Foori')
        self.input_table_catalog('cdb_org.orgname', 0)
        self.input_text_field('angestellter.login', 'foobah')
        self.input_table_catalog('angestellter.password_rule', 0)

        # submit form
        new_button = self.get_ce_element('form-action-toolbar').get_ce_element('type-0')
        self.create_action_chains().move_to_element(new_button).click().perform()

        self.wait_for(lambda _: self._driver.find_element_by_xpath(
            '//*[@class=\'detail-header\']').find_element_by_xpath(
            '//*[@class=\'object-description\']').text.startswith('Foo'))

    def tearDown(self):
        from cdb.objects.org import Person
        p = Person.ByKeys('foobah')
        if p:
            p.Delete()


class SearchFormTest(WebTest, TableMixin):
    def setUp(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        self.init_web_ui("http://localhost/info/person?search_attrs=%7B\"angestellter.personalnummer\"%3A\"\"%7D")

    def test_search_operation_with_conditions(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        driver = self._driver

        def get_result_list():
            search_results = self.wait_for_element('SearchResults')
            if not search_results:
                assert False
            return self.get_table_rows(search_results)

        self.wait_for(lambda _: self.get_ce_element('type-0'))
        submit_button = self.get_ce_element('type-0')
        self.wait_for(lambda _: self.get_ce_element('angestellter.login'))
        person_field = self.get_ce_element('angestellter.login')
        read_only = person_field.get_attribute('readonly')
        if submit_button and not read_only:
            person_field.clear()
            person_field.send_keys("caddok")
            submit_button.click()
            table_rows = get_result_list()
            self.assertTrue(table_rows, "Should have found results")
            self.assertEqual(len(table_rows), 2, "Should have exactly two "
                             "rows including header row")

            previous_url = driver.current_url
            table_rows[1].click()

            self.wait_for(lambda _: (not driver.current_url == previous_url))
            self.assertTrue(
                driver.current_url.endswith("ui/person/caddok"),
                "Should have opened person detail page")
            driver.execute_script("window.history.go(-1)")
            table_rows = get_result_list()
            self.assertTrue(table_rows, "Should have found results")
            self.assertEqual(len(table_rows), 2, "Should have exactly two "
                             "rows including header row again")
            driver.execute_script("window.history.go(-1)")
            self.wait_for(lambda _: self.get_ce_element('angestellter.login'))
            person_field = self.get_ce_element('angestellter.login')
            self.assertEqual(person_field.get_attribute("value"), "caddok",
                             "Value of login input should be 'caddok' again")
        else:
            assert False

    def test_search_operation_all(self):
        self.skipTest("BROKEN. PLEASE REVIEW!")

        self.wait_for(lambda _: self.get_ce_element('submit-search'))
        submit_button = self.get_ce_element('submit-search')
        if submit_button:
            submit_button.click()
            self.wait_for(lambda _: (self.get_ce_element('search-results')))
            search_results = self.get_ce_element('search-results')
            self.assertTrue(search_results, "Should have seen search results")
            # Count rows in a table
            self.wait_for(
                lambda _: (search_results.find_elements_by_class_name(
                           'cs-web-components-base-table')))
            table = search_results.find_element_by_class_name(
                'cs-web-components-base-table')
            table_rows = table.find_elements_by_tag_name('tr')
            self.assertTrue(table_rows, "Should have found results")
            self.assertGreater(len(table_rows), 2, "Should have more than two "
                               "rows including header row")
        else:
            self.fail("Submit button was not found!")
