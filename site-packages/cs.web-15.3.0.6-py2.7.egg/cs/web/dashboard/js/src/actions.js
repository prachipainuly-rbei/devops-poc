/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: actions.js 180806 2018-07-20 13:19:39Z sla $"
 */

/**
 * @module
 */

import Immutable from 'immutable';
import {getJSON, postJSON, putJSON, deleteObject} from 'cs-web-components-base';
import {Actions, DASHBOARD_STORE, DASHBOARD_API} from './constants.js';

export function initItems(active_dashboard) {
    return (dispatch) => {
        dispatch({
            type: Actions.SET_LOADING_STATE,
            payload: null
        });
        const url = active_dashboard.get('items_link');
        getJSON(url).then(data => {
            dispatch({
                type: Actions.INIT_ITEMS,
                payload: data
            });
        },
        err => {
            dispatch({
                type: Actions.CREATE_ITEM_FAILED,
                payload: err,
                error: true
            });
        });
    };
}

export function setDashboard(dashboards, active_dashboard) {
    return dispatch => {
        dispatch({
            type: Actions.SET_DASHBOARD,
            payload: {dashboards}
        });
        dispatch(initItems(active_dashboard));
    };
}

export function switchLayout(layout, active_dashboard) {
    return (dispatch) => {
        dispatch({
            type: Actions.SWITCH_LAYOUT,
            payload: {layout, dboard_id: active_dashboard.get('cdb_object_id')}
        });
        const url = active_dashboard.get('@id');
        putJSON(url, {layout: layout}).then(data => {
            dispatch({
                type: Actions.SWITCH_LAYOUT,
                payload: {layout: data.layout, dboard_id: active_dashboard.get('cdb_object_id')}
            });
        },
        err => {
            dispatch({
                type: Actions.CREATE_ITEM_FAILED,
                payload: err,
                error: true
            });
        });
    };
}

export function renameDashboard(name, active_dashboard) {
    return (dispatch) => {
        const url = active_dashboard.get('@id');
        putJSON(url, {name: name}).then(data => {
            dispatch({
                type: Actions.RENAME_DASHBOARD,
                payload: {name: data.name, dboard_id: active_dashboard.get('cdb_object_id')}
            });
        },
        err => {
            dispatch({
                type: Actions.CREATE_ITEM_FAILED,
                payload: err,
                error: true
            });
        });
    };
}

export function deleteDashboard(active_dashboard) {
    return (dispatch) => {
        deleteObject(active_dashboard.get('@id')).then(() => {
            dispatch({
                type: Actions.DASHBOARD_DELETED,
                payload: {dboard_id: active_dashboard.get('cdb_object_id')}
            });
        },
        err => {
            dispatch({
                type: Actions.CREATE_ITEM_FAILED,
                payload: err,
                error: true
            });
        });
    };
}

export function finalizeMoveItem(origItem, targetDashboard) {
    return (dispatch, getState) => {
        const store = getState()[DASHBOARD_STORE];
        const dashboards = store.get('dashboards').valueSeq().toList();
        dispatch({
            type: Actions.NORMALIZE_POSITIONS,
            payload: origItem
        });
        const data = getState()[DASHBOARD_STORE]
            .get('items')
            .map(item => ({
                xpos: item.get('xpos'),
                ypos: item.get('ypos')
            }));
        const url = targetDashboard ?
            targetDashboard.get('items_link') :
            dashboards.get(store.get('activeIndex')).get('items_link');
        putJSON(url, {positions: data}).then(result => {
            dispatch({
                type: Actions.INIT_ITEMS,
                payload: result
            });
        },
        err => {
            dispatch({
                type: Actions.CREATE_ITEM_FAILED,
                payload: err,
                error: true
            });
        });
    };
}

export function createItem(args, targetDashboard) {
    const tempId = args.cdb_object_id;
    return (dispatch, getState) => {
        dispatch({
            type: Actions.CREATE_ITEM,
            payload: args
        });
        const url = targetDashboard.get('items_link');
        postJSON(url, args).then(
            data => {
                dispatch({
                    type: Actions.CREATED_ITEM,
                    payload: data,
                    meta: {
                        tempId: tempId
                    }
                });
                const newItem = getState()[DASHBOARD_STORE].getIn(['items', data.cdb_object_id]);
                return dispatch(finalizeMoveItem(newItem, targetDashboard));
            },
            err => {
                dispatch({
                    type: Actions.CREATE_ITEM_FAILED,
                    payload: err,
                    error: true,
                    meta: {
                        tempId: tempId
                    }
                });
            }
        );
    };
}

export function createDashboard(name) {
    const args = {
        name: name
    };

    return dispatch => {
        dispatch({
            type: Actions.CREATE_DASHBOARD,
            payload: name
        });
        postJSON(DASHBOARD_API, args).then(
            data => {
                dispatch({
                    type: Actions.CREATED_DASHBOARD,
                    payload: data
                });
                dispatch(initItems(Immutable.fromJS(data)));
            },
            err => {
                dispatch({
                    type: Actions.CREATE_DASHBOARD_FAILED,
                    payload: err,
                    error: true
                });
            }
        );
    };
}

export function copyDashboard(active_dashboard) {
    const name = active_dashboard.get('name');
    const args = {
        source_id: active_dashboard.get('cdb_object_id')
    };

    return dispatch => {
        dispatch({
            type: Actions.CREATE_DASHBOARD,
            payload: name
        });
        postJSON(DASHBOARD_API, args).then(
            data => {
                dispatch({
                    type: Actions.CREATED_DASHBOARD,
                    payload: data
                });
                dispatch(initItems(Immutable.fromJS(data)));
            },
            err => {
                dispatch({
                    type: Actions.CREATE_DASHBOARD_FAILED,
                    payload: err,
                    error: true
                });
            }
        );
    };
}

export function switchDashboard(index) {
    return dispatch => {
        dispatch({
            type: Actions.SWITCH_DASHBOARD,
            payload: index
        });
    };
}

export function deleteItem(item) {
    return dispatch => {
        dispatch({
            type: Actions.DELETE_ITEM,
            payload: item
        });
        deleteObject(item.get('@id'));
    };
}

export function duplicateItem(item) {
    return (dispatch, getState) => {
        const store = getState()[DASHBOARD_STORE];
        const dashboard_idx = store.get('activeIndex');
        const dashboard = store.get('dashboards').valueSeq().toList().get(dashboard_idx);

        postJSON(item.get('@id'), {}).then(
            () => {
                dispatch(initItems(dashboard));
            },
            err => {
                dispatch({
                    type: Actions.CREATE_ITEM_FAILED,
                    payload: err,
                    error: true
                });
            }
        );
    };
}

export function moveItemBefore(id, beforeId) {
    return {
        type: Actions.MOVE_ITEM_BEFORE,
        payload: {
            id, beforeId
        }
    };
}

export function revertMoveItem(origItem) {
    return {
        type: Actions.REVERT_MOVE_ITEM,
        payload: origItem
    };
}

export function moveItemToColumn(id, column) {
    return {
        type: Actions.MOVE_ITEM_TO_COLUMN,
        payload: {id, column}
    };
}

/**
 * Redux action method to store the settings for a dashboard element.
 *
 * @param {Immutable.Map} item     The item represented by the dashboard element
 * @param {Immutable.Map} settings The data for the element
 */
export function setSettings(item, settings) {
    return dispatch => {
        dispatch({
            type: Actions.SET_SETTINGS,
            payload: {
                item,
                settings
            }
        });
        putJSON(item.get('@id'), {settings}).then(result => {
            dispatch({
                type: Actions.UPDATE_ITEM,
                payload: result
            });
        });
    };
}

let setItemCollapsedCounter = 0;

export function setItemCollapsed(item, collapsed) {
    const setItemCollapsedId = ++setItemCollapsedCounter;
    return dispatch => {
        dispatch({
            type: Actions.SET_ITEM_COLLAPSED,
            payload: {
                item,
                collapsed
            }
        });
        putJSON(item.get('@id'), {collapsed}).then(result => {
            if (setItemCollapsedId === setItemCollapsedCounter) {
                dispatch({
                    type: Actions.UPDATE_ITEM,
                    payload: result
                });
            }
        });
    };
}

export function setEditMode(editModeActive) {
    return dispatch => {
        dispatch({
            type: Actions.SET_EDIT_MODE,
            payload: editModeActive
        });
    };
}
