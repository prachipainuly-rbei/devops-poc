/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: LayoutSelection.jsx 168767 2017-11-17 15:25:10Z gwe $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import {Dialog} from 'cs-web-components-base';
import {Layouts, ColumnWidths} from './constants.js';
import {formatStr} from './i18n.js';

const reduce = (numerator, denominator) => {
    const gcd = (a, b) => {
        return b ? gcd(b, a % b) : a;
    };
    const theGCD = gcd(numerator, denominator);
    return [numerator / theGCD, denominator / theGCD];
};

function LayoutSymbol(props) {
    const columns = props.layout.get('columns');
    const baseColCnt = columns.map(c => ColumnWidths[c]).reduce((a, b) => a + b, 0);
    const canUse = props.maxColumn < columns.size;
    const clsnames = classNames(
        `${componentNameSpace}-layout-symbol--${baseColCnt}`,
        {
            [`${componentNameSpace}-layout-symbol--selected`]: props.selected,
            [`${componentNameSpace}-layout-symbol--inactive`]: !canUse
        }
    );
    return (
        <div className={`${componentNameSpace}-layout-symbol`}>
            <div className={clsnames}
                 title={canUse ? undefined : formatStr('cant_use_layout')}
                 onClick={canUse ? () => props.callback(props.id) : undefined}>
                {columns.map((col, idx) => {
                    const cn = classNames(
                        `${componentNameSpace}-layout-symbol__column`,
                        `${componentNameSpace}-layout-symbol__column--${col}`
                    );
                    const [num, den] = reduce(ColumnWidths[col], baseColCnt);
                    const fraction = `${num}/${den}`;
                    return (
                        <div key={idx} className={cn}>
                            <div className={`${componentNameSpace}-layout-symbol__inner-column`}>
                                <div className={`${componentNameSpace}-layout-symbol__caption`}>
                                    {fraction}
                                </div>
                            </div>
                        </div>
                    );
                })}
            </div>
        </div>
    );
}
LayoutSymbol.propTypes = {
    layout: ImmutablePropTypes.map.isRequired,
    id: PropTypes.string.isRequired,
    maxColumn: PropTypes.number.isRequired,
    selected: PropTypes.bool.isRequired,
    callback: PropTypes.func.isRequired
};

export default class LayoutSelection extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            selectedId: props.currentLayoutId
        };
        this.onCancel = this.onCancel.bind(this);
        this.layoutClicked = this.layoutClicked.bind(this);
        this.onOK = this.onOK.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.currentLayoutId !== nextProps.currentLayoutId) {
            this.setState({selectedId: nextProps.currentLayoutId});
        }
    }

    onOK() {
        this.props.onSelect(this.state.selectedId);
    }

    onCancel() {
        const {onHide, currentLayoutId} = this.props;
        onHide();
        this.setState({selectedId: currentLayoutId});
    }

    layoutClicked(layoutId) {
        this.setState({selectedId: layoutId});
    }

    render() {
        return (
            <Dialog.Dialog
                title={formatStr('set_layout')}
                buttons={[
                    <Dialog.Buttons.Apply
                        key="apply"
                        onClick={this.onOK} />,
                    <Dialog.Buttons.Cancel
                        key="cancel"
                        onClick={this.onCancel} />
                ]}
                size={Dialog.SIZE_SMALL}
                showCancel show={this.props.show}
                onHide={this.onCancel}
            >
                <div className={`${componentNameSpace}-layout-selection-body`}>
                    {Layouts.map((layout, id) => (
                         <LayoutSymbol key={id}
                                       layout={layout}
                                       id={id}
                                       maxColumn={this.props.maxColumn}
                                       selected={this.state.selectedId === id}
                                       callback={this.layoutClicked} />
                     )).toArray()}
                </div>
            </Dialog.Dialog>
        );
    }
}
LayoutSelection.propTypes = {
    show: PropTypes.bool,
    currentLayoutId: PropTypes.string.isRequired,
    maxColumn: PropTypes.number.isRequired,
    onSelect: PropTypes.func.isRequired,
    onHide: PropTypes.func.isRequired
};
