/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ObjectListWidget.jsx 173995 2018-03-05 10:12:36Z sla $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {getJSON, Table, TableWrapper} from 'cs-web-components-base';
import DashboardItem from '../DashboardItem.jsx';

/**
 * Generic widget that displays a list of objects either as a simple bootstrap table,
 * when placed in a small column, or as a configured table otherwise. This must be
 * used inside a component that supplies the URL to query for data.
 * NOTE: the collectionURL property must include the "_as_table" query parameter!
 */
export default class ObjectListWidget extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            searchResult: undefined,
            searchResultMinified: props.collectionURLMinified ? undefined : null
        };
    }

    componentDidMount() {
        const {collectionURL, collectionURLMinified} = this.props;
        getJSON(collectionURL).then(result => {
            this.setState({
                searchResult: Immutable.fromJS(result)
            });
        });
        if (collectionURLMinified) {
            getJSON(collectionURLMinified).then(result => {
                this.setState({
                    searchResultMinified: Immutable.fromJS(result)
                });
            });
        }
    }

    renderContentSmall() {
        const {searchResultMinified} = this.state;

        if (searchResultMinified === null) {
            return this.renderContentMedium();
        }

        return (
            <TableWrapper
                tableDef={searchResultMinified.get('tabledef')}
                rowValues={searchResultMinified.get('rows')}
                table={() => Table.SimpleTable} />
        );
    }

    renderContentMedium() {
        const {searchResult} = this.state;
        return (
            <TableWrapper
                tableDef={searchResult.get('tabledef')}
                rowValues={searchResult.get('rows')}
                table={() => Table.SimpleTable} />
        );
    }

    renderBody() {
        const {searchResult, searchResultMinified} = this.state;
        if (searchResult === undefined || searchResultMinified === undefined) {
            return "Loading ...";
        }
        switch (this.props.columnWidth) {
            case 'small':
                return this.renderContentSmall();
            default:
                return this.renderContentMedium();
        }
    }

    render() {
        const {item, title} = this.props;
        return (
            <DashboardItem item={item} title={title}>
                {this.renderBody()}
            </DashboardItem>
        );
    }
}

ObjectListWidget.propTypes = {
    // dashboard infrastructure
    item: ImmutablePropTypes.map.isRequired,
    columnWidth: PropTypes.oneOf(['small', 'medium']).isRequired,
    setSettings: PropTypes.func.isRequired,
    // to be supplied by using component
    title: PropTypes.string.isRequired,
    collectionURL: PropTypes.string.isRequired,
    collectionURLMinified: PropTypes.string
};
