/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ObjectWidget.jsx 179271 2018-06-20 08:36:20Z vov $"
 */

import React from 'react';
import {Button} from 'cs-web-components-base';
import {PropTypes, connect, ImmutablePropTypes} from 'cs-web-components-externals';
import {fetchObject, getPlugin, Tiles, ObjectWidgets, Dialog} from 'cs-web-components-base';
import {formatStr} from '../i18n.js';
import DashboardItem from '../DashboardItem.jsx';

class ObjectWidget extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            tileComponent: undefined,
            showConfig: false,
            tempValue: null
        };
        this.openConfig = this.openConfig.bind(this);
        this.cancelConfig = this.cancelConfig.bind(this);
        this.saveConfig = this.saveConfig.bind(this);
        this.onSelectItem = this.onSelectItem.bind(this);
    }

    componentDidMount() {
        const {contextObjectId, contextObject, fetchObject} = this.props;
        if (contextObjectId !== undefined && contextObject === undefined) {
            fetchObject(contextObjectId);
        }
        if (contextObject !== undefined) {
            this.setTile(contextObject);
        }
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.contextObjectId !== nextProps.contextObjectId
                && nextProps.contextObjectId !== undefined)
        {
            nextProps.fetchObject(nextProps.contextObjectId);
        }
        if (this.props.contextObject !== nextProps.contextObject) {
            if (nextProps.contextObject === undefined) {
                this.setState({tileComponent: undefined});
            }
            else {
                this.setTile(nextProps.contextObject);
            }
        }
    }

    setTile(contextObject) {
        const clsName = contextObject.get('system:classname');
        const tile = getPlugin('class-tile-small', cn => cn === clsName, Tiles.FallbackTile);
        this.setState({tileComponent: tile});
    }

    openConfig() {
        const {contextObjectId} = this.props;
        this.setState({
            showConfig: true,
            tempValue: contextObjectId
        });
    }

    cancelConfig() {
        this.setState({showConfig: false});
    }

    saveConfig() {
        const {item, setSettings} = this.props;
        this.setState({showConfig: false});
        setSettings(item, {contextObjectId: this.state.tempValue});
    }

    onSelectItem(item) {
        this.setState({
            tempValue: item.get('rest_url')
        }, () => {
            this.saveConfig();
        });
    }

    renderInputDialog() {
        const {showConfig} = this.state;
        return (
            <Dialog.Dialog
                title={formatStr('object_widget_select')}
                show={showConfig}
                showCancel={true}
                onHide={this.cancelConfig}>
                <ObjectWidgets.ObjectSearch
                      id='object-widget-search'
                      onSelectItem={this.onSelectItem}
                      searchPlaceholder={formatStr('object_widget_search')} />
            </Dialog.Dialog>
        );
    }

    render() {
        const TileComponent = this.state.tileComponent;
        const {contextObject} = this.props;
        const title =
            (contextObject === undefined) ?
                formatStr('object_no_title')
                : contextObject.get('system:description');
        return (
            <DashboardItem
                    item={this.props.item}
                    title={title}
                    configCallback={this.openConfig}>
                {(TileComponent === undefined) ?
                  <Button.TextButton
                      buttonStyle="link"
                      label={formatStr('object_widget_select')}
                      onClick={this.openConfig}
                  />
                : <TileComponent contextObject={contextObject} />
                }
                {this.renderInputDialog()}
            </DashboardItem>
        );
    }
}
ObjectWidget.propTypes = {
    item: ImmutablePropTypes.map.isRequired,
    fetchObject: PropTypes.func.isRequired,
    setSettings: PropTypes.func.isRequired,
    contextObjectId: PropTypes.string,
    contextObject: ImmutablePropTypes.map
};

function mapStateToProps(state, ownProps) {
    const {item} = ownProps;
    const contextObjectId = item.getIn(['settings', 'contextObjectId']);
    const contextObject =
        (contextObjectId === undefined) ?
            undefined
            : state.objectsById.get(contextObjectId);
    return {
        contextObjectId,
        contextObject
    };
}

export default connect(mapStateToProps, {fetchObject})(ObjectWidget);
