/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TextNoteWidget.jsx 164024 2017-08-28 06:27:26Z gwe $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import {Dialog, FormControl} from 'cs-web-components-base';
import {formatStr} from '../i18n.js';
import DashboardItem from '../DashboardItem.jsx';

function ColorPatch(props) {
    const {color, selected, callback} = props;
    const clsNames = classNames(
        `${componentNameSpace}-text-note-config__colors--frame`,
        {[`${componentNameSpace}-text-note-config__colors--selected`]: selected}
    );
    return (
        <div className={clsNames}>
            <div className={`${componentNameSpace}-text-note-config__colors--color${color}`}
                onClick={() => callback(color)}>
            </div>
        </div>
    );
}
ColorPatch.propTypes = {
    color: PropTypes.number.isRequired,
    selected: PropTypes.bool.isRequired,
    callback: PropTypes.func.isRequired
};

export default class TextNoteWidget extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showConfig: false
        };
        this.defaultTitle = formatStr('text_no_title');
        this.configTitle = formatStr('text_config');
        this.openConfig = this.openConfig.bind(this);
        this.cancelConfig = this.cancelConfig.bind(this);
        this.saveConfig = this.saveConfig.bind(this);
        this.handleTitleChange = this.handleTitleChange.bind(this);
        this.handleContentChange = this.handleContentChange.bind(this);
        this.handleColorChange = this.handleColorChange.bind(this);
    }

    openConfig() {
        const {item} = this.props;
        this.setState({
            showConfig: true,
            title: item.getIn(['settings', 'title'], ''),
            content: item.getIn(['settings', 'content'], ''),
            color: item.getIn(['settings', 'color'], 0)
        });
    }

    cancelConfig() {
        this.setState({showConfig: false});
    }

    saveConfig() {
        const {item, setSettings} = this.props;
        const {title, content, color} = this.state;
        this.setState({showConfig: false});
        setSettings(item, {title, content, color});
    }

    handleTitleChange(value) {
        this.setState({title: value});
    }

    handleContentChange(event) {
        this.setState({content: event.target.value});
    }

    handleColorChange(value) {
        this.setState({color: value});
    }

    renderConfigurationDialog() {
        if (!this.state.showConfig) {
            return null;
        }
        return (
            <Dialog.Dialog title={this.configTitle}
                           buttons={[
                               <Dialog.Buttons.Save key="save" onClick={this.saveConfig} />,
                               <Dialog.Buttons.Cancel key="cancel" onClick={this.cancelConfig} />
                           ]}
                           showCancel
                           onHide={this.cancelConfig}>
                <FormControl.TextInput
                          name="title_input"
                          label="Titel"
                          value={this.state.title}
                          onValueChange={this.handleTitleChange} />
                <FormControl.TextArea
                          name="content_input"
                          label="Inhalt"
                          value={this.state.content}
                          onChange={this.handleContentChange}
                          rows={6} />
                <div className={`${componentNameSpace}-text-note-config__colors`}>
                    {Immutable.Range(0, 6).map(i => (
                         <ColorPatch key={i}
                                     color={i}
                                     selected={this.state.color === i}
                                     callback={this.handleColorChange} />))}
                </div>
            </Dialog.Dialog>
        );
    }

    render() {
        const {item} = this.props;
        const clsNames = classNames(
            `${componentNameSpace}-text-note-content`,
            `${componentNameSpace}-text-note-content--color${item.getIn(['settings', 'color'], 0)}`
        );
        return (
            <DashboardItem
                    item={item}
                    title={item.getIn(['settings', 'title'], this.defaultTitle)}
                    configCallback={this.openConfig}>
                <div className={clsNames}>
                    {item.getIn(['settings', 'content'], '')}
                </div>
                {this.renderConfigurationDialog()}
            </DashboardItem>
        );
    }
}
TextNoteWidget.propTypes = {
    item: ImmutablePropTypes.map.isRequired,
    setSettings: PropTypes.func.isRequired
};
