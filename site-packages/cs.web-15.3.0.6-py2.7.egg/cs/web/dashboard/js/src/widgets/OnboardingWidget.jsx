/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: OnboardingWidget.jsx 174212 2018-03-08 10:50:39Z vov $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import {Button, Channel} from 'cs-web-components-base';
import {formatStr} from '../i18n.js';
import DashboardItem from '../DashboardItem.jsx';
import DashboardMime from './resources/dashboard-mime.svg';


class IconAndTextAction extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
            hoverClass: `${componentNameSpace}-onboarding-text-like-link-inactive`
        };
    }

    mouseHover(entered) {
        if (entered) {
            this.setState({
                hoverClass: `${componentNameSpace}-onboarding-text-like-link`
            });
        } else {
            this.setState({
                hoverClass: `${componentNameSpace}-onboarding-text-like-link-inactive`
            });
        }
    }

    render() {
        return (
            <div className={`${componentNameSpace}-onboarding-action-link`}>
                <span className={`${componentNameSpace}-onboarding-cursor`}
                        onClick={this.props.onClick}>
                    <Button.IconButton iconName={this.props.iconName}
                                    size={this.props.iconSize}
                                    buttonStyle="success" />
                    <span className={this.state.hoverClass}
                        onMouseEnter={() => this.mouseHover(true)}
                        onMouseLeave={() => this.mouseHover(false)}>
                        {this.props.label}
                    </span>
                </span>
            </div>
        );
    }
}

IconAndTextAction.propTypes = {
    label: PropTypes.string.isRequired,
    iconName: PropTypes.string.isRequired,
    iconSize: PropTypes.string.isRequired,
    onClick: PropTypes.func.isRequired
};


class Welcome extends React.Component {
    render() {
        return (
            <div>
                <div className={`${componentNameSpace}-onboarding-side-by-side`}>
                    <img src={DashboardMime} />
                </div>
                <div className={classNames(
                    `${componentNameSpace}-onboarding-side-by-side`,
                    `${componentNameSpace}-onboarding-explanation`
                )}>
                    <p>
                        {formatStr("welcome_to")}
                    </p>
                    <p>
                        {formatStr("desc")}
                    </p>
                    <p className={`${componentNameSpace}-onboarding-paragraph-padding`}>
                        {formatStr("change_by")}
                    </p>
                    <div>
                        <IconAndTextAction label={formatStr("adding_widget")}
                            iconName="csweb_add" iconSize="sm"
                            onClick={this.props.addWidgetFunc} />
                        <IconAndTextAction label={formatStr("activate_edit_mode")}
                            iconName="csweb_edit" iconSize="sm"
                            onClick={this.props.editModeFunc} />
                    </div>
                </div>
            </div>
        );
    }
}


Welcome.defaultProps = {
    addWidgetFunc: () => {},
    editModeFunc: () => {}
};


Welcome.propTypes = {
    addWidgetFunc: PropTypes.func.isRequired,
    editModeFunc: PropTypes.func.isRequired
};


export default class OnboardingWidget extends React.Component {

    constructor(props) {
        super(props);
    }

    render() {
        return (
            <DashboardItem item={this.props.item}
                title={formatStr("welcome")}
                itemCollapsible={false}>
                <Channel.Listener channelName="dashboardControllingFunctions"
                                channelMapping={{
                                    addWidgetFunc: "addWidgetFunc",
                                    editModeFunc: "editModeFunc"
                                }}>
                    <Welcome />
                </Channel.Listener>
            </DashboardItem>
        );
    }
}

OnboardingWidget.propTypes = {
    item: ImmutablePropTypes.map.isRequired,
};
