/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Pie.js 160452 2017-06-18 14:57:46Z sla $"
 */

/* global d3 */

import {drawLegend} from './Data';

function pieTop(d, rx, ry, ir) {
    if (d.endAngle - d.startAngle === 0) {
        return "M 0 0";
    }

    const sx = rx * Math.cos(d.startAngle),
        sy = ry * Math.sin(d.startAngle),
        ex = rx * Math.cos(d.endAngle),
        ey = ry * Math.sin(d.endAngle);

    const ret = [];
    ret.push("M", sx, sy, "A", rx, ry, "0", (d.endAngle - d.startAngle > Math.PI ? 1 : 0),
        "1", ex, ey, "L", ir * ex, ir * ey);
    ret.push("A", ir * rx, ir * ry, "0", (d.endAngle - d.startAngle > Math.PI ? 1 : 0),
        "0", ir * sx, ir * sy, "z");

    return ret.join(" ");
}

function pieOuter(d, rx, ry, h) {
    const startAngle = (d.startAngle > Math.PI ? Math.PI : d.startAngle);
    const endAngle = (d.endAngle > Math.PI ? Math.PI : d.endAngle);

    const sx = rx * Math.cos(startAngle),
        sy = ry * Math.sin(startAngle),
        ex = rx * Math.cos(endAngle),
        ey = ry * Math.sin(endAngle);

    const ret = [];
    ret.push("M", sx, h + sy, "A", rx, ry, "0 0 1", ex, h + ey, "L",
        ex, ey, "A", rx, ry, "0 0 0", sx, sy, "z");

    return ret.join(" ");
}

function pieInner(d, rx, ry, h, ir) {
    const startAngle = (d.startAngle < Math.PI ? Math.PI : d.startAngle);
    const endAngle = (d.endAngle < Math.PI ? Math.PI : d.endAngle);

    const sx = ir * rx * Math.cos(startAngle),
        sy = ir * ry * Math.sin(startAngle),
        ex = ir * rx * Math.cos(endAngle),
        ey = ir * ry * Math.sin(endAngle);

    const ret = [];
    ret.push("M", sx, sy, "A", ir * rx, ir * ry, "0 0 1", ex, ey, "L", ex, h + ey, "A",
        ir * rx, ir * ry, "0 0 0", sx, h + sy, "z");

    return ret.join(" ");
}

function getPercent(d) {
    return (d.endAngle - d.startAngle > 0.2 ?
            Math.round(1000 * (d.endAngle - d.startAngle) / (Math.PI * 2)) / 10 + '%' : '');
}

export function displayPie(id, data, circleDim, container_id) {

    const {x, y, rx, ry, h, ir} = circleDim;

    const _data = d3.layout.pie().sort(null).value(
        (d) => d.value
    )(data);

    const slices = d3.select("#" + id).append("g")
        .attr("transform", "translate(" + x + "," + y + ")")
        .attr("class", "slices");

    slices.selectAll(".innerSlice").data(_data).enter().append("path").attr("class", "innerSlice")
        .style("fill", (d) => d3.hsl(d.data.color).darker(0.7))
        .attr("d", (d) => pieInner(d, rx + 0.5, ry + 0.5, h, ir))
        .each(function(d) { this._current = d });

    slices.selectAll(".topSlice").data(_data).enter().append("path").attr("class", "topSlice")
        .style("fill", (d) => d.data.color)
        .style("stroke", (d) => d.data.color)
        .attr("d", (d) => pieTop(d, rx, ry, ir))
        .each(function(d) { this._current = d });

    slices.selectAll(".outerSlice").data(_data).enter().append("path").attr("class", "outerSlice")
        .style("fill", (d) => d3.hsl(d.data.color).darker(0.7))
        .attr("d", (d) => pieOuter(d, rx - .5, ry - .5, h))
        .each(function(d) { this._current = d });

    slices.selectAll(".percent").data(_data).enter().append("text").attr("class", "percent")
        .attr("x", (d) => 0.6 * rx * Math.cos(0.5 * (d.startAngle + d.endAngle)))
        .attr("y", (d) => 0.6 * ry * Math.sin(0.5 * (d.startAngle + d.endAngle)))
        .text(getPercent).each(function(d) { this._current = d });

    drawLegend("#" + container_id, data);
}
