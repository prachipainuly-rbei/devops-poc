/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Dashboard.jsx 183246 2018-09-03 12:53:33Z sla $"
 */

import Immutable from 'immutable';
import React from 'react';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {
    Registry, ApplicationBar, Button, ButtonGroup, Channel, Dialog, Tab,
    Throbber, InfoBox
} from 'cs-web-components-base';
import {formatStr} from './i18n.js';
import {APP_SETUP, DASHBOARD_STORE, Layouts} from './constants.js';
import {
    setDashboard, switchLayout, initItems, createItem,
    createDashboard, switchDashboard, setEditMode, deleteDashboard,
    renameDashboard, copyDashboard
} from './actions.js';
import DashboardArea from './DashboardArea.jsx';
import WidgetCatalog from './WidgetCatalog.jsx';
import LayoutSelection from './LayoutSelection.jsx';

import cis_copy from '../../resources/cis_copy.svg';
import cis_th from '../../resources/cis_th.svg';
import cis_trash from '../../resources/cis_trash.svg';
import cis_ok from '../../resources/cis_ok.svg';

let tempItemCounter = 0;

class Dashboard extends React.Component {
    constructor(props) {
        super(props);
        this.widgetList = APP_SETUP.get('widgets').sortBy(widget => widget.get('name'));
        // Cache the mapping from widget id to React component. Entries for which
        // no component is found are discarded.
        this.widgetComponents =
            Immutable.Map(this.widgetList.map(widget => [widget.get('id'), widget]))
                .map(widget => Registry.findComponent(widget.get('component')))
                .filter(component => component !== undefined);
        const current = 0;
        this.state = {
            showWidgetCatalog: false,
            showLayoutSelection: false,
            activeKey: current,
            editMode: false,
            showDeleteConfirmation: false,
            newTitle: null,
            loadingDashboardContent: true,
        };
        this.initAddItem = this.initAddItem.bind(this);
        this.initSelectLayout = this.initSelectLayout.bind(this);
        this.cancelDialogs = this.cancelDialogs.bind(this);
        this.addItem = this.addItem.bind(this);
        this.setLayout = this.setLayout.bind(this);
        this.onSelectDashboard = this.onSelectDashboard.bind(this);
        this.createDashboard = this.createDashboard.bind(this);
        this.toggleEditMode = this.toggleEditMode.bind(this);
        this.copyDashboard = this.copyDashboard.bind(this);
        this.deleteDashboard = this.deleteDashboard.bind(this);
        this.initDeleteDashboard = this.initDeleteDashboard.bind(this);
        this.changeTabTitle = this.changeTabTitle.bind(this);
        this.leaveEditMode = this.leaveEditMode.bind(this);

        this.publicCallables = {
            addWidgetFunc: this.initAddItem,
            editModeFunc: this.toggleEditMode
        };
    }

    componentDidMount() {
        const active_dashboard = APP_SETUP.getIn(['dashboards', 'dashboard_collection']).first();
        this.props.setDashboard(
            APP_SETUP.getIn(['dashboards', 'dashboard_collection']),
            active_dashboard
        );
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.activeDashboardIndex !== undefined) {
            if (this.props.activeDashboardIndex !== nextProps.activeDashboardIndex) {
                this.setState({activeKey: nextProps.activeDashboardIndex});
            }
            if (this.props.dashboards.count() !== nextProps.dashboards.count()) {
                nextProps.initItems(nextProps.dashboards.get(nextProps.activeDashboardIndex));
            }
            if (this.props.items !== nextProps.items || nextProps.loadingState === false) {
                this.setState({loadingDashboardContent: false});
            }
        }
    }

    initAddItem() {
        this.setState({showWidgetCatalog: true});
    }

    initSelectLayout() {
        this.setState({showLayoutSelection: true});
    }

    initDeleteDashboard() {
        this.setState({showDeleteConfirmation: true});
    }

    changeTabTitle(event) {
        this.setState({newTitle: event.target.value});
    }

    cancelDialogs() {
        this.setState({
            showWidgetCatalog: false,
            showLayoutSelection: false
        });
    }

    addItem(widget) {
        const {createItem, layout, dashboards} = this.props;
        tempItemCounter++;
        createItem({
            widget_id: widget.get('id'),
            xpos: layout.get('columns').size - 1,
            ypos: 0,
            temporary: true,
            cdb_object_id: `temp_item_${tempItemCounter}`
        }, dashboards.get(this.state.activeKey));
        this.setState({showWidgetCatalog: false});
    }

    createDashboard() {
        const dashboard_no = this.props.dashboards.size + 1;
        this.props.createDashboard("Dashboard #" + dashboard_no);
    }

    copyDashboard() {
        this.props.copyDashboard(this.props.dashboards.get(this.state.activeKey));
    }

    deleteDashboard() {
        this.setState({showDeleteConfirmation: false});
        this.setState({editMode: false}, () => {
            this.props.deleteDashboard(this.props.dashboards.get(this.state.activeKey));
        });
    }

    setLayout(layout_id) {
        this.props.switchLayout(layout_id, this.props.dashboards.get(this.state.activeKey));
        this.setState({showLayoutSelection: false});
    }

    onSelectDashboard(key) {
        if (key === Tab.EVENT_KEY_ADD) {
            this.createDashboard();
        }
        else if (key !== "CsWebDashboardControls" && !this.state.editMode) {
            if (key === this.state.activeKey) {
                return;
            }
            this.setState({activeKey: key, loadingDashboardContent: true}, () => {
                this.props.initItems(this.props.dashboards.get(this.state.activeKey));
                this.props.switchDashboard(this.state.activeKey);
            });
        }
    }

    toggleEditMode() {
        if (this.state.newTitle) {
            this.props.renameDashboard(
                this.state.newTitle,
                this.props.dashboards.get(this.state.activeKey)
            );
        }

        this.leaveEditMode();
    }


    leaveEditMode() {
        this.setState({editMode: !this.state.editMode, newTitle: null}, () => {
            this.props.setEditMode(this.state.editMode);
        });
    }


    renderLayoutSelection() {
        if (!this.state.showLayoutSelection) {
            return null;
        }
        return (
            <LayoutSelection
                show={true}
                currentLayoutId={this.props.layout.get('name')}
                maxColumn={this.props.items.map(item => item.get('xpos')).max()}
                onSelect={this.setLayout}
                onHide={this.cancelDialogs}/>
        );
    }

    renderWidgetCatalog() {
        if (!this.state.showWidgetCatalog) {
            return null;
        }
        return (
            <WidgetCatalog
                show={true}
                onSelect={this.addItem}
                onHide={this.cancelDialogs}
                widgets={this.widgetList}/>
        );
    }

    renderDeleteConfirmation() {
        return (
            <Dialog.Alert.Deferred
                    title={formatStr("ask_remove_title")}
                    show={this.state.showDeleteConfirmation}
                    onHide={() => {this.setState({showDeleteConfirmation: false})}}
                    onConfirm={this.deleteDashboard}
                    ActionButton={<Dialog.Buttons.Delete />} >
                {formatStr("ask_remove")}
            </Dialog.Alert.Deferred>
        );
    }

    renderTabTools(dashboard) {
        return (
            <ButtonGroup key="dashboard-tools">
                <Button.IconButton
                    iconSrc={cis_copy}
                    buttonStyle="success"
                    onClick={this.copyDashboard}
                    title={formatStr('duplicate_dashboard')}/>
                <Button.IconButton
                    iconSrc={cis_th}
                    buttonStyle="info"
                    title={formatStr('set_layout')}
                    onClick={this.initSelectLayout}/>
                <Button.IconButton
                    iconSrc={cis_trash}
                    buttonStyle="danger"
                    title={formatStr('delete_dashboard')}
                    onClick={this.initDeleteDashboard}
                    disabled={dashboard.get('is_default') === 1}/>
            </ButtonGroup>
        );
    }

    renderTabTitles() {
        const dashboards = this.props.dashboards;
        const loading = this.state.loadingDashboardContent;
        return (
            dashboards.map((dashboard, idx) => {
                const activeTab = idx === this.state.activeKey;
                return (
                    <Tab.Title
                        key={idx}
                        eventKey={idx}
                        title={activeTab && this.state.newTitle !== null ?
                            this.state.newTitle :
                            dashboard.get('name')}
                        onChange={activeTab && this.state.editMode ?
                            this.changeTabTitle : null}
                        onCancel={this.leaveEditMode}
                        onEnter={this.toggleEditMode}
                        iconName="csweb_dashboard"
                        disabled={(!activeTab && this.state.editMode) || loading}>
                        {
                            activeTab ?
                                this.state.editMode ?
                                [<Button.IconButton
                                    key="dashboard-ok"
                                    iconSrc={cis_ok}
                                    buttonStyle="auxiliary"
                                    title={formatStr('close_edit_mode')}
                                    onClick={this.toggleEditMode}/>,
                                    this.renderTabTools(dashboard)] :
                                    <Button.EditButton
                                        title={formatStr('activate_edit_mode')}
                                        onClick={this.toggleEditMode}/>
                                : null
                        }
                    </Tab.Title>
                );
            })
        );
    }

    renderDashboards() {
        if (this.state.loadingDashboardContent && !this.props.errorOccurred) {
            return (
                <div className={`${componentNameSpace}-dashboard__loading-indicator`}>
                    <Throbber />
                    {formatStr('loading')}
                </div>
            );
        }

        if (this.props.errorOccurred) {
            return (
                <InfoBox title={formatStr('error_title')}
                        msg={formatStr('error_msg')}
                        alertType="danger"
                        iconName="csweb_dashboard" />
            );
        }

        if (this.props.items.isEmpty()) {
            return (
                <InfoBox title={formatStr('empty_title')}
                        msg={formatStr('empty_msg')}
                        alertType="info"
                        iconName="csweb_dashboard" />
            );
        }

        return (
            <DashboardArea items={this.props.items}
                           layout={this.props.layout}
                           widgets={this.widgetComponents}/>
        );
    }

    render() {
        const tabTitles = this.renderTabTitles();
        return (
            <Channel.Provider
                channelName="dashboardControllingFunctions"
                channelValues={this.publicCallables}>
                <div className={`${componentNameSpace}-dashboard`}>
                    {this.renderLayoutSelection()}
                    {this.renderWidgetCatalog()}
                    {this.renderDeleteConfirmation()}
                    <ApplicationBar items={[{
                        name: formatStr('dashboard'),
                        active: true,
                        key: 1
                    }]}>
                        {
                            <Button.IconTextButton
                                bsSize="small"
                                iconName="csweb_add"
                                label={formatStr('adding_widget')}
                                title={formatStr('adding_widget')}
                                size="sm"
                                buttonStyle="success"
                                onClick={this.initAddItem}
                                disabled={this.state.loadingDashboardContent}/>
                        }
                    </ApplicationBar>
                    <Tab.Container
                        activeKey={this.state.activeKey}
                        onSelect={this.onSelectDashboard}
                        id={`${componentNameSpace}-selected-dashboard-tab`}>
                        <Tab.Bar
                            activeKey={this.state.activeKey}
                            onSelectFromMenu={this.onSelectDashboard}
                            disabled={this.state.editMode || this.state.loadingDashboardContent}
                            addControlLabel={formatStr('adding_dashboard')}>
                            {tabTitles}
                        </Tab.Bar>
                        <Tab.Content>
                            {this.renderDashboards()}
                        </Tab.Content>
                    </Tab.Container>
                </div>
            </Channel.Provider>
        );
    }
}

Dashboard.propTypes = {
    dashboards: ImmutablePropTypes.list.isRequired,
    layout: ImmutablePropTypes.map.isRequired,
    items: ImmutablePropTypes.map.isRequired,
    setDashboard: PropTypes.func.isRequired,
    switchLayout: PropTypes.func.isRequired,
    initItems: PropTypes.func.isRequired,
    createItem: PropTypes.func.isRequired,
    createDashboard: PropTypes.func.isRequired,
    copyDashboard: PropTypes.func.isRequired,
    activeDashboardIndex: PropTypes.number,
    switchDashboard: PropTypes.func.isRequired,
    setEditMode: PropTypes.func.isRequired,
    deleteDashboard: PropTypes.func.isRequired,
    renameDashboard: PropTypes.func.isRequired,
    errorOccurred: PropTypes.bool.isRequired,
    loadingState: PropTypes.bool.isRequired,
};

function mapStateToProps(state) {
    const store = state[DASHBOARD_STORE];
    const dashboards = store.getIn(['dashboards']).valueSeq().toList();
    const activeIndex = store.get('activeIndex', 0);
    const errorOccurred = store.get('errorOccurred', false);
    const loadingState = store.get('loadingState', true);
    const layout = dashboards.get(activeIndex) ?
        Layouts.get(dashboards.get(activeIndex).get('layout'), Layouts.first()) :
        Layouts.first();
    return {
        dashboards, layout,
        items: state[DASHBOARD_STORE].get('items'),
        activeDashboardIndex: activeIndex,
        errorOccurred: errorOccurred,
        loadingState: loadingState,
    };
}

const actions = {
    setDashboard,
    switchLayout,
    initItems,
    createItem,
    createDashboard,
    switchDashboard,
    setEditMode,
    copyDashboard,
    deleteDashboard,
    renameDashboard
};

export default connect(mapStateToProps, actions)(Dashboard);
