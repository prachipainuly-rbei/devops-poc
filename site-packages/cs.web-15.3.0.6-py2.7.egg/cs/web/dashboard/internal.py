#!/usr/bin/env powerscript
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

"""
Internal morepath app for the dashboard. Provides the API for the dashboard page.
"""

__revision__ = "$Id: internal.py 185829 2018-10-29 15:15:13Z sla $"

import json
from morepath import Response
from webob.exc import HTTPCreated, HTTPNoContent, HTTPBadRequest

from cdb import auth
from cdb import sqlapi
from cdb import transactions
from cs.platform.web import PlatformApp
from cs.platform.web.root import Internal, get_internal
from . import Dashboard, DashboardItem


class InternalDashboardApp(PlatformApp):
    PATH = 'cs.web.dashboard'

    @classmethod
    def get_app(cls, request):
        return get_internal(request).child(cls.PATH)


@Internal.mount(app=InternalDashboardApp, path=InternalDashboardApp.PATH)
def _mount_app():
    return InternalDashboardApp()


@InternalDashboardApp.path(model=Dashboard, path='{dashboard_id}',
                           variables=lambda d: dict(dashboard_id=d.cdb_object_id))
def _dashboard_path(dashboard_id):
    return Dashboard.by_id(dashboard_id)


@InternalDashboardApp.json(model=Dashboard)
def _get_dashboard(model, request):
    return {
        '@id': request.link(model),
        'items_link': request.class_link(DashboardItemCollection,
                                         {'dashboard_id': model.cdb_object_id}),
        'layout': model.layout,
        'name': model.name,
        'cdb_object_id': model.cdb_object_id,
        'is_default': model.is_default,
        'position_index': model.position_index
    }


@InternalDashboardApp.json(model=Dashboard, request_method='PUT')
def _put_dashboard(model, request):
    layout = request.json.get('layout')
    name = request.json.get('name')
    if layout is not None:
        model.layout = layout
    if name is not None:
        model.name_de = name
        model.name_en = name
    return _get_dashboard(model, request)


@InternalDashboardApp.view(model=Dashboard, request_method='DELETE')
def _delete_dashboard(model, _request):
    items = DashboardItem.KeywordQuery(dashboard_id=model.cdb_object_id).Execute()
    for item in items:
        item.Delete()
    model.Delete()
    return HTTPNoContent()


class DashboardCollection(object):
    PATH = '/dashboard_collection'

    @property
    def dashboards(self):
        return Dashboard.get_dashboard_collection()


@InternalDashboardApp.path(model=DashboardCollection, path=DashboardCollection.PATH)
def _dashboard_collection_path():
    return DashboardCollection()


@InternalDashboardApp.json(model=DashboardCollection, request_method='POST', path=DashboardCollection.PATH)
def _post_dashboard(model, request):
    request_data = request.json
    source_id = request_data.get('source_id', None)

    if source_id:
        source_dashboard = Dashboard.KeywordQuery(cdb_object_id=source_id).Execute()
        dashboard = source_dashboard[0].Copy(is_default=0)
        items = DashboardItem.KeywordQuery(dashboard_id=source_id)
        for item in items:
            item.Copy(dashboard_id=dashboard.cdb_object_id)
    else:
        dashboard = Dashboard.create_dashboard(request.json.get('name'))

    return _get_dashboard(dashboard, request)


@InternalDashboardApp.json(model=DashboardCollection)
def _get_dashboard_collection(model, request):
    dashboards = {dashboard.cdb_object_id: _get_dashboard(dashboard, request)
                  for dashboard in model.dashboards}

    return {
        '@id': request.link(model),
        'dashboard_collection': dashboards
    }


class DashboardItemCollection(object):
    def __init__(self, dashboard_id):
        self.dashboard_id = dashboard_id

    @property
    def items(self):
        return Dashboard.by_id(self.dashboard_id).Items


@InternalDashboardApp.path(model=DashboardItemCollection, path='{dashboard_id}/items')
def _item_collection_path(dashboard_id):
    return DashboardItemCollection(dashboard_id)


@InternalDashboardApp.json(model=DashboardItemCollection)
def _get_dashboard_item_collection(model, request):
    items = {item.cdb_object_id: _get_dashboard_item(item, request)
             for item in model.items}
    return {
        '@id': request.link(model),
        'items': items
    }


@InternalDashboardApp.view(model=DashboardItemCollection, request_method='POST')
def _post_dashboard_item_collection(model, request):
    request_data = request.json
    data = {
        'owner': auth.persno,
        'dashboard_id': model.dashboard_id,
        'widget_id': request_data['widget_id'],
        'xpos': request_data['xpos'],
        'ypos': request_data['ypos'],
        'collapsed': request_data.get('collapsed', 0),
        'settings': json.dumps(request_data.get('settings', {}))
    }
    item = _get_dashboard_item(DashboardItem.Create(**data), request)
    resp = Response(json_body=item,
                    status=HTTPCreated.code)
    resp.location = item['@id']
    return resp


@InternalDashboardApp.json(model=DashboardItemCollection, request_method='PUT')
def _put_dashboard_item_collection(model, request):
    positions = request.json.get('positions')
    if positions is None:
        return HTTPBadRequest(detail='Expected key "positions"')
    # Most position changes will be shifts by one in y-direction. Collect these
    # separately, so that they can be processed with a single statement.
    y_plus_one_ids = []
    y_minus_one_ids = []
    moved_items = []
    for item in model.items:
        pos = positions.get(item.cdb_object_id)
        if pos is None:
            continue
        new_xpos = pos['xpos']
        new_ypos = pos['ypos']
        if new_xpos != item.xpos:
            moved_items.append(item)
        elif new_ypos == item.ypos + 1:
            y_plus_one_ids.append(item.cdb_object_id)
        elif new_ypos == item.ypos - 1:
            y_minus_one_ids.append(item.cdb_object_id)
        elif new_ypos != item.ypos:
            moved_items.append(item)
    with transactions.Transaction():
        if y_plus_one_ids:
            sqlapi.SQLupdate('%s SET ypos = ypos + 1 WHERE cdb_object_id IN (%s)'
                             % (DashboardItem.__maps_to__,
                                ','.join(["'%s'" % sqlapi.quote(id)
                                          for id in y_plus_one_ids])))
        if y_minus_one_ids:
            sqlapi.SQLupdate('%s SET ypos = ypos - 1 WHERE cdb_object_id IN (%s)'
                             % (DashboardItem.__maps_to__,
                                ','.join(["'%s'" % sqlapi.quote(id)
                                          for id in y_minus_one_ids])))
        for item in moved_items:
            item.Update(xpos=positions[item.cdb_object_id]['xpos'],
                        ypos=positions[item.cdb_object_id]['ypos'])
    # Return the full item collection, not only the positions
    return _get_dashboard_item_collection(model, request)


@InternalDashboardApp.path(model=DashboardItem, path='{dashboard_id}/items/{cdb_object_id}')
def _item_path(dashboard_id, cdb_object_id):
    return DashboardItem.by_id(dashboard_id, cdb_object_id)


@InternalDashboardApp.json(model=DashboardItem)
def _get_dashboard_item(model, request):
    return {
        '@id': request.link(model),
        'cdb_object_id': model.cdb_object_id,
        'widget_id': model.widget_id,
        'xpos': model.xpos,
        'ypos': model.ypos,
        'collapsed': model.collapsed,
        'settings': json.loads(model.settings) if model.settings else {}
    }


@InternalDashboardApp.json(model=DashboardItem, request_method='PUT')
def _put_dashboard_item(model, request):
    """ API to modify a dashboard item. The attributes that can be changed are
        restricted, only those that are explicitly listed here.
    """
    updates = {}
    settings = request.json.get('settings')
    if settings is not None:
        updates['settings'] = json.dumps(settings)
    collapsed = request.json.get('collapsed')
    if collapsed is not None:
        updates['collapsed'] = collapsed
    if updates:
        model.Update(**updates)
    return _get_dashboard_item(model, request)


@InternalDashboardApp.view(model=DashboardItem, request_method='DELETE')
def _delete_dashboard_item(model, _request):
    model.Delete()
    # TODO: renumber other items in column? Return results from here, or ask
    # later from FE?
    return HTTPNoContent()


@InternalDashboardApp.view(model=DashboardItem, request_method='POST')
def _copy_dashboard_item(model, _request):
    model.Copy()
    return HTTPNoContent()
