#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
# File: selenium
# Author: cla
# Creation: 18.03.2016
# Purpose:

import shutil
import types
import contextlib
import tempfile

from selenium.webdriver.common.action_chains import ActionChains
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException

from cdb.testcase import RollbackTestCase, require_service

WEBUI_MENU_PROFILE = 'cs-web-components-base-webui_menu_profile'
WEBUI_MENU_LOGOUT = 'cs-web-components-base-webui_menu_logout'

DEFAULT_TIMEOUT = 20


def y(msg):
    import time
    print msg
    time.sleep(1)


class SidebarMixin(object):
    """
    Mixin to control the ApplicationSidebar of the Application.

    .. code-block:: python

        with self.sidebar_expanded() as sidebar:
            pass
    """
    @contextlib.contextmanager
    def sidebar_expanded(self):
        try:
            sidebar_element = self.get_ce_element('ApplicationSidebar')
            # if not wrapper_element.get_attribute('class'):
            if sidebar_element.get_ce_state() == 'collapsed':
                burger_element = self.get_ce_element('Burger')
                burger_element.click()

            yield sidebar_element

        finally:
            burger_element = self.get_ce_element('Burger')
            burger_element.click()  # Einklappen
            self.wait_for(lambda _: not self.get_ce_element('FavoritesView',
                                                            parent=sidebar_element).is_displayed())


class ModalMixin(object):
    """
    Mixin to find a modal in the Application
    """
    def get_modal(self):
        try:
            return self._create_ce_element(
                self._driver.find_element_by_xpath('/html/body/*/div[@role=\'dialog\']'))
        except NoSuchElementException:
            return None


class TableMixin(object):
    def get_table_rows(self, element):
        self.wait_for(lambda _: (element.find_elements_by_class_name('fixedDataTableRowLayout_rowWrapper')))
        return element.find_elements_by_class_name('fixedDataTableRowLayout_rowWrapper')


def by_ce_id(ce_id):
    return By.XPATH, WebTest.ce_id_to_xpath(ce_id)


class WebTest(RollbackTestCase):
    @classmethod
    def setup_class(cls):
        require_service("cdb.uberserver.services.apache.Apache")

    @staticmethod
    def ce_id_to_xpath(ce_id):
        return ".//*[@data-ce-id='%s']" % ce_id

    def create_action_chains(self):
        return ActionChains(self._driver)

    def _create_ce_element(self, element):
        setattr(element, 'get_ce_state',
                types.MethodType(lambda lself: lself.get_attribute("data-ce-state"), element))
        setattr(element, 'get_ce_element',
                types.MethodType(lambda lself, lelements_id: self.get_ce_element(lelements_id, parent=lself), element))
        return element

    def get_ce_element(self, elements_id, parent=None):
        return self._create_ce_element(
            (parent if parent else self._driver).find_element_by_xpath(WebTest.ce_id_to_xpath(elements_id)))

    def wait_for(self, condition, timeout=DEFAULT_TIMEOUT):
        WebDriverWait(self._driver, timeout).until(condition)

    def wait_for_element(self, elements_id, is_displayed=False, timeout=DEFAULT_TIMEOUT):
        self.wait_for(lambda _: self.get_ce_element(elements_id), timeout=timeout)

        element = self.get_ce_element(elements_id)
        if is_displayed:
            self.wait_for(lambda _: element.is_displayed(), timeout=timeout)
        return self.get_ce_element(elements_id)

    def init_web_ui(self, url="http://localhost/"):
        self.tmpdir = tempfile.mkdtemp()

        options = webdriver.ChromeOptions()
        options.add_argument("start-maximized")
        options.add_argument("user-data-dir=" + self.tmpdir)
        self._driver = webdriver.Chrome(chrome_options=options)
        self._driver.get(url)

        input_element = self._driver.find_element_by_id("login_user")
        self.wait_for(lambda _: input_element.is_displayed())
        input_element.send_keys("caddok")
        input_element.submit()

        try:
            self.wait_for(EC.presence_of_element_located((By.ID, WEBUI_MENU_PROFILE)))
        except:
            self._driver.quit()
            self._driver = None
            raise

    def setUp(self):
        self.init_web_ui()

    def tearDown(self):
        if self._driver:
            try:
                self.wait_for(EC.presence_of_element_located((By.ID, WEBUI_MENU_PROFILE)))
                settings_element = self._driver.find_element_by_id(WEBUI_MENU_PROFILE)
                settings_element.click()

                self.wait_for(EC.presence_of_element_located((By.ID, WEBUI_MENU_LOGOUT)))
                quit_element = self._driver.find_element_by_id(WEBUI_MENU_LOGOUT)
                quit_element.click()

                # Handle "Something changed, do you really want to leave?" stuff
                if "Login" not in self._driver.title:
                    try:
                        import time
                        time.sleep(10)
                        self._driver.switch_to.alert.accept()
                    except:
                        pass

                self.wait_for(EC.title_contains("Login"))
            finally:
                self._driver.quit()
        shutil.rmtree(self.tmpdir)
