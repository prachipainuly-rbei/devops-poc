# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_favorites.py 166559 2017-10-11 15:21:32Z cla $"

from webtest import TestApp as Client
from cs.platform.web.root import Root
from cdb.testcase import RollbackTestCase, without_error_logging
from cs.web.components.favorites.model import Favorite


class TestFavorite(RollbackTestCase):

    # we want to see the complete JSON diff, not truncated
    maxDiff = None

    def setUp(self):
        """
        Set up the test case
        """
        # NEVER!!! raise after initializing the transaction context of
        # RollbackTestCase
        super(TestFavorite, self).setUp()

        Favorite.Query().Delete()

        self.created = Favorite.Create(
            title='A favorite',
            frontend_url='/2',
            icon_url='/icon',
            cdb_cpersno='caddok',
            ref_object_id='')

        self.created_rest = Favorite.Create(
            title='A favorite with rest name and id',
            frontend_url='/2',
            icon_url='/icon',
            rest_name='person',
            rest_id='caddok',
            cdb_cpersno='caddok',
            ref_object_id='')

        self.created_notmine = Favorite.Create(
            title='Not my favorite',
            frontend_url='/2',
            icon_url='/icon',
            rest_name='person',
            rest_id='caddok',
            cdb_cpersno='someone_else')

        app = Root()
        self.c = Client(app)

    def test_favorite_GET_rest(self):
        oid = self.created_rest.ID()
        response = self.c.get(u'/internal/favorites/%s' % oid)
        self.assertEqual(
            response.json,
            {
                u'@id': u'http://localhost/internal/favorites/%s' % oid,
                u'classname': u'angestellter',
                u'frontend_url': u'/2',
                u'title': u'A favorite with rest name and id',
                u'icon_url': u'/icon',
                u'rest_url': u'http://localhost/api/v1/collection/person/caddok',
                u'rest_name': u'person',
                u'ref_object_id': u''
            })

    @without_error_logging
    def test_favorite_GET_notmine(self):
        oid = self.created_notmine.ID()
        self.c.get(u'/internal/favorites/%s' % oid, status=404)

    def test_favorite_PUT(self):
        oid = self.created_rest.ID()
        json = {
            u'@id': u'http://localhost/internal/favorites/%s' % oid,
            u'title': u'Changed title'
        }
        response = self.c.put_json(u'/internal/favorites/%s' % oid, json)
        self.assertEqual(
            response.json,
            {
                u'@id': u'http://localhost/internal/favorites/%s' % oid,
                u'classname': u'angestellter',
                u'frontend_url': u'/2',
                u'title': u'Changed title',
                u'icon_url': u'/icon',
                u'rest_url': u'http://localhost/api/v1/collection/person/caddok',
                u'rest_name': u'person',
                u'ref_object_id': u''
            })
        response = self.c.get(u'/internal/favorites/%s' % oid)
        self.assertEqual(
            response.json,
            {
                u'@id': u'http://localhost/internal/favorites/%s' % oid,
                u'classname': u'angestellter',
                u'frontend_url': u'/2',
                u'title': u'Changed title',
                u'icon_url': u'/icon',
                u'rest_url': u'http://localhost/api/v1/collection/person/caddok',
                u'rest_name': u'person',
                u'ref_object_id': u''
            })

    def test_favorite_DELETE(self):
        oid = self.created.ID()
        response = self.c.delete(u'/internal/favorites/%s' % oid)
        self.assertEqual(
            response.json,
            {})
        oid = self.created_rest.ID()
        response = self.c.delete(u'/internal/favorites/%s' % oid)
        self.assertEqual(
            response.json,
            {})
        response = self.c.get(u'/internal/favorites')
        self.assertEqual(
            response.json,
            {
                u'@id': u'http://localhost/internal/favorites',
                u'favorites': []
            }
        )

    def test_favorite_collection_GET(self):
        oid = self.created.ID()
        oid_rest = self.created_rest.ID()
        response = self.c.get(u'/internal/favorites')
        favorite_id = 'http://localhost/internal/favorites/%s' % oid
        favorite_rest_id = 'http://localhost/internal/favorites/%s' % oid_rest
        self.assertEqual(
            response.json,
            {
                u'@id': u'http://localhost/internal/favorites',
                u'favorites': [
                    {
                        u'@id': favorite_rest_id,
                        u'classname': u'angestellter',
                        u'frontend_url': u'/2',
                        u'title': u'A favorite with rest name and id',
                        u'icon_url': u'/icon',
                        u'rest_url': u'http://localhost/api/v1/collection/person/caddok',
                        u'rest_name': u'person',
                        u'ref_object_id': u''
                    }
                ]
            }
        )

    def test_favorite_collection_POST(self):
        response = self.c.post_json(u'/internal/favorites', {
            'title': 'A favorite with rest name and id',
            'frontend_url': '/info/person/caddok',
            'icon_url': '/icon',
            'rest_name': 'person',
            'rest_id': 'caddok',
            'classname': 'angestellter',
            'cdb_cpersno': 'caddok',
            'ref_object_id': ''
        })
        json = response.json.copy()
        json.pop('@id')
        self.assertEqual(
            json,
            {
                u'classname': u'angestellter',
                u'frontend_url': u'/info/person/caddok',
                u'title': u'A favorite with rest name and id',
                u'icon_url': u'/icon',
                u'rest_url': u'http://localhost/api/v1/collection/person/caddok',
                u'rest_name': u'person',
                u'ref_object_id': u''
            }
        )
