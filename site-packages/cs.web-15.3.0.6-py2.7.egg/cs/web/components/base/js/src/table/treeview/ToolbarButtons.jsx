/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ToolbarButtons.jsx 180052 2018-07-05 11:33:53Z vov $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import Button from '../../components/Button.jsx';
import {formatStr} from '../../i18n';
import {prefixNS} from '../../helpers';
import {toggleTreeView, expandTreeLevel} from './actions';
import {isTreeViewOff} from './helpers';
import connect from '../connect';
import {TreeExpandDialog} from '../../tree/TreeExpander';

export class Toggle extends React.PureComponent {
    render() {
        const {treeViewOff, toggleTreeView} = this.props;
        const iconName = treeViewOff ?
            'csweb_table_treeview_on' : 'csweb_table_treeview_off';
        const title = treeViewOff ?
            'table_treeview_on' : 'table_treeview_off';
        return (
            <Button.IconButton
                title={formatStr(title)}
                key={prefixNS('table-treeview-toggle')}
                onClick={toggleTreeView}
                iconName={iconName}
                buttonStyle="primary"/>
        );
    }
}

Toggle.propTypes = {
    treeViewOff: PropTypes.bool,
    toggleTreeView: PropTypes.func
};

export const ToggleButton = connect(
(state) => ({treeViewOff: isTreeViewOff(state)}),
{toggleTreeView}
)(Toggle);

export class Expand extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showDialog: false
        };
        this.onExpand = this.onExpand.bind(this);
        this.showDialog = this.showDialog.bind(this);
        this.hideDialog = this.hideDialog.bind(this);
    }

    showDialog() {
        this.setState({
            showDialog: true
        });
    }

    hideDialog() {
        this.setState({
            showDialog: false
        });
    }

    onExpand(level) {
        this.setState({
            showDialog: false
        });
        this.props.expandTreeLevel(level);
    }

    render() {
        const {treeViewExpandLevel, treeViewOff} = this.props;
        return (
            <div>
                <Button.IconButton
                    disabled={treeViewOff}
                    title={formatStr('tree_expand_menu')}
                    key={prefixNS('table-treeview-expand')}
                    onClick={this.showDialog}
                    iconName="csweb_table_treeview_expand"
                    buttonStyle="primary"/>
                {this.state.showDialog ? (
                     <TreeExpandDialog
                                onCancel={this.hideDialog}
                                onExpand={this.onExpand}
                                expandLevels={treeViewExpandLevel}
                            />
                ) : null}
             </div>
        );
    }
}

Expand.propTypes = {
    treeViewExpandLevel: PropTypes.number,
    treeViewOff: PropTypes.bool,
    expandTreeLevel: PropTypes.func
};

export const ExpandButton = connect(
(state) => ({
    treeViewExpandLevel: state.treeViewExpandLevel,
    treeViewOff: isTreeViewOff(state)
}),
{expandTreeLevel}
)(Expand);

export class Collapse extends React.Component {
    constructor(props) {
        super(props);
        this.onCollapse = this.onCollapse.bind(this);
    }

    onCollapse() {
        this.props.expandTreeLevel(0);
    }

    render() {
        const {treeViewOff} = this.props;
        return (
            <div>
                <Button.IconButton
                    disabled={treeViewOff}
                    title={formatStr('tree_collapse_menu')}
                    key={prefixNS('table-treeview-collapse')}
                    onClick={this.onCollapse}
                    iconName="csweb_collapse"
                    buttonStyle="primary"/>
             </div>
        );
    }
}

Collapse.propTypes = {
    treeViewOff: PropTypes.bool,
    expandTreeLevel: PropTypes.func
};

export const CollapseButton = connect(
(state) => ({
    treeViewOff: isTreeViewOff(state)
}),
{expandTreeLevel}
)(Collapse);
