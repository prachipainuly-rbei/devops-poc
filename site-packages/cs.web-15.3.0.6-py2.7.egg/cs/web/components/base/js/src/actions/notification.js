/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: notification.js 176666 2018-05-02 09:01:45Z cla $"
 *
 */

import React from 'react';
import Messages from '../messages';
import {formatStr} from '../i18n.js';

/**
 * @module notification
 */

// Backwards compatibility for old actions/notifications.js

const typeToLevel = {
    danger: Messages.Level.ERROR,
    warning: Messages.Level.WARN,
    info: Messages.Level.INFO,
    success: Messages.Level.SUCCESS
};

/* eslint-disable max-params */
export function addNotification(
    id,
    title,
    message,
    nType,
    level,
    actions,
    hidingTimeout
) {
    /* eslint-enable max-params */
    return Messages.Actions.postMessage(
        {
            level: typeToLevel[nType],
            id,
            title,
            message,
            global: true
        },
        Messages.createNotification({timeout: hidingTimeout})
    );
}

export function removeNotificationNow(id) {
    return Messages.removeNotification(id);
}

const ERRORNOTIFYTIMEOUT = 5000;

function formatErrorDetail(detail) {
    if (typeof detail !== 'string') {
        return detail;
    }
    const lines = detail.split(/\n/g);
    if (lines.length === 1) {
        return detail;
    }
    return React.createElement(
        'div',
        null,
        ...lines.map(line => React.createElement('p', null, line))
    );
}

/* eslint-disable max-params */
export function notifyError(
    error,
    id = null,
    title = undefined,
    nType = 'danger',
    level = 1,
    actions = null,
    hidingTimeout = ERRORNOTIFYTIMEOUT
) {
    const _title = title || formatStr('default_error_title');

    /* eslint-enable max-params */
    let nid = id;
    if (nid === undefined || nid === null) {
        if (error.response && error.response.url) {
            nid = error.response.url;
        }
    }
    function createNotification(msg) {
        return addNotification(
            nid,
            _title,
            msg,
            nType,
            level,
            actions,
            hidingTimeout
        );
    }
    if (!error.response) {
        return createNotification(error.toString());
    }
    return dispatch =>
        error.response
            .json()
            .then(
                errorJson =>
                    dispatch(
                        createNotification(formatErrorDetail(errorJson.detail))
                    ),
                () => dispatch(createNotification(error.toString()))
            );
}

/**
 * Similar to Higher Order Component:
 * "Higher Order" dispatcher to add error notification for
 * other thunks that return promise.
 */
export function autoNotifyPromiseRejection(wrapped) {
    return (...args) => dispatch =>
        dispatch(wrapped(...args)).catch(err => {
            dispatch(notifyError(err));
            throw err;
        });
}

export default {
    addNotification,
    removeNotificationNow,
    notifyError,
    autoNotifyPromiseRejection
};
