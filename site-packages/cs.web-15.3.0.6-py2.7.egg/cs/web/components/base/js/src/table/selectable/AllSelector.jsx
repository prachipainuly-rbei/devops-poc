/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import connect from '../connect';
import FormControls from '../../formcontrols';
import {SELECTORID} from '../constants.js';
import {prefixNS} from '../../helpers';
import {getAllSelector} from './reducers';
import {selectAllRows} from '../common/actions';
import {getSelectableRowsAggregationState} from '../common/reducers';

class Renderer extends React.Component {

    constructor(props) {
        super(props);
        this.onStateChange = this.onStateChange.bind(this);
    }

    onStateChange() {
        const {selectAllRows, selectableRowsAggregationState} = this.props;
        // select all rows if selectableRowsAggregationState is 0 (now rows selected),
        // otherwise unselect all rows
        selectAllRows(selectableRowsAggregationState === 0);
    }

    render() {
        const {column, selectableRowsAggregationState, allSelector} = this.props;
        const clsnames =
            classNames(
                prefixNS('table-selector-column-renderer'),
                prefixNS('table-selector-column-head-renderer')
            );
        if (allSelector && column.get('id') === SELECTORID && selectableRowsAggregationState < 3) {
            return (
              <div className={clsnames}>
                  <FormControls.TriStateCheckBox
                    className={prefixNS('table-selector-column-content')}
                    name="Select_All"
                    onStateChange={this.onStateChange}
                    value={(selectableRowsAggregationState === 0) ? "0" :
                        selectableRowsAggregationState === 1 ? "1" : ""}/>
              </div>
            );
        }
        return null;
    }
}

Renderer.propTypes = {
    column: ImmutablePropTypes.map,
    selectAllRows: PropTypes.func,
    allSelector: PropTypes.bool,
    selectableRowsAggregationState: PropTypes.number,
};

const mapStateToProps = (state) => ({
    allSelector: getAllSelector(state),
    selectableRowsAggregationState: getSelectableRowsAggregationState(state)
});

export default connect(mapStateToProps, {selectAllRows})(Renderer);
