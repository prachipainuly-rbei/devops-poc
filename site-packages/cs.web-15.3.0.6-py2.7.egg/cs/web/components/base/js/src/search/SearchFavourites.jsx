/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchFavourites.jsx 184153 2018-09-19 11:23:43Z cla $"
 */

import React from 'react';
import {ImmutablePropTypes, PropTypes, connect} from 'cs-web-components-externals';
import {formatStr} from '../i18n.js';
import Overlays from '../overlays';
import {editedSearchFavourites} from './actions/favourites.js';
import {selectFavourite, storeSearchFavourite} from './actions/instances.js';
import EditFavouritesDialog from './EditFavouritesDialog.jsx';
import StoreAsFavouriteDialog from './StoreAsFavouriteDialog.jsx';

import cis_star_success from '../../../resources/cis_star_success.svg';

const {DropdownIconButton, MenuItem} = Overlays;

class SearchFavourites extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            editFavouritesIsActive: false,
            storeFavouriteAsIsActive: false
        };
        this.editFavouritesDone = this.editFavouritesDone.bind(this);
        this.handeSelectFavourite = this.handeSelectFavourite.bind(this);
        this.handeStoreFavourite = this.handeStoreFavourite.bind(this);
    }

    editFavouritesDone(changedFavourites) {
        const {editedSearchFavourites, rootClassname, favourites} = this.props;
        this.setState({editFavouritesIsActive: false});
        editedSearchFavourites(rootClassname, favourites, changedFavourites);
    }

    handeSelectFavourite(key) {
        if (key !== undefined) {
            const {instanceName, rootClassname, selectFavourite} = this.props;
            selectFavourite(instanceName, rootClassname, key);
        }
    }

    handeStoreFavourite() {
        const {instanceName, storeSearchFavourite} = this.props;
        storeSearchFavourite(instanceName);
    }

    renderStoreAsFavouriteDialog() {
        const {instanceName} = this.props;
        const {storeFavouriteAsIsActive} = this.state;
        if (!storeFavouriteAsIsActive) {
            return null;
        }
        return (
            <StoreAsFavouriteDialog
                key={'store'}
                instanceName={instanceName}
                closeDialog={() => this.setState({storeFavouriteAsIsActive: false})}/>
        );
    }

    renderEditFavouritesDialog() {
        const {editFavouritesIsActive} = this.state;
        if (!editFavouritesIsActive) {
            return null;
        }
        return (
            <EditFavouritesDialog
                key={'edit'}
                rootClassname={this.props.rootClassname}
                searchFavourites={this.props.favourites}
                onStore={this.editFavouritesDone}
                onCancel={() => this.setState({editFavouritesIsActive: false})} />
        );
    }

    render() {
        const {instanceName, favourites, currentFavourite, searchRunning} = this.props;
        return [
            <DropdownIconButton
                noCaret
                pullRight
                key={'menu'}
                id={instanceName}
                disabled={searchRunning}
                title={formatStr('extended_search_favorites')}
                iconSrc={cis_star_success}
                buttonStyle="info"
                onSelect={this.handeSelectFavourite}
            >
                <MenuItem onSelect={() => this.setState({storeFavouriteAsIsActive: true})}>
                    {formatStr('store_as_search_favourite_dlg')}
                </MenuItem>
                <MenuItem
                    disabled={currentFavourite === undefined}
                    onSelect={this.handeStoreFavourite}
                >
                    {formatStr('store_search_favourite')}
                </MenuItem>
                <MenuItem divider />
                <MenuItem onSelect={() => this.setState({editFavouritesIsActive: true})}>
                    {formatStr('edit_search_favourites')}
                </MenuItem>
                <MenuItem divider />
                <MenuItem header>
                    {formatStr('select_search_favourite')}
                </MenuItem>
                {
                    favourites
                        .filter(fav => fav.get('resultLink') === undefined)
                        .map((fav, favId) => (
                            <MenuItem
                                key={favId} eventKey={favId}
                                active={currentFavourite &&
                                    favId === currentFavourite.get('cdb_object_id')}
                            >
                                {fav.get('name')}
                            </MenuItem>))
                        .toArray()
                }
            </DropdownIconButton>,
            this.renderStoreAsFavouriteDialog(),
            this.renderEditFavouritesDialog(),
        ];
    }
}
SearchFavourites.propTypes = {
    instanceName: PropTypes.string.isRequired,
    // store
    searchRunning: PropTypes.bool.isRequired,
    rootClassname: PropTypes.string.isRequired,
    favourites: ImmutablePropTypes.orderedMap.isRequired,
    currentFavourite: ImmutablePropTypes.map,
    // actions
    selectFavourite: PropTypes.func.isRequired,
    storeSearchFavourite: PropTypes.func.isRequired,
    editedSearchFavourites: PropTypes.func.isRequired
};

function mapStateToProps(state, ownProps) {
    const {instanceName} = ownProps;
    const instance = state.search.instances.get(instanceName);
    const classname = instance.get('classname');
    const favourites = state.search.favouritesByClass.getIn([classname, 'favourites']);
    const currentFavourite = favourites.get(instance.get('favouriteId'));
    return {
        searchRunning: instance.get('searchRunning'),
        rootClassname: classname,
        favourites,
        currentFavourite
    };
}

const actions = {selectFavourite, storeSearchFavourite, editedSearchFavourites};

export default connect(mapStateToProps, actions)(SearchFavourites);
