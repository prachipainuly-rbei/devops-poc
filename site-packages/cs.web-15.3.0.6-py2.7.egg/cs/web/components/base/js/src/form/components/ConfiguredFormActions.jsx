/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ConfiguredFormActions.jsx 164694 2017-09-06 12:49:59Z mbr $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes} from 'cs-web-components-externals';
import FormControl from '../../formcontrols';
import {formatStr} from '../../i18n.js';

export default class ConfiguredFormActions extends React.Component {
    isCancel(button) {
        // If there is no button action or the button says cancel use onCancel
        // (1 is kClientActionCancel)
        return button.get('action') === 0 || button.get('action') & 1;
    }

    render() {
        const {readOnly, allowCancel, allowSubmit, buttons,
               onCancel, onSubmit, submitRunning} = this.props;
        const disableButtons = readOnly && submitRunning;
        const filtered = buttons
            .filter(
                button => {
                    // At this time we only support OK (0) and Cancel (1), There might also be
                    // apply (3) or additional (10)
                    const button_type = button.get("button_type");
                    return button_type === 0 || button_type === 1;
                })
            .map(button => {
                const isCancelButton = this.isCancel(button);
                const onClick = isCancelButton ? onCancel : onSubmit;
                return button.merge({
                    onClick,
                    disabled: (!isCancelButton && !allowSubmit) || disableButtons
                });
            });
        if (readOnly) {
            if (allowCancel && !submitRunning) {
                return (
                    <FormControl.FormActions buttons={Immutable.fromJS(
                        [
                            {onClick: onCancel, button_type: 1, label: formatStr("dialog_close")}
                        ])}/>
                );
            }
        }

        return <FormControl.FormActions buttons={filtered}/>;
    }
}

ConfiguredFormActions.propTypes = {
    buttons: PropTypes.instanceOf(Immutable.List).isRequired,
    onSubmit: PropTypes.func,
    onCancel: PropTypes.func,
    readOnly: PropTypes.bool,
    allowCancel: PropTypes.bool,
    allowSubmit: PropTypes.bool,
    submitRunning: PropTypes.bool
};
