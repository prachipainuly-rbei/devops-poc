/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: operations.js 183688 2018-09-11 12:54:04Z cla $"
 */

import {
    OPERATION_CONTEXT_FETCHED,
    OPERATION_INFO_FETCHED,
    RELSHIP_OP_INFO_FETCHED
} from '../actions/operations.js';
import Immutable from 'immutable';

/**
 * .. code-block:: javascript
 *
 *    objectType: {
 *        operations: {operationName: operationInfo},
 *        fetchedAll: boolean
 *    }
 *
 * @private
 */
export function operationsById(state = Immutable.Map(), action) {
    const fetchedAll = (
        state.getIn([action.objectType, 'fetchedAll'])
        || (action.type === OPERATION_INFO_FETCHED));
    switch (action.type) {
        case OPERATION_INFO_FETCHED:
        case OPERATION_CONTEXT_FETCHED:
            return state
                .withMutations(state => {
                    action.data.forEach(opinfo => {
                        state.mergeIn(
                            [opinfo.get('classname'), 'operations', opinfo.get('opname')],
                            opinfo);
                    });
                })
                .setIn([action.objectType, 'fetchedAll'], fetchedAll);
        default:
            return state;
    }
}

/**
 * .. code-block:: javascript
 *
 *    objectType: {contextName: [operationNames]}
 *
 * @private
 */
export function operationContextById(state = Immutable.Map(), action) {
    switch (action.type) {
        case OPERATION_CONTEXT_FETCHED:
            return state.setIn(
                [action.objectType, action.contextName],
                action.data.map(opinfo => opinfo.get('opname')).toSet()
            );
        default:
            return state;
    }
}

export function operationsByRelship(state = Immutable.Map(), action) {
    switch (action.type) {
        case RELSHIP_OP_INFO_FETCHED: {
            const {parentObject, relshipName, data} = action.payload;
            const path = [parentObject.get('@id'), relshipName];
            const ops = state.getIn(path, Immutable.Map());

            // Only set ops to data if there is a difference
            // to avoid rerendering
            if (!ops.equals(data)) {
                // Put relship context into link operation configs
                const enhancedData = data.updateIn(
                    ['link_opinfo', 1],
                    Immutable.Map(),
                    ops => ops.map(op => op.set(
                        'relship_context',
                        Immutable.Map({parent: parentObject, relship: relshipName})
                    ))
                );

                return state.setIn(path, enhancedData);
            }
            return state;
        }
        default:
            return state;
    }
}
