/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ColumnActions.jsx 168528 2017-11-15 11:35:33Z gwe $"
 */

import React from 'react';
import {PropTypes, classNames, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers';
import connect from '../connect';
import {setColumnWidth} from '../common/actions';

export class ColumnResizer extends React.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            indicatorX: 0,
            resizing: false,
            startX: 0
        };
        this.onMouseMove = this.onMouseMove.bind(this);
        this.onMouseDown = this.onMouseDown.bind(this);
        this.onMouseUp = this.onMouseUp.bind(this);
    }

    onMouseMove(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.state.resizing) {
            this.setState({
                indicatorX: this.state.startX - event.clientX
            });
        }
    }

    onMouseDown(event) {
        event.stopPropagation();
        event.preventDefault();

        document.addEventListener('mousemove', this.onMouseMove);
        document.addEventListener('mouseup', this.onMouseUp);

        this.setState({
            indicatorX: 0,
            resizing: true,
            startX: event.clientX
        });
    }

    onMouseUp(event) {
        event.stopPropagation();
        event.preventDefault();
        document.removeEventListener('mousemove', this.onMouseMove);
        document.removeEventListener('mouseup', this.onMouseUp);
        const {setColumnWidth, columnWidth} = this.props;
        const {indicatorX} = this.state;
        const outerWidth = this.resizerContainer.clientWidth;
        const ratio = outerWidth === 0 ? 0 : (indicatorX / outerWidth);
        const widthStr = columnWidth === undefined ?
            this.props.column.get('width') : columnWidth;
        const width = parseFloat(widthStr);
        if (!Number.isNaN(width) && (indicatorX !== 0 || ratio !== 0)) {
            const columnID = this.props.column.get('id');
            const newWidth = ratio === 0 || width === 0 ?
                width - indicatorX : width * (1 - ratio);
            if (newWidth !== width && setColumnWidth) {
                const newWidthStr = String(widthStr).replace(width, newWidth);
                setColumnWidth(columnID, newWidthStr);
            }
        }
        this.setState({
            indicatorX: 0,
            resizing: false
        });
    }

    render() {
        const indicator = {
            right: this.state.indicatorX,
            display: this.state.resizing ? undefined : 'none'
        };
        const clsname = classNames(
            prefixNS('table-column-resizer'),
            {'is-resizing': this.state.resizing}
        );
        return (
            <div className={clsname} ref={elem => {this.resizerContainer = elem}}>
                <div className="resizer-trigger bg-primary"
                     onMouseMove={this.onMouseMove}
                     onMouseUp={this.onMouseUp}
                     onMouseDown={this.onMouseDown}></div>
                <div className="resizer-indicator bg-primary"
                     style={indicator}></div>
            </div>
        );
    }
}

ColumnResizer.propTypes = {
    columnWidth: PropTypes.string,
    column: ImmutablePropTypes.map,
    setColumnWidth: PropTypes.func
};

const mapStateToProps = (state, ownProps) => {
    const widths = state.columnWidths;
    const {column} = ownProps;
    const columnWidth = widths.get(column.get('id'));
    return {
        columnWidth
    };
};

export default connect(mapStateToProps, {setColumnWidth})(ColumnResizer);
