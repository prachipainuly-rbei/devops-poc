/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchAttribute.jsx 182283 2018-08-15 10:20:34Z msl $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {getAppSetup, prefixNS} from '../helpers.js';
import {formatStr} from '../i18n.js';
import {CE_DATEFORMAT} from '../form/constants.js';
import FormControlWrapper from '../form/components/FormControlWrapper.jsx';
import Button from '../components/Button.jsx';

const FORMAT_SETTINGS = getAppSetup().get('formats');

export default class SearchAttribute extends React.Component {
    constructor(props) {
        super(props);
        this.doChangeFields = this.doChangeFields.bind(this);
    }

    componentDidMount() {
        const {focus, attr} = this.props;
        if (focus) {
            setTimeout(() => {
                const inputElement = this.element.querySelector("input[name='" + attr + "']");
                if (inputElement) {
                    inputElement.focus();
                }
            }, 100);
        }
    }

    doChangeFields(fields) {
        const {doChangeFields, attr} = this.props;
        doChangeFields(fields, attr);
    }

    render() {
        const {
            attr, searchRunning, readOnlyAttributes, operationState, fields, searchValues,
            doRemoveSearchField, runSearch, displayMappingURL, opData
        } = this.props;
        const ro = readOnlyAttributes.includes(attr);
        // We do not want to allow links in search attributes
        const field = fields.get(attr).removeIn(['config', 'link_target_url']);
        const values = opData ? opData.get('values').merge(searchValues) : searchValues;
        // Note: render the remove button after the form control, because it is
        // displayed on top of the control through some CSS trickery. But it still
        // needs to be higher in the z-order to catch clicks.
        const removeButton = ro ? null : (
            <Button.CloseButton
                className={prefixNS('class-search-area__remove_attribute')}
                title={formatStr('search_attribute_delete')}
                onClick={() => {doRemoveSearchField(field)}} />
        );
        return (
            <div key={attr}
                className={prefixNS('class-search-area__attribute-line')}
                ref={elem => {this.element = elem}}
            >
                <FormControlWrapper
                    setting={field}
                    onFieldsChange={this.doChangeFields}
                    values={values}
                    onEnter={runSearch}
                    formats={FORMAT_SETTINGS}
                    calendarValueFormat={CE_DATEFORMAT}
                    readOnly={searchRunning || ro}
                    operationState={operationState}
                    displayMappingURL={displayMappingURL}
                    afterLabelControl={removeButton}/>
            </div>
        );
    }
}
SearchAttribute.propTypes = {
    attr: PropTypes.string.isRequired,
    focus: PropTypes.bool.isRequired,
    searchRunning: PropTypes.bool.isRequired,
    searchValues: ImmutablePropTypes.map,
    runSearch: PropTypes.func,
    fields: ImmutablePropTypes.map,
    operationState: ImmutablePropTypes.map,
    readOnlyAttributes: ImmutablePropTypes.set,
    opData: ImmutablePropTypes.map,
    doChangeFields: PropTypes.func.isRequired,
    doRemoveSearchField: PropTypes.func.isRequired,
    displayMappingURL: PropTypes.string,
};
