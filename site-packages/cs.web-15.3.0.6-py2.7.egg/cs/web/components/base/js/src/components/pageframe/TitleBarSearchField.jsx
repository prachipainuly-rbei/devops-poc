/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TitleBarSearchField.jsx 185884 2018-10-30 14:22:27Z vov $"
 */

import {formatStr} from '../../i18n';
import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers.js';
import SearchField from '../SearchField.jsx';
import {IconButton} from '../Button';
import WithSpeechRecognition from '../WithSpeechRecognition.jsx';

export default class TitleBarSearchField extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            speechActive: false,
            focused: false
        };
        this.doSearch = this.doSearch.bind(this);
        this.toggleSpeechActive = this.toggleSpeechActive.bind(this);
        this.speechRecognized = this.speechRecognized.bind(this);
        this.requestSearch = this.requestSearch.bind(this);
    }

    doSearch(searchText) {
        document.location.href = "/search/fulltextsearch?searchtext=" +
                                 encodeURIComponent(searchText);
    }

    setFocusToInputField() {
        const field = document.getElementsByClassName(prefixNS("titlebar__searchfield"))[0];
        if (field) {
            field.getElementsByTagName("input")[0].focus();
        }
    }

    componentDidUpdate(prevProps) {
        if (this.props.focused && prevProps.focused !== this.props.focused) {
            this.setFocusToInputField();
        }
    }

    toggleSpeechActive() {
        this.setState(prevState => ({speechActive: !prevState.speechActive}));
    }

    speechRecognized(text) {
        this.searchField.search(text);
    }

    focusActive(focused, event) {

        if (!focused && event.relatedTarget) {
            const cn = event.relatedTarget.className;
            if (cn.includes(prefixNS("titlebar__search-button"))) {
                return;
            }
        }

        this.setState({focused: focused});
    }

    requestSearch(event) {
        this.searchField.onSearchRequested(event);
    }

    render() {
        const {speechActive, focused} = this.state;
        const speachButton = focused ? (
            <IconButton
                className={prefixNS("titlebar__search-button")}
                title={formatStr("speech")}
                iconName={speechActive ?
                    'csweb_microphone' : 'csweb_microphone_off'}
                onClick={this.toggleSpeechActive}
                key="speachButton">
            </IconButton>
        ) : '';
        const searchButton = focused ? (
            <IconButton
                className={prefixNS("titlebar__search-button")}
                title={formatStr('do_extended_search')}
                iconName={'csweb_search_icon_svg'}
                onClick={this.requestSearch}
                key="searchButton">
            </IconButton>
        ) : '';

        // Use <li> instead of <NavItem> to let spaces be entered (see E047681).
        return (
            <li className={this.props.hide ? 'hidden' : ''} role="presentation">
                <WithSpeechRecognition
                        allowSpeech={speechActive}
                        onTextRecognized={this.speechRecognized}>
                    {({speechAvailable, finalTranscript}) => (
                            <div className={prefixNS('titlebar__searchfield')}>
                                <SearchField
                                    id="myawesomeid"
                                    searchText={speechActive ? finalTranscript : ''}
                                    productName={this.props.productName}
                                    searchCallback={this.doSearch}
                                    ref={node => this.searchField = node}
                                    onFocus={() => {this.focusActive(true)}}
                                    onBlur={(event) => {this.focusActive(false, event)}}
                                    afterControl={
                                        [speechAvailable ? speachButton : '', searchButton]}/>
                            </div>
                    )}
                </WithSpeechRecognition>
            </li>
        );
    }
}
TitleBarSearchField.propTypes = {
    productName: PropTypes.string.isRequired,
    focused: PropTypes.bool,
    hide: PropTypes.bool
};
