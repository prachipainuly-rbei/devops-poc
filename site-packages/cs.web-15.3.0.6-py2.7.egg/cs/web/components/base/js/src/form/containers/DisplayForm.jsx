/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DisplayForm.jsx 184286 2018-09-21 13:59:56Z cla $"
 */

import React from 'react';
import Immutable from 'immutable';
import {connect, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {getAppSetup} from '../../helpers.js';
import {postJSON} from '../../fetch.js';
import {addNotification} from '../../actions/notification.js';
import {formatStr} from '../../i18n.js';
import FormLayout from '../components/FormLayout';

/**
 * This component renders form configurations as provided by the FormInfoBase
 * backend component. Pass the JSON payload received as property ``formData``,
 * which should be an ``Immutable.Map``.
 *
 * @module DisplayForm
 */

const allFormats = getAppSetup().get('formats');

class _DisplayFormRaw extends React.Component {
    constructor(props) {
        super(props);
        this.navigateLink = this.navigateLink.bind(this);
    }

    navigateLink(url) {
        // If a link target is configured in the form the components
        // will render a button that calls this function if clicked
        const {
            values,
            operationState,
            replaceContentOnNavigate,
            addNotification,
        } = this.props;
        const jsonData = {
            values: values.toJS(),
            operation_state: operationState.toJS()
        };
        const handle = (
            replaceContentOnNavigate ?
            null :
            window.open('about:blank', '_blank')
        );
        postJSON(url, jsonData)
            .then(result => {
                if (result.ui_link) {
                    if (handle) {
                        handle.location = result.ui_link;
                        return;
                    }

                    window.location = result.ui_link;
                } else if (result.error_message) {
                    // We want a feedback - error might be something like
                    // No object assigned
                    addNotification(
                        url,
                        formatStr('form_name'),
                        result.error_message,
                        'danger',
                        2,
                        null,
                        5000
                    );
                }

                if (handle) {
                    handle.close();
                }
            });
    }

    render() {
        const {
            registers,
            values,
            operationState,
            operationInstance,
            readOnly,
            onChangeValues,
            uncheckedValues,
            displayMappingURL,
            contextObjects,
            containerRef,
        } = this.props;

        return (
            registers.map(register => (
                <FormLayout key={register.get('label')}
                            containerRef={containerRef}
                            operationInstance={operationInstance}
                            register={register}
                            onFieldsChange={onChangeValues}
                            onNavigateLink={this.navigateLink}
                            values={values}
                            uncheckedValues={uncheckedValues}
                            displayMappingURL={displayMappingURL}
                            operationState={operationState}
                            formats={allFormats}
                            readOnly={readOnly}
                            contextObjects={contextObjects} />
            ))
        );
    }
}

_DisplayFormRaw.propTypes = {
    // ref to container of Form.
    containerRef: PropTypes.object,

    // Form State (required)
    registers: ImmutablePropTypes.list.isRequired,
    values: ImmutablePropTypes.map.isRequired,
    operationState: ImmutablePropTypes.map.isRequired,
    displayMappingURL: PropTypes.string,

    // Frontend Operation Context (may be undefined)
    operationInstance: PropTypes.string,
    onChangeValues: PropTypes.func,
    uncheckedValues: ImmutablePropTypes.set,

    // Configuration (sensible defaults provided)
    readOnly: PropTypes.bool,
    replaceContentOnNavigate: PropTypes.bool,
    contextObjects: PropTypes.instanceOf(Immutable.List),

    // Actions (required)
    addNotification: PropTypes.func.isRequired,
};

_DisplayFormRaw.defaultProps = {
    operationInstance: undefined,
    readOnly: true,
    replaceContentOnNavigate: false,
    uncheckedValues: Immutable.Set(),
};

const actions = {addNotification};

export const DisplayFormRaw = connect(undefined, actions)(_DisplayFormRaw);

export default function DisplayForm(props) {
    const {formData, containerRef} = props;
    return (
        <div>
            <h1>{formData.get('label')}</h1>
            <DisplayFormRaw
                registers={formData.get('registers')}
                values={formData.get('values')}
                operationState={formData.get('operation_state')}
                displayMappingURL={formData.get('display_mapping_url')}
                containerRef={containerRef} />
        </div>
    );
}

DisplayForm.propTypes = {
    formData: ImmutablePropTypes.map,
    containerRef: PropTypes.object,
};
