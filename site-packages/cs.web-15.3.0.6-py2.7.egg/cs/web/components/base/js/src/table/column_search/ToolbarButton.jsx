/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import connect from '../connect';
import {makeCancelable, prefixNS, Console} from '../../helpers.js';
import {formatStr} from '../../i18n';
import {getJSON} from '../../fetch.js';
import Button from '../../components/Button.jsx';
import {setSettings, setCurrentValues, showControls} from './actions';

class SearchHeaderComponent extends React.Component {

    constructor(props) {
        super(props);
        this.requestPromise = null;
        this.state = {
            currValues: Immutable.Map(),
            operationState: Immutable.Map(),
            controls: [],
            showControls: false
        };
        this.changeFields = this.changeFields.bind(this);
        this.submitForm = this.submitForm.bind(this);
    }

    cancelRequest() {
        if (this.requestPromise !== null) {
            this.requestPromise.cancel();
            this.requestPromise = null;
        }
    }

    loadSettings(props) {
        const {initURL} = props;
        this.cancelRequest();
        const request_data = {};
        this.requestPromise = makeCancelable(
            getJSON(initURL, request_data));
        this.requestPromise.promise.then(
            data => {
                this.requestPromise = null;
                const operationState = Immutable.fromJS(data.operation_state);
                const displayMappingURL = Immutable.fromJS(data.display_mapping_url);
                const registers = Immutable.fromJS(data.registers);
                const currValues = Immutable.fromJS(data.values);
                this.props.setSettings({
                    registers: registers,
                    operationState: operationState,
                    displayMappingURL: displayMappingURL,
                    onSubmit: this.submitForm,
                    changeFields: this.changeFields,
                    initialValues: currValues.merge(this.props.values)});
                this.setState({
                    currValues: Immutable.fromJS(data.values),
                    operationState: operationState
                });
                if (this.props.values) {
                    this.changeFields(this.props.values);
                }
            },
            err => {
                this.requestPromise = null;
                if (err.isCanceled !== true) {
                    Console.log(err);
                }
            });
    }

    changeFields(fields) {
        const {currValues, ...others} = this.state;
        const merged_values = currValues.merge(fields);
        this.setState({
            currValues: merged_values,
            ...others
        });
        this.props.setCurrentValues(merged_values);
    }

    componentDidMount() {
        if (this.props.initURL) {
            this.loadSettings(this.props);
        }
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.initURL !== this.props.initURL) {
            this.loadSettings(nextProps);
        }
        if (nextProps.values !== this.props.values) {
            this.changeFields(nextProps.values);
        }
        if (nextProps.showSearchControl !== this.props.showSearchControl) {
            this.setState({
                showControls: nextProps.showSearchControl
            });
        }
    }

    componentWillUnmount() {
        this.cancelRequest();
    }

    submitForm() {
        const {onSearchHeaderSubmit} = this.props;
        if (onSearchHeaderSubmit) {
            onSearchHeaderSubmit(this.state.currValues, this.state.operationState);
        }
    }

    onClick() {
        this.setState({
            showControls: !this.state.showControls
        });
        this.props.showControls(!this.state.showControls);
    }

    render() {
        const applyButton = this.state.showControls ?
          <Button.IconButton
              className={prefixNS('search-header-toolbar-button')}
              onClick={this.submitForm.bind(this)}
              title={formatStr('table_execute_column_search')}
              iconName="csweb_tablesearch_execution"
              buttonStyle="primary"/>
          : null;
        return (<div>
                {applyButton}
                <Button.IconButton
                    className={prefixNS('search-header-toolbar-button')}
                    onClick={this.onClick.bind(this)}
                    title={formatStr(this.state.showControls ? 'table_hide_column_search'
                        : 'table_show_column_search')}
                    iconName={this.state.showControls ? 'csweb_tablesearch_hide'
                        : 'csweb_tablesearch_show'}
                />
            </div>
        );
    }
}

SearchHeaderComponent.propTypes = {
    initURL: PropTypes.string,
    onClick: PropTypes.func,
    onSearchHeaderSubmit: PropTypes.func,
    setCurrentValues: PropTypes.func,
    onSubmit: PropTypes.func,
    readOnly: PropTypes.bool,
    setSettings: PropTypes.func,
    showControls: PropTypes.func,
    values: PropTypes.instanceOf(Immutable.Map),
    columns: ImmutablePropTypes.list,
    columnActions: ImmutablePropTypes.list,
    visibleColumns: ImmutablePropTypes.orderedSet,
    showSearchControl: PropTypes.bool
};

function mapStateToProps(state) {
    const {searchSettings, showColumnSearch} = state;
    return {
        initURL: searchSettings.get('initURL'),
        values: searchSettings.get('initValues'),
        onSearchHeaderSubmit: searchSettings.get('onSearchHeaderSubmit'),
        showSearchControl: showColumnSearch
    };
}

export default connect(mapStateToProps,
                        {setSettings, setCurrentValues, showControls})(SearchHeaderComponent);
