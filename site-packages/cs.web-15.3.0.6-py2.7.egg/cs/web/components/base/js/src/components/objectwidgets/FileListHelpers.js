/*
 * Copyright (C) 1990-2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: FileListHelpers.js 184157 2018-09-19 11:40:42Z cla $"
 */

import React from 'react';
import Table from '../../table';
import Immutable from "immutable";
import moment from 'moment';
import Throbber from '../Throbber';
import {IconButton} from '../Button';
import Overlays from '../../overlays';
import {getAppSetup, prefixNS} from '../../helpers';
import {formatStr} from '../../i18n';
import {OPERATION_ACTIVATION_MODES} from '../../constants.js';
import {classNames} from 'cs-web-components-externals';
import {postJSON} from '../../fetch';

const {MenuItem} = Overlays;

export const SETTING_ID = "FileList";

export const NO_CONFLICTS = {
    conflicted_filenames: Immutable.List(),
    queued_for_upload: Immutable.List(),
    queued_for_overwrite: Immutable.List()
};

function getActivationStyles(selectionInfo) {
    return [
        '',
        selectionInfo === OPERATION_ACTIVATION_MODES.NO_SELECTION ?
            '' : prefixNS('filelist__action-disabled'),
        selectionInfo === OPERATION_ACTIVATION_MODES.SINGLE_SELECTION ?
            '' : prefixNS('filelist__action-disabled'),
        (selectionInfo === OPERATION_ACTIVATION_MODES.MULTIPLE_SELECTION ||
            selectionInfo === OPERATION_ACTIVATION_MODES.SINGLE_SELECTION) ?
            '' : prefixNS('filelist__action-disabled')
    ];
}

export function fileToBaseName(filename) {
    return filename.substr(0, filename.lastIndexOf('.'));
}

export function getOpContextUrl() {
    return getAppSetup().getIn(['links', 'common', 'opContextPattern'])
        .replace("${classname}", "cdb_file")
        .replace("${opContextName}", "WebUIFileControl");
}

export function getDisplayFormat() {
    return getAppSetup().getIn(['formats', 'dateTimeFormat']).replace("hh", "HH");
}

export function baseToFileName(basename, originalFilename) {
    let result = basename;
    result += originalFilename.substr(originalFilename.lastIndexOf('.'));
    return result;
}

export function registerWindowUnloadListener() {
    const listener = event => {
        if (this.uploadInProgress) {
            const msg = formatStr("file_table_upload_in_progress_warning");
            event.returnValue = msg;
            return msg;
        } else {
            return undefined;
        }
    };
    window.addEventListener("beforeunload", listener);
    window.addEventListener("unload", () => window.removeEventListener("beforeunload", listener));
}

export function prepareMinifiedTable() {
    return Table.Manager({
        Table: Table.Fixed(Table.Table),
        Layout: Table.ContentBlockLayout,
        providers: [Table.sortable, Table.selectable],
        columnActions: [Table.sortable, Table.selectable, Table.columnResizer]
    });
}

export function files(contextObject) {
    if (contextObject) {
        return contextObject.getIn(["relship:files", "targets"], Immutable.List());
    }
    return Immutable.List();
}

export function getQuickAccessOps(operationMap, quickAccess, selectionInfo) {
    return operationMap
        .filter((actions, opname) => quickAccess.includes(opname))
        .map((actions, opname) => {
            const disabled =
                selectionInfo === OPERATION_ACTIVATION_MODES.NO_SELECTION
                && opname !== "CDB_Import";
            return Immutable.List(actions).map(act => (
                        <IconButton
                            onClick={act.callback}
                            key={act.label}
                            iconSrc={act.icon}
                            title={act.tooltip}
                            buttonStyle="info" // TODO: get style/semantic from icon def or action configuration+
                            disabled={disabled} />
                    )
                );
        })
        .valueSeq()
        .flatten(true)
        .toArray();
}

export function getMenuOps(operationMap, selectionInfo) {
    const activationStyles = getActivationStyles(selectionInfo);
    return operationMap
        .map(actions =>
            Immutable.List(actions).map(act => (
                <MenuItem onClick={act.callback} key={act.label}
                          title={act.tooltip}
                            className={activationStyles[act.activation_mode]}>
                        {act.icon ? <img src={act.icon} width="16" height="16" /> : null}
                        &nbsp;&nbsp;{act.label}
                </MenuItem>
                )
            )
        )
        .valueSeq()
        .flatten(true)
        .toArray();
}

export function generateMinifiedRowEntry(f, index) {
    return Immutable.fromJS({
        id: `${index}`,
        className: f.get("cdbf_primary") === "1"
                    ? prefixNS('filelist-primary-file-row')
                    : "",
        columns: [
            {
                sortableValue: f.get("cdbf_name"),
                alink: f.get("system:ui_link") || f.get("@id"),
                main: f.get("cdbf_primary")
            },
            {
                sortableValue: parseInt(f.get("cdbf_size")),
                main: f.get("cdbf_primary")
            }
        ]
    });
}

export function generateRowEntry(f, index) {
    return Immutable.fromJS({
        id: `${index}`,
        className: f.get("cdbf_primary") === "1"
                    ? prefixNS('filelist-primary-file-row')
                    : "",
        columns: [
            {
                sortableValue: f.get("cdb_lock"),
                main: f.get("cdbf_primary"),
                lockedBy: f.get("cdb_lock")
            },
            {
                sortableValue: f.get("cdbf_name"),
                alink: f.get("system:ui_link") || f.get("@id"),
                main: f.get("cdbf_primary")
            },
            {
                sortableValue: f.get("cdbf_type"),
                icon: f.get('system:icon_link'),
                main: f.get("cdbf_primary")
            },
            {
                sortableValue: parseInt(f.get("cdbf_size")),
                main: f.get("cdbf_primary")
            },
            {
                sortableValue: moment(f.get("cdb_mdate"),
                moment.ISO_8601).format(getDisplayFormat()),
                main: f.get("cdbf_primary")
            },
            {
                sortableValue: f.get("mapped_mpersno_name"),
                main: f.get("cdbf_primary")
            }
        ]
    });
}

export function getDropzoneClass(expanded) {
    return classNames(prefixNS('filelist__dropzone'), {
        [prefixNS('filelist__dropzone--collapsed')]: !expanded
    });
}

export function performOpCallables(submitUrl, values, fileObjs) {
    return fileObjs.map(f => {
        const request_data = {
            object_navigation_id: f ? f.get('system:navigation_id') : null,
            values: values,
            operation_state: ""
        };
        return () => postJSON(submitUrl, request_data);
    });
}

export function getFileUploadFormData(file) {
    const filename = file.name_alt ? file.name_alt : file.name;
    const formData = new FormData();
    formData.append('content', file);
    formData.append('metadata', JSON.stringify({
        'cdbf_original_name': filename,
        'cdbf_name': filename
    }));

    return formData;
}

export function getSelectionInfo(selectionLength) {
    if (selectionLength === 0) {
        return OPERATION_ACTIVATION_MODES.NO_SELECTION;
    } else if (selectionLength === 1) {
        return OPERATION_ACTIVATION_MODES.SINGLE_SELECTION;
    }

    return OPERATION_ACTIVATION_MODES.MULTIPLE_SELECTION;
}

export function getFileStepOverlay(current, max) {
    return (
        <div className={prefixNS('overlay')}>
            <div className="progress-dialog">
                <p>
                    {formatStr("file_table_upload_progress",
                        {fileno: current, filemax: max})
                    }
                </p>
                <Throbber hidden={false} />
            </div>
        </div>
    );
}

// MDN example of how to encode UTF strings
// see: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding
function b64EncodeUnicode(str) {
    // First we use encodeURIComponent to get percent-encoded UTF-8,
    // then we convert the percent encodings into raw bytes which
    // can be fed into btoa.
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {
        return String.fromCharCode(parseInt(p1, 16));
    }));
}

export function editFile(fileObj, contextObject)
{
    const queryPayload = {
        "object_name": contextObject.get("system:description"),
        "object_view_link": contextObject.get("system:ui_link"),
        "object_id": contextObject.get("cdb_object_id"),
        "file_name": fileObj.get('cdbf_name'),
        "file_link": fileObj.get('@id')
    };

    const queryAsString = JSON.stringify(queryPayload);
    const queryAsB64 = b64EncodeUnicode(queryAsString);

    let protocol = window.location.protocol;
    protocol = protocol.substring(0, protocol.length - 1);

    const uri = "cdbf://" + window.location.hostname +
                (window.location.port !== "" ? ":" + window.location.port : "") +
                "/" + protocol + "/parameters?" + queryAsB64;

    window.open(uri, "_self");
}

export function addEditAction(opMap, contextObject, selectedRows)
{
    return opMap.set("editfile", [{
        label: formatStr('file_edit_label'),
        icon: "/resources/icons/byname/csweb_edit",
        tooltip: formatStr('file_edit_tooltip'),
        callback: () => {
            const fileObj = selectedRows.map((idx) => {
                return files(contextObject).get(idx);})[0];
            editFile(fileObj, contextObject);
        },
        activation_mode: OPERATION_ACTIVATION_MODES.SINGLE_SELECTION
    }]);
}
