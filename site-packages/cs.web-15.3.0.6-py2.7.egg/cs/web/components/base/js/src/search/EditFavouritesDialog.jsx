/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: EditFavouritesDialog.jsx 172732 2018-02-01 15:51:20Z gwe $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import {Table} from 'react-bootstrap';
import Dialog from '../dialogs';
import Button from '../components/Button.jsx';
import {formatStr} from '../i18n.js';
import {prefixNS} from '../helpers.js';
import SVGIcon from '../components/Icon.jsx';
import TextInput from '../formcontrols/TextInput.jsx';

/*
 * The dialog stores the search favourites given at construction time as local
 * state, and performs all actions on this state. No persistent changes to the
 * stored favourites are done until the "Store" button is clicked.
 *
 * Note: the current implementation assumes that a new instance is created
 * for each launch of the dialog!
 */
export default class EditFavouritesDialog extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            searchFavourites: props.searchFavourites.toList(),
            editingNameIndex: null,
            editingNameValue: ''
        };
        this.onChangeName = this.onChangeName.bind(this);
        this.onEditNameOk = this.onEditNameOk.bind(this);
        this.doStore = this.doStore.bind(this);
    }

    onDelete(clickedIndex) {
        const {searchFavourites} = this.state;
        const newSearchFavourites = searchFavourites.remove(clickedIndex);
        this.setState({searchFavourites: newSearchFavourites});
    }

    onEditName(fav, clickedIndex) {
        this.setState({
            editingNameIndex: clickedIndex,
            editingNameValue: fav.get('name')
        });
    }

    onEditNameOk() {
        const {searchFavourites, editingNameIndex, editingNameValue} = this.state;
        const changedFavourite =
            searchFavourites.get(editingNameIndex).set('name', editingNameValue);
        this.setState({
            searchFavourites: searchFavourites.set(editingNameIndex, changedFavourite),
            editingNameIndex: null,
            editingNameValue: ''
        });
    }

    onChangeName(event) {
        this.setState({editingNameValue: event.target.value});
    }

    renderName(fav, idx) {
        const {editingNameIndex, editingNameValue} = this.state;
        if (idx !== editingNameIndex) {
            return fav.get('name');
        }

        return (
            <TextInput
                compact={true}
                value={editingNameValue}
                onChange={this.onChangeName}
                name="classview_search_favorite_name"
            />
        );
    }

    renderEditButtons() {
        return (<div className={prefixNS('edit-search-favourites__button_div')}>
            <span data-ce-id="OKButton">
                <Button.IconButton
                    onClick={this.onEditNameOk}
                    title={formatStr('ok')}
                    buttonStyle='success'
                    iconName='csweb_check'
                    key="classview_search_favorite_ok" />
            </span>
            <span data-ce-id="CancelButton">
                <Button.IconButton
                    onClick={() => this.setState({editingNameIndex: null})}
                    title={formatStr('cancel')}
                    buttonStyle='danger'
                    iconName='csweb_cancel'
                    key="classview_search_favorite_cancel" />
            </span>
        </div>);
    }

    getManipulators(fav, idx) {
        const editManipulator =
          <Button.IconButton
              iconName="csweb_edit"
              size='xs'
              buttonStyle="success"
              className="icon"
              onClick={() => this.onEditName(fav, idx)} />;

        const deleteManipulator =
          <Button.IconButton
              iconName="csweb_trash"
              size='xs'
              buttonStyle="danger"
              className="icon"
              onClick={() => this.onDelete(idx)}/>;

        return (
            <div className={classNames('text-muted',
                prefixNS('edit-search-favourites__button_div'))}>
                <span data-ce-id="EditButton">{editManipulator}</span>
                <span data-ce-id="DeleteButton">{deleteManipulator}</span>
            </div>);
    }

    renderTableRow(fav, idx) {
        const {editingNameIndex} = this.state;
        const readonly = fav.get('readonly');
        const icon = readonly ? <SVGIcon title={formatStr('edit_search_favourites_locked')}
            size='xs' name='Lock' /> : null;

        return (
            <tr key={fav.get('cdb_object_id')}>
                <td className={prefixNS('edit-search-favourites__table__lock')}>
                    {icon}
                </td>
                <td className={prefixNS('edit-search-favourites__table__name')}>
                    {this.renderName(fav, idx)}
                </td>
                {editingNameIndex === idx ?
                    <td className={prefixNS('edit-search-favourites__table__buttons')}>
                        {this.renderEditButtons()}
                    </td> :
                    <td className={
                        classNames(
                            prefixNS('edit-search-favourites__table__buttons'),
                            prefixNS('edit-search-favourites__table__manipulator'))}>
                        {readonly || editingNameIndex ? null : this.getManipulators(fav, idx)}
                    </td>}
            </tr>
        );
    }

    renderTableBody() {
        const {searchFavourites} = this.state;
        return (
            <tbody>
                {searchFavourites
                    .map((fav, idx) => this.renderTableRow(fav, idx))
                    .toArray()}
            </tbody>
        );
    }

    doStore() {
        this.props.onStore(this.state.searchFavourites);
    }

    render() {
        const {onCancel} = this.props;
        return (
            <Dialog.Dialog
                title={formatStr('edit_search_favourites')}
                buttons={[
                    <Dialog.Buttons.Save
                        key="save"
                        onClick={this.doStore}/>,
                    <Dialog.Buttons.Cancel
                        key="cancel"
                        onClick={onCancel}/>
                ]}
                size={Dialog.Dialog.SIZE_SMALL}
                onAction={this.doStore}
                onHide={onCancel}
                show={true}
            >
                <Table striped condensed
                       className={prefixNS('edit-search-favourites__table')}>
                    {this.renderTableBody()}
                </Table>
            </Dialog.Dialog>
        );
    }
}
EditFavouritesDialog.propTypes = {
    searchFavourites: ImmutablePropTypes.orderedMap.isRequired,
    rootClassname: PropTypes.string,
    onStore: PropTypes.func.isRequired,
    onCancel: PropTypes.func.isRequired
};
