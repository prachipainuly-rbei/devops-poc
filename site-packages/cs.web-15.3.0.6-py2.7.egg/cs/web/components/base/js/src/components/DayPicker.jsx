/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DayPicker.jsx 174476 2018-03-14 16:00:48Z yzh $"
 */

import React from 'react';
import {PropTypes, classNames} from 'cs-web-components-externals';
import {prefixNS} from '../helpers';
import DateRange from '../types/DateRange';
import {IconButton} from './Button';
import moment from 'moment';

function isSameOrBetween(newDate, originDate) {
    if (originDate instanceof DateRange) {
        return originDate.contains(newDate);
    }
    return moment(newDate).isSame(originDate, 'day');
}

class Day extends React.PureComponent {
    constructor(props) {
        super(props);
        this.onClick = this.onClick.bind(this);
        this.onMouseEnter = this.onMouseEnter.bind(this);
    }

    onClick(event) {
        const {day, onClick} = this.props;
        if (onClick) {
            onClick(day, event);
        }
    }

    onMouseEnter(event) {
        const {day, onEnter} = this.props;
        if (onEnter) {
            onEnter(day, event);
        }
    }

    render() {
        const {day, currentMonth, selected, selecting, disabled} = this.props;
        const isToday = !selected && day.isSame(moment(), 'day');
        const clsnames = classNames(
            prefixNS('day-picker__day'),
            {
                [prefixNS('day-picker__day--selected')]: selected,
                [prefixNS('day-picker__day--selecting')]: !selected && selecting,
                [prefixNS('day-picker__day--disabled')]: disabled,
                [prefixNS('day-picker__day--today')]: isToday,
                [prefixNS('day-picker__day--other_month')]:
                    day.month() !== currentMonth
            }
        );
        return (
            <div className={clsnames}
                 onMouseEnter={this.onMouseEnter}
                 onClick={this.onClick}>
                {day.date()}
            </div>
        );
    }
}

Day.propTypes = {
    day: PropTypes.object,  // moment object
    onClick: PropTypes.func,
    onEnter: PropTypes.func,
    selected: PropTypes.bool,
    selecting: PropTypes.bool,
    disabled: PropTypes.bool,
    currentMonth: PropTypes.number
};

export default class DayPicker extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            ...this.generateDates(this.props.currentDate),
            selectStart: null,
            selectEnter: null,
            selectEnd: null
        };
        this.onDayClick = this.onDayClick.bind(this);
        this.onDayEnter = this.onDayEnter.bind(this);
        this.goPrevYear = this.changeScope.bind(this, -1, 'y');
        this.goNextYear = this.changeScope.bind(this, 1, 'y');
        this.goPrevMonth = this.changeScope.bind(this, -1, 'M');
        this.goNextMonth = this.changeScope.bind(this, 1, 'M');
    }

    generateDates(currentDate) {
        let currentMoment = currentDate ? moment(currentDate) : moment();
        if (!currentMoment.isValid()) {
            currentMoment = moment();
        }
        const momentFrom = currentMoment.clone().startOf('month').startOf('isoWeek');
        const momentTo = currentMoment.clone().endOf('month').endOf('isoWeek');
        let dateRange = new DateRange(momentFrom, momentTo);
        // There could be at most 6 weeks in a month.
        // Display always 6 weeks to avoid flickering.
        const weeks = dateRange.weekNumbers();
        if (weeks.length < 6) {
            dateRange = new DateRange(momentFrom, momentTo.add(6 - weeks.length, 'weeks'));
        }
        return {
            dateRange,
            currentMoment
        };
    }

    renderWeeknumbers() {
        const {dateRange} = this.state;
        return dateRange.weekNumbers().map(week => (
            <div key={week} className={prefixNS('day-picker__weeknumber')}>
                <span>{week}</span>
            </div>
        ));
    }

    renderWeekdays() {
        // locale aware
        return moment.weekdaysShort(true).map(wd => (
            <div key={wd} className={prefixNS('day-picker__weekday')}>
                {wd}
            </div>
        ));
    }

    renderDays() {
        const {
            dateRange, currentMoment,
            selectStart, selectEnter, selectEnd
        } = this.state;
        const {selectedDates, validDates, readOnly} = this.props;
        const selectingRange = (selectStart && selectEnter) ?
            new DateRange(selectStart, selectEnter) : null;
        return dateRange.toDayArray().map(day => {
            const selecting = selectingRange ?
                isSameOrBetween(day, selectingRange) : false;
            const selected = selectStart ? (
                day.isSame(selectStart, 'day') ||
                day.isSame(selectEnter, 'day') ||
                day.isSame(selectEnd, 'day')
            ) : (selectedDates && selectedDates.some(selectedDate =>
                    isSameOrBetween(day, selectedDate)));
            const configs = {
                currentMonth: currentMoment.month()
            };
            if (!readOnly) {
                if (validDates) {
                    configs['disabled'] = !(validDates.some(validDate =>
                        isSameOrBetween(day, validDate)));
                }
                if (!configs['disabled']) {
                    configs['onClick'] = this.onDayClick;
                    configs['onEnter'] = this.onDayEnter;
                }
            } else {
                configs['disabled'] = true;
            }
            return (
                <Day key={day.toISOString()}
                     day={day}
                     selected={selected}
                     selecting={selecting}
                     {...configs} />
            );
        });
    }

    onDayClick(day, event) {
        const {onChange, selectRange} = this.props;
        const {selectStart} = this.state;
        if (!selectRange) {
            if (onChange) {
                onChange(new DateRange(day, day), event);
            }
        } else if (!selectStart) {
            this.setState({
                selectStart: day,
                selectEnter: null,
                selectEnd: null
            });
        } else {
            this.setState({
                selectEnd: day
            }, () => {
                if (onChange) {
                    const {selectStart, selectEnd} = this.state;
                    this.setState({
                        selectStart: null,
                        selectEnter: null,
                        selectEnd: null
                    });
                    onChange(new DateRange(selectStart, selectEnd), event);
                }
            });
        }
    }

    onDayEnter(day) {
        const {selectRange} = this.props;
        const {selectStart, selectEnd} = this.state;
        if (selectRange && selectStart && !selectEnd) {
            this.setState({selectEnter: day});
        }
    }

    changeScope(amount, unit) {
        this.setState(
            this.generateDates(this.state.currentMoment.clone().add(amount, unit)));
    }

    render() {
        const {currentMoment} = this.state;
        return (
            <div className={prefixNS('day-picker')}>
                <div className={prefixNS('day-picker-header')}>
                    <div className={prefixNS('day-picker-header__row')}>
                        <IconButton iconName="csweb_triangle_left"
                                    buttonStyle="auxiliary"
                                    onClick={this.goPrevYear}/>
                        <span>{currentMoment.year()}</span>
                        <IconButton iconName="csweb_triangle_right"
                                    buttonStyle="auxiliary"
                                    onClick={this.goNextYear}/>
                    </div>
                    <div className={prefixNS('day-picker-header__row')}>
                        <IconButton iconName="csweb_triangle_left"
                                    buttonStyle="auxiliary"
                                    onClick={this.goPrevMonth}/>
                        <span>{currentMoment.format('MMMM')}</span>
                        <IconButton iconName="csweb_triangle_right"
                                    buttonStyle="auxiliary"
                                    onClick={this.goNextMonth}/>
                    </div>
                </div>
                <div className={prefixNS('day-picker-body')}>
                    <div className={prefixNS('day-picker-weeknumbers')}>
                        {this.renderWeeknumbers()}
                    </div>
                    <div className={prefixNS('day-picker-grid')}>
                        <div className={prefixNS('day-picker-weekdays')}>
                            {this.renderWeekdays()}
                        </div>
                        <div className={prefixNS('day-picker-days')}>
                            {this.renderDays()}
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

DayPicker.propTypes = {
    currentDate: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
    selectedDates: PropTypes.array,
    validDates: PropTypes.array,
    selectRange: PropTypes.bool,
    readOnly: PropTypes.bool,
    onChange: PropTypes.func
};
