/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Bubble.jsx 184143 2018-09-19 10:17:14Z cla $"
 */

import React from 'react';
import Dropdown from './Dropdown.jsx';
import layoutFunc from './layouting/bubbles.js';
import {prefixNS} from '../helpers.js';
import {VerticalAlignment, VerticalAlignmentType} from './constants.js';
import {PropTypes, classNames} from 'cs-web-components-externals';
import ComponentPropTypes from '../component-props.js';

/* eslint-disable react/prop-types */
/* eslint-disable react/display-name */
function BubbleContainer(Content, props) {
    return function(arrowStyle) {
        const {isSwitched, ..._arrowStyle} = arrowStyle;
        const bubbleClassSuffix = props.verticalAlign === VerticalAlignment.BOTTOM ?
                                  (isSwitched ? 'top' : 'bottom') :
                                  (isSwitched ? 'bottom' : 'top');
        return (
            <div className={prefixNS('bubble-content')}>
                <div className={prefixNS(`bubble-arrow-${bubbleClassSuffix}`)}
                     style={_arrowStyle}/>
                <div className={prefixNS(`bubble-container-${bubbleClassSuffix}`)}>
                    {Content}
                </div>
            </div>
        );
    };
}
/* eslint-enable react/display-name */
/* eslint-enable react/prop-types */

/**
 * Provides an overlay that is layouted relative to an anchor component
 * (the component, to which the bubble will be attached), and styled like a
 * speech bubble.
 *
 * When rendering, a Bubble should get two child components: The first will
 * be used as the anchor component, while the second will be used as the
 * content of the bubble.
 *
 * When the Component is used in a context, where the anchor may not be
 * in the visible viewport of its containers (e.g. it is rendered inside
 * a container like a scrollpane where it ends up in the overflow), you
 * may pass in a reference ``containerRef``. When the anchor component
 * is not in the visible area of the component, the overlay will be hidden.
 *
 * Members
 * =======
 *
 * - :ref:`cs-web-components-base-overlays.Bubble.Dropdown`
 *
 * React Properties
 * ================
 *
 * =============== ======================= ================================================
 *    Name            Type                    Description
 * =============== ======================= ================================================
 *  bubbleStyle     string                  Semantic Style of the Bubble Component
 *  verticalAlign   VerticalAlignmentType   How the Bubble should be aligned in relation
 *                                          to its parent component.
 *  containerRef    object                  Reference to a containing component that may
 *                                          cover the anchor component.
 * =============== ======================= ================================================
 *
 * Example
 * =======
 *
 * .. code-block:: none
 *
 *    function(props) {
 *      return (
 *        <Bubble verticalAlign={VerticalAlignment.BOTTOM}
 *                bubbleStyle={'warning'}
 *                {...props}>
 *          <IconButton buttonStyle="warning"
 *                      style={{
 *                        marginTop: '50vh',
 *                        marginLeft: '50vw'
 *                      }}
 *                      iconName={"csweb_option_horizontal"}
 *                      title={"Hello World"}
 *                      size={'sm'} />
 *          <div style={{margin: '5px'}}>
 *            <h5>Hello World</h5>
 *              <ul>
 *                <li>This is an example</li>
 *                <li>for a bubble over a button</li>
 *              </ul>
 *          </div>
 *        </Bubble>
 *      );
 *    }
 *
 */
export default class Bubble extends React.Component {
    render() {
        const {bubbleStyle, children, className, ...others} = this.props;
        const clsName = classNames(
            className,
            prefixNS('bubble'),
            prefixNS(`bubble-${bubbleStyle}`),
        );

        return (
            <Dropdown.Static OverlayContainer={BubbleContainer}
                             layoutFunc={layoutFunc}
                             className={clsName}
                             {...others}>
                {children}
            </Dropdown.Static>
        );
    }
}

Bubble.propTypes = {
    bubbleStyle: ComponentPropTypes.semanticStyle,
    className: PropTypes.string,
    verticalAlign: VerticalAlignmentType,
    visible: PropTypes.bool,
};

Bubble.defaultProps = {
    bubbleStyle: 'default',
    verticalAlign: VerticalAlignment.BOTTOM,
    visible: true,
};

/**
 * A :ref:`cs-web-components-base-overlays.Dropdown.__default__`-based component that uses the
 * bubble design and layout algorithm.
 *
 * @name Dropdown
 * @memberof Bubble
 */
class BubbleDropdown extends React.Component {
    constructor(props) {
        super(props);
        this._dropdown = null;
        this.setDropdownRef = this.setDropdownRef.bind(this);
    }

    setDropdownRef(c) {
        this._dropdown = c;
    }

    show() {
        if (this._dropdown) {
            this._dropdown.show();
        }
    }

    hide() {
        if (this._dropdown) {
            this._dropdown.hide();
        }
    }

    toggle() {
        if (this._dropdown) {
            this._dropdown.toggle();
        }
    }

    render() {
        const {children, className, bubbleStyle, ...others} = this.props;
        const clsName = classNames(
            className,
            prefixNS('bubble'),
            prefixNS(`bubble-${bubbleStyle}`),
        );
        return (
            <Dropdown ref={this.setDropdownRef}
                      OverlayContainer={BubbleContainer}
                      layoutFunc={layoutFunc}
                      className={clsName}
                      {...others}>
                {children}
            </Dropdown>
        );
    }
}

BubbleDropdown.propTypes = {
    bubbleStyle: ComponentPropTypes.semanticStyle,
    className: PropTypes.string,
    verticalAlign: VerticalAlignmentType,
};

BubbleDropdown.defaultProps = {
    bubbleStyle: 'default',
    verticalAlign: VerticalAlignment.BOTTOM,
};

Bubble.Dropdown = BubbleDropdown;
