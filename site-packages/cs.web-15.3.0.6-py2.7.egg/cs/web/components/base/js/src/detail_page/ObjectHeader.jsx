/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ObjectHeader.jsx 174212 2018-03-08 10:50:39Z vov $"
 */

import React from 'react';
import {classNames, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../helpers.js';
import DisplayContextLoader from '../components/DisplayContextLoader.jsx';
import DetailThumbnail from './DetailThumbnail.jsx';
import Titlebar from './Titlebar.jsx';
import DataContainerRow from './DataContainerRow.jsx';
import MinifyButton from './MinifyButton.jsx';

export default class ObjectHeader extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            minified: false
        };
        this.toggleMinified = this.toggleMinified.bind(this);
    }

    toggleMinified() {
        this.setState(prevState => {
            return {minified: !prevState.minified};
        });
    }

    renderDataContainers() {
        const {minified} = this.state;
        if (minified) {
            return null;
        }
        const {DisplayContextLoader} = this.props;
        return (
            <DisplayContextLoader
                    displayContext='object_header'
                    contextObject={this.props.contextObject}>
                <DataContainerRow />
            </DisplayContextLoader>
        );
    }

    renderExtension() {
        const {children} = this.props;
        const {minified} = this.state;
        if (minified || React.Children.count(children) === 0) {
            return null;
        }
        return (
            <div className={prefixNS('object-header__extension')}>
                {children}
            </div>
        );
    }

    renderCollapseButton() {
        const {minified} = this.state;
        if (minified) {
            return null;
        }
        return (
            <div className={prefixNS('object-header__collapse_button')}>
                <MinifyButton minified={minified} toggleMinified={this.toggleMinified} />
            </div>
        );
    }

    render() {
        const {contextObject} = this.props;
        const {minified} = this.state;
        const classes = classNames(
            prefixNS('object-header'),
            {
                [prefixNS('object-header--normal')]: !minified,
                [prefixNS('object-header--minified')]: minified
            }
        );
        return (
            <div className={classes}>
                <div className={prefixNS('object-header__main')}>
                    <DetailThumbnail contextObject={contextObject} size={minified ? "md" : "lg"}/>
                    <div className={prefixNS('object-header__data')}>
                        <Titlebar
                            contextObject={contextObject}
                            minified={minified}
                            toggleMinified={this.toggleMinified} />
                        {this.renderDataContainers()}
                    </div>
                </div>
                {this.renderExtension()}
                {this.renderCollapseButton()}
            </div>
        );
    }
}

ObjectHeader.propTypes = {
    contextObject: ImmutablePropTypes.map.isRequired,
    DisplayContextLoader: PropTypes.func  // Component class
};

ObjectHeader.defaultProps = {
    DisplayContextLoader: DisplayContextLoader
};
