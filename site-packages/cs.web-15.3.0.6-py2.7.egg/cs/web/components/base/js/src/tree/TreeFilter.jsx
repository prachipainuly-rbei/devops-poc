
import React from 'react';
import {ImmutablePropTypes} from 'cs-web-components-externals';
import Immutable from 'immutable';

/**
 * This module provides filter HOCs for use in tree components. A filter is a tree HOC of the form
 *
 * .. code-block:: javascript
 *
 *    TreeRenderer => TreeRenderer
 *
 * which renders the provided TreeRenderer argument, but replaces the tree's rootNode with a modified
 * version, that usually removes nodes from the tree's model.
 *
 * @module
 */

/**
 * A function that creates a filter to display a subtree based on a set of nodes, that should be
 * included in the subtree.
 *
 * The parameter getNodes provides a function that must return an array of nodes. Input to the
 * function is the trees props object. The filtered tree will only include the paths leading to
 * the nodes in the array returned by getNodes.
 *
 * @param getNodes - a function ``props => [treeNodes]``
 * @return a filter HOC
 * @function
 */
export const ShowPaths = getNodes => TreeRenderer => {
    class _TreeFilter extends React.Component {
        filter(rootNode) {
            const nodes = getNodes(this.props);
            if (nodes === undefined) {
                return rootNode;
            }

            const selectedIds = new Set(nodes);

            const _filter = (node) => {
                const filteredChildren = [];
                node.get('children').forEach(child => {
                    const filteredChild = _filter(child);
                    if (filteredChild) {
                        filteredChildren.push(filteredChild);
                    }
                });

                if (selectedIds.has(node.get('id')) || filteredChildren.length > 0) {
                    return Immutable.fromJS(
                        {
                            id: node.get('id'),
                            content: node.get('content'),
                            expanded: true,
                            is_selected: node.get('is_selected'),
                            children: filteredChildren,
                            has_children: filteredChildren.size > 0
                        }
                    );
                } else {
                    return null;
                }
            };

            return _filter(rootNode);
        }

        render() {
            const {rootNode, ...rest} = this.props;
            return (
                <TreeRenderer rootNode={this.filter(rootNode)} {...rest} />
            );
        }
    }

    _TreeFilter.propTypes = {
        rootNode: ImmutablePropTypes.map
    };

    return _TreeFilter;
};

/**
 * A filter HOC that displays all search results in the active search if a search is active,
 * or the whole tree structure if no search is active.
 *
 * @param TreeRenderer - a TreeRenderer component
 * @return a TreeRenderer component
 * @function
 */
export const ShowSearchResults = ShowPaths(
    props => props.getSearchResultCount() > 0 ?
        [...props.getSearchResult().keys()]
        : undefined);

/**
 * A filter HOC that displays the selected search result if a search result is selected, or
 * the whole tree structure if no search is active.
 *
 * @param TreeRenderer - a TreeRenderer component
 * @return a TreeRenderer component
 * @function
 */
export const ShowSelectedSearchResult = ShowPaths(
    props => props.getSelectedSearchResult() ?
        [props.getSelectedSearchResult().get('id')]
        : undefined);

export default {
    ShowPaths,
    ShowSearchResults,
    ShowSelectedSearchResult
};
