/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: index.js 164963 2017-09-12 08:19:46Z cla $"
 */

import React from 'react';
import {prefixNS} from '../../helpers.js';
import {getMessagesForDisplay} from '../reducer.js';
import {removeMessageFromDisplay} from '../actions.js';
import {connect, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {getType} from '../helpers.js';
import {Alert} from 'react-bootstrap';


const BANNER_DISPLAY_ID = prefixNS('Banner');

/**
 * This container enables components to display messages sent to the user via
 * the messages framework as banners.
 *
 * The component should be rendered into a container at the location at which
 * the banners should be displayed, usually on top of the component that is
 * subject of the message. As a website may contain multiple BannerContainer
 * components an ``id`` should be provided to each instance. This ``id`` will
 * be used in the createBanner message factory to specify which container
 * should display the banner. If an id is used multiple times, messages will
 * be displayed in all containers with that id.
 *
 * +--------------+--------+---------+---------------------------------------------------+
 * | Name         | Type   | Default | Description                                       |
 * +==============+========+=========+===================================================+
 * | id           | string | \-      | The id of the bannercontainer.                    |
 * +--------------+--------+---------+---------------------------------------------------+
 *
 * @class BannerContainer
 * @extends React.Component
 * @memberof module:Messages
 */
class BannerContainer extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            messages: this.getMessages(props)
        };
    }

    componentWillUmount() {
        this.state.messages.forEach(m => {
            this.props.removeMessageFromDisplay(m.getIn(['message', 'id'], BANNER_DISPLAY_ID));
        });
    }

    getMessages(props) {
        return props.messages.filter(
            m => m.getIn(['displayInfo', 'bannerContainerId']) === props.id
        );
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.messages !== this.props.messages || nextProps.id !== this.props.id) {
            this.setState({messages: this.getMessages(nextProps)});
        }
    }

    render() {
        return (
            <div>
                {this.state.messages.map((m, k) => (
                    <Alert key={k} bsStyle={m.getIn(['displayInfo', 'bsStyle'])}>
                        <b>{m.getIn(['message', 'title'])}</b>: {m.getIn(['message', 'message'])}
                    </Alert>
                 )).valueSeq()}
            </div>
        );
    }
}

BannerContainer.propTypes = {
    id: PropTypes.string,
    messages: ImmutablePropTypes.map.isRequired,
    removeMessageFromDisplay: PropTypes.func
};

function mapStateToProps(state) {
    return {
        messages: getMessagesForDisplay(state, BANNER_DISPLAY_ID)
    };
}

/**
 * Display message inside the banner container specified by ``bannerContainerId``
 *
 * @param {object} arguments - Spread Parameter: ``{bannerContainerId}``
 * @returns {object} a displayInfo object
 * @function createBanner
 * @memberof module:Messages
 */
export function createBanner({bannerContainerId}) {
    return (dispatch, {id, ts, title, message, level, owner}) => {  // eslint-disable-line
        return {
            displayId: BANNER_DISPLAY_ID,
            bannerContainerId,
            bsStyle: getType(level)
        };
    };
}

export default connect(mapStateToProps, {removeMessageFromDisplay})(BannerContainer);
