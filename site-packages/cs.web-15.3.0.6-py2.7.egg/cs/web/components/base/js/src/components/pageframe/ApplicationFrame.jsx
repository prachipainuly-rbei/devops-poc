/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ApplicationFrame.jsx 174212 2018-03-08 10:50:39Z vov $"
 */

import React, {Component} from 'react';
import {classNames, PropTypes} from 'cs-web-components-externals';
import {prefixNS, isCEDesktop, getAppSetup} from '../../helpers.js';
import TitleBar, {CDBTitleBar} from './TitleBar';
import NavigationPane from './NavigationPane';
import Navigation from '../navigation';
import SVGIcon from '../SVGIcon';
import {formatStr} from '../../i18n.js';

const SIDEBAR_STATE_KEY = prefixNS('ApplicationSidebar');

import collpased_icon from '../../../../resources/cis_list-close_primary.svg';
import expanded_icon from '../../../../resources/cis_list_primary.svg';

const getAppSettings = (name) => getAppSetup().getIn(['appSettings', name]);
const getAppLinks = (name) => getAppSetup().getIn(['links', 'common', name]);

const title = getAppSettings('title');
const homeLink = getAppLinks('home');

/**
 * This component renders the
 * :ref:`cs-web-components-base-components.pageframe.TitleBar.CDBTitleBarContent` and the
 * :ref:`cs-web-components-base-components.pageframe.NavigationPane.NavigationPane`, along
 * with the content of a web application.
 *
 * React Properties
 * ----------------
 *
 * +------------------+------------------+--------------+---------------------------------+
 * | Property         | Type             | Default      | Use                             |
 * +==================+==================+==============+=================================+
 * | children         | React Components | -            |                                 |
 * +------------------+------------------+--------------+---------------------------------+
 *
 * @class
 * @name ApplicationFrame
 */
export default class ApplicationFrame extends Component {

    constructor(props) {
        super(props);

        this.collapseTooltip = this.props.sidebarCollapsedTooltip !== "" ?
            this.props.sidebarCollapsedTooltip : formatStr('application_menu_open');
        this.expandedTooltip = this.props.sidebarExpandedTooltip !== "" ?
            this.props.sidebarExpandedTooltip : formatStr('application_menu_close');

        this.state = {
            sidebarCollapsed: JSON.parse(localStorage.getItem(SIDEBAR_STATE_KEY) || 'true')
        };
    }

    toggleSidebar() {
        const newState = !this.state.sidebarCollapsed;

        this.setState({sidebarCollapsed: newState});
        localStorage.setItem(SIDEBAR_STATE_KEY, JSON.stringify(newState));
    }

    render() {
        const withSidebar = {
            [prefixNS('application-frame__content--with-sidebar')]:
                !isCEDesktop(),
            [prefixNS('application-frame__content--with-sidebar-expanded')]:
                !isCEDesktop() && !this.state.sidebarCollapsed,
            [prefixNS('application-frame_cdbpc')]:
                isCEDesktop(),
        };
        const pageContentClassname = classNames(
            prefixNS('application-pagecontent'),
            withSidebar
        );

        return (
            <div className={prefixNS('application-frame')}>
                <TitleBar title={this.props.pageTitle} homeLink={this.props.pageLink}
                        logoSrc={this.props.logoSrc}>
                    {this.props.titleBarContent}
                </TitleBar>
                {isCEDesktop() ? null :
                    <NavigationPane collapsed={this.state.sidebarCollapsed}>
                        <Navigation.Applications sidebarCollapsed={this.state.sidebarCollapsed}/>
                        <div className={prefixNS("application-frame__menu-button")}>
                        <SVGIcon src={!this.state.sidebarCollapsed ?
                                collpased_icon : expanded_icon}
                                onClick={this.toggleSidebar.bind(this)}
                                title={this.state.sidebarCollapsed ?
                                    this.collapseTooltip :
                                    this.expandedTooltip
                                }
                                className={prefixNS("application-frame__icon")} />
                        </div>
                    </NavigationPane>
                }
                <div className={prefixNS('application-frame__content')}>
                    <div className={pageContentClassname}>
                        {this.props.children}
                    </div>
                </div>
            </div>
        );
    }
}

ApplicationFrame.defaultProps = {
    sidebarCollapsedTooltip: "",
    sidebarExpandedTooltip: "",
    pageTitle: title,
    pageLink: homeLink,
    logoSrc: "/static/imgid/branding_web_portal_logo_small.svg",
    titleBarContent: <CDBTitleBar />
};

ApplicationFrame.propTypes = {
    sidebarCollapsedTooltip: PropTypes.string.isRequired,
    sidebarExpandedTooltip: PropTypes.string.isRequired,
    pageTitle: PropTypes.string.isRequired,
    pageLink: PropTypes.string.isRequired,
    logoSrc: PropTypes.string,
    titleBarContent: PropTypes.element
};
