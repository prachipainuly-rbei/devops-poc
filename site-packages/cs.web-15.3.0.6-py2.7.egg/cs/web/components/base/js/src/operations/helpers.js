/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: helpers.js 178737 2018-06-11 10:34:25Z mbr $"
 */

import {ReduxSaga} from 'cs-web-components-externals';
import {isMandatory, isFilled} from '../form/fieldTypes';

/**
 * Helper function that sets the location field of a window handle.
 *
 * This is useful for navigation in Redux-Sagas, e.g.,
 *
 * .. code-block:: javascript
 *
 *    yield call(navigate, window, 'http://www.example.com');
 */
export function setWindowLocation(handle, url) {
    handle.location = url;
}

/**
 * Calculate empty mandatory fields from current operation state.
 */
export function getMandatoryFields(state) {
    const registers = state.get('registers');
    const values = state.get('values');
    return registers
        .map(
            register =>
                register.get('fields').filter(
                    (field) =>
                        isMandatory(field) && !isFilled(field, values)))
        .flatten(true);
}

/**
 * Check if form values have changed from initial state
 */
export function hasModifiedValues(state) {
    const currValues = state.get('values');
    const initValues = state.getIn(['state', 'values']);
    return currValues.some((value, key) => value !== initValues.get(key));
}

/**
 * Process the body of a network exception.
 *
 * Stream will be read, and attached as property text, as well as as
 * property json, if it is parsable as json.
 */
export function* processNetworkException(exc) {
    if (exc.response === undefined) {
        return exc;
    }

    const {text, json} = yield exc.response.text().then(text => {
        try {
            return {text, json: JSON.parse(text)};
        } catch (e) {
            return {text};
        }
    });

    exc.text = text;
    exc.json = json;

    return exc;
}

/**
 * Selector for the operation state of Operation Instances.
 */
export function selectState(instanceName) {
    return ReduxSaga.effects.select(
        (state, instanceName) => state.formWithOperations.get(instanceName),
        instanceName
    );
}
