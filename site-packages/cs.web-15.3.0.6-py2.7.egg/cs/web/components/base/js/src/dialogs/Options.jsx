/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Options.jsx 180493 2018-07-12 14:50:34Z yaz $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../helpers.js';
import Dialog, {DialogPropTypes} from './Dialog.jsx';
import Buttons from './Buttons.jsx';
import SVGIcon from '../components/SVGIcon.jsx';

const optionPropTypes = {
    title: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element,
    ]).isRequired,
    onHide: PropTypes.func,
    size: DialogPropTypes.size,
    show: PropTypes.bool,
    showCancel: PropTypes.bool
};

const optionDefaults = {
    size: Dialog.SIZE_SMALL,
    show: true
};

function DeferredOptions(Options) {
    function component(props) {
        const {show, ...others} = props;
        return show ? (<Options {...others} />) : null;
    }

    component.displayName = `${Options.displayName}.Deferred`;
    component.propTypes = Options.propTypes;

    return component;
}

/**
 * @name Message
 * @class
 * @memberof module:Dialog
 * @extends React.Component
 */
export function Message(props) {
    return (
        <Dialog title={props.title}
                buttons={<Buttons.Close onClick={props.onHide} />}
                show={props.show}
                onHide={props.onHide}
                showCancel={false}
                size={props.size}>
            {props.children}
        </Dialog>
    );
}

Message.propTypes = optionPropTypes;
Message.defaultProps = optionDefaults;
Message.Deferred = DeferredOptions(Message);

/**
 * @name Notice
 * @class
 * @memberof module:Dialog
 * @extends React.Component
 */
export function Notice(props) {
    const {children, title, ...others} = props;
    const titleComponent = (
        <div className={prefixNS('dialog__notice-title')} title={title}>
            <SVGIcon name="csweb_information" size="sm" />
            <span>{title}</span>
        </div>
    );
    return (
        <Message {...others} title={titleComponent}>
            <p className={prefixNS('dialog__notice-body')}>
                {children}
            </p>
        </Message>
    );
}

Notice.propTypes = Message.propTypes;
Notice.defaultProps = Message.defaultProps;
Notice.Deferred = DeferredOptions(Notice);

/**
 * @name Error
 * @class
 * @memberof module:Dialog
 * @extends React.Component
 */
export function Error(props) {
    const {children, title, ...others} = props;
    const titleComponent = (
        <div className={prefixNS('dialog__error-title')}>
            <SVGIcon name="ConfigurationError" size="sm" />
            <span>{title}</span>
        </div>
    );
    return (
        <Message {...others} title={titleComponent}>
            <p className={prefixNS('dialog__error-body')}>
                {children}
            </p>
        </Message>
    );
}

Error.propTypes = Message.propTypes;
Error.defaultProps = Message.defaultProps;
Error.Deferred = DeferredOptions(Error);

/**
 * @name Alert
 * @class
 * @memberof module:Dialog
 * @extends React.Component
 */
export function Alert(props) {
    const {ActionButton, children, onHide, showCancel, onConfirm, show, size, title} = props;
    const titleComponent = (
        <div className={prefixNS('dialog__alert-title')} title={title}>
            <SVGIcon name="csapp_error_protocol" size="sm" />
            <span>{title}</span>
        </div>
    );
    const confirmCB = () => {
        if (onConfirm) {
            onConfirm();
        }
        if (onHide) {
            onHide();
        }
    };
    return (
       <Dialog
            title={titleComponent}
            buttons={[
                React.cloneElement(ActionButton || <Buttons.Ok />, {
                    key: 'confirm',
                    buttonStyle: 'warning',
                    onClick: confirmCB}),
                <Buttons.Cancel key='cancel' onClick={onHide} />
            ]}
            show={show}
            onAction={confirmCB}
            onHide={onHide}
            showCancel={showCancel}
            size={size}
        >
            <p className={prefixNS('dialog__alert-body')}>
                {children}
            </p>
        </Dialog>
    );
}

Alert.propTypes = {
    ActionButton: PropTypes.element,
    onConfirm: PropTypes.func,
    ...optionPropTypes
};
Alert.defaultProps = optionDefaults;
Alert.Deferred = DeferredOptions(Alert);

const yesNoPropTypes = {
    ...optionPropTypes,
    onConfirm: PropTypes.func
};

/**
 * This component displays a dialog providing a Yes/No choice. The additional property
 * onConfirm should provide a callback that is -- in addition to onHide -- invoked, when
 * the user pushes one of the two buttons. The function receives a boolean argument,
 * which reflects the users choice.
 *
 * Usage
 * =====
 *
 * .. code-block:: none
 *
 *    import {Dialog, Console} from 'cs-web-components-base';
 *
 *    const SimpleYesNo = props => {
 *        const onConfirm = yes => {
 *            if (yes) {
 *                Console.log('Yes was pushed');
 *            } else {
 *                Console.log('No was pushed!');
 *            }
 *        };
 *        return (
 *            <Dialog.Dialog title="A Simple Choice"
 *                           show={props.show}
 *                           size={Dialog.SIZE_MEDIUM}
 *                           onConfirm={onConfirm}
 *                           onHide={props.hide}>
 *                {props.content}
 *            </Dialog.Dialog>
 *        );
 *    };
 *
 * @name YesNo
 * @class
 * @memberof module:Dialog
 * @extends React.Component
 */
export function YesNo(props) {
    const {onHide, onConfirm, show, size, title} = props;
    const yesCB = () => {
        if (onConfirm) {
            onConfirm(true);
        }
        if (onHide) {
            onHide();
        }
    };

    const noCB = () => {
        if (onConfirm) {
            onConfirm(false);
        }
        if (onHide) {
            onHide();
        }
    };

    return (
        <Dialog title={title}
                buttons={[
                    <Buttons.Yes key="yes" onClick={yesCB} />,
                    <Buttons.No key="no" onClick={noCB} />
                ]}
                show={show}
                showCancel={false}
                size={size}>
            {props.children}
        </Dialog>
    );
}

YesNo.propTypes = yesNoPropTypes;
YesNo.defaultProps = optionDefaults;
YesNo.Deferred = DeferredOptions(YesNo);

/**
 * This component is similar to :ref:`cs-web-components-base-dialogs.Options.YesNo`
 * but provides an additional cancel option, which bypasses the execution of the
 * ``onConfirm`` callback.
 *
 * @name YesNoCancel
 * @class
 * @memberof module:Dialog
 * @extends React.Component
 */
export function YesNoCancel(props) {
    const {children, onHide, onConfirm, show, size, title} = props;
    const yesCB = () => {
        if (onConfirm) {
            onConfirm(true);
        }
        if (onHide) {
            onHide();
        }
    };

    const noCB = () => {
        if (onConfirm) {
            onConfirm(false);
        }
        if (onHide) {
            onHide();
        }
    };

    return (
        <Dialog title={title}
                buttons={[
                    <Buttons.Yes key="yes" onClick={yesCB} />,
                    <Buttons.No key="no" onClick={noCB} />,
                    <Buttons.Cancel key="cancel" onClick={onHide} />
                ]}
                show={show}
                onHide={onHide}
                showCancel={false}
                size={size}>
            {children}
        </Dialog>
    );
}

YesNoCancel.propTypes = yesNoPropTypes;
YesNoCancel.defaultProps = optionDefaults;
YesNoCancel.Deferred = DeferredOptions(YesNoCancel);
