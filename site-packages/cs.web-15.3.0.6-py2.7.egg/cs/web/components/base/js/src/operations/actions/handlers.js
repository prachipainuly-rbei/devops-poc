/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: handlers.js 179122 2018-06-18 09:07:47Z cla $"
 */

import {ACTIONS} from '../constants.js';

/**
 * This module provides default submit handler actions. For using
 * these handlers, see also:
 * :ref:`cs-web-components-base-operations.actions.operations.runOperation__handlingresults`.
 * For an example on implementing a custom handler and invoking default handlers from it, see
 * :ref:`cs-web-components-base-operations.sagas.handlers.__module__`.
 *
 * @module Operation.Handlers
 */

/**
 * Default handler for successful operation execution.
 *
 * Inspects the ``result_type`` field of the operation
 * result and dispatches an action accordingly:
 *
 * - ``NO_TYPE``: No action is taken.
 * - ``OBJECT``: The received object is dispatched to the
 *   Redux Store.
 * - ``HTML_VIEW``: The browser navigates to the url provided
 *   in the operation result by setting ``window.location``.
 *
 * Other available result types are currently not supported
 * and will result in a warning being issued.
 */
export function handleOperationSuccess() {
    return {
        type: ACTIONS.HANDLE_OPERATION_SUCCESS,
        payload: {},
    };
}

/**
 * Handle legacy success handler functions.
 *
 * This will emulate the behaviour of submit handler functions as used
 * in cs.web 15.2.0 and cs.web 15.2.1. Please note that full compatibility
 * can not be ensured, and should be tested when porting to cs.web 15.3.0.
 */
export function executeSuccessHandlerFns() {
    return {
        type: ACTIONS.EXECUTE_SUCCESS_HANDLER_FNS,
        payload: {},
    };
}

/**
 * Handle legacy failure handler functions.
 *
 * This will emulate the behaviour of failure handler functions as used
 * in cs.web 15.2.0 and cs.web 15.2.1. Please note that full compatibility
 * can not be ensured, and should be tested when porting to cs.web 15.3.0.
 */
export function executeFailureHandlerFns() {
    return {
        type: ACTIONS.EXECUTE_FAILURE_HANDLER_FNS,
        payload: {},
    };
}

/**
 * A Handler for successful operation execution.
 *
 * If an object is included in the submit-response, it will be
 * updated in/added to the object store.
 */
export function updateObjectStore() {
    return {
        type: ACTIONS.UPDATE_OBJECT_STORE,
        payload: {},
    };
}

/**
 * A Handler for successful operation execution.
 *
 * If an object is included in the submit-response, its
 * detail page address will be added to the system's history.
 */
export function addObjectToHistory() {
    return {
        type: ACTIONS.ADD_HISTORY_ITEM,
        payload: {},
    };
}

/**
 * A Handler for successful operation execution.
 *
 * Navigate to the location specified by path. If path is undefined, try to
 * use the field web_ui_link of the result.
 *
 * If option pushHistory is set, this handler will use ``browserHistory.push``
 * instead of setting ``window.location``.
 *
 * @param path - The location to navigate to
 * @param options - Configuration object
 */
export function navigate(path = undefined, options = {}) {
    const {pushHistory = false} = options;
    return {
        type: ACTIONS.NAVIGATE,
        payload: {path, options: {pushHistory}},
    };
}

/**
 * A Handler for failed operation execution.
 *
 * Displays an error message if the operation fails.
 */
export function postError() {
    return {
        type: ACTIONS.POST_ERROR,
        payload: {},
    };
}

export default {
    handleOperationSuccess,
    updateObjectStore,
    addObjectToHistory,
    navigate,
    postError,

    executeSuccessHandlerFns,
    executeFailureHandlerFns,
};
