/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Provider.jsx 171949 2018-01-19 11:09:05Z mbr $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {setAllItems, setPageSize, setCurrentPage, setPageSizeOptions} from './actions';
import {setTableUserSettings} from '../common/actions';
import {getCurrentPage, getPageSize} from './reducers';
import connect from '../connect';
import Immutable from 'immutable';

function getRowsForSelectedPage(rows, pageSize, currentPage) {
    const offset = currentPage * pageSize;
    return rows.slice(offset - pageSize, offset);
}

// TODO: fix doc string
/**
 * HOC that augments a table with pagination. The initial configuration can be
 * passed as 3 react props: `initPageSize`, `initCurrentPage` and
 * `initPageSizeOptions`.
 *
 * @private
 */
export default function(WrappedTable) {
    class Paginator extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                rowsForSelectedPage: props.rows  // Stores the rows that are actually displayed
            };
        }

        componentWillMount() {
            this.props.setAllItems(this.props.rows.count());
            this.props.setPageSize(this.props.initPageSize);
            this.props.setCurrentPage(this.props.initCurrentPage);
            this.props.setPageSizeOptions(this.props.initPageSizeOptions);
            this.props.setTableUserSettings('paginationUserSettings');
            this.setState({
                rowsForSelectedPage: getRowsForSelectedPage(this.props.rows,
                    this.props.pageSize,
                    this.props.currentPage)
            });
        }

        componentWillReceiveProps(nextProps) {
            if (nextProps.initPageSize !== this.props.initPageSize) {
                nextProps.setPageSize(nextProps.initPageSize);
            }
            if (nextProps.initPageSizeOptions !== this.props.initPageSizeOptions) {
                nextProps.setPageSizeOptions(nextProps.initPageSizeOptions);
            }
            if (nextProps.initCurrentPage !== this.props.initCurrentPage) {
                nextProps.setCurrentPage(nextProps.initCurrentPage);
            }
            if (nextProps.pageSize !== this.props.pageSize ||
                nextProps.currentPage !== this.props.currentPage ||
                nextProps.rows !== this.props.rows ||
                nextProps.hiddenRows !== this.props.hiddenRows) {
                const visibleRows = this.getVisibleRows(nextProps);
                if (nextProps.rows !== this.props.rows ||
                    nextProps.hiddenRows !== this.props.hiddenRows) {
                    nextProps.setAllItems(visibleRows.count());
                }
                this.setState({
                    rowsForSelectedPage: getRowsForSelectedPage(
                        visibleRows,
                        nextProps.pageSize,
                        nextProps.currentPage)
                });
            }
        }

        getVisibleRows(props) {
            return props.rows.filterNot(row =>
                props.hiddenRows.contains(row.get('id')));
        }

        render() {
            const {
                ...others
            } = this.props;
            const selectableRowIDs = this.props.selectableRowIDs
              ? this.state.rowsForSelectedPage.filter(
                row => this.props.selectableRowIDs.includes(row.get('id'))).map(r => r.get('id'))
              : this.state.rowsForSelectedPage.map(r => r.get('id'));
            delete others.initPageSize;
            delete others.initCurrentPage;
            delete others.initPageSizeOptions;
            delete others.setAllItems;
            delete others.setPageSize;
            delete others.setCurrentPage;
            delete others.setPageSizeOptions;
            delete others.pageSize;
            delete others.currentPage;
            delete others.setTableUserSettings;
            // hiddenRows are already filtered out
            delete others.hiddenRows;
            return (
                <WrappedTable
                    {...others}
                    rows={this.state.rowsForSelectedPage}
                    selectableRowIDs={selectableRowIDs}/>
            );
        }
    }

    Paginator.propTypes = {
        initPageSize: PropTypes.number,
        initCurrentPage: PropTypes.number,
        initPageSizeOptions: ImmutablePropTypes.setOf(PropTypes.number),
        rows: ImmutablePropTypes.list,
        selectableRowIDs: ImmutablePropTypes.list,
        hiddenRows: ImmutablePropTypes.set,
        setAllItems: PropTypes.func,
        setPageSize: PropTypes.func,
        setCurrentPage: PropTypes.func,
        setPageSizeOptions: PropTypes.func,
        pageSize: PropTypes.number,
        currentPage: PropTypes.number,
        setTableUserSettings: PropTypes.func,
    };

    Paginator.defaultProps = {
        hiddenRows: Immutable.Set()
    };

    const mapStateToProps = (state) => ({
        pageSize: getPageSize(state),
        currentPage: getCurrentPage(state)
    });

    return connect(
        mapStateToProps,
        {setAllItems, setPageSize, setCurrentPage, setPageSizeOptions, setTableUserSettings}
    )(Paginator);
}
