/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DynamicLibLoader.jsx 166902 2017-10-19 06:29:21Z gwe $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {Console} from './helpers.js';

// Record which libs are currently loading, and which ones are already loaded to
// avoid duplicates. These vars are global, because multiple instances of the
// component need to access the same state.
const Loading = {};
const Loaded = {};

/**
 * FACC component that realizes dynamic loading of JS files. The child function
 * is called with a boolean argument, that is true iff the script is loaded.
 * If more than one DynamicLibLoader instance is rendered with the same scriptUrl
 * property, the library is loaded only once, and the setup funtion is also called
 * only once.
 *
 * React Properties
 * ----------------
 *
 * ==========  ========  =========  =================================
 * Property    Type      Default    Use
 * ==========  ========  =========  =================================
 * scriptUrl   string    \-         The URL of the script to load
 * setup       function  \-         An optional setup function. If set, it will
 *                                  be called exactly once after the script has
 *                                  finished loading.
 * ==========  ========  =========  =================================
 */
export default class DynamicLibLoader extends React.Component {
    componentDidMount() {
        this.loadLibrary(this.props.scriptUrl, this.props.setup);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.scriptUrl && (nextProps.scriptUrl !== this.props.scriptUrl)) {
            this.loadLibrary(nextProps.scriptUrl, nextProps.setup);
        }
    }

    loadLibrary(scriptUrl, setupFunction) {
        if (Loaded[scriptUrl]) {
            return;
        }
        if (Loading[scriptUrl]) {
            Loading[scriptUrl].then(() => {this.forceUpdate()});
            return;
        }
        const p = new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.onload = () => {
                delete Loading[scriptUrl];
                Loaded[scriptUrl] = true;
                if (setupFunction) {
                    setupFunction.call();
                }
                resolve();
            };
            script.onerror = err => {reject(err)};
            script.src = scriptUrl;
            document.body.appendChild(script);
        }).then(
            () => {this.forceUpdate()},
            err => {
                Console.error(`Loading of script ${scriptUrl} failed: `, err);
            }
        );
        Loading[scriptUrl] = p;
    }

    render() {
        const {scriptUrl, children} = this.props;
        return children(Loaded[scriptUrl] === true);
    }
}

DynamicLibLoader.propTypes = {
    scriptUrl: PropTypes.string.isRequired,
    setup: PropTypes.func
};
