/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchResult.jsx 182160 2018-08-14 06:37:13Z mbr $"
 */

import React from 'react';
import {Alert} from 'react-bootstrap';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import Throbber from '../components/Throbber.jsx';
import {repeatSearch} from '../search/actions/instances.js';
import ResultWithDetails from './ResultWithDetails.jsx';
import NotYetSearched from './NotYetSearched.jsx';

/**
 * Renders a table with a search result and possibly additional details, or shows
 * an error, throbber etc. depending on the current state of the search.
 */
class SearchResult extends React.PureComponent {
    constructor(props) {
        super(props);
        this.doRepeatSearch = this.doRepeatSearch.bind(this);
    }

    doRepeatSearch() {
        const {instanceName, repeatSearch} = this.props;
        repeatSearch(instanceName);
    }

    render() {
        const {
            searchResult, searchRunning, searchError, notYetSearched, instanceName,
            rootClassname, detail, childConfiguration
        } = this.props;
        if (searchError !== null) {
            return (
                <Alert key="alert" bsStyle="danger">
                    {searchError.message}
                </Alert>
            );
        }
        else if (notYetSearched) {
            return <NotYetSearched />;
        }
        else if (searchRunning) {
            return <Throbber />;
        }
        else {
            return (
                <ResultWithDetails
                    instanceName={instanceName}
                    rootClassname={rootClassname}
                    searchResult={searchResult}
                    detail={detail}
                    repeatSearch={this.doRepeatSearch}
                    childConfiguration={childConfiguration} />
            );
        }
    }
}
SearchResult.propTypes = {
    instanceName: PropTypes.string.isRequired,
    rootClassname: PropTypes.string.isRequired,
    detail: PropTypes.element,
    childConfiguration: PropTypes.object,
    // store
    searchResult: ImmutablePropTypes.map,
    searchRunning: PropTypes.bool,
    searchError: PropTypes.any,
    notYetSearched: PropTypes.bool,
    // actions
    repeatSearch: PropTypes.func.isRequired
};

function mapStateToProps(state, ownProps) {
    const {instanceName} = ownProps;
    const instance = state.search.instances.get(instanceName);
    return {
        searchResult: instance.get('searchResult'),
        searchRunning: instance.get('searchRunning'),
        searchError: instance.get('searchError'),
        notYetSearched: instance.get('notYetSearched')
    };
}

export default connect(mapStateToProps, {repeatSearch})(SearchResult);
