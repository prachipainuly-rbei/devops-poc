/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: index.js 163715 2017-08-22 13:23:02Z cla $"
 */

import actions, {addSortFunction, removeSortFunction} from './actions';
import Provider from './Provider';
import reducers, {getSortColumns} from './reducers';
import SortButton from './ColumnActions';
import SettingPanel from './SettingPanel.jsx';

/**
 * Provides sorting functionality in a table, by default by stringifying
 * cell values.
 *
 * Options
 * -------
 *
 * - Provider: implements sorting of rows
 * - columnActions: adds a button to each column header for sorting
 *
 * Redux State
 * -----------
 *
 * TODO document Redux components
 *
 * Properties
 * ----------
 *
 * ``Table.sortable.Provider`` by default stringifies cell values to
 * use as a key for sorting. To change this behaviour, contentRenderers may
 * define an additional field ``sortFunction`` :
 *
 * .. code-block:: javascript
 *
 * MyContentRenderer.sortFunction = (a, b) => myExampleCompare(a, b);
 *
 * This function should takes two parameters to be compared and
 * returns -1 if the first is smaller than the second, 1 if the
 * second is smaller than the first and 0 if both are equal.
 *
 * A column definition may also define ``sortFunction``, which will then
 * override the contentRenderer's or default functions.
 *
 * @memberof module:Table
 * @module
 */

export default {
    actions, addSortFunction, removeSortFunction,
    Provider,
    reducers, getSortColumns,
    SortButton,
    columnActions: [SortButton],
    settingPanels: [SettingPanel]
};
