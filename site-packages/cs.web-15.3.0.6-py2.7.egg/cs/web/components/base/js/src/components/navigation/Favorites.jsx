/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Favorites.jsx 183004 2018-08-29 09:52:19Z ank $"
 */

import {formatStr} from '../../i18n';
import React, {Component} from 'react';
import {NavDropdown, MenuItem} from 'react-bootstrap';
import {connect, classNames, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {FavoriteActions} from '../../favorites';
import ObjectWidgets from '../objectwidgets';
import {prefixNS} from '../../helpers';
import SVGIcon from '../SVGIcon';
import Dialog from '../../dialogs';

/**
 * Displays the WebUI favorites of the current user. Note that these are
 * different from the favorites created using the Windows Client.
 *
 * Automation Properties
 * ---------------------
 *
 * **Favorites**: The view itself can be retrieved using this key.
 *
 * **FavoritesEntry_n**: Replace n with a number. The entries can be
 * retrieved using these IDs. They are numbered starting from 0.
 *
 */
export class Favorites extends Component {

    constructor(props) {
        super(props);
        this.onEditFavorite = this.onEditFavorite.bind(this);
        this.showEditDialog = this.showEditDialog.bind(this);
        this.hideEditDialog = this.hideEditDialog.bind(this);
        this.onRemoveFavorite = this.onRemoveFavorite.bind(this);
        this.showRemoveDialog = this.showRemoveDialog.bind(this);
        this.hideRemoveDialog = this.hideRemoveDialog.bind(this);
        this.state = {
            editDialogVisible: false,
            removeDialogVisible: false,
            selectedFavorite: undefined
        };
    }

    componentWillMount() {
        this.props.initFavorites();
    }

    hideEditDialog() {
        this.setState({
            editDialogVisible: false,
            selectedFavorite: undefined
        });
    }

    hideRemoveDialog() {
        this.setState({
            removeDialogVisible: false,
            selectedFavorite: undefined
        });
    }

    showEditDialog(favorite) {
        this.setState({
            editDialogVisible: true,
            selectedFavorite: favorite
        });
    }

    showRemoveDialog(favorite) {
        this.setState({
            removeDialogVisible: true,
            selectedFavorite: favorite
        });
    }

    editDialog() {
        const value = this.state.selectedFavorite ?
                      this.state.selectedFavorite.get('title') : '';
        return (
            <Dialog.InputDialog title={formatStr('favorite_rename')}
                                ActionButton={<Dialog.Buttons.Rename
                                                  title={formatStr("favorite_rename")} />}
                                isValueValid={Dialog.InputDialog.NO_EMPTY_VALUE}
                                size={Dialog.SIZE_SMALL}
                                onHide={this.hideEditDialog}
                                onSubmitValue={this.onEditFavorite}
                                value={value}
                                show={this.state.editDialogVisible}>
                {formatStr('favorite_rename_new_label')}
            </Dialog.InputDialog>
        );
    }

    onEditFavorite(value) {
        this.props.updateFavorite(this.state.selectedFavorite, value);
        this.hideEditDialog();
    }

    onRemoveFavorite() {
        this.props.deleteFavorite(this.state.selectedFavorite);
        this.hideRemoveDialog();
    }

    removeDialog() {
        if (this.state.selectedFavorite === undefined) {
            return null;
        }

        return (
            <Dialog.Alert ActionButton={<Dialog.Buttons.Delete/>}
                          title={formatStr('favorite_delete')}
                          show={this.state.removeDialogVisible}
                          onHide={this.hideRemoveDialog}
                          onConfirm={this.onRemoveFavorite}>
                <p>
                    {formatStr('favorite_delete_text',
                               {favorite: this.state.selectedFavorite.get('title')})}
                </p>
            </Dialog.Alert>
        );
    }

    render() {
        const title =
            <span title={formatStr('favorite_title')}>
                <SVGIcon
                    name="csweb_favorite_added"
                    className={classNames(prefixNS('titlebar__icon'))}/>
            </span>;

        const classes = classNames(prefixNS('favorites'), this.props.className);

        const renderedFavorites = this.props.favorites.valueSeq().map((favorite, idx) => {
            return (
                <MenuItem key={idx}
                          href={favorite.get('frontend_url')}
                          title={favorite.get('title')}
                          target="_blank"
                          rel="noopener">
                    <ObjectWidgets.EditableObjectLabel
                        data-ce-id={'FavoriteEntry_' + idx}
                        text={favorite.get('title')}
                        icon={<SVGIcon src={favorite.get('icon_url')} size="sm" />}
                        onEditClicked={() => this.showEditDialog(favorite)}
                        onDeleteClicked={() => this.showRemoveDialog(favorite)}/>
                </MenuItem>
            );
        });

        return (
            <NavDropdown id={prefixNS('favorites')}
                         title={title}
                         className={classes}>
                {renderedFavorites.count() > 0 ?
                    renderedFavorites :
                    (
                        <MenuItem key="empty" disabled>
                            {formatStr('empty_menu')}
                        </MenuItem>
                    )}
                <MenuItem key="dialogs"
                          disabled
                          className={prefixNS('favorite-dialogs')}>
                    {this.editDialog()}
                    {this.removeDialog()}
                </MenuItem>
            </NavDropdown>
        );
    }
}

Favorites.propTypes = {
    favorites: ImmutablePropTypes.map,
    initFavorites: PropTypes.func,
    updateFavorite: PropTypes.func,
    deleteFavorite: PropTypes.func,
    className: PropTypes.string
};

function mapStateToProps(state) {
    return {
        favorites: state.favorites
    };
}

const actions = {
    initFavorites: FavoriteActions.initFavorites,
    deleteFavorite: FavoriteActions.deleteFavorite,
    updateFavorite: FavoriteActions.updateFavorite
};

export default connect(mapStateToProps, actions)(Favorites);
