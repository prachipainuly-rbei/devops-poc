/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SettingPanel.jsx 184479 2018-09-27 08:27:18Z mbr $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers.js';
import {formatStr} from '../../i18n.js';
import connect from '../connect';
import {setGroupColumns} from './actions';
import {getGroupColumns} from './reducers';
import Organizer from '../../components/Organizer';
import HelpReference from '../../components/HelpReference.jsx';
import {SELECTORID} from '../constants.js';

export class GroupableSettingPanel extends React.Component {
    constructor(props) {
        super(props);
        this.updateGroupedColumnsFromOrganizer =
            this.updateGroupedColumnsFromOrganizer.bind(this);
        this.state = {
            groupedColumnIds: Immutable.List(),
            organizerLists: undefined
        };
    }

    componentDidMount() {
        this.props.registerPanel(this);
        this.updateGroupedColumns(this.props.groupColumns.toList());
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.groupColumns !== nextProps.groupColumns ||
            this.props.columns !== nextProps.columns) {
            this.updateGroupedColumns(nextProps.groupColumns.toList());
        }
    }

    dispatchSettings() {
        this.props.setGroupColumns(this.state.groupedColumnIds.toOrderedSet());
    }

    resetSettings() {
        this.updateGroupedColumns(this.props.groupColumns.toList());
    }

    updateGroupedColumns(groupedColumnIds) {
        const {columns} = this.props;
        const lists = Immutable.List([
            Immutable.Map({
                id: 'ungrouped',
                label: formatStr('table_unused_columns'),
                items: columns.filter(
                    col => !groupedColumnIds.contains(col.get('id'))
                ).filter(col => col.get('id') !== SELECTORID),
                unsortable: true
            }),
            Immutable.Map({
                id: 'grouped',
                label: formatStr('table_grouped_columns'),
                items: columns.filter(
                    col => groupedColumnIds.contains(col.get('id'))
                ).filter(col => col.get('id') !== SELECTORID),
                unsortable: false
            })
        ]);

        this.setState({
            groupedColumnIds: groupedColumnIds,
            organizerLists: lists
        });
    }

    updateGroupedColumnsFromOrganizer(colLists) {
        this.updateGroupedColumns(colLists.get(1).get('items').map(col => col.get('id')));
    }

    render() {
        return (
            <div>
                <HelpReference helpId="user_web_components_table_group_columns" />
                <Organizer itemLists={this.state.organizerLists}
                           className={prefixNS('table-column-grouper')}
                           onItemListsChange={this.updateGroupedColumnsFromOrganizer} />
            </div>
        );
    }
}

GroupableSettingPanel.propTypes = {
    registerPanel: PropTypes.func,
    groupColumns: ImmutablePropTypes.orderedSet,
    setGroupColumns: PropTypes.func,
    columns: ImmutablePropTypes.list
};

function mapStateToProps(state) {
    const groupColumns = getGroupColumns(state);
    const {columns} = state;
    return {
        groupColumns, columns
    };
}

const WrappedPanel = connect(mapStateToProps, {setGroupColumns})(GroupableSettingPanel);
WrappedPanel.settingsTitle = () => formatStr('table_settings_title_groupable');
export default WrappedPanel;
