/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: StructureCatalog.jsx 175834 2018-04-12 11:30:08Z cla $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {StructureBaseTree} from '../tree/StructureTree.jsx';
import {postJSON} from '../fetch.js';
import TreeContainer from '../tree/TreeContainer.jsx';
import {prefixNS} from '../helpers.js';

class StructureCatalogTree extends StructureBaseTree {
    constructor(props) {
        super(props);
        this.fetchNodeChildren = this.fetchNodeChildren.bind(this);
    }

    fetchNodeChildren(treeNode) {
        return postJSON(treeNode.getIn(['content', 'expand_url']), this.props.formData)
            .then(
                childStructureNodes => {
                    this.createNodeChildren(treeNode, {nodes: childStructureNodes});
                }
            );
    }
}
StructureCatalogTree.propTypes = {
    ...StructureBaseTree.propTypes,
    formData: PropTypes.object
};
StructureCatalogTree.defaultProps = {
    ...StructureBaseTree.defaultProps,
    TreeRenderer: TreeContainer.DefaultRenderer
};

export default class StructureCatalog extends React.Component {
    constructor(props) {
        super(props);
        this.onSelect = this.onSelect.bind(this);
        this.state = {
            structureRoot: undefined
        };
    }

    componentDidMount() {
        postJSON(this.props.structureRootURL, this.props.formData)
            .then(result => {
                this.setState({
                    structureRoot: result[0]
                });
                if (this.props.onPreviewEnable) {
                    this.props.onPreviewEnable(true);
                }
            });
    }

    onSelect({selectedNode}) {
        this.props.onSelectionChanged(
            selectedNode ? selectedNode.get('selectURL') : undefined
        );
        const restLink = selectedNode ? selectedNode.get('restLink') : undefined;
        if (this.props.onSelect) {
            if (restLink) {
                this.props.onSelect(restLink);
            } else {
                this.props.onSelect();
            }
        }
    }

    render() {
        return (
            <StructureCatalogTree
                className={prefixNS('structure-catalog-tree')}
                treeRendererName={'SimpleTreeContainer.DefaultRenderer'}
                title={this.state.structureRoot && this.state.structureRoot.label}
                hideRoot={this.state.structureRoot &&
                          this.state.structureRoot.selectURL === undefined}
                structureNode={this.state.structureRoot}
                formData={this.props.formData}
                onSelect={this.onSelect} />
        );
    }
}

StructureCatalog.propTypes = {
    structureRootURL: PropTypes.string,
    formData: PropTypes.object,
    onSelectionChanged: PropTypes.func,
    onPreviewEnable: PropTypes.func,
    onSelect: PropTypes.func
};
