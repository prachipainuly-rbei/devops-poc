/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TreeRenderer.jsx 175535 2018-04-05 14:23:59Z sla $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import scrollIntoViewIfNeeded from './scroll-to.js';
import TreeNode from './tree-node.jsx';
import {NodeRendererType} from './NodeRenderer';
import Icon from '../components/Icon';
import {prefixNS} from '../helpers';
import {addLocalShortcut, removeAllLocalShortcuts} from '../key-handlers.js';

import csweb_ajax_loader from '../../../resources/ajax-loader.gif';


/**
 * @module
 */

export default class TreeRenderer extends React.Component {
    constructor(props) {
        super(props);
        this.scrollToNode = this.scrollToNode.bind(this);
        this.setRendererRef = this.setRendererRef.bind(this);
    }

    componentDidMount() {
        // Register key bindings
        const activeKeys = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown'];

        const keyHandler = key => () => {
            const {activateKey, rootNode, selectedId} = this.props;
            activateKey(key, rootNode, selectedId);
        };

        for (const shortCut of activeKeys) {
            addLocalShortcut(this.renderer, shortCut, keyHandler(shortCut));
        }
    }

    setRendererRef(c) {
        this.renderer = c;
    }

    componentWillUnmount() {
        removeAllLocalShortcuts(this.renderer);
    }

    scrollToNode(element) {
        return scrollIntoViewIfNeeded(this.renderer)(element);
    }

    render() {
        const {hideRoot, rootNode, ...rest} = this.props;

        ['selectedId', 'selectedIds'].forEach(prop => {
            delete rest[prop];
        });

        return (
            <div className={prefixNS("tree-renderer")}
                 tabIndex={0}
                 ref={this.setRendererRef}>
                {this.props.rootNode ?
                 (<TreeNode {...rest}
                            hide={hideRoot}
                            node={rootNode}
                            scrollToNode={this.scrollToNode} />) :
                 (<Icon src={csweb_ajax_loader} />)}
            </div>
        );
    }
}

TreeRenderer.propTypes = {
    NodeRenderer: NodeRendererType,
    selectedId: PropTypes.string,
    activateKey: PropTypes.func,
    className: PropTypes.string,
    hideRoot: PropTypes.bool,
    focusId: PropTypes.number,
    keyBlacklistSelector: PropTypes.string,
    fetchNodeChildren: PropTypes.func.isRequired,
    rootNode: ImmutablePropTypes.map
};

TreeRenderer.defaultProps = {
    className: ''
};
