/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Navigator.jsx 158306 2017-05-08 08:29:40Z gwe $"
 */

import React from 'react';
import {Pagination} from 'react-bootstrap';
import {PropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers';
import {setCurrentPage} from './actions';
import {getAllItems, getCurrentPage, getPageSize} from './reducers';
import connect from '../connect';

const getPageCount = (allItems, pageSize) => Math.ceil(allItems / pageSize);

/** Ensure that selected page is inside range of available pages */
const adjustSelectedPage = (allItems, pageSize, currentPage) => {
    if (currentPage < 1) {
        return 1;
    }

    const pageCount = getPageCount(allItems, pageSize);

    if (currentPage > pageCount) {
        return pageCount || 1;
    }

    return currentPage;
};

export class Navigator extends React.Component {
    constructor(props) {
        super(props);
        this.onNavigate = this.onNavigate.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        const {allItems, pageSize, setCurrentPage, currentPage} = nextProps;
        const newPage = adjustSelectedPage(allItems, pageSize, currentPage);
        if (newPage !== currentPage) {
            setCurrentPage(newPage);
        }
    }

    onNavigate(toPage) {
        const {allItems, pageSize, setCurrentPage} = this.props;
        setCurrentPage(adjustSelectedPage(allItems, pageSize, toPage));
    }

    render() {
        const {allItems, pageSize, currentPage} = this.props;
        const pageCount = getPageCount(allItems, pageSize);

        // If no entries are found we display the pagination nonetheless for looks
        return (
            <Pagination className={prefixNS('table-pagination-navigator')}
                        bsSize="medium"
                        items={pageCount || 1}
                        activePage={currentPage}
                        onSelect={this.onNavigate} />
        );

    }
}

Navigator.propTypes = {
    setCurrentPage: PropTypes.func,
    allItems: PropTypes.number,
    pageSize: PropTypes.number,
    currentPage: PropTypes.number
};

const mapStateToProps = (state) => ({
    allItems: getAllItems(state),
    pageSize: getPageSize(state),
    currentPage: getCurrentPage(state)
});

export default connect(mapStateToProps, {setCurrentPage})(Navigator);
