/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Form.jsx 184620 2018-10-01 11:32:13Z cla $"
 */

import React from 'react';
import {Alert} from 'react-bootstrap';
import {formatStr} from '../../i18n.js';
import Throbber from '../../components/Throbber.jsx';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {WithOperationHandler} from './OperationHandler.jsx';
import ConfiguredForm from './ConfiguredForm.jsx';
import Immutable from 'immutable';
import {WithOperations} from '../../components/WithOperations.jsx';

class Form extends React.Component {
    constructor(props) {
        super(props);
        this.state = {operationMissing: false};
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.contextObject !== nextProps.contextObject && nextProps.isInstanceActive) {
            // The Info operation, that is used to retrieve the form and data to
            // display, will never be finished - there is no "close" button to
            // press. So, in order to allow the following if-clause to trigger
            // a new runOperation, we have to explicitly cancel the Info operation.
            this.props.cancelOperation(nextProps.operationInstance, true);
        }
        if (nextProps.showObject && !nextProps.isInstanceActive) {
            if (nextProps.operations.size) {
                nextProps.runOperation(
                    nextProps.operations.get(0),
                    {
                        contextObjects: Immutable.List([nextProps.contextObject]),
                        nonBlocking: true,
                    }
                );
            } else if (nextProps.operationsFetched) {
                this.setState({operationMissing: true});
            }
        }
    }

    componentWillUnmount() {
        this.props.cancelOperation(this.props.operationInstance, true);
    }

    render() {
        const {showObject, ...rest} = this.props;
        const {isInstanceActive, operationState} = this.props;
        if (this.state.operationMissing) {
            return (
                <Alert bsStyle="warning">
                    {formatStr('operation_not_available', {opname: 'CDB_ShowObject'})}
                </Alert>
            );
        } else if (!isInstanceActive) {
            return <Throbber/>;
        }

        const hideButtons = showObject && operationState.get('nonBlocking');
        return (
            <ConfiguredForm
                {...rest}
                hideButtons={hideButtons} />
        );
    }
}

Form.propTypes = {
    operationState: ImmutablePropTypes.map.isRequired,
    operationInstance: PropTypes.string.isRequired,
    operations: ImmutablePropTypes.list.isRequired,
    operationsFetched: PropTypes.bool.isRequired,
    isInstanceActive: PropTypes.bool.isRequired,
    contextObject: PropTypes.object,
    runOperation: PropTypes.func.isRequired,
    cancelOperation: PropTypes.func.isRequired,
    showObject: PropTypes.bool,
};

Form.defaultProps = {
    showObject: true,
};

export default WithOperations(
    WithOperationHandler(Form, "DisplayForm"),
    {operationNames: ['CDB_ShowObject']},
);
