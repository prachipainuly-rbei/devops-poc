/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: portals.js 182853 2018-08-27 10:48:27Z cla $"
 */

/*
 * This module provides helper-functions for displaying
 * overlays and modal dialogs on screen. Its main purpose is
 * handling the z-indices that are assigned to instances of these
 * components. Assuming that overlays, which are opened after
 * other overlays should be placed on top of these, this module
 * provides a stack-like implementation for generating z-indices.
 *
 * Each component instance that are to be displayed in the z-ordering
 * context of document.body (usually by using React.createPortal, e.g.,
 * components provided by the dialogs and overlays modules) should use
 * the functions provided by this module to ensure, they are rendered
 * correctly with regards to other overlay/dialog components.
 *
 * Note that Dialogs are handled specially, since there are a few
 * things we need to do additionally, to circumvent certain deficiencies
 * in the underlying library, when it comes to displaying multiple dialogs.
 *
 * Other components should be fine, just using the regular overlay functions.
 *
 * Usage for other components
 * ==========================
 *
 * In order for this module to be able to identify components, each component
 * instance must have a unique identifier, which can be generated by the
 * ``getPortalId`` function.
 *
 * Using this ID there are two functions that the instance needs to call,
 * each time before it is displayed, and when it is hidden.
 *
 * When a component is going to be displayed, use the function ``openOverlay``
 * to retrieve a z-index value. Usually, you want to put it into the React-State
 * of your component instance and use it when rendering to set the style
 * accordingly.
 *
 * When the component is to be not shown anymore, either because it is unmounted
 * or simply shouldn't be displayed currently, you should call ``closeOverlay``
 * to clean up the stack.
 *
 * Special Handling for dialogs
 * ============================
 *
 * Since the dialog implementation is using react-bootstrap/react-overlays there
 * are some special things that need to be handled during a dialogs lifecycle.
 *
 * The first dialog displayed on top of the application layer is handled specially,
 * since its backdrop is rendered semi-transparent. Further backdrop layers are
 * rendered fully transparent.
 *
 * The Modal implementation forces the focus to stay in a dialog, as long as its
 * displayed.  When opening/closing overlays over a dialog, we need to manually
 * disable/enable this feature respectively, to allow interaction with the
 * overlays on top. Note that react-overlays based Modals handle this on their
 * own, so this behaviour is not necessary when opening dialogs on top of dialogs.
 *
 * Implementing custom portal-based components
 * ===========================================
 *
 * Implementors of new overlay-like components will usually do something like:
 *
 * .. code-block::
 *
 *      const Component = renderContent();
 *      return React.createPortal(Component, document.body);
 *
 * in their render method. In your constructor you will usually generate and store
 * an id for your component:
 *
 * .. code-block::
 *
 *     constructor(props) {
 *       super(props);
 *       this._portalId = getPortalId();
 *       this.state = {zIndex: undefined};
 *     }
 *
 * Now whenever your components visibility changes, you might do a
 *
 * .. code-block::
 *
 *     // I'm gonna be so visible.
 *     const zIndex = openPortal(this._portalId);
 *     this.setState({zIndex});
 *
 *     // And hidden again
 *     const zIndex = closePortal(this._portalId);
 *     this.setState({zIndex});
 *
 * .. note::
 *
 *     These are internal APIs. If you are looking into using overlays in
 *     your application, you should consider using the components provided
 *     by the ``Overlays`` module.
 */

import {prefixNS} from './helpers.js';

let portalIdCounter = 0;

let portalContainer = null;

export function getPortalId() {
    return `${componentNameSpace}-portal-${portalIdCounter++}`;
}

const portalState = {
    dialogs: [],
    portals: [],
};

export function getContainerId() {
    return prefixNS('overlay-container');
}

export function setContainer(container) {
    portalContainer = container;
}

export function getContainer() {
    return portalContainer || document.body;
}

function getLastIndex() {
    if (portalState.portals.length === 0) {
        // react-bootstrap navbar is at 1030. Simple Hack to be on top!
        return [undefined, 2000];
    }
    return portalState.portals[portalState.portals.length - 1];
}

function openPortal(portalId, zIndex) {
    portalState.portals.push([portalId, zIndex]);
    return zIndex;
}

function closePortal(portalId) {
    portalState.portals =
        portalState.portals.filter(
            ([itPortalId]) => itPortalId !== portalId
        );
    return 0;
}

export function isDialogActive() {
    return portalState.dialogs.length > 0;
}

export function openDialog(dialog) {
    const [, currentIndex] = getLastIndex();
    // No need to disable enforceFocus, since this is
    // handled by react-overlays ModalManager
    const newIndexRaw = currentIndex + 1000;
    const newIndex = newIndexRaw - (newIndexRaw % 1000);
    portalState.dialogs.push([dialog.portalId, dialog]);
    return openPortal(dialog.portalId, newIndex);
}

export function closeDialog(portalId) {
    portalState.dialogs = portalState.dialogs.filter(([pid]) => pid !== portalId);
    return closePortal(portalId);
}

export function getDialog(portalId) {
    const pidAndDialogs = portalState.dialogs.filter(([pid]) => pid === portalId);
    if (pidAndDialogs.length === 0) {
        return undefined;
    }

    return pidAndDialogs[0][1];
}

/**
 * Puts the overlay identified by portalId on the
 * portal stack and returns a z-index that will put
 * in on the top.
 */
export function openOverlay(portalId) {
    const [currentId, currentIndex] = getLastIndex();
    const nextIndex = currentIndex + 1;

    // Disable enforceFocus on last portal on
    // stack if it is a dialog
    if (currentId) {
        const dialog = getDialog(currentId);
        if (dialog) {
            dialog.setEnforceFocus(false);
        }
    }

    return openPortal(portalId, nextIndex);
}

/**
 * Removes the overlay identified by portalId
 * from the portal stack and returns a value
 * you can use to reset zIndex in your
 * components state.
 */
export function closeOverlay(portalId) {
    // Enable enforceFocus on last portal on
    // stack if it is a dialog
    const newIndex = closePortal(portalId);
    const [currentId] = getLastIndex();
    if (currentId) {
        const dialog = getDialog(currentId);
        if (dialog) {
            dialog.setEnforceFocus(true);
        }
    }
    return newIndex;
}
