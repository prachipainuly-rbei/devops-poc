/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ContentBlock.jsx 184215 2018-09-20 09:30:51Z vov $"
 */

import React, {Component} from 'react';
import {classNames, PropTypes} from 'cs-web-components-externals';
import {Panel, Collapse} from 'react-bootstrap';
import Button from './Button.jsx';
import {IconAndLabel} from './IconAndLabel';
import {prefixNS} from '../helpers';

class ContentBlockHeader extends Component {

    constructor(props) {
        super(props);
        this.clickHandler = this.clickHandler.bind(this);
    }

    clickHandler(event) {
        event.stopPropagation();
        event.preventDefault();
    }

    render() {
        return (
            <div onClick={this.clickHandler}>
                 {this.props.children}
            </div>
        );
    }
}

class ContentBlockBody extends Component {

    constructor(props) {
        super(props);
    }

    render() {
        return (
            <div className={prefixNS('contentblock-body')}>
                {this.props.children}
            </div>
        );
    }
}

/**
 * The ContentBlock component provides a unified way to enhance a component
 * with a title and one or more toolbars, as well as the ability to collapse the component.
 * The title is alway visible, no matter if the component is collapsed or not. The toolbar(s)
 * on the other hand will only be visible as long as the component stays expanded. Furthermore the title
 * can contain an icon, if specified.
 *
 * Examples
 * --------
 *
 * .. code-block:: none
 *
 *    <ContentBlock collapsible={true}
 *                  expanded={true}
 *                  title={<h3>Hallo Welt</h3>}>
 *       <ContentBlock.Header>
 *          <Button ... />
 *          <Button ... />
 *       </ContentBlock.Header>
 *       <ContentBlock.Body>
 *         <TreeRenderer {...this.props}/>
 *       </ContentBlock.Body>
 *    </ContentBlock>
 *
 * React Properties
 * ================
 *
 * +--------------------+--------------+--------------+-----------------------------------------------+
 * | Property           | Type         | Default      | Use                                           |
 * +====================+==============+==============+===============================================+
 * | title              | string/      | ""           | A title string or component to be displayed   |
 * |                    | component    |              | on the upper left of the component            |
 * +--------------------+--------------+--------------+-----------------------------------------------+
 * | icon               | component    | null         | A component to be displayed in the header     |
 * +--------------------+--------------+--------------+-----------------------------------------------+
 * | contentStyle       | string       | 'default'    | A semantic style, according to Bootstrap      |
 * |                    |              |              | states. One of 'default', 'primary',          |
 * |                    |              |              | 'warning', 'danger', 'info', 'success'.       |
 * +--------------------+--------------+--------------+-----------------------------------------------+
 * | collapsible        | boolean      | true         | true if the component should be collapsible   |
 * +--------------------+--------------+--------------+-----------------------------------------------+
 * | expanded           | boolean      | true         | true if the initial/current state should      |
 * |                    |              |              | be expanded                                   |
 * +--------------------+--------------+--------------+-----------------------------------------------+
 * | onExpansionChanged | function     | \-           | Invoked when components expansion state has   |
 * |                    |              |              | changed. Receives new expansion state as      |
 * |                    |              |              | argument.                                     |
 * +--------------------+--------------+--------------+-----------------------------------------------+
 * | headerDragger      | function     | Identity     | A function that will be wrapped around the    |
 * |                    |              |              | header to make it draggable. The function is  |
 * |                    |              |              | typically a property injected by DragSource() |
 * +--------------------+--------------+--------------+-----------------------------------------------+
 * | children           | [components] | \-           | the child components in the ContentBlock      |
 * +--------------------+--------------+--------------+-----------------------------------------------+
 *
 */
export default class ContentBlock extends Component {

    constructor(props) {
        super(props);
        this.state = {
            expanded: props.expanded !== undefined ? props.expanded : false,
            ContentBlockSize: null,
            ContentBlockHeaderContainerWidth: null,
            ContentBlockToolbarContainerInitialWidth: null
        };
        this.toggleBlock = this.toggleBlock.bind(this);
        this.setContentBlockHeaderContainerRef = element => {
            this.ContentBlockHeaderContainer = element;
        };
        this.setContentBlockHeadlineRef = element => {
            this.ContentBlockHeadline = element;
        };
        this.setContentBlockToolbarContainerRef = element => {
            this.ContentBlockToolbarContainer = element;
        };
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.expanded !== this.props.expanded &&
            nextProps.expanded !== this.state.expanded) {
            this.toggleBlock();
        }
    }

    listenToHeaderContainer() {
        this.interval = setInterval(() => {
            if (this.ContentBlockHeaderContainer !== null &&
                this.ContentBlockHeaderContainer !== undefined &&
                this.ContentBlockToolbarContainer !== null &&
                this.ContentBlockHeadline !== null) {
                if (this.ContentBlockHeaderContainer.offsetWidth !==
                    this.state.ContentBlockHeaderContainerWidth) {
                    const spaceAvailableForToolbar = this.ContentBlockHeaderContainer.offsetWidth -
                        this.ContentBlockHeadline.offsetWidth;
                    if (spaceAvailableForToolbar <
                        this.ContentBlockToolbarContainer.offsetWidth &&
                        this.state.ContentBlockSize !== "small") {
                        this.setState({
                            ContentBlockSize: "small",
                            ContentBlockHeaderContainerWidth:
                            this.ContentBlockHeaderContainer.offsetWidth,
                            ContentBlockToolbarContainerInitialWidth:
                            this.ContentBlockToolbarContainer.offsetWidth
                        });
                    } else if (spaceAvailableForToolbar >=
                        this.state.ContentBlockToolbarContainerInitialWidth) {
                        this.setState({
                            ContentBlockSize: null,
                            ContentBlockHeaderContainerWidth:
                            this.ContentBlockHeaderContainer.offsetWidth
                        });
                    }
                }
            }
        }, 1);
    }

    componentDidMount() {
        this.listenToHeaderContainer();
    }

    toggleBlock() {
        this.setState({
            expanded: !this.state.expanded
        }, () => {
            if (this.props.onExpansionChanged) {
                this.props.onExpansionChanged(this.state.expanded);
            }
        });
    }

    getPanelHeader() {
        const {icon, children, collapsible, title,
               headerDragger, headerChildsAlwaysVisible} = this.props;
        const {expanded} = this.state;
        const toolbars = React.Children.toArray(children).filter(
            v => v.type === ContentBlockHeader);

        const panelExpander = collapsible ? (
            expanded ?
                <Button.ExpanderButtonExpanded
                    className={prefixNS('contentblock-headline__expander')}/> :
                <Button.ExpanderButtonCollapsed
                    className={prefixNS('contentblock-headline__expander')}/>
        ) : null;

        const toolbarCls = classNames(
            prefixNS('contentblock-toolbar-container'),
            {
                [prefixNS('contentblock-toolbar-container--faded')]:
                    !expanded && collapsible && !headerChildsAlwaysVisible
            },
            this.state.ContentBlockSize === "small" ?
            prefixNS('contentblock-toolbar-container-small') : null
        );

        const headlineCls = classNames(
            prefixNS('contentblock-headline'),
            {
                [prefixNS('contentblock-headline__spacer')]: !collapsible
            }
        );

        return headerDragger(
            <div className={prefixNS('contentblock-header-container')}
                 ref={this.setContentBlockHeaderContainerRef}>
                <div className={prefixNS('contentblock-header')}>
                    <div className={headlineCls}
                         ref={this.setContentBlockHeadlineRef}
                         onClick={collapsible ? this.toggleBlock : undefined}
                         title={title}>
                        {panelExpander}
                        <IconAndLabel
                            icon={icon}
                            label={title}/>
                    </div>
                    <div className={toolbarCls}
                         ref={this.setContentBlockToolbarContainerRef}>
                        {toolbars.reverse()}
                    </div>
                </div>
            </div>
        );
    }

    renderCollapse(bodies) {
        return (
            <Collapse in={this.state.expanded}>
                <div className={prefixNS('contentblock-collapsible-content')}>
                    {bodies}
                </div>
            </Collapse>
        );
    }

    render() {
        const bodies = React.Children.toArray(this.props.children).filter(
            (value) => value.type === ContentBlockBody);
        const expansion = this.state.expanded ? 'expanded' : 'collapsed';
        const classes = classNames(
            this.props.className,
            prefixNS('contentblock'),
            prefixNS(`contentblock--${expansion}`)
        );
        return (
            <Panel className={classes}
                   header={this.getPanelHeader()}
                   bsStyle={this.props.contentStyle} >
                {this.props.collapsible ? this.renderCollapse(bodies) : bodies}
            </Panel>
        );
    }
}

ContentBlock.Header = ContentBlockHeader;
ContentBlock.Body = ContentBlockBody;

ContentBlock.propTypes = {
    title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
    icon: PropTypes.object,
    contentStyle: PropTypes.string,
    collapsible: PropTypes.bool,
    expanded: PropTypes.bool,
    onExpansionChanged: PropTypes.func,
    className: PropTypes.string,
    headerDragger: PropTypes.func,
    headerChildsAlwaysVisible: PropTypes.bool,
};

ContentBlock.defaultProps = {
    title: '',
    icon: null,
    contentStyle: 'default',
    collapsible: true,
    expanded: true,
    headerDragger: x => x,
    headerChildsAlwaysVisible: false,
};
