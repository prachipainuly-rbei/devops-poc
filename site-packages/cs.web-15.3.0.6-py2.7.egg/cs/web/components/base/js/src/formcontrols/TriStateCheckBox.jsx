/*
 * Copyright (C) 1990-2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TriStateCheckBox.jsx 185745 2018-10-26 15:10:03Z eab $"
 */

import React, {Component} from 'react';
import {PropTypes} from 'cs-web-components-externals';
import CheckBox from './CheckBox';
import {sharedProps} from './sharedPropTypes';

/**
 * This component extends the <:ref:`cs-web-components-base-formcontrols.CheckBox.__module__`>
 * with a third state: ``indeterminate``. That means its state is neither ``checked`` nor ``unchecked``.
 * It has following properties in addition to those defined in :ref:`form_control_common_props`:
 *
 * +------------------+----------------------------+---------+------------------------------------+
 * | Property         | Type                       | Default | Use                                |
 * +==================+============================+=========+====================================+
 * | value            | string, one of:            | ""      | To display the check box in        |
 * |                  |                            |         | different states                   |
 * |                  | - "0": unchecked           |         |                                    |
 * |                  | - "1": checked             |         |                                    |
 * |                  | - ""(empty): indeterminate |         |                                    |
 * +------------------+----------------------------+---------+------------------------------------+
 * | onStateChange    | func                       |         | A callback fired when state of     |
 * |                  |                            |         | check box is changed.              |
 * |                  |                            |         | ``(nextState) => any``             |
 * +------------------+----------------------------+---------+------------------------------------+
 *
 * .. note::
 *
 *     ``onStateChange`` will be called with the new state if user clicks on the check box. The states
 *     will be set in this order: ``indetermined``, ``unchecked``, ``checked`` and back to ``indetermined``.
 *
 */
export default class TriStateCheckBox extends Component {
    constructor(props) {
        super(props);
        this.state = {
            checkState: props.value
        };
        this.onToggle = this.onToggle.bind(this);
    }

    onToggle(event) {
        let nextState = TriStateCheckBox.checkStates.UNCHECKED;
        switch (this.state.checkState) {
            case TriStateCheckBox.checkStates.UNCHECKED:
                nextState = TriStateCheckBox.checkStates.CHECKED;
                break;
            case TriStateCheckBox.checkStates.CHECKED:
                nextState = TriStateCheckBox.checkStates.INDETERMINATE;
                break;
            default:
                break;
        }
        this.setState({
            checkState: nextState
        });
        this.props.onStateChange && this.props.onStateChange(nextState);
        this.props.onChange && this.props.onChange(event);
    }

    isIndeterminate() {
        return this.state.checkState !== TriStateCheckBox.checkStates.CHECKED &&
            this.state.checkState !== TriStateCheckBox.checkStates.UNCHECKED;
    }

    setIndeterminate() {
        this._input.indeterminate = this.isIndeterminate();
    }

    componentDidMount() {
        this.setIndeterminate();
    }

    componentDidUpdate() {
        this.setIndeterminate();
    }

    componentWillReceiveProps(nextProps) {
        this.setState({checkState: nextProps.value});
    }

    render() {
        const checkState = this.state.checkState;
        const checked = checkState === TriStateCheckBox.checkStates.CHECKED;
        const {...others} = this.props;
        delete others.onStateChange;
        return (
            <CheckBox {...others}
                      checked={checked}
                      inputRef={input => {this._input = input}}
                      onClick={this.onToggle}/>
        );
    }
}

// triple states
TriStateCheckBox.checkStates = {
    UNCHECKED: '0',
    CHECKED: '1',
    INDETERMINATE: ''
};

TriStateCheckBox.propTypes = {
    ...sharedProps,
    value: PropTypes.oneOf([
        TriStateCheckBox.checkStates.UNCHECKED,
        TriStateCheckBox.checkStates.CHECKED,
        TriStateCheckBox.checkStates.INDETERMINATE
    ]),
    onStateChange: PropTypes.func
};
