/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ContextMenu.jsx 182951 2018-08-28 12:22:44Z cla $"
 */

import React from 'react';
import ReactDOM from 'react-dom';
import Overlay from './Overlay.jsx';
import {Menu} from './Menu.jsx';
import layoutFunc from './layouting/menus.js';
import {
    HorizontalAlignment,
    HorizontalAlignmentType,
    VerticalAlignment,
    VerticalAlignmentType,
} from './constants.js';

/**
 * An overlay component to display context menus.
 *
 * Example
 * =======
 *
 * .. code-block:: none
 *
 *    import {Overlays} from 'cs-web-components-base';
 *
 *    const {ContextMenu} = Overlays;
 *
 *    class ContextMenuContainer extends React.Component {
 *      constructor(props) {
 *        super(props);
 *        this.onContextMenu = this.onContextMenu.bind(this);
 *      }
 *
 *      onContextMenu(evt) {
 *        this._contextMenu.open(evt.pageX, evt.pageY);
 *        evt.preventDefault();
 *      }
 *
 *      render() {
 *        return (
 *          <div onContextMenu={this.onContextMenu}>
 *            <ContextMenu ref={c => {this._contextMenu = c}}>
 *              {getMenuItems()}
 *            </ContextMenu>
 *            {"Hello Worlds"}
 *          </div>
 *        );
 *      }
 *    }
 *
 */
export default class ContextMenu extends React.Component {
    constructor(props) {
        super(props);
        this.onHide = this.onHide.bind(this);
        this.setContentRef = this.setContentRef.bind(this);
        this.state = {
            visible: false,
            position: undefined,
            style: undefined,
        };
    }

    open(x, y) {
        this.setState({
            visible: true,
            position: {top: y, left: x, width: 0, height: 0}
        });
    }

    setContentRef(c) {
        if (c) {
            const {verticalAlign, horizontalAlign} = this.props;
            const contentElement = ReactDOM.findDOMNode(c);  // eslint-disable-line react/no-find-dom-node
            const contentRect = {
                width: contentElement.scrollWidth,
                height: contentElement.scrollHeight,
            };
            const style = layoutFunc(
                {}, horizontalAlign, verticalAlign,
                this.state.position, contentRect
            );
            this.setState({style});
        }
    }

    onHide() {
        this.setState({
            visible: false,
            position: undefined
        });
    }

    render() {
        return (
            <Overlay.Controlled visible={this.state.visible}
                                setContentRef={this.setContentRef}
                                positionStyle={this.state.style}
                                onHide={this.onHide}>
                <div tabIndex={0} style={{outline: 'none'}}>
                    <Menu onHide={this.onHide}>
                        {this.props.children}
                    </Menu>
                </div>
            </Overlay.Controlled>
        );
    }
}

ContextMenu.propTypes = {
    verticalAlign: VerticalAlignmentType,
    horizontalAlign: HorizontalAlignmentType,
};

ContextMenu.defaultProps = {
    horizontalAlign: HorizontalAlignment.LEFT,
    verticalAlign: VerticalAlignment.BOTTOM,
};
