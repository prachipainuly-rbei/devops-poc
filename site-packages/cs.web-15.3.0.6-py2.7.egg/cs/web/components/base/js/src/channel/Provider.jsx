import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import Immutable from 'immutable';
import {Console} from '../helpers';

function createChannel(provider) {
    let listeners = Immutable.OrderedSet();

    return {
        publish(newState) {
            listeners.forEach((listener) => listener(newState));
        },
        register(listener) {
            listeners = listeners.add(listener);

            listener(provider.currentState);

            return () => {
                listeners = listeners.delete(listener);
            };
        }
    };
}

/**
 * The channel provider which sends updated values using the new channel
 * mechanism down to its listeners. Any values sent from parent providers are
 * overwritten using local properties. This component must only have one child.
 *
 * React Properties
 * ----------------
 *
 * +-------------------+--------------+--------------+-------------------------------------------------------------------+
 * | Property          | Type         | Default      | Use                                                               |
 * +===================+==============+==============+===================================================================+
 * | channelName       | string       | \-           | The channel identifier for listeners to subscribe to.             |
 * |                   |              |              | This property cannot be changed after initial setup!              |
 * +-------------------+--------------+--------------+-------------------------------------------------------------------+
 * | channelValues     | object       | \-           | An object specifying the mapping of channel keys to actual values |
 * +-------------------+--------------+--------------+-------------------------------------------------------------------+
 *
 */
export default class Provider extends React.Component {
    constructor(props) {
        super(props);
        this.channel = createChannel(this);
        this.currentState = Immutable.Map();
    }

    mergeState(props, notified = Immutable.Map()) {
        const newState = this.currentState.mergeDeep(
            notified.mergeDeep(Immutable.fromJS(props.channelValues)));
        if (newState !== this.currentState) {
            this.currentState = newState;
            this.channel.publish(newState);
        }
    }

    getChannelsContext() {
        return {
            ...this.context.channels,
            [this.props.channelName]: this.channel.register,
        };
    }

    getChildContext() {
        return {
            channels: this.getChannelsContext(),
        };
    }

    componentWillMount() {
        if (this.props.channelName) {
            const subscribe = this.context.channels[this.props.channelName];
            if (subscribe) {
                this.unregister = subscribe((newState) => {
                    this.mergeState(this.props, newState);
                });
            } else {
                this.mergeState(this.props);
            }
        }
    }

    componentWillUnmount() {
        if (this.unregister) {
            this.unregister();
        }
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.channelValues !== this.props.channelValues) {
            this.mergeState(nextProps);
        }
        if (nextProps.channelName !== this.props.channelName) {
            Console.error("You cannot change <Provider channelName>");
        }
    }

    render() {
        const {children, ...others} = this.props;
        delete others.channelName;
        delete others.channelValues;

        return React.cloneElement(React.Children.only(children), {...others});
    }
}

Provider.propTypes = {
    channelName: PropTypes.string.isRequired,
    channelValues: PropTypes.object,
};

Provider.contextTypes = {
    channels: PropTypes.object,
};

Provider.childContextTypes = {
    channels: PropTypes.object,
};
