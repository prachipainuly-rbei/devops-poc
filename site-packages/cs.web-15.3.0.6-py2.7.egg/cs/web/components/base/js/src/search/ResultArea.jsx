/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ResultArea.jsx 182160 2018-08-14 06:37:13Z mbr $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import TableWrapper from '../components/TableWrapper.jsx';
import Table from '../table';
import {TableOperationToolbar} from '../components/ContentOperationToolbar.jsx';
import {formatStr} from '../i18n.js';
import Button from '../components/Button.jsx';
import {ContextObjectWrapper} from '../containers/context-wrapper.jsx';
import {handleOperationSuccess} from './actions/instances.js';


export default class ResultArea extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            tableDef: this.createTableDef(props)
        };
    }

    createTableDef(props) {
        const resultTableOptions = Table.PredefinedTables.getDefaultTableOptions();
        if (props.repeatSearch) {
            resultTableOptions.toolbarButtons.push(
                {toolbarButtons: [() => {
                    return (
                        <Button.IconButton
                          onClick={props.repeatSearch}
                          buttonStyle="info"
                          iconName="csweb_refresh"
                          title={formatStr('refresh')}/>
                    );
                }]});
        }
        const operationHandlers = {
            successActions: [handleOperationSuccess(props.instanceName)]
        };
        resultTableOptions.toolbarButtons.push(
            {
                toolbarButtons: [
                    () => (
                        <ContextObjectWrapper readPath={props.selectionPath}>
                            <TableOperationToolbar
                                objectType={props.rootClassname}
                                operationParams={operationHandlers} />
                        </ContextObjectWrapper>
                    )
                ]
            }
        );
        return Table.PredefinedTables.DefaultTable(resultTableOptions);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.selectionPath !== this.props.selectionPath) {
            this.setState({
                tableDef: this.createTableDef(nextProps)
            });
        }
    }

    render() {
        const {searchResult, onSelectionChanged, resultTableConf} = this.props;
        if (searchResult === undefined) {
            return null;
        }
        let nr_of_recs = "";
        const label = searchResult.get('no_of_records_label');
        if (label) {
            nr_of_recs = " (" + label + ")";
        }
        const columnAggregator = resultTableConf
            ? resultTableConf.columnAggregator
            : null;
        return (
            <TableWrapper
                tableDef={searchResult.get('tabledef')}
                contentHeight="100%"
                rowValues={searchResult.get('rows')}
                collapsible={false}
                title={formatStr("result_area_title") + nr_of_recs}
                singleSelection={false}
                withSelector={true}
                onSelectionChanged={onSelectionChanged}
                table={() => this.state.tableDef}
                columnAggregator={columnAggregator} />
        );
    }
}

ResultArea.propTypes = {
    instanceName: PropTypes.string,
    rootClassname: PropTypes.string.isRequired,
    searchResult: ImmutablePropTypes.map.isRequired,
    selectionPath: PropTypes.string.isRequired,
    repeatSearch: PropTypes.func,
    onSelectionChanged: PropTypes.func.isRequired,
    resultTableConf: PropTypes.object
};
