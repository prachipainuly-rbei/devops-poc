/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ContentOperationToolbar.jsx 184503 2018-09-27 10:57:27Z cla $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {OPERATION_ACTIVATION_MODES} from '../constants.js';
import {prefixNS} from '../helpers.js';
import {OpInfoWrapper} from './WithOperations.jsx';
import {WithOperationTrigger} from '../form/containers/OperationTrigger.jsx';
import {SVGIconAndLabel} from './IconAndLabel.jsx';
import Overlays from '../overlays';
import Button from './Button.jsx';
import ButtonGroup from './ButtonGroup.jsx';
import {formatStr} from '../i18n.js';

export class OperationMenuItem extends React.Component {
    constructor(props) {
        super(props);
        this.runOperation = this.runOperation.bind(this);
    }

    runOperation() {
        this.props.runOperation(this.props.operation, this.props.operationParams);
    }

    render() {
        const others = Object.assign({}, this.props);
        delete others.operation;
        delete others.operationParams;
        delete others.runOperation;
        return (
            <Overlays.MenuItem
                {...others}
                title={this.props.operation.get('tooltip') || undefined}
                onClick={this.runOperation}>
                <SVGIconAndLabel
                    src={this.props.operation.get('icon')}
                    label={this.props.operation.get('label')}/>
            </Overlays.MenuItem>
        );
    }
}

OperationMenuItem.propTypes = {
    runOperation: PropTypes.func,
    operation: ImmutablePropTypes.map.isRequired,
    operationParams: PropTypes.object,
};

OperationMenuItem.defaultProps = {
    operationParams: {}
};

export class OperationButton extends React.Component {
    constructor(props) {
        super(props);
        this.runOperation = this.runOperation.bind(this);
    }

    runOperation() {
        this.props.runOperation(this.props.operation, this.props.operationParams);
    }

    render() {
        const {disabled, buttonStyle, operation, icon, iconSize} = this.props;
        return (
            <Button.IconButton
                onClick={this.runOperation}
                disabled={disabled}
                buttonStyle={buttonStyle}
                key={`${operation.get('classname')}-${operation.get('opname')}`}
                className={prefixNS('operation-button__important')}
                iconSrc={icon || operation.get('icon')}
                size={iconSize}
                title={operation.get('tooltip') || undefined} />
        );
    }
}

OperationButton.propTypes = {
    runOperation: PropTypes.func,
    operation: ImmutablePropTypes.map.isRequired,
    operationParams: PropTypes.object,
    disabled: PropTypes.bool,
    buttonStyle: PropTypes.string,
    iconSize: PropTypes.string,
    icon: PropTypes.string,
    label: PropTypes.string,
};

OperationButton.defaultProps = {
    operationParams: {},
    iconSize: "sm",
};

function prepareOperationParams(operation, contextObjects, parameters) {
    switch (operation.get('activation_mode')) {
        case OPERATION_ACTIVATION_MODES.NO_SELECTION:
        case OPERATION_ACTIVATION_MODES.EVERYTIME:
            return parameters;
        default:
            return Object.assign({}, parameters, {contextObjects});
    }
}

function getOperationItems({operations, runOperation, contextObjects, operationParams,
                           disabled, menuConfig, showInvisible, allButtonStyle = "info"}) {
    const allOperations = operations
        .filter(operation => (showInvisible || operation.get('menu_visible')))
        .sort((a, b) => {
            if (a.get("menugroup") < b.get("menugroup")) {
                return -1;
            }
            if (a.get("menugroup") > b.get("menugroup")) {
                return 1;
            }
            if (a.get("ordering") < b.get("ordering")) {
                return -1;
            }
            if (a.get("ordering") > b.get("ordering")) {
                return 1;
            }
            return 0;
        });

    const otherOperationsItem = (
        <Overlays.DropdownIconButton
            key={prefixNS('Applicationbar-DropdownButton')}
            id={prefixNS('Applicationbar-DropdownButton')}
            buttonStyle={allButtonStyle}
            iconName={menuConfig.get('iconName', "csweb_option_horizontal")}
            pullRight
            title={formatStr('toolbar_further_operations')}
            size={menuConfig.get('iconSize')}
            disabled={allOperations.size === 0 || disabled}
            noCaret={menuConfig.get('hideCaret', true)}>
            {
                menuConfig.get('headerText') ?
                <Overlays.MenuHeader className="dropdown-header">
                    {menuConfig.get('headerText')}
                </Overlays.MenuHeader> :
                null
            }
            {
                allOperations.map(operation => {
                    const disableItem = disabled || !operation.get('operationEnabled', true);
                    const key = `${operation.get('opname')}/${operation.get('classname')}`;
                    const preparedOperationParameters = prepareOperationParams(
                        operation, contextObjects, operationParams
                    );
                    return (
                        <OperationMenuItem
                            key={key}
                            disabled={disableItem}
                            operation={operation}
                            operationParams={preparedOperationParameters}
                            runOperation={disableItem ? undefined : runOperation}/>
                    );
                })
            }
        </Overlays.DropdownIconButton>
    );

    if (menuConfig.get('hideQuickAccess')) {
        return otherOperationsItem;
    }

    const operationItems = allOperations
        .filter(operation => operation.get('essential'))
        .map(operation =>
            <OperationButton
                key={`${operation.get('classname')}/${operation.get('opname')}`}
                disabled={disabled || !operation.get('operationEnabled', true)}
                buttonStyle="info"
                operation={operation}
                operationParams={prepareOperationParams(operation, contextObjects, operationParams)}
                runOperation={runOperation}
                iconSize={menuConfig.get('iconSize')}/>
        )
        .push(otherOperationsItem);

    return operationItems;
}

export function ContentOperationToolbar(props) {
    const {
        contextObject, runOperation, operationParams,
        operationContextName, iconSize, hideQuickAccess
    } = props;
    const objs = (contextObject === undefined) ?
                 Immutable.List() :
                 Immutable.List([contextObject]);
    // If there is an operation context invisible menu items should be displayed
    const showInvisible = operationContextName ? true : false;
    return (
        <OpInfoWrapper
                contextObjects={objs}
                operationContextName={operationContextName} >
            {opInfos => (
                <ButtonGroup>
                    {getOperationItems({
                        operations: opInfos,
                        runOperation: runOperation,
                        contextObjects: objs,
                        operationParams: operationParams,
                        disabled: props.isOperationRunning,
                        allButtonStyle: props.allButtonStyle,
                        menuConfig: Immutable.fromJS({
                            iconSize: iconSize,
                            hideQuickAccess: hideQuickAccess
                        }),
                        showInvisible: showInvisible
                    })}
                </ButtonGroup>
            )}
        </OpInfoWrapper>
    );
}

ContentOperationToolbar.propTypes = {
    contextObject: ImmutablePropTypes.map,
    operationContextName: PropTypes.string,
    runOperation: PropTypes.func,
    operationParams: PropTypes.object,
    iconSize: PropTypes.string,
    allButtonStyle: PropTypes.string,
    isOperationRunning: PropTypes.bool,
    hideQuickAccess: PropTypes.bool
};

ContentOperationToolbar.defaultProps = {
    operationParams: {},
    iconSize: "sm",
    allButtonStyle: "info",
    isOperationRunning: false,
    hideQuickAccess: false
};

/**
 * This component displays the configured operations for the provided ``contextObject``
 * in a button toolbar. Optionally, an ``operationContextName`` may be provided, from
 * which to display operations. If a button is pressed, the operation is triggered in the
 * surrounding operation scope.
 *
 * In order to disable the toolbar when an operation is running, the ``isOperationRunning``
 * property may be used.
 *
 * +----------------------+--------+---------+---------------------------------------------------+
 * | Name                 | Type   | Default | Description                                       |
 * +======================+========+=========+===================================================+
 * | contextObject        | object | \-      | The object whose operation to display.            |
 * +----------------------+--------+---------+---------------------------------------------------+
 * | operationContextName | object | \-      | Optional: If provided, only operations from this  |
 * |                      |        |         | context will be available.                        |
 * +----------------------+--------+---------+---------------------------------------------------+
 * | iconSize             | string | sm      | Size of the toolbars buttons.                     |
 * +----------------------+--------+---------+---------------------------------------------------+
 * | isOperationRunning   | bool   | false   | Buttons will be disabled while operation is       |
 * |                      |        |         | running if this is set to true.                   |
 * +----------------------+--------+---------+---------------------------------------------------+
 *
 * @class ContentOperationToolbar
 * @extends React.Component
 */
export default WithOperationTrigger(ContentOperationToolbar);

class _InnerToolbar extends React.Component {
    render() {
        const operationItems = getOperationItems({
            operations: this.props.operations,
            runOperation: this.props.runOperation,
            contextObjects: this.props.contextObjects,
            operationParams: this.props.operationParams,
            disabled: this.props.isOperationRunning,
            menuConfig: this.props.menuConfig,
            showInvisible: this.props.showInvisible,
            allButtonStyle: this.props.allButtonStyle,
        });
        if (operationItems === undefined) {
            return null;
        }
        return (
            <ButtonGroup>
                {operationItems}
            </ButtonGroup>
        );
    }
}

_InnerToolbar.propTypes = {
    contextObjects: ImmutablePropTypes.list.isRequired,
    operations: ImmutablePropTypes.list,
    operationParams: PropTypes.object,
    runOperation: PropTypes.func,
    isOperationRunning: PropTypes.bool,
    menuConfig: ImmutablePropTypes.map,
    showInvisible: PropTypes.bool,
    allButtonStyle: PropTypes.string,
};

_InnerToolbar.defaultProps = {
    operationParams: {},
    menuConfig: Immutable.fromJS({iconSize: "sm"}),
    showInvisible: false,
    allButtonStyle: "info",
};

export const InnerToolbar = WithOperationTrigger(_InnerToolbar);

/**
 * Dynamic Toolbar to display operations in tables
 *
 * @private
 */
export class TableOperationToolbar extends React.Component {
    render() {
        const {contextType, contextObjects, operationContextName, operationNames} = this.props;
        // If there is an operation context invisible menu items should be displayed
        const showInvisible = operationContextName ? true : false;
        return (
            <OpInfoWrapper contextType={contextType}
                           contextObjects={contextObjects}
                           operationContextName={operationContextName}
                           operationNames={operationNames}>
                {opInfos => (
                    <InnerToolbar
                        {...this.props}
                        showInvisible={showInvisible}
                        operations={opInfos} />
                )}
            </OpInfoWrapper>
        );
    }
}
TableOperationToolbar.propTypes = {
    contextType: PropTypes.string,
    contextObjects: ImmutablePropTypes.list.isRequired,
    operationContextName: PropTypes.string,
    operationParams: PropTypes.object,
    operationNames: PropTypes.arrayOf(PropTypes.string),
    isOperationRunning: PropTypes.bool,
    allButtonStyle: PropTypes.string,
};
TableOperationToolbar.defaultProps = {
    operationParams: {},
    contextObjects: Immutable.List(),
    allButtonStyle: "info",
};
