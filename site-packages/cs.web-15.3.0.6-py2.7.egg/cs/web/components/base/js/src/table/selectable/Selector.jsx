/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Selector.jsx 180616 2018-07-17 07:41:46Z ssz $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers';
import connect from '../connect';
import FormControls from '../../formcontrols';
import {selectRow} from './actions';
import {getSingleSelectionMode} from './reducers';

class Renderer extends React.Component {
    constructor(props) {
        super(props);
        this.onChange = this.onChange.bind(this);
        this.onClick = this.onClick.bind(this);
    }

    onChange() {
        // Do nothing. The onClick on row takes care.
    }

    getRowID() {
        return this.props.row.get('id');
    }

    onClick(event) {
        event.stopPropagation();

        // Added to avoid duplicated onClick event from radio button.
        // Custom styling includes ::before and ::after pseudeo elements
        // in the span which makes the span clickable.
        // Therefore the component gets two onClick events.
        event.preventDefault();

        const {row, singleSelectionMode} = this.props;
        this.props.selectRow(
            row.get('id'),
            undefined,
            event.shiftKey,
            event.ctrlKey || !singleSelectionMode
        );
    }

    render() {
        const {selectedRows, singleSelectionMode, tableID, row} = this.props;
        if (row.get('functionalRow', false)) {
            // render Selector only if the row contains data, and is not computed
            return null;
        }
        const checked = selectedRows.contains(this.getRowID());
        const Selector = singleSelectionMode ? FormControls.Radio : FormControls.CheckBox;
        return (
            <div className={prefixNS('table-selector-column-renderer')}
                 onClick={this.onClick}>
                <Selector className={prefixNS('table-selector-column-content')}
                          tabIndex={-1}
                          checked={checked}
                          onChange={this.onChange}
                          name={prefixNS(`table-selector${tableID}`)}/>
            </div>
        );
    }
}

Renderer.propTypes = {
    singleSelectionMode: PropTypes.bool,
    selectedRows: ImmutablePropTypes.orderedSet,
    selectRow: PropTypes.func,
    row: ImmutablePropTypes.map,
    tableID: PropTypes.number
};

const mapStateToProps = (state) => ({
    selectedRows: state.selectedRows,
    singleSelectionMode: getSingleSelectionMode(state),
    tableID: state.tableID
});

export default connect(mapStateToProps, {selectRow})(Renderer);
