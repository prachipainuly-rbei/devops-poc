/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TableRow.jsx 172155 2018-01-23 12:31:49Z gwe $"
 */

import React from 'react';
import {DefaultColumnContentRenderer} from './constants';
import {prefixNS} from '../helpers';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import Immutable from 'immutable';

export default class TableRow extends React.Component {
    constructor(props) {
        super(props);
        this.onClick = this.onClick.bind(this);
    }

    onClick(event, colId) {
        const {onClick, row} = this.props;
        if (onClick) {
            onClick(row.get('id'), colId, event);
        }
    }

    // TODO: maybe add a "forceRerender" prop to force updating
    // Reason for that can be: some contentRenderer watch some other
    // state changes on store other than row, columns and visibleColumns here.
    shouldComponentUpdate(nextProps) {
        return nextProps.row !== this.props.row ||
            nextProps.columns !== this.props.columns ||
            nextProps.visibleColumns !== this.props.visibleColumns ||
            nextProps.rowClassName !== this.props.rowClassName ||
            nextProps.columnRenderers !== this.props.columnRenderers ||
            nextProps.focusedRow !== this.props.focusedRow ||
            nextProps.focusedColumn !== this.props.focusedColumn;
    }

    renderRow(row, columns, visibleColumns, isRowFocused) {
        // TODO(cla): custom renderer should receive column definitions
        // as property
        const {columnRenderers, focusedColumn} = this.props;
        const Renderer = row.get('Renderer');
        const colSpan = visibleColumns.count();
        return Renderer ?
            <td colSpan={colSpan}>
                <Renderer row={row}/>
            </td> :
            visibleColumns.map((colID) => {
                const colIdx = columns.findIndex(
                    c => c.get('id') === colID);
                const column = columns.get(colIdx);
                const ContentRenderer = column.get('contentRenderer') ||
                    DefaultColumnContentRenderer;
                const value = row.get('columns').get(colIdx);
                let renderers = Immutable.OrderedSet();
                if (columnRenderers && columnRenderers.get(colID)) {
                    renderers = columnRenderers.get(colID);
                }
                const isCellFocused = colID === focusedColumn && isRowFocused;
                return (
                    <td key={colID}
                        className={classNames({[prefixNS('table-cell-focus')]: isCellFocused})}
                        onClick={event => this.onClick(event, colID)}
                        data-column-id={colID}>
                        {
                            renderers.reduce((rendered, ColRenderer) => (
                                <ColRenderer
                                    value={value}
                                    row={row}
                                    column={column}>
                                    {rendered}
                                </ColRenderer>
                            ), (
                                <ContentRenderer
                                    value={value}
                                    row={row}
                                    column={column}/>
                            ))
                        }
                    </td>
                );
            });
    }

    render() {
        const {row, columns, visibleColumns, rowClassName,
               focusedRow, focusedColumn, hover} = this.props;
        const isRowFocused = row.get('id') === focusedRow;
        const clsnames = classNames(
            row.get('className'),
            ...rowClassName.filter(rows => rows.contains(row.get('id'))).keys(),
            {
                [prefixNS('table-row-focus')]: isRowFocused && focusedColumn === null,
                [prefixNS('table-row-hover')]: hover
            }
        );
        return (
            <tr className={clsnames}
                ref={this.props.contentRef}
                data-row-id={row.get('id')}>
                {this.renderRow(row, columns, visibleColumns, isRowFocused)}
            </tr>
        );
    }
}
TableRow.propTypes = {
    onClick: PropTypes.func,
    row: ImmutablePropTypes.map,
    columns: ImmutablePropTypes.list,
    visibleColumns: ImmutablePropTypes.orderedSet,
    rowClassName: ImmutablePropTypes.map,
    columnRenderers: ImmutablePropTypes.map,
    focusedRow: PropTypes.string,
    focusedColumn: PropTypes.string,
    contentRef: PropTypes.func,
    hover: PropTypes.bool,
};
