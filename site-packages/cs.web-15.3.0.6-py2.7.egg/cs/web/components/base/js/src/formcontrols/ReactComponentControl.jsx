/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ReactComponentControl.jsx 181619 2018-08-03 08:24:27Z msl $"
 */

import Immutable from 'immutable';
import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {Registry} from '../registry.js';
import {formatStr} from '../i18n.js';

/**
 * The component ``<ReactComponentControl>`` allows custom controls. It has following properties:
 *
 * +------------------+----------------+--------------+---------------------------------------------+
 * | Property         | Type           | Default      | Use                                         |
 * +==================+================+==============+=============================================+
 * | componentName    | string         | -            | The component that is used to render this   |
 * |                  |                |              | control. The following properties are       |
 * |                  |                |              | passed through: value, readOnly, label,     |
 * |                  |                |              | tooltip, contentType, onValueChange         |
 * +------------------+----------------+--------------+---------------------------------------------+
 * | value            | any            | -            | Data to be displayed                        |
 * +------------------+----------------+--------------+---------------------------------------------+
 * | readOnly         | bool           | -            | Control should be read only                 |
 * +------------------+----------------+--------------+---------------------------------------------+
 * | label            | string         | -            | Label of the control                        |
 * +------------------+----------------+--------------+---------------------------------------------+
 * | tooltip          | string         | -            | Tooltip of the control                      |
 * +------------------+----------------+--------------+---------------------------------------------+
 * | contentType      | string         | -            | Content type of the value                   |
 * +------------------+----------------+--------------+---------------------------------------------+
 * | lines            | number         | -            | Line number from mask configuration         |
 * +------------------+----------------+--------------+---------------------------------------------+
 * | onValueChange    | func           | -            | Equivalent callback of `onChange`, called   |
 * +------------------+----------------+--------------+---------------------------------------------+
 * | contextObjects   | Immutable.list | -            | List of context objects                     |
 * +------------------+----------------+--------------+---------------------------------------------+
 * | operationState   | Immutable.map  | -            | Operation state                             |
 * +------------------+----------------+--------------+---------------------------------------------+
 *
 */

export default class ReactComponentControl extends React.Component {

    render() {
        const {
            label, onValueChange, readOnly, value, contextObjects, operationState,
            componentName, tooltip, contentType, lines} = this.props;
        if (componentName) {
            const Renderer = Registry.findComponent(componentName);
            if (Renderer) {
                return (
                    <Renderer
                        value={value}
                        label={label}
                        tooltip={tooltip}
                        onValueChange={onValueChange}
                        readOnly={readOnly}
                        contentType={contentType}
                        lines={lines}
                        contextObjects={contextObjects}
                        operationState={operationState}
                    />);
            } else {
                return (
                    <div>
                        {formatStr("react_component_not_found",
                         {componentName})}
                    </div>
                );
            }
        } else {
            return (<div>{formatStr("invalid_react_component_configuration")}</div>);
        }
    }
}

ReactComponentControl.propTypes = {
    label: PropTypes.string,
    tooltip: PropTypes.string,
    componentName: PropTypes.string,
    contentType: PropTypes.string,
    lines: PropTypes.number,
    onValueChange: PropTypes.func.isRequired,
    readOnly: PropTypes.bool.isRequired,
    value: PropTypes.any,
    contextObjects: PropTypes.instanceOf(Immutable.List),
    operationState: PropTypes.instanceOf(Immutable.Map)

};
