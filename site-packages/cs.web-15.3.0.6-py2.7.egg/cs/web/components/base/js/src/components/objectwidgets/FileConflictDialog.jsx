/*
 * Copyright (C) 1990-2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: FileConflictDialog.jsx 169544 2017-11-29 09:06:51Z cla $"
 */

import React from "react";
import {PropTypes} from 'cs-web-components-externals';
import Dialog from '../../dialogs';
import {formatStr} from '../../i18n';
import {prefixNS} from '../../helpers';
import Radio from '../../formcontrols/Radio';
import TextInput from '../../formcontrols/TextInput';

export default class FileConflictDialog extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
            selectedOption: "overwrite",
            newName: "",
            textClass: ""
        };

        this.onOK = this.onOK.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.file) {
            if (nextProps.file.name !== this.state.newName) {
                this.setState({
                    newName: nextProps.file.name
                });
            }
        }
    }

    onOK() {
        this.setState({
            textClass: ""
        });

        if (this.state.selectedOption === "overwrite") {
            this.props.onOverwrite(this.props.file);
        } else {
            if (this.state.newName !== "" && this.state.newName !== this.props.file.name) {
                this.props.onRename(this.props.file, this.state.newName);
            } else {
                this.setState({
                    textClass: prefixNS("filelist__mandatory-indicator")
                });
            }
        }
    }

    render() {
        const name = this.props.file ? this.props.file.name : "";

        return (
            <Dialog.Dialog
                title={formatStr("file_table_modal_conflict_header")}
                buttons={[
                    <Dialog.Buttons.Ok
                        key="ok"
                        onClick={this.onOK} />,
                    <Dialog.Buttons.Cancel
                        key="cancel"
                        onClick={this.props.onCancel} />
                ]}
                size={Dialog.SIZE_SMALL}
                show={this.props.visible}
                showCancel
                onHide={this.props.onCancel}
                onAction={this.onOK}
            >
                {formatStr("file_table_modal_conflict_msg", {name: name})}
                <Radio label={formatStr("file_table_modal_conflict_overwrite")}
                       name="radio_overwrite"
                       checked={this.state.selectedOption === "overwrite"}
                       onClick={() => {
                           this.setState({
                               selectedOption: "overwrite"
                           });}} />
                <Radio label={formatStr("file_table_modal_conflict_rename")}
                       checked={this.state.selectedOption !== "overwrite"}
                       name="radio_rename"
                       onClick={() => {
                           this.setState({
                               selectedOption: "rename"
                           });}} />
                <TextInput value={this.state.newName}
                           name="text_fname"
                           disabled={this.state.selectedOption === "overwrite"}
                           onChange={(evt) => {
                               this.setState({
                                   newName: evt.target.value
                               });}}
                           className={this.state.textClass} />
            </Dialog.Dialog>
        );
    }
}

FileConflictDialog.propTypes = {
    visible: PropTypes.bool,
    onCancel: PropTypes.func,
    onOverwrite: PropTypes.func,
    onRename: PropTypes.func,
    file: PropTypes.string
};
