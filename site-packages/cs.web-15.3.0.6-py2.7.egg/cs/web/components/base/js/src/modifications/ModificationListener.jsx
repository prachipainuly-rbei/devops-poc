/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ModificationListener.jsx 168528 2017-11-15 11:35:33Z gwe $"
 */

import React from 'react';
import {connect, PropTypes} from 'cs-web-components-externals';
import {OperationMode} from '../form/constants.js';

/**
 * This component is used in websites embedded in wincdb masks to communicate
 * modifications to the wincdb client. See :ref:`wincdb_webui` for more
 * information.
 *
 * Operations using the formWithOperations reducer are handled automatically.
 *
 * @private
 */
class ModificationListener extends React.Component {
    constructor(props) {
        super(props);
        this.isModified = this.isModified.bind(this);
    }

    componentDidMount() {
        try {
            // This is provided by CDBPC, if it is registered, window.csweb_is_modified
            // will be invoked by client, to query the state of the web application
            window.external.csweb_register_modified_callback("csweb_is_modified");
            window.csweb_is_modified = this.isModified;
        } catch (e) {/* If register call is undefined do not set callback */}
    }

    componentWillUnmount() {
        try {
            // This is provided by CDBPC, call with first param === undefined, to unregister
            // callback
            window.external.csweb_register_modified_callback();
            window.csweb_is_modified = undefined;
        } catch (e) {/* If register call is undefined do not set callback */}
    }

    isModified() {
        return this.props.hasPendingOperations || this.props.hasModifiedComponents;
    }

    render() {
        return null;
    }
}

ModificationListener.propTypes = {
    hasPendingOperations: PropTypes.bool,
    hasModifiedComponents: PropTypes.bool
};

function mapStateToProps(state) {
    return {
        hasPendingOperations: state.formWithOperations
            .some(provider => provider.get('mode') === OperationMode.STARTED),
        hasModifiedComponents: state.modifications.some(m => m)
    };
}

export default connect(mapStateToProps, {})(ModificationListener);
