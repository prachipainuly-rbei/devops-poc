/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Overlay.jsx 183015 2018-08-29 13:07:55Z cla $"
 */

import React from 'react';
import ReactDOM from 'react-dom';
import {prefixNS} from '../helpers.js';
import {PropTypes, classNames} from 'cs-web-components-externals';
import Controlled from './Controlled.jsx';
import {
    getContainer,
    getPortalId,
    openOverlay,
    closeOverlay,
} from '../portals.js';

const HIDDEN = {
    visibility: 'hidden',
    left: 0,
    top: 0,
};

/**
 * This provides a basic overlay implementation, without any layouting functionality.
 * It simply renders its child component in a div, positioned absolutely on the document
 * by using ``React.createPortal``.
 *
 * Children
 * ========
 *
 * As children a single element should be passed. This element will be rendered as the content
 * of the overlay.
 *
 * React Properties
 * ================
 *
 * =============== ======================= =================================================
 *    Name            Type                     Description
 * =============== ======================= =================================================
 *  onBlur          function                Sets an ``onBlur`` handler on the overlay div
 *                                          This is useful if you want to close the div
 *                                          when it loses focus. Note that for this to
 *                                          work, you need to initially request the focus
 *                                          on the component.
 *  onFocusOut      function                Sets an onFocusOut handler on the overlay div.
 *                                          Note that this uses DOM Events instead of
 *                                          React Events (as of 16.3 React does not support
 *                                          focusin/focusout events).
 *  setOverlayRef   function                Callback to receive a reference to the overlay
 *                                          DOM element, e.g., to request the focus, when
 *                                          it is rendered.
 *  setContentRef   function                Callback to receive a reference to the content
 *                                          of the overlay.
 *  visible         boolean                 The overlay is only rendered if this flag is
 *                                          ``true``
 *  positionStyle   object                  This allows to set the element style of the
 *                                          overlay div, use this to absolutely position
 *                                          the div on the page
 *  className       string                  Append additional classes to the overlay's
 *                                          class attribute.
 * =============== ======================= =================================================
 *
 */
export default class Overlay extends React.Component {
    constructor(props) {
        super(props);
        this.onFocusOut = this.onFocusOut.bind(this);
        this.setOverlayRef = this.setOverlayRef.bind(this);
        this.overlayElement = null;
        this.portalId = getPortalId();
        this.state = {
            zIndex: props.visible ?
                    openOverlay(this.portalId) :
                    undefined
        };
    }

    onFocusOut(event) {
        const {onFocusOut} = this.props;
        if (onFocusOut) {
            onFocusOut(event);
        }
    }

    setOverlayRef(c) {
        if (c) {
            this.overlayElement = ReactDOM.findDOMNode(c);  // eslint-disable-line react/no-find-dom-node
            this.overlayElement.addEventListener('focusout', this.onFocusOut);
        } else {
            this.overlayElement.removeEventListener('focusout', this.onFocusOut);
            this.overlayElement = null;
        }

        const {setOverlayRef, onOverlayVisible} = this.props;
        if (setOverlayRef) {
            setOverlayRef(c);
        }
        if (onOverlayVisible && c) {
            window.requestAnimationFrame(onOverlayVisible);
        }
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.visible && !this.props.visible) {
            this.setState({zIndex: openOverlay(this.portalId)});
        } else if (!nextProps.visible && this.props.visible) {
            this.setState({zIndex: closeOverlay(this.portalId)});
        }
    }

    componentWillUnmount() {
        closeOverlay(this.portalId);
    }

    render() {
        const {
            setContentRef,
            onFocus,
            onBlur,
            className,
            positionStyle,
            visible,
            children,
        } = this.props;

        const {
            zIndex
        } = this.state;

        if (!visible || !zIndex) {
            return null;
        }

        const container = getContainer();
        const clsNames = classNames(prefixNS('overlay'), className);
        return ReactDOM.createPortal(
            <div ref={this.setOverlayRef}
                 zindex={zIndex}
                 tabIndex={0}
                 onFocus={onFocus}
                 onBlur={onBlur}
                 className={clsNames}
                 style={Object.assign(
                         {zIndex: this.state.zIndex},
                         positionStyle || HIDDEN)
                       }>
                {
                    React.cloneElement(
                        React.Children.only(children),
                        {ref: setContentRef}
                    )
                }
            </div>,
            container
        );
    }
}

Overlay.propTypes = {
    onFocusOut: PropTypes.func,
    onFocus: PropTypes.func,
    onBlur: PropTypes.func,
    onOverlayVisible: PropTypes.func,
    setOverlayRef: PropTypes.func,
    setContentRef: PropTypes.func,
    className: PropTypes.string,
    visible: PropTypes.bool,
    positionStyle: PropTypes.object,
};

Overlay.defaultProps = {
    visible: true,
};

/**
 * Overlay, extended for closing the overlay by user interaction.
 *
 * React Properties
 * ================
 *
 * In addition to those defined for
 * :ref:`cs-web-components-base-overlays.Overlay.__default__` this component
 * receives the following properties:
 *
 * ================= ========================= ================================================
 *    Name              Type                       Description
 * ================= ========================= ================================================
 *  onHide            function                  This handler is called when the user presses
 *                                              ``Escape`` on the overlay or it loses focus.
 *                                              Use to modify visibility state of component.
 * ================= ========================= ================================================
 *
 * See :ref:`cs-web-components-base-overlays.index.__module__--custom` for
 * details.
 *
 * @class Controlled
 */
Overlay.Controlled = Controlled(Overlay);

Overlay.HIDDEN = HIDDEN;
