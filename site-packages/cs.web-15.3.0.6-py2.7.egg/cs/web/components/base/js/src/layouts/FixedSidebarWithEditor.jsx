/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: FixedSidebarWithEditor.jsx 175632 2018-04-09 10:49:03Z cla $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import FixedSidebar from './FixedSidebar.jsx';
import Attributes from '../components/objectwidgets/Attributes.jsx';
import {WithOperations} from '../components/WithOperations.jsx';
import {WithOperationHandler} from '../form/containers/OperationHandler.jsx';
import ConfiguredForm from '../form/containers/ConfiguredForm.jsx';
import Channel from '../channel';
import Immutable from 'immutable';

/**
 * This component is an operation providing extension of FixedSidebar.
 */
class FixedSidebarWithEditor extends React.Component {
    startEditing() {
        const {runOperation, operations} = this.props;
        const modifyOperation = operations.first();
        if (modifyOperation !== undefined) {
            runOperation(
                modifyOperation,
                {contextObjects: Immutable.List([this.props.contextObject])}
            );
        }
    }

    render() {
        const {
            contextObject, content, operations, isOperationRunning, isInstanceRunning
        } = this.props;
        const editingOperation = operations.first();
        const mainContent = isInstanceRunning ?
            <ConfiguredForm {...this.props} />
            : content;
        return (
            <Channel.Provider channelName="sidebar" channelValues={{isEditing: isInstanceRunning}}>
                <FixedSidebar content={mainContent}>
                    {
                        isInstanceRunning ? content : null
                    }
                    {
                        isInstanceRunning ? null :
                        <Attributes
                            onStartEditing={isOperationRunning || editingOperation === undefined ?
                                            undefined :
                                            this.startEditing.bind(this)}
                            editingLabel={editingOperation ?
                                          editingOperation.get('label', '') : ''}
                            contextObject={contextObject}
                            dialog={this.props.attributeDialog} />
                    }
                    {
                        this.props.children
                    }
                </FixedSidebar>
            </Channel.Provider>
        );
    }
}

FixedSidebarWithEditor.propTypes = {
    content: PropTypes.node.isRequired,
    attributeDialog: PropTypes.string,
    contextObject: ImmutablePropTypes.map.isRequired,
    operationInstance: PropTypes.string,
    operationState: ImmutablePropTypes.map.isRequired,
    runOperation: PropTypes.func.isRequired,
    submitOperation: PropTypes.func.isRequired,
    cancelOperation: PropTypes.func.isRequired,
    continueOperation: PropTypes.func.isRequired,
    operations: ImmutablePropTypes.list.isRequired,
    isInstanceRunning: PropTypes.bool,
    isOperationRunning: PropTypes.bool
};

FixedSidebarWithEditor.childContextTypes = {
    minified: PropTypes.bool
};

export default WithOperations(
    WithOperationHandler(
        FixedSidebarWithEditor,
        "editor"
    ),
    {operationNames: ["CDB_Modify"]}
);
