/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DORelationshipTableWithContentView.jsx 176920 2018-05-07 13:23:57Z gwe $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../helpers';
import RelationshipTable from '../components/objectwidgets/RelationshipTable';
import ClassRelshipLoader from '../components/objectwidgets/ClassRelshipLoader.jsx';
import SplitLayout from '../layouts/SplitLayout';
import {ContextObjectSetter, ContextObjectWrapper} from '../containers/context-wrapper';
import ObjectContent from '../components/plugin_containers/ObjectContent';

let count = 0;

/**
 * A wrapper component for `RelationshipTable` intended for usage in a tab on a
 * detail page with content view on the side.
 */
export default class DetailOutletRelationshipTableWithContentView extends React.Component {
    constructor(props) {
        super(props);
        this.objectSelectPath = prefixNS(
            `DetailOutletRelationshipTableWithContentView-${++count}`);
    }

    render() {
        const {active, relshipName, splitLayoutProps, contentViewProps, ...others} = this.props;
        return (
            <SplitLayout
                split="vertical"
                primary="second"
                defaultSize="300px"
                {...splitLayoutProps}
            >
                <ClassRelshipLoader contextObject={others.contextObject}>
                    {relships => (
                        <ContextObjectSetter setPath={this.objectSelectPath}>
                            <RelationshipTable {...others}
                                relshipName={relshipName}
                                relshipLabel={relships.getIn([relshipName, 'label'])}
                                relshipIconUrl={relships.getIn([relshipName, 'icon_url'])}
                                height='100%'
                                collapsible={false}
                                expanded={active}
                            />
                        </ContextObjectSetter>
                    )}
                </ClassRelshipLoader>
                <ContextObjectWrapper readPath={this.objectSelectPath}>
                    <ObjectContent
                        showPlaceholder={true}
                        minified={true}
                        {...contentViewProps} />
                </ContextObjectWrapper>
            </SplitLayout>
        );
    }

}

DetailOutletRelationshipTableWithContentView.propTypes = {
    contextObject: ImmutablePropTypes.map,
    relshipName: PropTypes.string.isRequired,
    splitLayoutProps: PropTypes.object,
    contentViewProps: PropTypes.object,
    active: PropTypes.bool.isRequired
};
