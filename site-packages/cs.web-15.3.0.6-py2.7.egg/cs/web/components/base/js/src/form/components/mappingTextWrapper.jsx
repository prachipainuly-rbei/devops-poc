/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id$"
 */

import React, {Component} from 'react';
import Immutable from 'immutable';
import {PropTypes} from 'cs-web-components-externals';
import {postJSON} from '../../fetch.js';
import {getDisplayName} from '../../helpers.js';

export default function(WrappedComponent) {
    /**
     * Wrap component with mapping text to be displayed.
     * @private
     */
    class MappingTextWrapper extends Component {
        constructor(props) {
            super(props);
            this.state = {
                display_value: props.value
            };
        }

        componentDidMount() {
            this.fetchDisplayMapping(this.props.value);
        }

        componentWillReceiveProps(nextProps) {
            if (nextProps.value !== this.props.value) {
                this.fetchDisplayMapping(nextProps.value);
            }
        }

        fetchDisplayMapping(value) {
            const {displayMapping, operationState, displayMappingURL} = this.props;
            let use_mapping = false;

            const mappings = displayMapping.get('mappings');
            const mapping_id = displayMapping.get('id');
            if (value && mapping_id) {
                const mapping = mappings.find(i => i.get(0) === value);
                if (mapping) {
                    use_mapping = true;
                    this.setState({display_value: mapping.get(1)});
                } else if (displayMappingURL) {
                    use_mapping = true;
                    const params = {
                        "mapping_id": mapping_id,
                        "value": value,
                        "operation_state": operationState
                    };
                    postJSON(displayMappingURL, params)
                        .then(result => {
                            if (result.new_value) {
                                this.setState({display_value: result.new_value});
                            }
                        });
                }
            }

            if (!use_mapping) {
                this.setState({display_value: value});
            }
        }

        render() {
            const {...others} = this.props;
            delete others.operationState;
            delete others.displayMapping;
            delete others.displayMappingURL;
            return (
                <WrappedComponent
                    {...others}
                    value={this.state.display_value}/>
            );
        }
    }

    MappingTextWrapper.propTypes = {
        value: PropTypes.any,
        displayMapping: PropTypes.instanceOf(Immutable.Map),
        operationState: PropTypes.instanceOf(Immutable.Map),
        displayMappingURL: PropTypes.string
    };

    MappingTextWrapper.displayName = `MappingTextWrapper(${getDisplayName(WrappedComponent)})`;

    return MappingTextWrapper;
}
