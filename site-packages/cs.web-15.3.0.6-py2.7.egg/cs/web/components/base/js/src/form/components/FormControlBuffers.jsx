/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http:www.contact-software.com
 *
 * Revision "$Id: FormControlBuffers.jsx 173464 2018-02-16 14:16:43Z gwe $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import FormControl from '../../formcontrols';

export class TableCatalogBuffer extends React.Component {
    constructor(props) {
        super(props);
        this.state = {value: props.value, unchecked: props.unchecked};
        this.onValueChange = this.onValueChange.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.value !== this.props.value) {
            this.setState({
                value: nextProps.value,
                unchecked: nextProps.unchecked
            });
        }
    }

    onValueChange(value, unchecked) {
        if (!this.props.unchecked) {                     // The first time the field is edited we propagate
            this.props.onValueChange(value, unchecked);  // this to form to update checked fields
        } else {
            this.setState({                              // Else we manage changes locally
                value,
                unchecked: true                          // Overwrite unchecked from Form
            });
        }
    }

    render() {
        return (
            <FormControl.CatalogField
                {...this.props}
                unchecked={this.state.unchecked || this.props.unchecked}
                value={this.state.value}
                onValueChange={this.onValueChange}
            />
        );
    }
}

TableCatalogBuffer.propTypes = {
    name: PropTypes.string,
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    onValueChange: PropTypes.func,
    onCatalogChange: PropTypes.func,
    unchecked: PropTypes.bool
};

export function SimpleBuffer(Component) {
    class _SimpleBuffer extends React.Component {
        constructor(props) {
            super(props);
            this.state = {value: props.value};
            this.onBlur = this.onBlur.bind(this);
            this.onValueChange = this.onValueChange.bind(this);
        }
        componentWillReceiveProps(nextProps) {
            if (nextProps.value !== this.state.value) {
                this.setState({value: nextProps.value});
            }
        }

        onValueChange(value) {
            this.setState({value});
        }

        onBlur() {
            if (this.props.value !== this.state.value) {
                this.props.onValueChange(this.state.value);
            }
        }

        render() {
            return (
                <Component {...this.props}
                           value={this.state.value}
                           onValueChange={this.onValueChange}
                           onBlur={this.onBlur} />
            );
        }
    }

    _SimpleBuffer.propTypes = {
        onValueChange: PropTypes.func,
        value: PropTypes.any
    };

    return _SimpleBuffer;
}
