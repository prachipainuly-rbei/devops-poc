import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import Immutable from 'immutable';
import {Console} from '../helpers';

/**
 * The channel listener retrieves its values from the channel broadcasted by its
 * provider. These values are then injected as properties into its only child.
 * To provide the same properties to multiple components, wrap each of these
 * components into one listener with the same channel and mapping.
 *
 * React Properties
 * ----------------
 *
 * +----------------+--------+-------------+---------------------------------------------------------+
 * | Property       | Type   | Default     | Use                                                     |
 * +================+========+=============+=========================================================+
 * | channelName    | string | \-          | The channel identifier for this listener to subscribe   |
 * |                |        |             | to                                                      |
 * |                |        |             | This property cannot be changed after initial setup!    |
 * +----------------+--------+-------------+---------------------------------------------------------+
 * | channelMapping | object | \-          | A mapping that maps from property names to the keys     |
 * |                |        |             | in the channel.                                         |
 * |                |        |             | This is used to retrieve the actual values from the     |
 * |                |        |             | channel.                                                |
 * +----------------+--------+-------------+---------------------------------------------------------+
 * | channels       |        |             | A list of {channelName, channelMapping}                 |
 * +----------------+--------+-------------+---------------------------------------------------------+
 *
 */
export default class Listener extends React.Component {
    constructor(props) {
        super(props);

        this.values = Immutable.Map();
        this.state = {
            values: this.values
        };
        this.unregister = [];
    }

    subscribe(channelName, channelMapping) {
        const subscribe = this.context.channels[channelName];

        if (!subscribe) {
            Console.error(
                '<Listener channelName="%s"> must be rendered in the context of a ' +
                '<Provider channelName="%s">', channelName, channelName);
            return;
        }

        this.unregister[channelName] = subscribe((newState) => {
            const mapping = Immutable.fromJS(channelMapping);
            const newValues = mapping.map((stateKey) => {
                return newState.get(stateKey);
            });
            const mergedValues = this.values.mergeDeep(newValues);
            if (mergedValues !== this.values) {
                this.values = mergedValues;
                this.setState({values: mergedValues});
            }
        });
    }

    componentWillMount() {
        const {channelName, channelMapping, channels} = this.props;
        if (channelName !== undefined) {
            this.subscribe(channelName, channelMapping);
        } else {
            channels.forEach(channel => {
                this.subscribe(channel.channelName, channel.channelMapping);
            });
        }
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.channelName !== this.props.channelName ||
            nextProps.channelMapping !== this.props.channelMapping ||
            nextProps.channels !== this.props.channels) {
            Console.error("You cannot change the channel subscription of a <Provider>.");
        }
    }

    componentWillUnmount() {
        this.unregister.forEach(unregister => {
            unregister();
        });
    }

    render() {
        const {children, ...others} = this.props;
        delete others.channelName;
        delete others.channelMapping;
        delete others.channels;

        return React.cloneElement(React.Children.only(children),
            {
                ...others,
                ...this.state.values.toObject()
            });
    }
}

Listener.propTypes = {
    channelName: PropTypes.string,
    channelMapping: PropTypes.object,
    channels: PropTypes.arrayOf(
        PropTypes.shape({
            channelName: PropTypes.string,
            channelMapping: PropTypes.object
        })
    )
};

Listener.defaultProps = {
    channels: []
};

Listener.contextTypes = {
    channels: PropTypes.object,
};
