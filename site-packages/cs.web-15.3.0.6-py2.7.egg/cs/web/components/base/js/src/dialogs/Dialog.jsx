/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Dialog.jsx 184286 2018-09-21 13:59:56Z cla $"
 */

import Immutable from 'immutable';
import React from 'react';
import {Modal} from 'react-bootstrap';
import {classNames, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import Button from '../components/Button.jsx';
import {Console, prefixNS} from '../helpers.js';
import {getContainer, openDialog, closeDialog, getPortalId, isDialogActive} from '../portals.js';
import SVGIcon from '../components/SVGIcon.jsx';
import {formatStr} from '../i18n.js';
import {addLocalShortcut, removeLocalShortcut} from '../key-handlers.js';

const SIZE_SMALL = prefixNS('dialog-sm');
const SIZE_MEDIUM = prefixNS('dialog-md');
const SIZE_LARGE = prefixNS('dialog-lg');

export const DialogPropTypes = {
    size: PropTypes.oneOf([SIZE_SMALL, SIZE_MEDIUM, SIZE_LARGE])
};

const propTypes = {
    bodyRef: PropTypes.func,
    buttons: PropTypes.node,
    onAction: PropTypes.func,
    onHide: PropTypes.func,
    onEntered: PropTypes.func,
    onEntering: PropTypes.func,
    onExiting: PropTypes.func,
    showCancel: PropTypes.bool,
    show: PropTypes.bool,
    fixedHeight: PropTypes.bool,
    size: DialogPropTypes.size,
    sizes: ImmutablePropTypes.list,
    title: PropTypes.node,
    hideFooter: PropTypes.bool,
    dialogClassName: PropTypes.string,
    allowOverlay: PropTypes.bool,
    logoSrc: PropTypes.string
};

const defaultProps = {
    sizes: Immutable.List([SIZE_SMALL, SIZE_MEDIUM, SIZE_LARGE]),
    show: true,
    fixedHeight: false,
    hideFooter: false,
    showCancel: true,
    allowOverlay: false,
    logoSrc: "/static/imgid/branding_web_portal_logo_small.svg"
};

/**
 * This module provides the base dialog component, on which both stock dialogs
 * and custom dialogs are based.
 *
 * Dialog Sizes
 * ------------
 *
 * Dialogs may either be resizable or fixed size. The properties ``sizes`` and
 * ``size`` (of which at most one should be specified), allow you to specify
 * either an ``Immutable.Map`` with all sizes possible for this dialog or one
 * size constant that represents the dialogs fixed size.
 *
 * Available size values are:
 *
 * - ``Dialog.SIZE_SMALL``
 * - ``Dialog.SIZE_MEDIUM``
 * - ``Dialog.SIZE_LARGE``
 *
 * If different sizes are provided, a button will be displayed in the dialog's
 * titlebar, which allows to toggle the possible sizes of the dialog.
 *
 * Keyboard Control
 * ----------------
 *
 * The Dialog Component defines two shortcuts it handles:
 *
 * - When pressing Enter, the Function specified with the property ``onAction`` will be executed.
 *   This should correspond to the action that is executed when the main button action of the
 *   dialog will be executed.
 * - When pressing Escape the Function specified with the property ``onHide`` will be executed.
 *   This should correspond to the action when the user presses a Cancel or Close Button.
 *
 * React Properties
 * ----------------
 *
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | Name            | Type                  | Default         | Description                                |
 * +=================+=======================+=================+============================================+
 * | buttons         | node                  | \-              | The buttons displayed in the modals footer |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | dialogClassName | string                | \-              | Custom CSS Class attached to the modal     |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | hideFooter      | bool                  | ``false``       | Footer will not be displayed. Use this for |
 * |                 |                       |                 | dialogs that will only display a cancel    |
 * |                 |                       |                 | button.                                    |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | fixedHeight     | bool                  | ``false``       | If set, dialog will have a fixed height,   |
 * |                 |                       |                 | relative to screen height                  |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | onAction        | func                  | \-              | Executed when the user presses Enter.      |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | onHide          | func                  | \-              | Executed when the user presses the Close   |
 * |                 |                       |                 | button or Escape key.                      |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | size            | DialogPropTypes.size  | \-              | If set the dialog will be displayed in     |
 * |                 |                       |                 | this size and changing size is disabled.   |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | sizes           | Immutable.list        | All three sizes | The available sizes for the dialog.        |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | show            | bool                  | ``true``        | If set, the dialog will be displayed.      |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | showCancel      | bool                  | ``false``       | If set, display a close button in the      |
 * |                 |                       |                 | header.                                    |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 * | title           | string                | \-              | Title of the dialog, displayed in the      |
 * |                 |                       |                 | header                                     |
 * +-----------------+-----------------------+-----------------+--------------------------------------------+
 *
 * Examples
 * ========
 *
 * .. code-block:: none
 *
 *    import {Dialog} from 'cs-web-components-base';
 *
 *    const SimpleDialog = props => (
 *        <Dialog.Dialog title="A Simple Dialog"
 *                       buttons={[<Dialog.Buttons.Ok
 *                                    key="ok"
 *                                    onClick={props.confirmAndHide} />,
 *                                <Dialog.Buttons.Cancel
 *                                    key="cancel"
 *                                    onClick={props.hide}/>]}
 *                       show={props.show}
 *                       size={Dialog.SIZE_MEDIUM}
 *                       showCancel onHide={props.hide}>
 *            {props.content}
 *        </Dialog.Dialog>
 *    );
 *
 * @class Dialog
 * @memberof module:Dialog
 */
export default class Dialog extends React.Component {
    constructor(props) {
        super(props);
        this.portalId = getPortalId();
        this.state = {
            sizeIndex: 0,
            backdropClassname: (props.show && !isDialogActive() ?
                                prefixNS('dialog--first') :
                                undefined),
            zIndex: (props.show ?
                     openDialog(this) :
                     0),
            enforceFocus: true,
        };
        this.onAction = this.onAction.bind(this);
        this.onResize = this.onResize.bind(this);
        this.setModalRef = this.setModalRef.bind(this);
        this.onEntered = this.onEntered.bind(this);
        this.onEntering = this.onEntering.bind(this);
        this.onExiting = this.onExiting.bind(this);
        this.modalActive = undefined;
    }

    setEnforceFocus(enforceFocus) {
        this.setState({enforceFocus});
    }

    onEntered() {
        // XXX Accessing the modal component instance via attribute Modal._modal
        // to register our key listener on top level div of modal
        addLocalShortcut(this.self._modal.getDialogElement(), 'Enter', this.onAction);
        // XXX react-overlays autoFocus property does not seem to work with stacked
        // modals, so also working around this.
        this.self._modal.getDialogElement().focus();

        // Invoke onEntered handler passed by properties
        const {onEntered} = this.props;
        if (onEntered) {
            onEntered();
        }
    }

    onEntering() {
        this.updateZIndices();
        this.modalActive = true;

        // Invoke onEntering handler passed by properties
        const {onEntering} = this.props;
        if (onEntering) {
            onEntering();
        }
    }

    onExiting() {
        // Invoke onExiting handler passed by properties
        const {onExiting} = this.props;
        if (onExiting) {
            onExiting();
        }

        // XXX Accessing the modal component instance via attribute Modal._modal
        removeLocalShortcut(this.self._modal.getDialogElement(), 'Enter');
        this.modalActive = false;
    }

    setModalRef(c) {
        this.self = c;
    }

    onAction() {
        const {onAction} = this.props;
        if (onAction) {
            this.props.onAction();
        }
    }

    componentDidUpdate() {
        // Ensure that manually set zIndex does not get lost on rerendering
        if (this.modalActive) {
            this.updateZIndices();
        }
    }

    updateZIndices() {
        this.self._modal.backdrop.style['zIndex'] = this.state.zIndex - 1;
        this.self._modal.getDialogElement().style['zIndex'] = this.state.zIndex;
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.size !== this.props.size ||
            nextProps.sizes !== this.props.sizes) {
            Console.error('Dialog size should not be change during components lifecycle.');
        }

        if (nextProps.show && !this.props.show) {
            this.onOpenDialog();
        } else if (!nextProps.show && this.props.show) {
            this.onCloseDialog();
        }
    }

    componentWillUnmount() {
        this.onCloseDialog(false);
    }

    onOpenDialog() {
        this.setState({
            backdropClassname: isDialogActive() ?
                               undefined :
                               prefixNS('dialog--first'),
            zIndex: openDialog(this),
        });
    }

    onCloseDialog(setState = true) {
        if (setState) {
            this.setState({
                zIndex: closeDialog(this.portalId),
                backdropClassname: undefined,
            });
        } else {
            closeDialog(this.portalId);
        }
    }

    onResize() {
        this.setState({
            sizeIndex: (this.state.sizeIndex + 1) % this.props.sizes.size
        });
    }

    render() {
        const {
            title,
            buttons,
            onHide,
            hideFooter,
            dialogClassName,
            allowOverlay,
            showCancel,
            fixedHeight,
            size,
            sizes,
            children,
            logoSrc,
            bodyRef,
            ...other
        } = this.props;
        const classes = classNames([
            prefixNS('dialog'),
            size || sizes.get(this.state.sizeIndex),
            {
                [prefixNS('dialog--fixed-height')]: fixedHeight,
                [prefixNS('dialog-allow-overlay')]: allowOverlay,
            }
        ]);
        const showResize = this.props.size === undefined;
        const isLargest = this.state.sizeIndex === this.props.sizes.size - 1;

        const container = getContainer();

        delete other['onAction'];

        return (
            <Modal {...other}
                   ref={this.setModalRef}
                   onEntering={this.onEntering}
                   onEntered={this.onEntered}
                   onExiting={this.onExiting}
                   onHide={onHide}
                   className={classes}
                   container={container}
                   backdrop={showCancel || 'static'}
                   backdropClassName={this.state.backdropClassname}
                   keyboard={true}
                   autoFocus={true}
                   enforceFocus={this.state.enforceFocus}
                   dialogClassName={dialogClassName}>
                <Modal.Header>
                    <Modal.Title title={typeof title === 'string' ? title : null}>
                        <span className={prefixNS("logo-spacing")}>
                            <SVGIcon
                                src={logoSrc}
                                className={prefixNS('logo-size')}/>
                        </span>
                        <span className={prefixNS("modal-v-centered-headline")}>
                            {title}
                        </span>
                    </Modal.Title>
                    <div className={prefixNS('icon-button-wrapper')}>
                        {showResize ? (
                            isLargest ?
                                <Button.ResizeSmallerButton
                                    onClick={this.onResize}
                                    title={formatStr('dialog_resize_tooltip')}/> :
                                <Button.ResizeBiggerButton
                                    onClick={this.onResize}
                                    title={formatStr('dialog_resize_tooltip')}/>) :
                         null}
                        {(showCancel && onHide) ?
                            <Button.CloseButton
                                onClick={onHide}
                                title={formatStr('dialog_cancel_tooltip')} /> :
                            null}
                    </div>
                </Modal.Header>
                <Modal.Body ref={bodyRef}>
                    {children}
                </Modal.Body>
                {hideFooter ? null : (
                     <Modal.Footer>
                         {buttons}
                     </Modal.Footer>)}
            </Modal>
        );
    }
}

Dialog.SIZE_SMALL = SIZE_SMALL;
Dialog.SIZE_MEDIUM = SIZE_MEDIUM;
Dialog.SIZE_LARGE = SIZE_LARGE;

Dialog.propTypes = propTypes;
Dialog.defaultProps = defaultProps;
