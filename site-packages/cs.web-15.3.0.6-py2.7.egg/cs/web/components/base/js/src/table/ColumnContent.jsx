/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ColumnContent.jsx 183635 2018-09-11 08:10:54Z mbr $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import {prefixNS} from '../helpers';
import Immutable from 'immutable';
import Icon from '../components/Icon';
import Link from '../components/navigation/Link';
import {getFormattedValue} from './helpers';
import connect from './connect';

function renderIcon(value) {
    const src = value.getIn(['icon', 'src']);
    const name = value.getIn(['icon', 'name']);
    if (src || name) {
        return (
            <Icon src={src}
                  name={name}
                  className={prefixNS('table-column-content__icon')}
                  size={value.getIn(['icon', 'size']) || 'sm'}
                  title={value.getIn(['icon', 'title'])}
                  alt={value.getIn(['icon', 'title'])}/>
        );
    }
    return null;
}

/**
 * Default content renderer component used by ./Table.jsx.
 * +------------------+--------------+--------------+---------------------------------------------+
 * | Property         | Type         | Default      | Use                                         |
 * +==================+==============+==============+=============================================+
 * | value            | any          | -            | Value of the content to be rendered. If     |
 * |                  |              |              | Value is a map that contains the key        |
 * |                  |              |              | ``text`` this text is taken as table        |
 * |                  |              |              | content. If value contains the key ``link`` |
 * |                  |              |              | the value of ``link`` is a map that has to  |
 * |                  |              |              | contain the key ``to`` and can contain the  |
 * |                  |              |              | key ``title``. The content will be rendered |
 * |                  |              |              | as link for this case.                      |
 * |                  |              |              | If value contains the key ``icon`` the value|
 * |                  |              |              | of ``icon`` is a map that conatins either   |
 * |                  |              |              | ``src`` with the icon url or ``name``. The  |
 * |                  |              |              | icon will be rendered automatically.        |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | column           | map          | -            | Information about the column. Special keys  |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | row              | map          | -            | The complete row as returned by the REST-API|
 * +------------------+--------------+--------------+---------------------------------------------+
 *
 * The ``column`` map might have this keys:
 *
 * - ``getFormattedValue``: A function that gets the value and should return
 *   the user representation of the value.
 * - ``sortFunction``: A function that compares to values of the column. The
 *   function will be called in the way `cmp(v1, v2)` where v1 and v2  are
 *   lists of two elements. The first element is the value to be compared. The
 *   second contains all entries of the row where the value resides.
 * - ``getLink``: A function that will be called with the value, row and column
 *   as parameter and should return the url of the link.
 *
 *
 */
export class ColumnContent extends React.Component {
    shouldComponentUpdate(nextProps) {
        return nextProps.value !== this.props.value ||
            nextProps.column !== this.props.column ||
            nextProps.column.has('getLink');
    }

    render() {
        const {value, column, row, renderDirectives} = this.props;
        const linkTarget = renderDirectives.get('linkTarget');
        let icon = null;
        let content = null;
        const isContentRightAlignment = column.get('content_alignment') === 'right';
        const linkTo = {};
        const linkFunc = column.get('getLink');
        if (linkFunc && typeof linkFunc === 'function') {
            linkTo.to = linkFunc(value, row, column);
        }

        if (Immutable.Map.isMap(value)) {
            const link = value.getIn(['link', 'to']);
            icon = renderIcon(value);
            // Don't use  value.get('text', getFormattedValue(value, column)), because
            // that will always evaluate getFormattedValue and possibly throw an
            // exception!
            content = value.has('text') ? value.get('text') : getFormattedValue(value, column);
            if (link) {
                linkTo.to = link;
                linkTo.title = value.getIn(['link', 'title']) || content;
            }
        }
        else {
            content = getFormattedValue(value, column, value);
        }

        if (linkTo.to) {
            content = (
                <Link to={linkTo.to}
                    tabIndex={-1}
                    title={linkTo.title}
                    className={prefixNS('table-column-content__link')}
                    target={linkTarget}
                >
                    {icon}{content}
                </Link>
            );
            // already rendered
            icon = null;
        }
        const className = classNames(
            prefixNS('table-column-content'),
            {
                [prefixNS('table-column-content-right-align')]: isContentRightAlignment
            }
        );
        return (
            <div className={className}>
                {icon}
                {content}
            </div>
        );
    }
}

ColumnContent.propTypes = {
    value: PropTypes.any,
    column: ImmutablePropTypes.map,
    row: ImmutablePropTypes.map,
    renderDirectives: ImmutablePropTypes.map
};

const mapStateToProps = (state) => ({
    renderDirectives: state.renderDirectives
});

export default connect(mapStateToProps)(ColumnContent);
