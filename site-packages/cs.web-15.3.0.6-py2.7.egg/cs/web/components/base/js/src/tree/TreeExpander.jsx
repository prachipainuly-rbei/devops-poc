/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TreeExpander.jsx 169544 2017-11-29 09:06:51Z cla $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {formatStr} from '../i18n';
import Spinner from '../formcontrols/Spinner';
import Dialog from '../dialogs';
import {prefixNS} from '../helpers.js';

const TreeExpander = props =>
    (
        <Spinner name={"levels"}
                 label={formatStr("tree_expand_detail")}
                 decimalPlaces={0}
                 compact={props.compact}
                 afterControl={props.afterControl}
                 minValue={1}
                 maxValue={10}
                 value={props.expandLevels}
                 onValueChange={props.onExpandLevelsChanged}/>
    );

TreeExpander.propTypes = {
    expandLevels: PropTypes.number,
    onExpandLevelsChanged: PropTypes.func,
    compact: PropTypes.bool,
    afterControl: PropTypes.object
};

export default TreeExpander;

export class TreeExpandDialog extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            levels: props.expandLevels
        };
        this.onExpand = this.onExpand.bind(this);
        this.onLevelsChange = this.onLevelsChange.bind(this);
    }

    onLevelsChange(levels) {
        const l = parseInt(levels);
        this.setState({
            levels: isNaN(l) ? undefined : l
        });
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.expandLevels !== nextProps.expandLevels) {
            this.setState({
                levels: nextProps.expandLevels
            });
        }
    }

    onExpand() {
        const {onExpand} = this.props;
        if (onExpand && this.state.levels !== undefined) {
            onExpand(this.state.levels);
        }
    }

    render() {
        const {onCancel, visible} = this.props;
        return (
            <Dialog.Dialog
                title={formatStr("tree_expand_title")}
                buttons={[
                    <Dialog.Buttons.Ok
                        key='ok'
                        disabled={this.state.levels === undefined}
                        onClick={this.onExpand} />,
                    <Dialog.Buttons.Cancel
                        key='cancel'
                        onClick={onCancel} />
                ]}
                size={Dialog.SIZE_SMALL}
                onAction={this.onExpand}
                showCancel onHide={onCancel}
                show={visible}
            >
                <div className={prefixNS("tree-expand-dialog")}>
                    <TreeExpander expandLevels={this.state.levels}
                                  onExpandLevelsChanged={this.onLevelsChange}/>
                </div>
            </Dialog.Dialog>
        );
    }
}

TreeExpandDialog.propTypes = {
    expandLevels: PropTypes.number,
    visible: PropTypes.bool,
    onCancel: PropTypes.func,
    onExpand: PropTypes.func
};

TreeExpandDialog.defaultProps = {
    visible: true
};
