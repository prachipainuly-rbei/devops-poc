/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: treetable.jsx 182712 2018-08-23 12:56:06Z vov $"
 */

import React from 'react';
import Immutable from 'immutable';
import {storiesOf, appContainer} from 'cs-web-components-storybook';
import {Table, getJSON, TableWrapper} from 'cs-web-components-base';

const columns = Immutable.fromJS(
    [
        {
            width: 400,
            label: 'Folder',
            tooltip: 'Tooltip for col1',
            id: 'folder'
        },
        {
            label: 'Creator',
            tooltip: 'Tooltip for col2',
            id: 'owner'
        }
    ]
);

const orderedColumns = Immutable.OrderedSet(
    columns.map(c => c.get('id'))
);

const rows = Immutable.fromJS([
    {
        id: '0',
        columns: [
            'computer',
            'Apple'
        ]
    },
    {
        id: '1',
        columns: [
            'pictures',
            'Banana'
        ]
    },
    {
        id: '2',
        columns: [
            'musics',
            'Apple'
        ]
    },
    {
        id: '3',
        columns: [
            'documents',
            'Pear'
        ]
    },
    {
        id: '4',
        columns: [
            'works',
            'Pear'
        ]
    },
    {
        id: '5',
        columns: [
            'backups',
            'Peach'
        ]
    }
]);

const treeNodes = Immutable.fromJS([
    {
        id: '0',
        children: [
            {
                id: '1'
            },
            {
                id: '2'
            },
            {
                id: '3',
                children: [
                    {
                        id: '4'
                    },
                    {
                        id: '5'
                    }
                ]
            }
        ]
    },
]);

storiesOf('Table', {})
    .addDecorator(appContainer)
    .add('Mock data simple tree view', () => {
        // import {Table} from 'cs-web-components-base';
        const TreeTable = Table.Manager({
            providers: [Table.treeview],
            toolbarButtons: [Table.treeview]
        });
        return (
            <TreeTable
                treeColumnID="folder"
                rows={rows}
                title={'Tree Table'}
                columns={columns}
                treeNodes={treeNodes}
                orderedColumns={orderedColumns}
                onToggleTreeView={() => {}}/>
        );
    })
    .add('Mock data groupable tree view', () => {
        // import {Table} from 'cs-web-components-base';
        const TreeTable = Table.Manager({
            providers: [Table.treeview, Table.groupable],
            columnActions: [Table.columnDragger],
            headerPanels: [Table.groupable],
            toolbarButtons: [Table.treeview]
        });
        return (
            <TreeTable
                treeColumnID="folder"
                rows={rows}
                title={'Tree Table'}
                columns={columns}
                treeNodes={treeNodes}
                orderedColumns={orderedColumns}
                initTreeExpandLevel={1}/>
        );
    })
    .add('Mock data sortable tree view', () => {
        // import {Table} from 'cs-web-components-base';
        const TreeTable = Table.Manager({
            providers: [Table.treeview, Table.sortable],
            columnActions: [Table.sortable],
            toolbarButtons: [Table.treeview]
        });
        return (
            <TreeTable
                treeColumnID="folder"
                rows={rows}
                title={'Tree Table'}
                columns={columns}
                treeNodes={treeNodes}
                orderedColumns={orderedColumns}/>
        );
    })
    .add('Mock data tree view with column hider', () => {
        // import {Table} from 'cs-web-components-base';
        const TreeTable = Table.Manager({
            providers: [Table.treeview],
            headerPanels: [Table.columnHider]
        });
        return (
            <TreeTable
                treeColumnID="folder"
                rows={rows}
                title={'Tree Table'}
                columns={columns}
                treeNodes={treeNodes}
                orderedColumns={orderedColumns}/>
        );
    });

const tasksURL = '/api/v1/collection/project/P000124/relship/AllTasks?_as_table=';

class TasksTreeTable extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            rowValuess: undefined,
            tableDef: undefined
        };
        this.TreeTable = () => Table.Manager({
            Table: Table.Scrolled(Table.Table),
            providers: [Table.tableToTree, Table.filterable, Table.treeview, Table.sortable],
            columnActions: [Table.sortable],
            toolbarButtons: [Table.filterable, Table.treeview]
        });
        const {sortable, filterable, selectable,
            groupable, column_aggregator, SettingPanels,
            columnDragger, columnOrderer, columnResizer, columnHider,
            tableToTree, treeview
        } = Table;
        this.TreeTable = () => Table.Manager({
            Table: Table.Scrolled(Table.Table),
            providers: [tableToTree, filterable, treeview, sortable,
                selectable, groupable, column_aggregator, SettingPanels],
            columnActions: [
                sortable, filterable, selectable, columnDragger, columnOrderer, columnResizer
            ],
            toolbarButtons: [sortable, filterable, selectable, treeview,
                SettingPanels],
            headerPanels: [groupable],
            footerPanels: [sortable, filterable, selectable],
            settingPanels: [columnHider, groupable, sortable, columnOrderer]

        });
    }

    componentDidMount() {
        this.fetchTable();
    }

    fetchTable() {
        return getJSON(tasksURL).then(
            data => {
                if (!data.error_message) {
                    this.setState({
                        rowValues: Immutable.fromJS(data.rows),
                        tableDef: Immutable.fromJS(data.tabledef)
                    });
                }
            });
    }

    render() {
        return (
            <div style={{height: '400px', width: '1200px'}}>
                <TableWrapper
                    rowValues={this.state.rowValues}
                    tableDef={this.state.tableDef}
                    table={this.TreeTable}
                    treeColumnID="cdb::argument::tablecolumn.task_name"
                    treeParentColumnID="cdb::argument::tablecolumn.parent_task"
                    treeIDColumnID="cdb::argument::tablecolumn.task_id"
                />
            </div>
        );
    }
}

storiesOf('Table', {})
    .addDecorator(appContainer)
    .add('Tree view of project tasks', () => {
        return (
            <TasksTreeTable/>
        );
    });
