/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Applications.jsx 175073 2018-03-27 09:29:51Z bwf $"
 */

import React, {Component} from 'react';
import {PropTypes, classNames} from 'cs-web-components-externals';
import {getAppSetup, prefixNS} from '../../helpers.js';
import Link from './Link';
import {addGlobalShortcut, removeGlobalShortcut} from '../../key-handlers.js';
import SVGIcon from '../SVGIcon';

function getApplications() {
    return JSON.parse(
        getAppSetup().getIn(['appSettings', 'applicationMenuItems']));
}

/**
 * Sidebar component that displays a list of installed applications.
 */
export default class Applications extends Component {

    componentDidMount() {
        getApplications().forEach((app, idx) => {
            addGlobalShortcut("g " + (idx + 1), () => {window.location = app.link});
        });
    }

    componentWillUnmount() {
        getApplications().forEach((app, idx) => {
            removeGlobalShortcut("g " + (idx + 1), () => {window.location = app.link});
        });
    }

    createAppIcon(app, idx, labelClass) {
        const app_link = getAppSetup().getIn(['appSettings', 'navigation_app_url'],
                                             window.location.pathname);
        const isSelected = app_link.startsWith(app.link);
        const containerClasses = classNames([
            prefixNS('applications__link-container'),
            {
                [prefixNS("applications__link-container--active")]: isSelected,
                [prefixNS("applications__link-container--first")]: idx === 0
            }
        ]);
        const labelLinkClasses = classNames([
            prefixNS('applications__label-link'),
            {
                [prefixNS('applications__label-link--active')]: isSelected
            }
        ]);
        const iconLinkClasses = classNames([
            prefixNS('applications__icon-link'),
            {
                [prefixNS('applications__icon-link--active')]: isSelected
            }
        ]);
        return (
                <div
                    className={prefixNS('applications__entry')}
                    key={idx}>
                    <span className={containerClasses}>
                        <Link
                            className={iconLinkClasses}
                            to={app.link}>
                            <SVGIcon
                                className={prefixNS('application-frame__icon')}
                                src={app.imageSrc}
                                alt={app.title}
                                title={app.title}
                            />
                        </Link>
                        <Link
                            className={labelLinkClasses}
                            hidden={false}
                            to={app.link}>
                            <div className={labelClass}>
                                {app.title}
                            </div>
                        </Link>
                    </span>
                </div>
        );
    }

    render() {
        const labelClass = classNames(
            prefixNS('applications__label'),
            {[prefixNS('applications__label--invisible')]: this.props.sidebarCollapsed});
        return (
            <div data-ce-id="ApplicationsView">
                {getApplications().map((app, idx) => this.createAppIcon(app, idx, labelClass))}
            </div>
        );
    }
}

Applications.propTypes = {
    sidebarCollapsed: PropTypes.bool
};
