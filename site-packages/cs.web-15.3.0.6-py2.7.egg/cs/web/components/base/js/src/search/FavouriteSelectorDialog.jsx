/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: FavouriteSelectorDialog.jsx 172732 2018-02-01 15:51:20Z gwe $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import Dialog from '../dialogs';
import {selectFavourite} from './actions/instances.js';
import {loadAllFavourites} from './actions/favourites.js';
import SearchFavouriteSelector from './FavouritesSelector.jsx';

class FavouriteSelectorDialog extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            classname: props.initialClassname,
            favouriteId: props.initialFavouriteId
        };
        this.handeSelectFavourite = this.handeSelectFavourite.bind(this);
        this.handeSelectClass = this.handeSelectClass.bind(this);
        this.handleOk = this.handleOk.bind(this);
    }

    componentDidMount() {
        this.props.loadAllFavourites();
    }

    handeSelectFavourite(key) {
        this.setState({favouriteId: key});
    }

    handeSelectClass(key) {
        const {classname} = this.state;
        if (classname !== key) {
            this.setState({
                classname: key,
                favouriteId: undefined
            });
        }
    }

    handleOk() {
        const {instanceName, onSave, selectFavourite} = this.props;
        const {classname, favouriteId} = this.state;
        selectFavourite(instanceName, classname, favouriteId);
        onSave(classname, favouriteId);
    }

    render() {
        const {title, onCancel, favouritesByClass} = this.props;
        const {classname, favouriteId} = this.state;
        const canSubmit = Boolean(classname) && Boolean(favouriteId);
        const dlgClass = `${componentNameSpace}-search-favourite-config`;
        return (
            <Dialog.Dialog
                title={title}
                buttons={[
                    <Dialog.Buttons.Ok
                        key="ok"
                        disabled={!canSubmit}
                        onClick={this.handleOk} />,
                    <Dialog.Buttons.Cancel
                        key="cancel"
                        onClick={onCancel} />
                ]}
                show={true}
                showCancel={true}
                onHide={onCancel}
                dialogClassName={dlgClass}
                allowOverlay={true}
            >
                <SearchFavouriteSelector
                    classname={classname}
                    favouriteId={favouriteId}
                    favouritesByClass={favouritesByClass}
                    onSelectFavourite={this.handeSelectFavourite}
                    onSelectClass={this.handeSelectClass} />
            </Dialog.Dialog>
        );
    }
}
FavouriteSelectorDialog.propTypes = {
    instanceName: PropTypes.string.isRequired,
    initialClassname: PropTypes.string,
    initialFavouriteId: PropTypes.string,
    title: PropTypes.string.isRequired,
    onSave: PropTypes.func.isRequired,
    onCancel: PropTypes.func.isRequired,
    // store
    favouritesByClass: ImmutablePropTypes.map.isRequired,
    // actions
    loadAllFavourites: PropTypes.func.isRequired,
    selectFavourite: PropTypes.func.isRequired
};

function mapStateToProps(state, ownProps) {
    const {instanceName} = ownProps;
    const instance = state.search.instances.get(instanceName);
    return {
        initialClassname: instance.get('classname'),
        initialFavouriteId: instance.get('favouriteId'),
        favouritesByClass: state.search.favouritesByClass
    };
}

const actions = {loadAllFavourites, selectFavourite};

export default connect(mapStateToProps, actions)(FavouriteSelectorDialog);
