/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RelshipTableOperationToolbar.jsx 184308 2018-09-24 09:25:42Z gwe $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {OPERATION_ACTIVATION_MODES} from '../constants.js';
import {formatStr} from '../i18n.js';
import {fetchRelshipOperationInfo} from '../actions/operations.js';
import {InnerToolbar} from './ContentOperationToolbar.jsx';
import OperationModal from '../components/OperationModal.jsx';
import OperationScope from '../form/containers/OperationScope.jsx';
import ClassRelshipLoader from './objectwidgets/ClassRelshipLoader.jsx';

class RelshipOpWrapper extends React.Component {

    componentDidMount() {
        this.fetchOpInfos(this.props);
    }

    componentWillReceiveProps(nextProps) {
        if ((this.props.relshipName !== nextProps.relshipName)
            || (this.props.parentObject !== nextProps.parentObject))
        {
            this.fetchOpInfos(nextProps);
        }
    }

    fetchOpInfos(props) {
        const {parentObject, relshipName} = props;
        props.fetchRelshipOperationInfo(parentObject, relshipName);
    }

    getRelshipOpCfg(relships, target) {
        // Returns an immutable map that contains the keys
        // ``menu`` and ``operations``
        const {parentObject, contextObjects, operationsByRelship, relshipName} = this.props;
        const isSingleSelect = contextObjects.size === 1;
        const isMultiSelect = contextObjects.size > 1;
        const opcfgs = operationsByRelship.getIn([parentObject.get('@id'), relshipName]);
        if (opcfgs === undefined) {
            return Immutable.Map();
        }
        const key = target ? "reference_opinfo" : "link_opinfo";
        const cfg = opcfgs.get(key);
        if (!cfg) {
            return Immutable.Map();
        }

        let label = cfg.get(0);
        if (!label) {
            const rsLabel = relships.getIn([relshipName, 'label']);
            if (target) {
                label = rsLabel;
            } else {
                label = rsLabel + " " + formatStr("relship");
            }
        }
        const menuCfg = Immutable.fromJS({
            headerText: label,
            iconSize: "sm",
            iconName: target ? "cdb_job1" : "cdb_reference",
            hideCaret: false
        });
        const ops = cfg.get(1).filter(op => op.get('submit_url'))
            .map(opPara => {
                let op = opPara;
                if (op.get('opname') === "CDB_AddToRelationship" ||
                    op.get('opname').startsWith("CDB_Delete")) {
                    op = op.set('essential', true);
                }
                switch (op.get('activation_mode')) {
                    case OPERATION_ACTIVATION_MODES.NO_SELECTION:
                    case OPERATION_ACTIVATION_MODES.EVERYTIME:
                        return op.set('operationEnabled', true);
                    case OPERATION_ACTIVATION_MODES.MULTIPLE_SELECTION:
                        return op.set('operationEnabled', isSingleSelect || isMultiSelect);
                    case OPERATION_ACTIVATION_MODES.SINGLE_SELECTION:
                        return op.set('operationEnabled', isSingleSelect);
                    default:
                        return op.set('operationEnabled', false);
                }
            });
        return Immutable.Map({"menu": menuCfg, "operations": ops});
    }

    render() {
        return (
            <ClassRelshipLoader contextObject={this.props.parentObject}>
                {relships => {
                    const targetOps = this.getRelshipOpCfg(relships, true);
                    const relshipOps = this.getRelshipOpCfg(relships, false);
                    return (
                        this.props.children(targetOps, relshipOps)
                    );
                }}
            </ClassRelshipLoader>
        );

    }
}
RelshipOpWrapper.propTypes = {
    parentObject: ImmutablePropTypes.map.isRequired,
    relshipName: PropTypes.string.isRequired,
    contextObjects: ImmutablePropTypes.list.isRequired,
    operationsByRelship: ImmutablePropTypes.map.isRequired,
    fetchRelshipOperationInfo: PropTypes.func.isRequired
};

function mapStateToProps(state) {
    return {
        operationsByRelship: state.operationsByRelship
    };
}

const ConnectedRelshipOpWrapper =
    connect(mapStateToProps, {fetchRelshipOperationInfo})(RelshipOpWrapper);

function beautifyOperationMenu(menu, iconName) {
    return menu.map((v, k) => k === 'iconName' ? iconName : (k === 'hideCaret' ? true : v));
}

/**
 * Dynamic Toolbar to display operations in relationship tables
 *
 * @private
 */
export default class RelshipTableOperationToolbar extends React.Component {
    render() {
        const {parentObject, relshipName, operationParams, ...otherProps} = this.props;
        delete otherProps['instanceName'];
        const {contextObjects} = otherProps;
        const ToolbarComponent = (opInfos, linkOpInfos) => {
            const targetOps = opInfos.get("operations", Immutable.List());
            const targetMenu = beautifyOperationMenu(
                opInfos.get("menu", Immutable.Map()), 'csweb_option_horizontal');
            const linkOps = linkOpInfos.get("operations", Immutable.List());
            const linkMenu = beautifyOperationMenu(
                linkOpInfos.get("menu", Immutable.Map()), 'csweb_link');

            const opInfosToolbar = targetOps.size > 0 ?
                <InnerToolbar {...otherProps}
                    operations={targetOps}
                    operationParams={operationParams}
                    menuConfig={targetMenu} />
                : null;
            const linkOpsToolbar = linkOps.size > 0 ?
                <InnerToolbar {...otherProps}
                    operations={linkOps}
                    operationParams={operationParams}
                    menuConfig={linkMenu} />
                : null;
            if (opInfosToolbar != null || linkOpsToolbar != null) {
                return (
                    <React.Fragment>
                        {opInfosToolbar}
                        {linkOpsToolbar}
                    </React.Fragment>
                );
            }
            return null;
        };

        return (
            <OperationScope>
                <OperationModal handlerName="editor"/>
                <ConnectedRelshipOpWrapper
                    parentObject={parentObject}
                    relshipName={relshipName}
                    contextObjects={contextObjects}
                >
                    {ToolbarComponent}
                </ConnectedRelshipOpWrapper>
            </OperationScope>
        );
    }
}
RelshipTableOperationToolbar.propTypes = {
    instanceName: PropTypes.string.isRequired,
    parentObject: ImmutablePropTypes.map.isRequired,
    relshipName: PropTypes.string.isRequired,
    contextObjects: ImmutablePropTypes.list,
    isOperationRunning: PropTypes.bool,
    operationParams: PropTypes.object,
};
RelshipTableOperationToolbar.defaultProps = {
    contextObjects: Immutable.List(),
    operationParams: {},
};
