/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: context-objects.js 177060 2018-05-09 13:02:50Z mbr $"
 */

import Immutable from 'immutable';
import {fetchObject, receivedCollection} from './object-actions.js';
import {postJSON} from '../fetch.js';
import {getAppSetup} from '../helpers.js';

/**
 * @module context-objects
 */

export const SET_CONTEXT_OBJECTS = `${componentNameSpace}-SET_CONTEXT_OBJECTS`;

function _setContextObjects(path, objectIds) {
    return {
        type: SET_CONTEXT_OBJECTS,
        payload: {path, objectIds}
    };
}

/**
 * Store a list of selected objects for a path. The path is used to retrieve the
 * objects from the store. We always store the @id's of the objects, not the objects
 * themselves, to avoid stale object states.
 *
 * Objects not already present in the store will be fetched, so that not every
 * using component has to do this.
 *
 * @param {string} path - Path to store the selection for, segments separated by '/'
 * @param {Immutable.List} values - A list of (mixed) objects or strings, a string
 *        is assumed to be the @id of an object
 */
export function setContextObjectList(path, values) {
    return (dispatch, getState) => {
        const ids = values.filter(v => v !== undefined)
                          .map(v => (typeof v === 'string') ? v : v.get('@id'));
        dispatch(_setContextObjects(path, ids));
        const objectsById = getState().objectsById;
        ids.filterNot(id => objectsById.has(id))
            .forEach(id => dispatch(fetchObject(id)));
    };
}

/**
 * Store a list of selected objects for a path. The path is used to retrieve the
 * objects from the store. We always store the @id's of the objects, not the objects
 * themselves, to avoid stale object states.
 *
 * Objects not already present in the store will be fetched, so that not every
 * using component has to do this.
 *
 * The objects will be fetched from the server by a single call.
 *
 * @param {string} path - Path to store the selection for, segments separated by '/'
 * @param {Immutable.List} values - A list of object identifiers [@id, restname, keys}]
 */

export function setContextObjectsBatchLoad(path, values) {
    return (dispatch, getState) => {
        const ids = values.filter(v => v !== undefined)
                          .map(v => v[0]);
        dispatch(_setContextObjects(path, ids));
        const objectsById = getState().objectsById;
        const l = values
          .filter(v => v !== undefined)
          .filterNot(id => objectsById.has(id[0]))
          .map(v => [v[1], v[2]]);
        if (l.count()) {
            dispatch(fetchBatch(l));
        }
    };
}

function fetchBatch(identifiers) {
    const url = getAppSetup().getIn(['links', 'common', 'batchLoad']);
    return (dispatch) => {
        postJSON(url, {identifiers})
        .then(data => dispatch(receivedCollection(null, data['objects'])));
    };
}

export function setContextObjects(path, ...values) {
    return setContextObjectList(path, Immutable.List(values));
}
