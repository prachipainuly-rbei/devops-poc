/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: MessageView.jsx 183010 2018-08-29 11:48:38Z vov $"
 */

import React from 'react';
import {
    ListGroup, ListGroupItem
} from 'react-bootstrap';
import Tab from '../layouts/Tab';
import {ImmutablePropTypes} from 'cs-web-components-externals';
import {connect} from 'cs-web-components-externals';
import {prefixNS} from '../helpers.js';
import {formatStr} from '../i18n.js';
//import Messages from '../messages';

/* function filterSystemMessages(message) {
 *     return message.get('global') === Messages.Global.SYSTEM_MSG ||
 *            (message.get('global') === Messages.Global.LEVEL_BASED &&
 *             message.get('level') === Messages.Level.ERROR);
 * }
 *
 * function filterUserMessages(message) {
 *     return !filterSystemMessages(message);
 * }
 */

class MessageItem extends React.Component {
    render() {
        return (
            <ListGroupItem className={prefixNS("message-item")}>
                <div>{this.props.message.get('message')}</div>
                <div>{this.props.message.get('title')}</div>
            </ListGroupItem>
        );
    }
}

MessageItem.propTypes = {
    message: ImmutablePropTypes.map
};

class MessageList extends React.Component {
    render() {
        return (
            <ListGroup>
                {this.props.messages
                     .sortBy(m => m.get('ts'),
                             (t1, t2) => t1 < t2 ? +1 : t1 > t2 ? -1 : 0)
                     .map(message => <MessageItem key={message.get('id')}
                                                  message={message} />)}
            </ListGroup>
        );
    }
}

MessageList.propTypes = {
    messages: ImmutablePropTypes.list
};

class MessageView extends React.Component {
    render() {
        const systemMessages = this.props.messages.toList();
        const systemSubject = systemMessages.size === 1 ?
                              formatStr('messages_system_subj_sg') :
                              formatStr('messages_system_subj_pl');
        return (
            <Tab.Container
                id={prefixNS("message-view__container")}
                className={prefixNS("message-view__container")}
                defaultActiveKey={2}>
                <Tab.Bar>
                    <Tab.Title
                        title=
                            {formatStr("messages_title", {
                                cnt: String(systemMessages.size),
                                subj: systemSubject
                            })}
                        eventKey={2}/>
                </Tab.Bar>
                <Tab.Content>
                    <Tab.Pane
                        eventKey={2}
                        className={prefixNS("message-view__pane")}>
                            {
                                systemMessages.size === 0 ? (
                                    <div className={prefixNS("message-view__empty-lbl")}>
                                        {formatStr("messages_empty_label",
                                        {subj: formatStr("messages_system_subj_pl")})}
                                    </div>
                                ) : (
                                    <MessageList
                                        messages={systemMessages} />
                                )
                            }
                    </Tab.Pane>
                </Tab.Content>
            </Tab.Container>
        );
    }
}

MessageView.propTypes = {
    messages: ImmutablePropTypes.map
};

function mapStateToProps(state) {
    return {messages: state.messages.get('messagesById')};
}

export default connect(mapStateToProps)(MessageView);
