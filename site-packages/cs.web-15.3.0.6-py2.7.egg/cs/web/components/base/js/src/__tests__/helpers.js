/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: helpers.js 172137 2018-01-23 11:44:39Z gwe $"
 */

/* eslint-env jest */

import {makeCancelable} from '../helpers.js';

describe('The makeCancelable function', () => {

    it('resolves normally when not cancelled', () => {
        expect.assertions(1);
        const p = Promise.resolve(42);
        const cp = makeCancelable(p);
        return expect(cp.promise).resolves.toBe(42);
    });

    it('rejects normally when not cancelled', () => {
        expect.assertions(1);
        const p = Promise.reject(42);
        const cp = makeCancelable(p);
        return expect(cp.promise).rejects.toBe(42);
    });

    it('prevents a canceled promise from resolving', () => {
        expect.assertions(1);
        const p = Promise.resolve(42);
        const cp = makeCancelable(p);
        cp.cancel();
        return expect(cp.promise).rejects.toMatchObject({isCanceled: true});
    });

    it('resolves a promise chain when not cancelled', () => {
        expect.assertions(1);
        const p = Promise.resolve(42);
        const myPromise = p.then(val => val, err => err);
        const cp = makeCancelable(myPromise);
        return expect(cp.promise).resolves.toBe(42);
    });

    it('prevents a canceled promise chain from resolving', () => {
        expect.assertions(1);
        const p = Promise.resolve(42);
        const myPromise = p.then(val => val, err => err);
        const cp = makeCancelable(myPromise);
        cp.cancel();
        return expect(cp.promise).rejects.toMatchObject({isCanceled: true});
    });

    it('does NOT cancel correctly when not cancelling the last promise in a chain', () => {
        expect.assertions(1);
        const p = Promise.resolve(42);
        const cp = makeCancelable(p);
        const myPromise = cp.promise.then(val => val, err => err);
        cp.cancel();
        return expect(myPromise).resolves.toMatchObject({isCanceled: true});
    });
});
