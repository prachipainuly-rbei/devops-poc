/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DataContainerField.jsx 185017 2018-10-12 13:04:05Z yzh $"
 */

import React from 'react';
import {Image} from 'react-bootstrap';
import {classNames, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS, ensureLinkProtocol} from '../helpers.js';
import fieldTypes from '../form/fieldTypes.js';
import {Registry} from '../registry.js';
import Link from '../components/navigation/Link';
import {formatStr} from '../i18n.js';

const commonPropTypes = {
    contextObject: ImmutablePropTypes.map.isRequired,
    field: ImmutablePropTypes.map.isRequired,
    value: PropTypes.any,
    rawValue: PropTypes.any
};

const rendererPropTypes = {
    ...commonPropTypes,
    className: PropTypes.string.isRequired
};

function getMappedValue(field, value) {
    // If there is a mapping return the mapped value
    // if not return value
    const mappings = field.getIn(['config', 'display_mapping', 'mappings']);
    if (mappings) {
        const mapping = mappings.find(i => i.get(0) === value);
        if (mapping) {
            return mapping.get(1);
        }
    }
    return value;
}

function DefaultFieldRenderer(props) {
    const {field, value, className} = props;
    const displayed_value = getMappedValue(field, value);
    const isEmpty = displayed_value === "";
    const _value = isEmpty ? formatStr("data_field_no_value") : displayed_value;

    const cls = classNames(
        prefixNS('object-header__data-container-field-value-single'),
        {
            [prefixNS('object-header__data-container-field-no-value')]: isEmpty
        }
    );

    return (
        <div className={className}>
            <span className='text-muted'>
                {field.get('label')}:
            </span>
            <span className={cls}>
                {_value}
            </span>
        </div>
    );
}
DefaultFieldRenderer.propTypes = rendererPropTypes;

function ImageRenderer(props) {
    const {field, className} = props;
    const iconUrl = field.getIn(['config', 'icon']);
    const iconTitle = field.getIn(['config', 'title']);
    const height = field.getIn(['config', 'height']);
    const width = field.getIn(['config', 'width']);
    const keepAspectRatio = field.getIn(['config', 'keep_aspect_ratio']);
    const theStyle = {};
    if (keepAspectRatio) {
        if (height) {
            theStyle.maxHeight = height + "px";
        }
        if (width) {
            theStyle.maxWidth = width + "px";
        }
    } else {
        if (height) {
            theStyle.height = height + "px";
        }
        if (width) {
            theStyle.width = width + "px";
        }
        theStyle.maxWidth = "100%";
    }
    return (
        <div className={className}>
            <span className='text-muted'>
                {field.get('label')}:
            </span>
            <Image className={prefixNS('object-header__data-container-field-value-icon')}
                   src={iconUrl}
                   title={iconTitle}
                   alt={iconTitle}
                   style={theStyle}
                   rounded={true}/>
        </div>
    );
}
ImageRenderer.propTypes = rendererPropTypes;

function LongtextRenderer(props) {
    const {field, value, className} = props;
    // Spec says not more than 2 lines
    const lines = Math.min(2, field.getIn(['config', 'lines'], 1));
    return (
        <div className={className}>
            <div className='text-muted'>
                {field.get('label')}:
            </div>
            <div className={prefixNS(`object-header__data-container-field-value-${lines}`)}>
                {value}
            </div>
        </div>
    );
}
LongtextRenderer.propTypes = rendererPropTypes;

function ComponentRenderer(props) {
    const {field, value, className, ...others} = props;
    // Spec says not more than 2 lines
    const compName = field.getIn(['config', 'component_name']);
    const Renderer = Registry.findComponent(compName);
    return (
        <div className={className}>
            <span className='text-muted'>
                {field.get('label')}:
            </span>
            <span className={prefixNS(`object-header__data-container-field-component__content`)}>
                <Renderer {...others}
                          value={value}
                          field={field}/>
            </span>
        </div>
    );
}
ComponentRenderer.propTypes = rendererPropTypes;

function getLinkTarget(field, value) {
    const fieldtype = field.get('fieldtype');
    switch (fieldtype) {
        case fieldTypes.EMAIL:
            {
                if (value) {
                    return "mailto:" + value;
                }
                return "";
            }
        case fieldTypes.HYPERLINK:
            return ensureLinkProtocol(value);
        default:
            return field.getIn(['config', 'link_target_url']);
    }
}

function LinkRenderer(props) {
    const {field, value, className} = props;
    const link_target = getLinkTarget(field, value);
    const displayed_value = getMappedValue(field, value);
    return (
        <div className={className}>
            <span className='text-muted'>
                {field.get('label')}:
            </span>
            <Link to={link_target}
                title={displayed_value}
                className={prefixNS('object-header__data-container-field-value-link')}>
                {displayed_value}
            </Link>
        </div>);
}
LinkRenderer.propTypes = rendererPropTypes;

function getRenderer(field) {
    const fieldtype = field.get('fieldtype');
    switch (fieldtype) {
        case fieldTypes.IMAGE:
            return ImageRenderer;
        case fieldTypes.LONGTEXT:
            return LongtextRenderer;
        case fieldTypes.COMPONENT:
            return ComponentRenderer;
        case fieldTypes.EMAIL:
        case fieldTypes.HYPERLINK:
            return LinkRenderer;
        default:
            {
                const link = field.getIn(['config', 'link_target_url']);
                if (link) {
                    return LinkRenderer;
                }
                return DefaultFieldRenderer;
            }
    }
}

/**
 * As single attribute in a data container. The field type determines how the
 * value gets rendered.
 */
export default class DataContainerField extends React.Component {
    render() {
        // TODO: handle different field types
        const {field, value, contextObject, rawValue} = this.props;
        const classes = classNames(
            prefixNS('object-header__data-container-field'),
            prefixNS(`object-header__data-container-field-${field.get('fieldtype')}`)
        );
        const Renderer = getRenderer(field);
        return (
            <Renderer
                className={classes}
                field={field}
                value={value}
                rawValue={rawValue}
                contextObject={contextObject} />
        );
    }
}
DataContainerField.propTypes = commonPropTypes;
