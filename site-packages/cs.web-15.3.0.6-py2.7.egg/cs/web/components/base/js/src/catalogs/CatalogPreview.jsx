/*
 * Copyright (C) 1990-2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: CatalogPreview.jsx 174283 2018-03-09 10:30:35Z gwe $"
 */

import React from 'react';
import Thumbnail from '../components/Thumbnail.jsx';
import {prefixNS, getObjectImage} from '../helpers.js';
import {formatStr} from '../i18n.js';
import {ImmutablePropTypes} from 'cs-web-components-externals';

/**
 * Catalog preview component
 *
 * +------------------+---------------+--------------+---------------------------------------------+
 * | Property         | Type          | Default      | Use                                         |
 * +==================+===============+==============+=============================================+
 * | contextObject    | Immutable.Map | -            | The object to render                        |
 * +------------------+---------------+--------------+---------------------------------------------+
 *
 */
export default class CatalogPreview extends React.Component {

    renderNoObject() {
        return (
            <div className={prefixNS('catalog-preview-no-object')}>
                {formatStr("no_preview")}
            </div>
        );
    }

    render() {
        const {contextObject} = this.props;
        if (contextObject) {
            const imgFileUrl = getObjectImage(contextObject);
            const description = contextObject.get('system:description');
            return (
                <div className={prefixNS('catalog-preview')}>
                    <Thumbnail
                        imgSrc={imgFileUrl}
                        fallbackSrc={contextObject.get('system:icon_link')}
                        size={'lg'}
                        title={description}
                    />
                        <div className={prefixNS('catalog-preview-description')}>
                            {description}
                        </div>
                </div>
            );
        }
        else {
            return this.renderNoObject();
        }
    }
}

CatalogPreview.propTypes = {
    contextObject: ImmutablePropTypes.map,
};
