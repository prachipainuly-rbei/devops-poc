/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: index.js 176653 2018-04-30 12:57:37Z cla $"
 */

import {Registry} from '../registry.js';
import Actions from './actions.js';
import messages, {getMessagesForOwner, getMessagesForDisplay} from './reducer.js';
import MessageView from './MessageView.jsx';
import NotificationContainer from './notifications/NotificationContainer.jsx';
import {createNotification, removeNotification} from './notifications/index.js';
import BannerContainer, {createBanner} from './banners/index.js';

/**
 * This module provides the basic API to display messages to the user.
 * The module provides actions and components to display messages as notifications or
 * banners, and can be easily extended to provide custom methods of display.
 *
 * In order to post a message to the user, use the ``Actions.post*`` action creators
 * described in :ref:`cs-web-components-base-messages.actions.__module__`.
 *
 * Example: Displaying a message
 * -----------------------------
 *
 * .. code-block:: none
 *
 *    import {Messages, Button} from 'cs-web-base-components';
 *    import {connect} from 'cs-web-components-externals';
 *    import React from 'react';
 *
 *    class Example extends React.Component {
 *      constructor(props) {
 *        super(props);
 *        this.displayBanner = this.displayBanner.bind(this);
 *      }
 *
 *      displayBanner() {
 *        this.props.postMessage(
 *          {
 *            level: Messages.Level.INFO,
 *            title: "banner-message",
 *            message: "I'm a banner-message!",
 *            owner: this,
 *            global: true
 *          },
 *          Messages.createBanner({bannerContainerId: 'my-banner-container'}),
 *          Messages.createNotification({timeout: 5000})
 *        );
 *      }
 *
 *      render() {
 *        return (
 *          <div>
 *            <Messages.BannerContainer id="my-banner-container" />
 *            <Button.TextButton label="Display Banner" onClick={this.displayBanner}>
 *          </div>
 *        );
 *      }
 *    }
 *
 *    const ConnectedExample = connect(
 *      undefined,
 *      {postMessage: Messages.Actions.postMessage}
 *    )(Example);
 *
 * @module Messages
 */

/**
 * The level of the message. Possible values are:
 *
 * - ``EMPTY``
 * - ``PROGRESS``
 * - ``INFO``
 * - ``SUCCESS``
 * - ``WARNING``
 * - ``ERROR``
 */
export const Level = {
    EMPTY: 0,
    PROGRESS: 1,
    INFO: 2,
    SUCESS: 3,
    WARNING: 4,
    ERROR: 5
};

export const Global = {
    NONE: 0,
    ACTIVITY: 1,
    SYSTEM_MSG: 2,
    LVL_BASED: 3
};

Registry.registerReducers({
    messages
});

export default {
    MessageView,
    Level,
    Global,
    Actions,
    getMessagesForDisplay,
    getMessagesForOwner,

    // Notifications
    NotificationContainer,
    createNotification,
    removeNotification,

    // Banners
    BannerContainer,
    createBanner
};
