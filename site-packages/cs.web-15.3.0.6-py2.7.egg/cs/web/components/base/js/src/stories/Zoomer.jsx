/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Zoomer.jsx 184925 2018-10-11 08:40:23Z gwe $"
 */

import React from 'react';
import {storiesOf, centered, knobs, action} from 'cs-web-components-storybook';
import {Zoomer} from 'cs-web-components-base';

class ZoomerWrapper extends React.Component {
    constructor(props) {
        super(props);
        this.onZoomIn = this.onZoomIn.bind(this);
        this.onZoomOut = this.onZoomOut.bind(this);
        this.onReset = this.onReset.bind(this);
        this.state = {
            defaultZoom: 1.0
        };
    }

    onZoomIn() {
        this.setState({defaultZoom: this.state.defaultZoom * 0.8});
    }

    onZoomOut() {
        this.setState({defaultZoom: this.state.defaultZoom * 1.2});
    }

    onReset() {
        this.setState({defaultZoom: 1.0});
    }

    render() {
        return (
            <Zoomer
                {...this.props}
                currentScale={this.state.defaultZoom}
                onZoomIn={this.onZoomIn}
                onZoomOut={this.onZoomOut}
                onReset={this.onReset} />
        );
    }
}

action('onZoomToFit');
action('onZoomToFitHorizontal');
action('onZoomToFitVertical');

storiesOf('Zoomer', {})
    .addDecorator(centered)
    .add('default', () => (
        <ZoomerWrapper />
    ))
    .add('With onZoomToFit callback', () => (
        <ZoomerWrapper onZoomToFit={action('onZoomToFit')} />
    ))
    .add('With zoomToFit controls', () => (
        <ZoomerWrapper
            onZoomToFit={
                knobs.boolean('onZoomToFit', true, 'functions') ?
                    action('onZoomToFit')
                    : undefined}
            zoomToFitActive={
                knobs.boolean('zoomToFitActive', false, 'switches')}
            onZoomToFitHorizontal={
                knobs.boolean('onZoomToFitHorizontal', true, 'functions') ?
                    action('onZoomToFitHorizontal')
                    : undefined}
            zoomToFitHorizontalActive={
                knobs.boolean('zoomToFitHorizontalActive', false, 'switches')}
            onZoomToFitVertical={
                knobs.boolean('onZoomToFitVertical', true, 'functions') ?
                    action('onZoomToFitVertical')
                    : undefined}
            zoomToFitVerticalActive={
                knobs.boolean('zoomToFitVerticalActive', false, 'switches')}
        />
    ));
