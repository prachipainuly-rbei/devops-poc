/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DropdownButton.jsx 184639 2018-10-02 09:01:54Z cla $"
 */

import React from 'react';
import ReactDOM from 'react-dom';
import {IconButton, TextButton, IconTextButton} from '../components/Button.jsx';
import {prefixNS} from '../helpers.js';
import {
    HorizontalAlignment, HorizontalAlignmentType,
    VerticalAlignment, VerticalAlignmentType
} from './constants.js';
import {PropTypes, classNames} from 'cs-web-components-externals';
import {Menu} from './Menu.jsx';
import Dropdown from './Dropdown.jsx';

/**
 * This component renders a button that displays a
 * :ref:`cs-web-components-base-overlays.Dropdown.__default__` containing a menu if clicked.
 *
 * Provided components are:
 *
 * - DropdownIconButton
 * - DropdownIconTextButton
 * - DropdownTextButton
 *
 * Use the following menu child components provided by this module to display menu content:
 *
 * - :ref:`cs-web-components-base-overlays.Menu.MenuItem`
 * - :ref:`cs-web-components-base-overlays.Menu.MenuHeader`
 * - :ref:`cs-web-components-base-overlays.Menu.MenuDivider`
 *
 * React Properties
 * ================
 *
 * ================= ========================= ================================================
 *    Name                                        Description
 * ================= ========================= ================================================
 *  buttonStyle       string                    Semantic Style of the Button Component.
 *  verticalAlign     VerticalAlignmentType     How the Menu should be aligned in relation
 *                                              to the button.
 *  horizontalAlign   HorizontalAlignmentType   How the Menu should be aligned horizontally.
 *  containerRef      object                    Reference to a containing component that may
 *                                              cover the anchor component.
 *  size              string                    Size of the string to be displayed.
 * ================= ========================= ================================================
 *
 * Example
 * =======
 *
 * .. code-block:: none
 *
 *    import {Overlays} from 'cs-web-components-base';
 *
 *    const {
 *      HorizontalAlignment,
 *      VerticalAlignment,
 *      DropdownIconButton,
 *      MenuItem,
 *      MenuDivider,
 *    } = Overlays;
 *
 *    function MyMenu(props) {
 *      return (
 *        <DropdownIconButton
 *             buttonStyle="info"
 *             iconName={"csweb_option_horizontal"}
 *             horizontalAlign={HorizontalAlignment.LEFT}
 *             verticalAlign={VerticalAlignment.TOP}
 *             title={"Hello World"}
 *             size={'sm'}
 *             {...props}>
 *
 *          <MenuItem onSelect={() => {...}}>Hello World</MenuItem>
 *          <MenuItem>Hello World</MenuItem>
 *          <MenuDivider />
 *          <MenuItem>Hello World</MenuItem>
 *        </DropdownIconButton>
 *      );
 *    }
 *
 * @module
 */

class DropdownButton extends React.Component {
    constructor(props) {
        super(props);
        this.setMenuRef = this.setMenuRef.bind(this);
        this.onOverlayFocus = this.onOverlayFocus.bind(this);
    }

    setMenuRef(c) {
        this._menu = c;
    }

    onOverlayFocus(evt) {
        if (this._menu) {
            const menuElement = ReactDOM.findDOMNode(this._menu);  // eslint-disable-line react/no-find-dom-node
            menuElement.focus();
        }

        evt.stopPropagation();
    }

    render() {
        const {
            ButtonComponent, containerRef, children, className,
            onShow, onHide, onSelect, dropdownRef,
            horizontalAlign, verticalAlign, visible,
            ...others
        } = this.props;
        return (
            <Dropdown setContentRef={this.setMenuRef}
                      onFocus={this.onOverlayFocus}
                      containerRef={containerRef}
                      onShow={onShow}
                      onHide={onHide}
                      ref={dropdownRef}
                      visible={visible}
                      horizontalAlign={horizontalAlign}
                      verticalAlign={verticalAlign}>
                {
                    ({onToggle, onHide}, visible) => {
                        const clsNames = classNames(
                            {
                                [className]: Boolean(className),
                                [prefixNS('open')]: visible,
                            },
                            prefixNS('dropdown-toggle')
                        );
                        return ([
                            <ButtonComponent key={'toggle'}
                                             caret={true}
                                             className={clsNames}
                                             {...others}
                                             onClick={onToggle}/>,
                            <Menu key={'content'}
                                  onHide={onHide}
                                  onSelect={onSelect}>
                                {children}
                            </Menu>
                        ]);
                    }
                }
            </Dropdown>
        );
    }
}
DropdownButton.propTypes = {
    containerRef: PropTypes.object,
    ButtonComponent: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.func
    ]),
    buttonStyle: PropTypes.string,
    title: PropTypes.string,
    className: PropTypes.string,
    horizontalAlign: HorizontalAlignmentType,
    verticalAlign: VerticalAlignmentType,
    visible: PropTypes.bool,
};
DropdownButton.defaultProps = {
    buttonStyle: "primary",
    horizontalAlign: HorizontalAlignment.RIGHT,
    verticalAlign: VerticalAlignment.BOTTOM,
};

export function DropdownIconButton(props) {
    return (
        <DropdownButton
            {...props}
            ButtonComponent={IconButton} />
    );
}

DropdownIconButton.propTypes = {
    ...DropdownButton.propTypes,
    iconName: PropTypes.string,
    iconSrc: PropTypes.string,
    size: PropTypes.string,
};

DropdownIconButton.defaultProps = {
    ...DropdownButton.defaultProps,
    size: "sm",
};

export function DropdownTextButton(props) {
    return (
        <DropdownButton
            {...props}
            caret
            ButtonComponent={TextButton} />
    );
}

DropdownTextButton.propTypes = {
    ...DropdownButton.propTypes,
    label: PropTypes.node,
};

DropdownTextButton.defaultProps = {
    ...DropdownButton.defaultProps
};

export function DropdownIconTextButton(props) {
    return (
        <DropdownButton
            {...props}
            ButtonComponent={IconTextButton} />
    );
}

DropdownIconTextButton.propTypes = {
    ...DropdownButton.propTypes,
    iconName: PropTypes.string,
    iconSrc: PropTypes.string,
    size: PropTypes.string,
    label: PropTypes.node,
};

DropdownIconTextButton.defaultProps = {
    ...DropdownIconButton.defaultProps
};
