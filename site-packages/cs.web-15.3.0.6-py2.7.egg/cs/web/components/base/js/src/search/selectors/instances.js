/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: instances.js 185872 2018-10-30 12:13:29Z mbr $"
 */

import {getRelshipUrl} from '../../helpers.js';
import {isSpecialFavourite, getFavouriteResultLink} from './favourites.js';

export function getInstance(state, instanceName) {
    return state.search.instances.get(instanceName);
}

export function getClassname(state, instanceName) {
    return state.search.instances.getIn([instanceName, 'classname']);
}

function getOpState(state, instanceName) {
    return state.search.operationByClass.get(getClassname(state, instanceName));
}

export function isCatalogSearch(state, instanceName) {
    return state.search.instances.hasIn([instanceName, 'catalogTableURL']);
}

export function isRelshipSearch(state, instanceName) {
    return state.search.instances.hasIn([instanceName, 'relshipName']);
}

export function isClassSearch(state, instanceName) {
    return !isCatalogSearch(state, instanceName) && !isRelshipSearch(state, instanceName);
}

export function getFields(state, instanceName) {
    if (isClassSearch(state, instanceName)) {
        const opState = getOpState(state, instanceName);
        return opState ? opState.get('fields') : undefined;
    }
    else {
        return state.search.instances.getIn([instanceName, 'searchFormData', 'fields']);
    }
}

export function getOpData(state, instanceName) {
    return state.search.operationByClass.getIn(
        [getClassname(state, instanceName), 'opData']);
}

export function getOperationState(state, instanceName) {
    if (isClassSearch(state, instanceName)) {
        const opState = getOpState(state, instanceName);
        return opState ? opState.getIn(['opData', 'operation_state']) : undefined;
    }
    else {
        return undefined;
    }
}

export function getDisplayMappingURL(state, instanceName) {
    if (isClassSearch(state, instanceName)) {
        const opState = getOpState(state, instanceName);
        return opState ? opState.getIn(['opData', 'display_mapping_url']) : undefined;
    }
    else {
        return state.search.instances.getIn(
            [instanceName, 'searchFormData', 'original', 'display_mapping_url']);
    }
}

export function getReadOnlyAttributes(state, instanceName) {
    if (isClassSearch(state, instanceName)) {
        const opState = getOpState(state, instanceName);
        return opState ? opState.get('readOnlyAttributes') : undefined;
    }
    else {
        return state.search.instances.getIn([instanceName, 'searchFormData', 'readOnlyAttributes']);
    }
}

export function getVisibleAttributes(state, instanceName) {
    if (isClassSearch(state, instanceName)) {
        const opState = getOpState(state, instanceName);
        return opState ? opState.get('visibleAttributes') : undefined;
    }
    else {
        return state.search.instances.getIn([instanceName, 'searchFormData', 'visibleAttributes']);
    }
}

export function getAttributeOrder(state, instanceName) {
    return state.search.instances.getIn([instanceName, 'attributeOrder']);
}

export function getFavouriteId(state, instanceName) {
    return state.search.instances.getIn([instanceName, 'favouriteId']);
}

export function isSearchRunning(state, instanceName) {
    return state.search.instances.getIn([instanceName, 'searchRunning'], false);
}

export function getFormUrl(state, instanceName) {
    if (isCatalogSearch(state, instanceName)) {
        return state.search.instances.getIn([instanceName, 'queryFormURL']);
    }
    else if (isRelshipSearch(state, instanceName)) {
        return state.search.instances.getIn([instanceName, 'formURL']);
    }
    else {
        const classname = getClassname(state, instanceName);
        return state.search.operationByClass.getIn([classname, 'opInfo', 'form_url']);
    }
}

export function relshipHasSearch(state, instanceName) {
    const instance = getInstance(state, instanceName);
    return instance.has('searchFormData') && instance.has('submitURL');
}

export function getSubmitUrl(state, instanceName) {
    if (isCatalogSearch(state, instanceName)) {
        return state.search.instances.getIn([instanceName, 'catalogTableURL']);
    }
    else if (isRelshipSearch(state, instanceName)) {
        const instance = getInstance(state, instanceName);
        if (relshipHasSearch(state, instanceName)) {
            return instance.get('submitURL');
        }
        else {
            const relship_url =
                getRelshipUrl(instance.get('parentObject'), instance.get('relshipName'));
            if (relship_url === undefined) {
                return undefined;
            }
            return `${relship_url}?_as_table=${instance.get('tableName', '')}`;
        }
    }
    else {
        const classname = getClassname(state, instanceName);
        return state.search.operationByClass.getIn([classname, 'opInfo', 'submit_url']);
    }
}

export function getSearchValues(state, instanceName) {
    return state.search.instances.getIn([instanceName, 'searchValues']);
}

export function getSearchRequestData(state, instanceName) {
    const instance = getInstance(state, instanceName);
    if (isCatalogSearch(state, instanceName)) {
        return instance
            .get('callingFormData')
            .setIn(['query_data', 'values'], instance.get('searchValues'))
            .setIn(
                ['query_data', 'json_field_types'],
                instance.getIn(['searchFormData', 'original', 'json_field_types']));
    }
    else if (isRelshipSearch(state, instanceName)) {
        if (relshipHasSearch(state, instanceName)) {
            return {
                object_navigation_id: null,
                tableName: instance.get('tableName', ''),
                values: instance.get('searchValues') /* ,
                operation_state: instance.getIn(['searchFormData', 'original', 'operation_state']) */
            };
        }
        else {
            return {};
        }
    }
    else {
        const {operationByClass} = state.search;
        const opState = operationByClass.get(instance.get('classname'));
        return {
            object_navigation_id: null,
            values: instance.get('searchValues'),
            operation_state: opState.getIn(['opData', 'operationState'])
        };
    }
}

export function getSearchResult(state, instanceName) {
    return state.search.instances.getIn([instanceName, 'searchResult']);
}

export function getSearchError(state, instanceName) {
    return state.search.instances.getIn([instanceName, 'searchError']);
}

export function getFavouriteForInstance(state, instanceName) {
    return state.search.favouritesByClass.getIn([
        getClassname(state, instanceName), 'favourites', getFavouriteId(state, instanceName)]);
}

export function getSpecialResultLink(state, instanceName) {
    const instance = state.search.instances.get(instanceName);
    const favouriteId = instance.get('favouriteId');
    return getFavouriteResultLink(state, instance.get('classname'), favouriteId);
}

export function hasSpecialFavourite(state, instanceName) {
    return isSpecialFavourite(state,
        getClassname(state, instanceName),
        getFavouriteId(state, instanceName));
}

export function getOriginalCatalogSearchFormData(state, instanceName) {
    return state.search.instances.getIn([instanceName, 'searchFormData', 'original']);
}

export function getNotYetSearched(state, instanceName) {
    return Boolean(state.search.instances.getIn([instanceName, 'notYetSearched'], true));
}

export function getSearchOnNavigate(state, instanceName) {
    return state.search.instances.getIn([instanceName, 'searchOnNavigate']);
}
