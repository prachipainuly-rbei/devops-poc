/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Panel.jsx 184479 2018-09-27 08:27:18Z mbr $"
 */

import React from 'react';
import Tab from '../../layouts/Tab.jsx';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {Console, prefixNS} from '../../helpers';
import connect from '../connect';

class TabWrapper extends React.Component {
    constructor(props) {
        super(props);
        this.onSelectTab = this.onSelectTab.bind(this);
        this.state = {
            activeKey: 1
        };
    }

    onSelectTab(key) {
        this.setState({activeKey: key});
    }

    render() {
        return (
            <div className={prefixNS('table-setting-panels')}>
                <Tab.Container
                    id="table-setting-panels"
                    activeKey={this.state.activeKey}
                    onSelect={this.onSelectTab}>
                    <Tab.Bar onSelectFromMenu={this.onSelectTab}>{this.props.tabTitles}</Tab.Bar>
                    <Tab.Content>{this.props.tabPanes}</Tab.Content>
                </Tab.Container>
            </div>
        );
    }
}

TabWrapper.propTypes = {
    tabTitles: ImmutablePropTypes.list,
    tabPanes: ImmutablePropTypes.list,
};

class SettingPanels extends React.Component {
    constructor(props) {
        super(props);
        this.panels = [];
    }

    componentDidMount() {
        this.props.registerPanel(this);
    }

    dispatchSettings() {
        this.panels.forEach(panel => {
            if (panel.dispatchSettings) {
                panel.dispatchSettings();
            } else {
                Console.warn('Panel should implement a dispatchSettings() callback');
            }
        });
    }

    resetSettings() {
        this.panels.forEach(panel => {
            if (panel.resetSettings) {
                panel.resetSettings();
            } else {
                Console.warn('Panel should implement a resetSettings() callback');
            }
        });
    }

    render() {
        this.panels = [];

        const {settingPanels} = this.props;

        if (settingPanels === undefined || settingPanels.count() === 0) {
            return null;
        }

        const titledPanels = settingPanels.filter(Panel => Panel.settingsTitle !== undefined);
        const untitledPanels = settingPanels.filter(Panel => Panel.settingsTitle === undefined);

        const tabTitles = titledPanels.map((Panel, idx) =>
            <Tab.Title key={String(idx)} eventKey={idx + 1} title={Panel.settingsTitle()}/>
        );
        const tabPanes = titledPanels.map((Panel, idx) =>
            <Tab.Pane key={String(idx)} eventKey={idx + 1}>
                <div className={prefixNS('table-setting-panel-wrapper')}>
                    <Panel registerPanel={c => this.panels.push(c)}/>
                </div>
            </Tab.Pane>
        );

        if (untitledPanels.count() > 0) {
            tabTitles.push(
                <Tab.Title key="miscellaneous" eventKey={titledPanels.count() + 1} title={""}/>
            );
            tabPanes.push(
                <Tab.Pane>
                    {untitledPanels.map((Panel, idx) =>
                        <Panel key={String(idx)} registerPanel={c => {this.panels.push(c)}}/>
                     )}
                </Tab.Pane>
            );
        }

        return (
            <TabWrapper tabTitles={tabTitles} tabPanes={tabPanes}/>
        );
    }
}

SettingPanels.propTypes = {
    settingPanels: ImmutablePropTypes.list,
    registerPanel: PropTypes.func
};

const mapStateToProps = (state) => ({
    settingPanels: state.settingPanels
});

export default connect(mapStateToProps)(SettingPanels);
