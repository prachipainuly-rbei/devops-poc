/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Icon.jsx 185288 2018-10-19 07:13:13Z bwf $"
 */

import React from 'react';
import {classNames, PropTypes} from 'cs-web-components-externals';
import {prefixNS, getIcon, Console} from '../helpers';

import broken_icon from '../../../resources/cis_broken.svg';

/**
 * The component display image in predefined sizes.
 *
 * React Properties
 * ----------------
 *
 * +------------------+--------------+--------------+---------------------------------+
 * | Property         | Type         | Default      | Use                             |
 * +==================+==============+==============+=================================+
 * | name             | string       | -            | Name of configured icon         |
 * +------------------+--------------+--------------+---------------------------------+
 * | src              | string       | -            | URL to load the icon            |
 * +------------------+--------------+--------------+---------------------------------+
 * | size             | string       | sm           | Size of that image. Can be:     |
 * |                  |              |              | sm, md, lg                      |
 * +------------------+--------------+--------------+---------------------------------+
 *
 * .. note::
 *    If ``src`` is given, it will be used to load the icon. Otherwise the component tries
 *    to generate the url for configured icon according to the ``name``.
 *
 * @class Icon
 */
export default class Icon extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            src: this.getUrl(props)
        };
        this.onImageError = this.onImageError.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.src !== this.props.src || nextProps.name !== this.props.name) {
            this.setState({
                src: this.getUrl(nextProps)
            });
        }
    }

    getUrl(props) {
        const {name, src} = props;
        return src || (name ? getIcon(name) : undefined);
    }

    onImageError() {
        this.setState({
            src: broken_icon
        });
    }

    render() {
        const {size, className, ...others} = this.props;
        delete others.name;
        if (size === "xs" ||
            size === "xl" ||
            size === "xxs" ||
            size === "xxl") {
            Console.warn(`The prop \`size\` of value \`${size}\` supplied to \`Icon\` `
                + 'is deprecated. Please use one of ["sm","md","lg"]'
            );
        }
        const clsnames = classNames(
            className,
            prefixNS('icon'),
            prefixNS(`icon-size-${size}`));
        return (
            <img
                {...others}
                src={this.state.src}
                className={clsnames}
                onError={this.onImageError}
            />
        );
    }
}

Icon.propTypes = {
    name: PropTypes.string,
    src: PropTypes.string,
    className: PropTypes.string,
    size: PropTypes.oneOf([
        'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'
    ])
};

Icon.defaultProps = {
    size: 'sm'
};

Icon.BLANK_ICON_SRC = 'data:image/svg+xml;charset=utf8,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%3E%3C/svg%3E';
