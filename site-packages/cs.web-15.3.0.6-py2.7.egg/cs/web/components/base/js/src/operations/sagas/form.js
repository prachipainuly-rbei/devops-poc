/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: form.js 174905 2018-03-22 15:28:51Z cla $"
 */

import {ReduxSaga} from 'cs-web-components-externals';
import {changeFormValues} from '../../form/actions/form_with_operations.js';
import {selectState} from '../helpers.js';
import {callDialogHooks} from '../actions/form.js';
import {ACTIONS} from '../constants.js';

const {put, takeEvery} = ReduxSaga.effects;

/**
 * Listens for asynchronous results from backend-based
 * dialog hooks.
 */
export function* dispatchBackendHookResultsSaga(action) {
    const {instanceName, nextState} = action.payload;

    const currentState = yield selectState(instanceName);
    if (currentState.get('values') !== nextState.values ||
        currentState.get('wizardProgress') !== nextState.wizardProgress ||
        currentState.get('registers') !== nextState.registers ||
        currentState.get('preventSubmitReasons') !== nextState.preventSubmitReasons) {

        yield put(changeFormValues(instanceName, nextState));
    }
}

/**
 * Listens for requests to change the values for an operation.
 *
 * This will:
 * - merge the change values into the operation state,
 * - invoke dialog hooks and merge the results
 * - and finally persist changes to the store
 */
export function* changeFormSaga(action) {
    const {instanceName, values, unchecked} = action.payload;
    const state = yield selectState(instanceName);

    const currentValues = state.get('values');
    let nextValues = currentValues.merge(values);

    const currentRegisters = state.get('registers');
    let nextRegisters = currentRegisters;

    const currentPreventSubmitReasons = state.get('preventSubmitReasons');
    let nextPreventSubmitReasons = currentPreventSubmitReasons;

    const currentUnchecked = state.get('unchecked');
    const nextUnchecked = unchecked ?
                          currentUnchecked.merge(values.keys()) :
                          currentUnchecked.subtract(values.keys());

    if (!unchecked) {
        const params = {
            oldValues: currentValues,
            newValues: nextValues,
            changes: values,
            operationState: state.get('operationState'),
            registers: nextRegisters,
            preventSubmitReasons: nextPreventSubmitReasons,
            wizardProgress: state.get('wizardProgress'),
        };

        const dialogHooks = state.get('dialogHooks');
        if (dialogHooks) {
            const hookResult = yield put(callDialogHooks(instanceName, dialogHooks, params));
            nextValues = hookResult.values;
            nextRegisters = hookResult.registers;
            nextPreventSubmitReasons = hookResult.preventSubmitReasons;
        }
    }

    if (currentValues !== nextValues ||
        currentUnchecked !== nextUnchecked ||
        currentRegisters !== nextRegisters ||
        currentPreventSubmitReasons !== nextPreventSubmitReasons) {

        yield put(changeFormValues(
            instanceName,
            {
                values: nextValues,
                unchecked: nextUnchecked,
                registers: nextRegisters,
                preventSubmitReasons: nextPreventSubmitReasons,
            }
        ));
    }
}

export default function* setupSagas() {
    yield takeEvery(ACTIONS.CHANGE_OPERATION_VALUES,
                    changeFormSaga);
    yield takeEvery(ACTIONS.DISPATCH_BACKEND_HOOK_RESULTS,
                    dispatchBackendHookResultsSaga);
}
