/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ContentBlock.jsx 185584 2018-10-25 09:30:42Z vov $"
 */

import React from 'react';
import {ContentBlock, getIcon, ContentBlockGroup,
    ButtonGroup, Button, ButtonToolbar, Overlays} from 'cs-web-components-base';
import {storiesOf, centered, knobs} from 'cs-web-components-storybook';
import {largeTextBlock, icons, colors} from './util.jsx';

const contentBlockDefault = `
           ContentBlock displays its content in a frame with a header
           in which its title and - optionally - a toolbar will be rendered.
           ContentBlocks may be configured as collapsible, in which case a
           control next to the title area can be used to toggle the expansion
           state of the frame.
`;

const dropdownItems = [
    <Overlays.MenuItem key="menuItem1">Currently</Overlays.MenuItem>,
    <Overlays.MenuItem key="menuItem2">Still uses</Overlays.MenuItem>,
    <Overlays.MenuItem key="menuItem3">React MenuItem</Overlays.MenuItem>
];

storiesOf('ContentBlock', {})
    .addDecorator(centered)
    .addWithInfo(
        'default',
        contentBlockDefault,
        () => (
            <ContentBlock title={knobs.text('title', 'Titel')}>
                <ContentBlock.Body>
                    {knobs.text('text', largeTextBlock)}
                </ContentBlock.Body>
            </ContentBlock>
        )
    ).addWithInfo(
        'toolbar',
        contentBlockDefault,
        () => (
            <div style={{width: "50%", margin: "auto"}}>
                <ContentBlock title={knobs.text('title', 'Titel')}>
                    <ContentBlock.Header>
                        <ButtonToolbar>
                            <ButtonGroup
                                withRedundantDropdown={
                                    knobs.boolean("withRedundantDropdown", true) ? true : false}>
                                <Button.IconButton
                                    iconSrc={getIcon(knobs.select("iconSrc1",
                                        icons, "csapp_error_protocol"))}
                                    buttonStyle={knobs.select("buttonStyle1", colors, "outline")}
                                    title="IconButton" />
                                <Button.IconButton
                                    iconSrc={getIcon(knobs.select("iconSrc2",
                                        icons, "csapp_error_protocol"))}
                                    title="IconButton"
                                    buttonStyle={knobs.select("buttonStyle2", colors, "outline")}/>
                                <Button.IconButton
                                    iconSrc={getIcon(knobs.select("iconSrc3",
                                        icons, "csapp_error_protocol"))}
                                    title="IconButton"
                                    buttonStyle={knobs.select("buttonStyle3", colors, "outline")}/>
                                <Overlays.DropdownIconButton
                                    key="DropdownIconButton"
                                    iconName="csweb_option_horizontal"
                                    noCaret
                                    title="DropdownIconButton"
                                    buttonStyle={knobs.select("buttonStyle", colors, "outline")}
                                    id="DropdownIconButton">
                                    {dropdownItems}
                                </Overlays.DropdownIconButton>
                            </ButtonGroup>
                        </ButtonToolbar>
                    </ContentBlock.Header>
                    <ContentBlock.Body>
                        {knobs.text('text', largeTextBlock)}
                    </ContentBlock.Body>
                </ContentBlock>
            </div>
        )
    ).addWithInfo(
        'ContentBlockGroup',
        contentBlockDefault,
        () => (
            <ContentBlockGroup>
                <ContentBlock title={knobs.text('title1', 'Titel')}>
                    <ContentBlock.Body>
                        {knobs.text('text1', largeTextBlock)}
                    </ContentBlock.Body>
                </ContentBlock>
                <ContentBlock title={knobs.text('title2', 'Titel')}>
                    <ContentBlock.Body>
                        {knobs.text('text2', largeTextBlock)}
                    </ContentBlock.Body>
                </ContentBlock>
                <ContentBlock title={knobs.text('title3', 'Titel')}>
                    <ContentBlock.Body>
                        {knobs.text('text3', largeTextBlock)}
                    </ContentBlock.Body>
                </ContentBlock>
            </ContentBlockGroup>
        )
    );
