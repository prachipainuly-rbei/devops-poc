/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: context-wrapper.jsx 167723 2017-11-03 08:55:08Z gwe $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {connect} from 'cs-web-components-externals';
import {setContextObjects} from '../actions/context-objects.js';

/**
 * ``ContextObjectSetter`` provides a callback function ``onSelect`` to its
 * single wrapped component. This callback can be used to set the selected
 * object(s) for a selection whose name is given in the ``setPath`` property.
 *
 * React Properties
 * ----------------
 *
 * +------------+------------+--------------+---------------------------------+
 * | Property   | Type       | Default      | Use                             |
 * +============+============+==============+=================================+
 * | setPath    | string     | -            | Path for local selection        |
 * +------------+------------+--------------+---------------------------------+
*/
class ContextObjectSetter extends React.Component {
    constructor(props) {
        super(props);
        this.selectCallback = this.selectCallback.bind(this);
    }

    selectCallback(...selectedObjects) {
        const {setPath, setContextObjects} = this.props;
        setContextObjects(setPath, ...selectedObjects);
    }

    render() {
        return React.cloneElement(
                    React.Children.only(this.props.children),
                    {onSelect: this.selectCallback});
    }
}
ContextObjectSetter.propTypes = {
    setPath: PropTypes.string.isRequired,
    setContextObjects: PropTypes.func.isRequired
};

/**
 * ``ContextObjectWrapper`` takes the object(s) stored under the selection named
 * by the property ``readPath``, and supplies them as ``contextObjects`` to its
 * single wrapped child component. The last object in that list (or undefined if
 * the list is empty) is supplied as ``contextObject``. This tracks the behaviour
 * of selection in tables: the last object in the list is the last that has been
 * selected.
 *
 * In addition, an ``onSelect`` callback is supplied, that serves to set a
 * dependent selection. The name of that selection is formed by appending the
 * value of the property ``setTag`` to ``readPath``, separated by ``/``.
 *
 * React Properties
 * ----------------
 *
 * +------------+------------+--------------+---------------------------------+
 * | Property   | Type       | Default      | Use                             |
 * +============+============+==============+=================================+
 * | readPath   | string     | -            | Path to read selection from     |
 * +------------+------------+--------------+---------------------------------+
 * | setTag     | string     | 'default'    | Name for local selection        |
 * +------------+------------+--------------+---------------------------------+
 *
 */
class ContextObjectWrapper extends React.Component {
    constructor(props) {
        super(props);
        this.selectCallback = this.selectCallback.bind(this);
    }

    selectCallback(...selectedObjects) {
        const {readPath, setTag, setContextObjects} = this.props;
        const targetPath = `${readPath}/${setTag}`;
        setContextObjects(targetPath, ...selectedObjects);
    }

    render() {
        const newProps = {
            onSelect: this.selectCallback,
            contextObject: this.props.contextObject,
            contextObjects: this.props.contextObjects
        };
        return React.cloneElement(React.Children.only(this.props.children), newProps);
    }
}
ContextObjectWrapper.propTypes = {
    contextObject: ImmutablePropTypes.map,
    contextObjects: ImmutablePropTypes.list.isRequired,
    readPath: PropTypes.string.isRequired,
    setContextObjects: PropTypes.func.isRequired,
    setTag: PropTypes.string
};
ContextObjectWrapper.defaultProps = {
    setTag: 'default'
};

function mapStateToProps(state, ownProps) {
    const path = ownProps.readPath.split('/');
    const {objectsById, contextObjects} = state;
    const objs =
        contextObjects.getIn(path, Immutable.List())
            .map(oid => objectsById.get(oid))
            .filter(obj => obj !== undefined);
    return {
        contextObject: objs.last(),
        contextObjects: objs
    };

}

const ConnectedContextObjectSetter =
    connect(undefined, {setContextObjects})(ContextObjectSetter);
const ConnectedContextObjectWrapper =
    connect(mapStateToProps, {setContextObjects})(ContextObjectWrapper);

export {
    ConnectedContextObjectSetter as ContextObjectSetter,
    ConnectedContextObjectWrapper as ContextObjectWrapper
};
