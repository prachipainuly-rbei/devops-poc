/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchBarHeader.jsx 180316 2018-07-11 07:48:42Z yaz $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {formatStr} from '../i18n.js';
import {resetSearch, setSearchFieldsFromDialog} from './actions/instances.js';
import {isSearchRunning, isClassSearch, getSearchValues} from './selectors/instances.js';
import Button from '../components/Button.jsx';
import ButtonToolbar from '../components/ButtonToolbar.jsx';
import SearchFavourites from './SearchFavourites.jsx';
import SearchDialog from './SearchDialog.jsx';
import cis_undo_success from '../../../resources/cis_undo_success.svg';
import cis_search_document_primary from '../../../resources/cis_search-document_primary.svg';

class SearchBarHeader extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showSearchDialog: false
        };
    }

    openSearchDialog() {
        this.setState({showSearchDialog: true});
    }

    closeSearchDialog() {
        this.setState({showSearchDialog: false});
    }

    closeAndSaveSearchDialog(fields) {
        const {instanceName, setSearchFieldsFromDialog} = this.props;
        this.setState({showSearchDialog: false});
        setSearchFieldsFromDialog(instanceName, fields);
    }

    renderSearchDialog() {
        if (!this.state.showSearchDialog) {
            return null;
        }
        const {instanceName, searchValues} = this.props;
        return (
            <SearchDialog
                instanceName={instanceName}
                searchValues={searchValues}
                onSave={values => this.closeAndSaveSearchDialog(values)}
                onCancel={() => this.closeSearchDialog()}
            />
        );
    }

    render() {
        const {
            instanceName, isSearchRunning, isClassSearch, resetSearch
        } = this.props;
        return (
            <ButtonToolbar>
                {this.renderSearchDialog()}
                {isClassSearch ? (
                    <Button.IconButton
                        disabled={isSearchRunning}
                        title={formatStr('form_name')}
                        onClick={() => {this.openSearchDialog()}}
                        iconSrc={cis_search_document_primary}
                        buttonStyle="primary" />
                ) : null}
                <Button.IconButton
                     disabled={isSearchRunning}
                    title={formatStr('reset_search')}
                    onClick={() => resetSearch(instanceName)}
                    iconSrc={cis_undo_success}
                    buttonStyle="warning" />
                {isClassSearch ? (
                    <SearchFavourites
                        instanceName={instanceName} />
                ) : null}
            </ButtonToolbar>
        );
    }
}
SearchBarHeader.propTypes = {
    instanceName: PropTypes.string.isRequired,
    // store
    isSearchRunning: PropTypes.bool.isRequired,
    isClassSearch: PropTypes.bool.isRequired,
    searchValues: ImmutablePropTypes.map,
    // actions
    resetSearch: PropTypes.func.isRequired,
    setSearchFieldsFromDialog: PropTypes.func.isRequired
};

function mapStateToProps(state, ownProps) {
    const {instanceName} = ownProps;
    return {
        isSearchRunning: isSearchRunning(state, instanceName),
        isClassSearch: isClassSearch(state, instanceName),
        searchValues: getSearchValues(state, instanceName)
    };
}

const actions = {resetSearch, setSearchFieldsFromDialog};

export default connect(mapStateToProps, actions)(SearchBarHeader);
