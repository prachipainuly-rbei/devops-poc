/*
 * Copyright (C) 1990-2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: CheckBoxMenuItem.jsx 183550 2018-09-07 13:08:38Z bwf $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {storiesOf, centered} from 'cs-web-components-storybook';
import {FormControl, Button} from 'cs-web-components-base';

export class CBMIDemo extends React.PureComponent {
    constructor(...args) {
        super(...args);
        this.state = {};
        this.toggle = this.toggle.bind(this);
    }

    componentWillMount() {
        const {defaultChecked} = this.props;

        if (typeof defaultChecked === 'boolean') {
            this.setState({checked: defaultChecked});
        }
    }

    toggle() {
        this.setState(prevState => ({checked: !prevState.checked}));
    }

    render() {
        const {defaultChecked, ...others} = this.props; // eslint-disable-line no-unused-vars
        const {checked} = this.state;

        return (
            <FormControl.CheckBoxMenuItem
                {...others}
                name='CBMIDemo'
                checked={checked}
                onChange={this.toggle} />
        );
    }
}

CBMIDemo.propTypes = {
    label: PropTypes.string.isRequired,
    tooltip: PropTypes.string,
    defaultChecked: PropTypes.bool,
    disabled: PropTypes.bool
};


storiesOf('Form Control', {})
    .addDecorator(centered)
    .add(
        'CheckBoxMenuItem',
        () => (
            <Button.DropdownTextButton id='cbmi_demo_dropdown'
                                       label='Check Multiple Options'
                                       defaultOpen={true}>
                <CBMIDemo label='Unchecked'
                          defaultChecked={false}
                          tooltip='CBMI unchecked tooltip' />
                <CBMIDemo label='Checked'
                          defaultChecked
                          tooltip='CBMI checked tooltip' />
                <CBMIDemo label='Indetermined'
                          tooltip='CBMI indetermined tooltip' />
                <CBMIDemo label='Disabled'
                          disabled
                          defaultChecked={false}
                          tooltip='Disabled Tooltip' />
                <CBMIDemo label='No Tooltip'
                          defaultChecked={false} />
            </Button.DropdownTextButton>
        )
    );
