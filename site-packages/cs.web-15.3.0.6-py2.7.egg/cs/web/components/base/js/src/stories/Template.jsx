/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Template.jsx 183405 2018-09-05 14:09:41Z vov $"
 */

import React from 'react';
import {storiesOf, centered} from 'cs-web-components-storybook';
// DO NOT import components using relative path! Only use Registry or
// from component libs(defined externals)


// You should use knobs as dynamic variables inside your stories.
// Make sure that all properties are exposed this way.
// The knob should be named after the property.
// Example:
// import {knobs} from 'cs-web-components-storybook';
// <Button.TextButton
//     label={knobs.text('label', 'TextButton')}
//     title={knobs.text('title', 'TextButton')}
//     disabled={knobs.boolean("disabled")}/>

// Modules should be marked as a module and be nested.
// Example:
// storiesOf('Button - Modul/TextButton', {})
//     .addWithInfo('Loading', () => {
//          return (
//              // TODO: Implement the component in a loading state.
//      );
//  })
// storiesOf('Button - Modul/DropdownIconButton', {})
//     .addWithInfo('Loading', () => {
//          return (
//              // TODO: Implement the component in a loading state.
//      );
//  })

// The following stories do not necessarily need to be implemented.
// Check whether they apply to your component
// and if other states are relevant for your component as well.
// You do not need to write stories for states handled outside of the component.

storiesOf('Component Name', {})
    .addDecorator(centered)
    .addWithInfo('Onboarding State', () => {
        return (
            // TODO: The User sees the component the first time. How can you help him getting his tasks done?
            <p>Onboarding State</p>
        );
    })
    .addWithInfo('Loading State', () => {
        return (
            // TODO: Implement the component in a loading state.
            <p>Loading State</p>
        );
    })
    .addWithInfo('Empty State', () => {
        return (
            // TODO: Implement the component when there is nothing to be rendered.
            <p>Empty State</p>
        );
    })
    .addWithInfo('Ideal State', () => {
        return (
            // TODO: Implement the componenent in the ideal state.
            <p>Ideal State</p>
        );
    })
    .addWithInfo('Overcrowded State', () => {
        return (
            // TODO: Implement the componenent when there are many items or a very big dataset to be rendered.
            <p>Overcrowded State</p>
        );
    })
    .addWithInfo('Error State', () => {
        return (
            // TODO: Implement the component when an error occures.
            <p>Error State</p>
        );
    });
