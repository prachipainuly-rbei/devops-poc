/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: form_with_operations.js 177299 2018-05-17 11:50:22Z cla $"
 */

const ACTION_PREFIX = `${componentNameSpace}-OPERATIONS:`;

export const INIT_OP_INSTANCE = `${ACTION_PREFIX}INIT_OP_INSTANCE`;
export const CLEAR_OP_INSTANCE = `${ACTION_PREFIX}CLEAR_OP_INSTANCE`;
export const OPERATION_IS_STARTING = `${ACTION_PREFIX}OPERATION_IS_STARTING`;
export const INIT_OP_STATE = `${ACTION_PREFIX}INIT_OP_STATE`;
export const CLEAR_OP_STATE = `${ACTION_PREFIX}CLEAR_OP_STATE`;
export const OPEN_FORM = `${ACTION_PREFIX}OPEN_FORM`;
export const CLOSE_FORM = `${ACTION_PREFIX}CLOSE_FORM`;
export const CHANGE_FORM_VALUES = `${ACTION_PREFIX}CHANGE_FORM_VALUES`;

export const FORM_CHECK_PENDING = `${ACTION_PREFIX}OP_FORM_CHECK_PENDING`;
export const FORM_CHECK_DONE = `${ACTION_PREFIX}OP_FORM_CHECK_DONE`;

export const ADD_FILES = `${ACTION_PREFIX}FORM_ADD_FILES`;
export const REMOVE_FILES = `${ACTION_PREFIX}FORM_REMOVE_FILES`;

export const OPERATION_SUCCEEDED = `${ACTION_PREFIX}OPERATION_SUCCEEDED`;
export const OPERATION_FAILED = `${ACTION_PREFIX}OPERATION_FAILED`;
export const OPERATION_CANCELLED = `${ACTION_PREFIX}OPERATION_CANCELLED`;

// TODO cla deprecated in 15.3. Support 15.2 legacy result handling.
export const SET_SUBMIT_HANDLER = `${ACTION_PREFIX}SET_SUBMIT_HANDLER`;

/**
 * Dispatched before operation state is initialized.
 * Operation is running, but has not been initialized
 * (it is waiting for asynchronuous response from server)
 */
export function operationIsStarting(instanceName) {
    return {
        type: OPERATION_IS_STARTING,
        payload: {instanceName},
    };
}

/**
 * Initialize operation state for an operation-handler in the store.
 * This needs to be called before runOperation can be invoked, and
 * is usually done when an OperationHandler component is mounted.
 */
export function initOperationInstance(instanceName) {
    return {
        type: INIT_OP_INSTANCE,
        payload: {instanceName}
    };
}

/**
 * Clear/remove operation state for an operation-handler in the store.
 * This needs to be called, when the handler goes out of scope, and
 * is usually invoked when an OperationHandler component is unmounted.
 */
export function clearOperationInstance(instanceName) {
    return {
        type: CLEAR_OP_INSTANCE,
        payload: {instanceName}
    };
}

// eslint-disable-next-line max-params
export function initOperationState(
    instanceName,
    opInfo,
    opState,
    opParams,
    nonBlocking = false,
    hasFiles = false
) {
    return {
        type: INIT_OP_STATE,
        payload: {
            instanceName, opInfo, opState, opParams, nonBlocking, hasFiles
        }
    };
}

export function clearOperationState(instanceName) {
    return {
        type: CLEAR_OP_STATE,
        payload: {instanceName},
    };
}

export function openForm(instanceName) {
    return {
        type: OPEN_FORM,
        payload: {instanceName},
    };
}

export function changeFormValues(
    instanceName,
    {
        values, unchecked, registers, wizardProgress,
        preventSubmitReasons, operationState, dialogHooks,
    }
) {
    return {
        type: CHANGE_FORM_VALUES,
        payload: {
            instanceName,
            fields: {
                values,
                unchecked,
                registers,
                wizardProgress,
                preventSubmitReasons,
                operationState,
                dialogHooks,
            },
        }
    };
}

export function closeForm(instanceName) {
    return {
        type: CLOSE_FORM,
        payload: {instanceName},
    };
}

export function addFiles(instanceName, files) {
    return {
        type: ADD_FILES,
        payload: {instanceName, files},
    };
}

export function removeFiles(instanceName, files) {
    return {
        type: REMOVE_FILES,
        payload: {instanceName, files},
    };
}

export function formCheckPending(instanceName, field) {
    return {
        type: FORM_CHECK_PENDING,
        payload: {instanceName, field}
    };
}

export function formCheckDone(instanceName, field) {
    return {
        type: FORM_CHECK_DONE,
        payload: {instanceName, field}
    };
}

export function operationSucceeded(instanceName) {
    return {
        type: OPERATION_SUCCEEDED,
        payload: {instanceName}
    };
}

export function operationFailed(instanceName) {
    return {
        type: OPERATION_FAILED,
        payload: {instanceName}
    };
}

export function operationCancelled(instanceName) {
    return {
        type: OPERATION_CANCELLED,
        payload: {instanceName}
    };
}

export function setSubmitHandler(instanceName, onSuccess, onFailure) {
    return {
        type: SET_SUBMIT_HANDLER,
        payload: {instanceName, onSuccess, onFailure}
    };
}
