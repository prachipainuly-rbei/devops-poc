/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TreeContainer.jsx 174898 2018-03-22 14:54:34Z sla $"
 */

import React from 'react';
import {TreeExpandDialog} from './TreeExpander.jsx';
import {Toolbar, SEARCH_MODE_CONFIRM} from './Toolbar';
import ContentBlock from '../components/ContentBlock';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import {prefixNS, compose} from '../helpers.js';
import TreeRenderer from './TreeRenderer.jsx';
import TreeFilter from './TreeFilter.jsx';
import {formatStr} from '../i18n.js';
import Registry from './Registry.js';

import csweb_collapse from '../../../resources/cis_collapse_primary.svg';
import csweb_expand from '../../../resources/cis_expand_primary.svg';

/**
 * This module provides a HOC that renders a
 * :ref:`cs-web-components-base-components.ContentBlock.__default__`
 * displaying widgets for the tree's operations in the blocks toolbar area and the TitleRenderer
 * in the title area component.
 *
 * @module
 */

function ContentBlockLayout(tree, title, ...toolbars) {
    return (
        <ContentBlock collapsible={true}
                      expanded={true}
                      title={title}>
            <ContentBlock.Header>
                {toolbars}
            </ContentBlock.Header>
            <ContentBlock.Body>
                {tree}
            </ContentBlock.Body>
        </ContentBlock>
    );
}

function SimpleLayout(tree, title, ...toolbars) {
    return (
        <div className={prefixNS('tree-simple-layout')}>
            <div className={prefixNS('tree-simple-layout__toolbar')}>
                {toolbars}
            </div>
            {tree}
        </div>
    );
}

const TreeContainer = Layout => TreeRenderer => {
    class _TreeContainer extends React.Component {
        constructor(props) {
            super(props);
            this.onShowExpandModal = this.onShowExpandModal.bind(this);
            this.onHideExpandModal = this.onHideExpandModal.bind(this);
            this.onExpand = this.onExpand.bind(this);
            this.onCollapse = this.onCollapse.bind(this);
            this.state = {
                expandModalVisible: false,
                expandLevels: 2,
                displaySettings: false,
                toolbar: []
            };
        }

        componentDidMount() {
            this.initToolbar(this.props);
        }

        componentWillReceiveProps(nextProps) {
            if (this.props.disableExpansion !== nextProps.disableExpansion ||
                this.props.searchAdapter !== nextProps.searchAdapter) {
                this.initToolbar(nextProps);
            }
        }

        initToolbar(props) {
            const toolbar = [];
            if (!props.disableExpansion) {
                toolbar.push(
                    {
                        type: "button",
                        iconSrc: csweb_expand,
                        style: "primary",
                        title: formatStr('tree_expand_tooltip'),
                        func: this.onShowExpandModal
                    },
                    {
                        type: "button",
                        iconSrc: csweb_collapse,
                        style: "primary",
                        title: formatStr('tree_collapse_tooltip'),
                        func: this.onCollapse
                    }
                );
            }
            toolbar.push({
                type: "search",
                adapter: props.searchAdapter,
                mode: SEARCH_MODE_CONFIRM
            });
            this.setState({toolbar: toolbar});
        }

        onShowExpandModal() {
            this.setState({expandModalVisible: true});
        }

        onHideExpandModal() {
            this.setState({expandModalVisible: false});
        }

        onExpand(levels) {
            this.setState({
                expandModalVisible: false,
                expandLevels: levels
            });
            this.props.expandLevels(levels);
        }

        onCollapse() {
            this.props.collapseLevels();
        }

        render() {
            const wrapperClassName = classNames(
                prefixNS('tree-container'),
                {
                    [prefixNS('tree-container__focus')]: this.props.hasFocus,
                    [this.props.className]: this.props.className !== undefined
                }
            );

            return (
                <div className={wrapperClassName}>
                    {
                        Layout(
                            <TreeRenderer {...this.props}/>,
                            (this.props.TitleRenderer ?
                             <this.props.TitleRenderer {...this.props} /> :
                             (this.props.title || '')),
                            <Toolbar key='main' config={this.state.toolbar} />,
                            ((this.props.additionalToolbars &&
                              this.props.additionalToolbars.size > 0) ?
                             [this.props.additionalToolbars] :
                             null)
                        )
                    }
                    {/* ---- Dialog: Expand ---- */}
                    {this.state.expandModalVisible ?
                        (
                            <TreeExpandDialog
                                onCancel={this.onHideExpandModal}
                                onExpand={this.onExpand}
                                expandLevels={this.state.expandLevels}
                            />
                        ) : null
                    }
                </div>
            );
        }
    }

    _TreeContainer.propTypes = {
        className: PropTypes.string,
        hasFocus: PropTypes.bool,
        TitleRenderer: PropTypes.oneOfType([
            PropTypes.func,
            PropTypes.object
        ]),
        title: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.object
        ]),
        collapseLevels: PropTypes.func,
        expandLevels: PropTypes.func,
        searchAdapter: PropTypes.object,
        disableExpansion: PropTypes.bool,
        additionalToolbars: ImmutablePropTypes.list
    };

    _TreeContainer.defaultProps = {
        disableExpansion: false
    };

    return _TreeContainer;
};

const ContentBlockTreeContainer = TreeContainer(ContentBlockLayout);
export default ContentBlockTreeContainer;
ContentBlockTreeContainer.DefaultRenderer = Registry.registerTreeRenderer(
    'TreeContainer.DefaultRenderer',
    compose(
        TreeRenderer,
        TreeFilter.ShowSearchResults,
        ContentBlockTreeContainer
    )
);

export const SimpleTreeContainer = TreeContainer(SimpleLayout);
SimpleTreeContainer.DefaultRenderer = Registry.registerTreeRenderer(
    'SimpleTreeContainer.DefaultRenderer',
    compose(
        TreeRenderer,
        TreeFilter.ShowSearchResults,
        SimpleTreeContainer
    )
);
