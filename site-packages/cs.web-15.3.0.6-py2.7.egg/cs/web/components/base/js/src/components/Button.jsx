import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {Button as RbsButton} from 'react-bootstrap';
import {DropdownButton as RbsDropdownButton} from 'react-bootstrap';
import {ButtonGroup} from 'react-bootstrap';
import SVGIcon from './SVGIcon.jsx';
import {Console, prefixNS} from '../helpers';
import {classNames} from 'cs-web-components-externals';
import {SVGIconAndLabel} from "./IconAndLabel";
import Link from './navigation/Link.jsx';
import {formatStr} from '../i18n';

import csweb_collpased_icon from '../../../resources/cis_triangle-right.svg';
import csweb_expanded_icon from '../../../resources/cis_triangle-bottom.svg';
import csweb_cancel from '../../../resources/cis_remove_danger.svg';
import csweb_resize_small from '../../../resources/cis_resize-small_info.svg';
import csweb_resize_full from '../../../resources/cis_resize-full_info.svg';
import csweb_decrease_value from '../../../resources/cis_minus_danger.svg';
import csweb_increase_value from '../../../resources/cis_plus_success.svg';
import csweb_filter from '../../../resources/cis_filter_primary.svg';
import csweb_remove from '../../../resources/cis_remove_danger.svg';
import csweb_settings from '../../../resources/cis_cog_info.svg';
import csweb_edit from '../../../resources/cis_pencil_success.svg';

/**
 * The Button module provides different types of button components. All components in this
 * module receive the following properties:
 *
 * +-------------+--------+---------+---------------------------------------------------+
 * | Name        | Type   | Default | Description                                       |
 * +=============+========+=========+===================================================+
 * | buttonStyle | string | \-      | Determines the button style                       |
 * +-------------+--------+---------+---------------------------------------------------+
 * | className   | string | \-      | A custom css className to attach to the component |
 * +-------------+--------+---------+---------------------------------------------------+
 * | title       | string | \-      | A tooltip for the component                       |
 * +-------------+--------+---------+---------------------------------------------------+
 *
 * In addition to these properties, each component expects a custom set of properties,
 * corresponding to its rendered content.
 *
 * @module Button
 */

function makeButtonGroupWithTooltip(title) {
    return function ButtonGroupWithTooltip(props) {
        return (<ButtonGroup title={title} {...props}/>);
    };
}

const DOM_UNSAFE_PROPS = ['noCaret', 'pullRight', 'caret'];

// return copy of object props with known non-DOM props stripped
function stripNonDOMProperties(props) {
    const safeProperties = {
        ...props
    };
    for (const unsafeProp of DOM_UNSAFE_PROPS) {
        delete safeProperties[unsafeProp];
    }
    return safeProperties;
}

/**
 * TextButton is a simple button that displays a text label. In addition to the properties
 * in :ref:`cs-web-components-base-components.Button.__module__`, it receives the following
 * properties:
 *
 * +-------------+--------+-----------+---------------------------------------------------+
 * | Name        | Type   | Default   | Description                                       |
 * +=============+========+===========+===================================================+
 * | buttonStyle | string | "outline" | Determines button style                           |
 * +-------------+--------+-----------+---------------------------------------------------+
 * | label       | string | \-        | The label that is displayed in the button         |
 * +-------------+--------+-----------+---------------------------------------------------+
 * | onClick     | func   | \-        | A callback function, which is executed when the   |
 * |             |        |           | button is pushed.                                 |
 * +-------------+--------+-----------+---------------------------------------------------+
 *
 */
export class TextButton extends React.Component {
    render() {
        const {buttonStyle, label, title, className, caret, ...others} = this.props;
        const cls = classNames(
            prefixNS('text-button'),
            prefixNS(`semantic-button-${buttonStyle}`),
            className);
        const content = label || title;
        return (
            <RbsButton
                aria-label={title}
                bsStyle={buttonStyle === 'link' ? 'link' : 'default'}
                className={cls}
                {...stripNonDOMProperties(others)}
            >
                {content}
                {caret ? <span key={'caret'} className={'caret'}/> : null}
            </RbsButton>
        );
    }
}
TextButton.propTypes = {
    buttonStyle: PropTypes.string,
    label: PropTypes.node,
    title: PropTypes.string,
    className: PropTypes.string,
    caret: PropTypes.bool,
};
TextButton.defaultProps = {
    buttonStyle: "outline"
};

/**
 * A React component that renders a button with a dropdown menu which contains the
 * provided children. In addition to the properties
 * in :ref:`cs-web-components-base-components.Button.__module__`, it receives the
 * following properties:
 *
 * +-------------+---------+-----------+---------------------------------------------------+
 * | Name        | Type    | Default   | Description                                       |
 * +=============+=========+===========+===================================================+
 * | buttonStyle | string  | "outline" | Determines the button style                       |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | label       | string  | \-        | The label that is displayed in the button         |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | children    | element | \-        | Child components are rendered in the buttons      |
 * |             |         |           | popup menu                                        |
 * +-------------+---------+-----------+---------------------------------------------------+
 *
 */
export class DropdownTextButton extends React.Component {
    constructor(props) {
        super(props);
        this.ButtonGroupWithTooltip = makeButtonGroupWithTooltip(props.title);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.title !== this.props.title) {
            this.ButtonGroupWithTooltip = makeButtonGroupWithTooltip(nextProps.title);
        }
    }

    render() {
        const {buttonStyle, children, className, label, title, ...others} = this.props;
        const cls = classNames(
            prefixNS('text-button'),
            prefixNS(`semantic-button-${buttonStyle}`),
            className);
        const content = <span>{label || title}</span>;
        return (
            <RbsDropdownButton
                componentClass={this.ButtonGroupWithTooltip}
                title={content}
                bsStyle={buttonStyle === 'link' ? 'link' : 'default'}
                className={cls}
                {...others}
            >
                {children}
            </RbsDropdownButton>
        );
    }
}
DropdownTextButton.propTypes = {
    buttonStyle: PropTypes.string,
    label: PropTypes.node,
    title: PropTypes.string,
    className: PropTypes.string
};
DropdownTextButton.defaultProps = {
    buttonStyle: "outline"
};

/**
 * This button contains an icon, either fetched by name from the backend, or by
 * a provided arbitrary source URL. Depending on the source you want to use, either
 * property ``iconName`` or ``iconSrc`` should be provided. In addition to the properties
 * in :ref:`cs-web-components-base-components.Button.__module__`, it receives the
 * following properties:
 *
 * +-------------+---------+-----------+---------------------------------------------------+
 * | Name        | Type    | Default   | Description                                       |
 * +=============+=========+===========+===================================================+
 * | tabIndex    | integer | \-        | Override the default tabIndex of this component   |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | buttonStyle | string  | "primary" | Determines the button style                       |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | iconName    | string  | \-        | Load an icon defined in the backend by its        |
 * |             |         |           | resource id                                       |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | iconSrc     | string  | \-        | Load an icon by the provided URL.                 |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | size        | string  | "sm"      | The icon size to be displayed.                    |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | onClick     | func    | \-        | A callback function, which is executed when the   |
 * |             |         |           | button is pushed.                                 |
 * +-------------+---------+-----------+---------------------------------------------------+
 *
 */
export class IconButton extends React.Component {
    render() {
        const {
            tabIndex, iconSrc, iconName, className, title, size, buttonStyle, ...others
        } = this.props;
        return (
            <RbsButton
                tabIndex={tabIndex}
                title={title}
                className={classNames(className,
                    prefixNS('icon-button'),
                    prefixNS(`icon-button-size-${size}`),
                    prefixNS(`icon-button-${buttonStyle}`),
                    prefixNS(`semantic-button-${buttonStyle}`))}
                {...stripNonDOMProperties(others)}
            >
                <SVGIcon
                    name={iconName}
                    src={iconSrc}
                    size={size}
                />
            </RbsButton>
        );
    }
}
IconButton.propTypes = {
    tabIndex: PropTypes.number,
    buttonStyle: PropTypes.string,
    iconName: PropTypes.string,
    iconSrc: PropTypes.string,
    size: PropTypes.string,
    title: PropTypes.string,
    className: PropTypes.string
};
IconButton.defaultProps = {
    buttonStyle: "primary",
    size: "sm"
};

/**
 * .. note::
 *
 *    This component has been deprecated. Please use
 *    :ref:`cs-web-components-base-overlays.DropdownIconButton.__default__` instead.
 *
 * A dropdown button that renders an icon as content. In addition to the properties
 * in :ref:`cs-web-components-base-components.Button.__module__`, it receives the
 * following properties:
 *
 * +-------------+---------+-----------+---------------------------------------------------+
 * | Name        | Type    | Default   | Description                                       |
 * +=============+=========+===========+===================================================+
 * | buttonStyle | string  | "primary" | Determines the button style                       |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | iconName    | string  | \-        | Load an icon defined in the backend by its        |
 * |             |         |           | resource id                                       |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | iconSrc     | string  | \-        | Load an icon by the provided URL.                 |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | size        | string  | "sm"      | The icon size to be displayed.                    |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | children    | element | \-        | Child components are rendered in the buttons      |
 * |             |         |           | popup menu                                        |
 * +-------------+---------+-----------+---------------------------------------------------+
 *
 */
export class DropdownIconButton extends React.Component {
    constructor(props) {
        super(props);
        this.ButtonGroupWithTooltip = makeButtonGroupWithTooltip(props.title);
    }

    componentDidMount() {
        Console.warn('DropdownIconButton is deprecated. '
                   + 'Please use Overlays.DropdownIconButton instead.');
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.title !== this.props.title) {
            this.ButtonGroupWithTooltip = makeButtonGroupWithTooltip(nextProps.title);
        }
    }

    render() {
        const {buttonStyle, children, className, iconName, iconSrc, size, ...others} = this.props;
        const content =
            <SVGIcon
                name={iconName}
                src={iconSrc}
                size={size}
            />;
        return (
            <RbsDropdownButton
                {...others}
                componentClass={this.ButtonGroupWithTooltip}
                title={content}
                className={classNames(className,
                    prefixNS('icon-button'),
                    prefixNS(`icon-button-size-${size}`),
                    prefixNS(`icon-button-${buttonStyle}`),
                    prefixNS(`semantic-button-${buttonStyle}`))}
            >
                {children}
            </RbsDropdownButton>
        );
    }
}
DropdownIconButton.propTypes = {
    buttonStyle: PropTypes.string,
    iconName: PropTypes.string,
    iconSrc: PropTypes.string,
    size: PropTypes.string,
    title: PropTypes.string,
    className: PropTypes.string
};
DropdownIconButton.defaultProps = {
    buttonStyle: "primary",
    size: "sm"
};


/**
 * This button renders both an icon and a text label. Depending on the source you want to use,
 * either use the property ``iconName`` for fetching from the backend or ``iconSrc``
 * for an arbitrary source url.
 * In addition to the properties in :ref:`cs-web-components-base-components.Button.__module__`,
 * it receives the following properties:
 *
 * +-------------+---------+-----------+---------------------------------------------------+
 * | Name        | Type    | Default   | Description                                       |
 * +=============+=========+===========+===================================================+
 * | buttonStyle | string  | "outline" | Determines the button style                       |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | label       | string  | \-        | The label that is displayed in the button         |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | iconName    | string  | \-        | Load an icon defined in the backend by its        |
 * |             |         |           | resource id                                       |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | iconSrc     | string  | \-        | Load an icon by the provided URL.                 |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | onClick     | func    | \-        | A callback function, which is executed when the   |
 * |             |         |           | button is pushed.                                 |
 * +-------------+---------+-----------+---------------------------------------------------+
 *
 */
export class IconTextButton extends React.Component {
    render() {
        const {
            iconSrc, iconName, caret, className, title, buttonStyle, label, ...others
        } = this.props;

        return (
            <RbsButton
                aria-label={title}
                className={classNames(className,
                    prefixNS('text-button'),
                    prefixNS(`icon-text-button-${buttonStyle}`),
                    prefixNS(`semantic-button-${buttonStyle}`))}
                {...stripNonDOMProperties(others)}
            >
                <SVGIconAndLabel
                    name={iconName}
                    src={iconSrc}
                    label={label}
                />
                {caret ? <span key={'caret'} className={'caret'}/> : null}
            </RbsButton>
        );
    }
}
IconTextButton.propTypes = {
    buttonStyle: PropTypes.string,
    iconName: PropTypes.string,
    iconSrc: PropTypes.string,
    className: PropTypes.string,
    title: PropTypes.string,
    label: PropTypes.node,
    caret: PropTypes.bool,
};
IconTextButton.defaultProps = {
    buttonStyle: "outline"
};


/**
 * A dropdown button that renders an icon and a text label. In addition to the properties
 * in :ref:`cs-web-components-base-components.Button.__module__`, it receives the
 * following properties:
 *
 * +-------------+---------+-----------+---------------------------------------------------+
 * | Name        | Type    | Default   | Description                                       |
 * +=============+=========+===========+===================================================+
 * | buttonStyle | string  | "outline" | Determines the button style                       |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | label       | string  | \-        | The label that is displayed in the button         |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | iconName    | string  | \-        | Load an icon defined in the backend by its        |
 * |             |         |           | resource id                                       |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | iconSrc     | string  | \-        | Load an icon by the provided URL.                 |
 * +-------------+---------+-----------+---------------------------------------------------+
 * | children    | element | \-        | Child components are rendered in the buttons      |
 * |             |         |           | popup menu                                        |
 * +-------------+---------+-----------+---------------------------------------------------+
 *
 */
export class DropdownIconTextButton extends React.Component {
    constructor(props) {
        super(props);
        this.ButtonGroupWithTooltip = makeButtonGroupWithTooltip(props.title);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.title !== this.props.title) {
            this.ButtonGroupWithTooltip = makeButtonGroupWithTooltip(nextProps.title);
        }
    }

    render() {
        const {
            buttonStyle, children, className, label, title, iconSrc, iconName, ...others
        } = this.props;
        const cls = classNames(
            prefixNS('text-button'),
            prefixNS(`icon-text-button-${buttonStyle}`),
            prefixNS(`semantic-button-${buttonStyle}`),
            className);
        const content =
            <SVGIconAndLabel
                label={label || title}
                name={iconName}
                src={iconSrc}
            />;
        return (
            <RbsDropdownButton
                componentClass={this.ButtonGroupWithTooltip}
                title={content}
                className={cls}
                {...others}
            >
                {children}
            </RbsDropdownButton>
        );
    }
}
DropdownIconTextButton.propTypes = {
    buttonStyle: PropTypes.string,
    label: PropTypes.node,
    title: PropTypes.string,
    className: PropTypes.string,
    iconSrc: PropTypes.string,
    iconName: PropTypes.string
};
DropdownIconTextButton.defaultProps = {
    buttonStyle: "outline"
};

/**
 * Renders a Link disguised as a TextButton. In addition to the properties
 * in :ref:`cs-web-components-base-components.Button.__module__` and
 * :ref:`cs-web-components-base-components.navigation.Link.__module__` it receives the following
 * properties:
 *
 * +-------------+--------+-----------+---------------------------------------------------+
 * | Name        | Type   | Default   | Description                                       |
 * +=============+========+===========+===================================================+
 * | label       | string | \-        | The label that is displayed in the button         |
 * +-------------+--------+-----------+---------------------------------------------------+
 */
export function LinkAsTextButton(props) {
    const {buttonStyle, label, title, className, ...others} = props;
    const cls = classNames(
        prefixNS('text-button'),
        prefixNS(`semantic-button-${buttonStyle}`),
        'btn',
        'btn-default',
        className);
    const content = label || title;
    return (
        <Link
            className={cls}
            title={title}
            {...others}
        >
            {content}
        </Link>
    );
}
LinkAsTextButton.propTypes = {
    buttonStyle: PropTypes.string,
    label: PropTypes.string,
    title: PropTypes.string,
    className: PropTypes.string
};
LinkAsTextButton.defaultProps = {
    buttonStyle: "outline"
};

/**
 * Renders a Link disguised as an IconTextButton. In addition to the properties
 * in :ref:`cs-web-components-base-components.Button.__module__` and
 * :ref:`cs-web-components-base-components.navigation.Link.__module__` it receives the following
 * properties:
 *
 * +-------------+---------+---------+--------------------------------------------------+
 * | Name        | Type    | Default | Description                                      |
 * +=============+=========+=========+==================================================+
 * | label       | string  | \-      | The label that is displayed in the button        |
 * +-------------+---------+---------+--------------------------------------------------+
 * | iconName    | string  | \-      | Load an icon defined in the backend by its       |
 * |             |         |         | resource id                                      |
 * +-------------+---------+---------+--------------------------------------------------+
 * | iconSrc     | string  | \-      | Load an icon by the provided URL.                |
 * +-------------+---------+---------+--------------------------------------------------+
 */
export function LinkAsIconTextButton(props) {
    const {iconSrc, iconName, className, title, buttonStyle, label, ...others} = props;
    const content = label || title;
    return (
        <Link
            title={title}
            className={classNames(
                prefixNS('text-button'),
                prefixNS(`icon-text-button-${buttonStyle}`),
                prefixNS(`semantic-button-${buttonStyle}`),
                'btn',
                'btn-default',
                className)}
            {...others}
        >
            <SVGIconAndLabel
                name={iconName}
                src={iconSrc}
                label={content}
            />
        </Link>
    );
}
LinkAsIconTextButton.propTypes = {
    buttonStyle: PropTypes.string,
    iconName: PropTypes.string,
    iconSrc: PropTypes.string,
    title: PropTypes.string,
    className: PropTypes.string,
    label: PropTypes.string
};
LinkAsIconTextButton.defaultProps = {
    buttonStyle: "outline"
};

function ConvenienceButton(props, buttonStyle, src) {
    const {...others} = props;
    delete others.buttonStyle;
    delete others.iconSrc;
    delete others.iconName;
    return (
        <IconButton
            buttonStyle={buttonStyle}
            iconSrc={src}
            {...others}/>
    );
}
export class DownloadButton extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            url: props.url
        };
        this.downloadDocument = this.downloadDocument.bind(this);
    }

    downloadDocument() {
        return window.open(this.state.url);
    }

    render() {
        const {...others} = this.props;
        delete others["url"];
        return (
            <IconButton
                {...others}
                title = {formatStr('file_preview_download_label')}
                onClick = {this.downloadDocument}
            >
            </IconButton>
        );
    }
}

DownloadButton.propTypes = {
    url: PropTypes.string
};

DownloadButton.defaultProps = {
    buttonStyle: "primary",
    iconName: "csweb_download"
};


export function CloseButton(props) {
    return ConvenienceButton(props, "auxiliary", csweb_remove);
}

export function CancelButton(props) {
    return ConvenienceButton(props, "danger", csweb_cancel);
}

export function ResizeSmallerButton(props) {
    return ConvenienceButton(props, "auxiliary", csweb_resize_small);
}

export function ResizeBiggerButton(props) {
    return ConvenienceButton(props, "auxiliary", csweb_resize_full);
}

export function SettingsButton(props) {
    return ConvenienceButton(props, "info", csweb_settings);
}

export function EditButton(props) {
    return ConvenienceButton(props, "auxiliary", csweb_edit);
}

export function ExpanderButtonExpanded(props) {
    return ConvenienceButton(props, "auxiliary", csweb_expanded_icon);
}

export function ExpanderButtonCollapsed(props) {
    return ConvenienceButton(props, "auxiliary", csweb_collpased_icon);
}

export function FilterButton(props) {
    return ConvenienceButton(props, "primary", csweb_filter);
}

export function IncreaseButton(props) {
    return ConvenienceButton(props, "info", csweb_increase_value);
}

export function DecreaseButton(props) {
    return ConvenienceButton(props, "info", csweb_decrease_value);
}

export function ZoomInButton(props) {
    return ConvenienceButton(props, "primary", csweb_increase_value);
}

export function ZoomOutButton(props) {
    return ConvenienceButton(props, "primary", csweb_decrease_value);
}

export default {
    TextButton,
    DropdownTextButton,
    IconButton,
    DropdownIconButton,
    IconTextButton,
    DropdownIconTextButton,
    LinkAsTextButton,
    LinkAsIconTextButton,
    CloseButton,
    CancelButton,
    ResizeBiggerButton,
    ResizeSmallerButton,
    SettingsButton,
    EditButton,
    ExpanderButtonCollapsed,
    ExpanderButtonExpanded,
    FilterButton,
    IncreaseButton,
    DecreaseButton,
    ZoomInButton,
    ZoomOutButton,
    DownloadButton,
};
