/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RichText.jsx 172984 2018-02-06 15:14:21Z mbr $"
 */

import React from 'react';
import {FormGroup, ControlLabel, InputGroup} from 'react-bootstrap';
import {sharedDefaultProps, sharedTextInputProps} from './sharedPropTypes';
import {classNames, PropTypes} from 'cs-web-components-externals';
import RichTextEditor from '../richtext/RichTextEditor.jsx';
import {prefixNS} from '../helpers';

/**
 * The component ``<RichText>`` allows rich text inputs. It has following properties besides those
 * defined in :ref:`form_control_common_props`:
 *
 * +------------------+--------------+--------------+---------------------------------------------+
 * | Property         | Type         | Default      | Use                                         |
 * +==================+==============+==============+=============================================+
 * | value            | any          | -            | Data to be displayed                        |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | compact          | bool         | false        | Display in compact mode without label and   |
 * |                  |              |              | bottom margin                               |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | rows             | number       | -            | To extend the size of this component to     |
 * |                  |              |              | bottom margin                               |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | beforeControl    | node         | -            | A component or a list of components to be   |
 * |                  |              |              | display specific lines of text, compare     |
 * |                  |              |              | the ``rows`` attribute on ``<textare>``     |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | afterControl     | node         | -            | A component or a list of components to be   |
 * |                  |              |              | placed after the input field                |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | onValueChange    | func         | -            | Equivalent callback of `onChange`, called   |
 * |                  |              |              | with the field value instead of the event   |
 * +------------------+--------------+--------------+---------------------------------------------+
 *
 */

const ROWHEIGHT = 30;
const DEFAULTROWS = 8;

export default class RichText extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        const {
            beforeControl, afterControl,
            label, tooltip, validationState,
            mandatory, mandatoryEmptyHint,
            compact, rows, value, onValueChange, className,
            readOnly, ...others
        } = this.props;

        delete others.onValueChange;
        delete others.operationInstance;
        delete others.uncheckedValues;

        const classes = classNames(
            className,
            prefixNS('form-input')
        );

        const height = rows ? rows * ROWHEIGHT : DEFAULTROWS * ROWHEIGHT;
        let inputControl = null;
        if (!beforeControl && !afterControl) {
            inputControl = <RichTextEditor
                classNameEditor={classes}
                height={height}
                Content={value}
                onBlurValueChange={onValueChange}
                readOnly={readOnly} />;
        } else {
            const before = beforeControl ?
                (
                    <InputGroup.Button className={prefixNS('formcontrols-textarea-buttons')}>
                        {beforeControl}
                    </InputGroup.Button>
                ) : null;
            const after = afterControl ?
                (
                    <InputGroup.Button className={prefixNS('formcontrols-textarea-buttons')}>
                        {afterControl}
                    </InputGroup.Button>
                ) : null;
            inputControl = (
                <InputGroup>
                    {before}
                    <RichTextEditor
                        classNameEditor={classes}
                        height={height}
                        Content={value}
                        onBlurValueChange={onValueChange} />
                    {after}
                </InputGroup>
            );
        }
        const groupClass = classNames({
            [prefixNS('formcontrols-textinput-compact')]: compact
        });
        return (
            <FormGroup
                className={groupClass}
                validationState={validationState}
                data-mandatory={mandatory}
                data-mandatory-empty-hint={mandatoryEmptyHint}>
                <ControlLabel title={tooltip}>{label}</ControlLabel>
                {inputControl}
            </FormGroup>
        );
    }
}

RichText.propTypes = {
    ...sharedTextInputProps,
    onValueChange: PropTypes.func
};

RichText.defaultProps = Object.assign(
    {compact: false},
    sharedDefaultProps
);
