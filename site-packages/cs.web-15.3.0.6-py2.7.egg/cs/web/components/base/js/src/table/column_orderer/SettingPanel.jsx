
import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {formatStr} from '../../i18n.js';
import Organizer from '../../components/Organizer';
import {prefixNS} from '../../helpers.js';
import Immutable from 'immutable';
import connect from '../connect';
import {setOrderedColumns} from '../common/actions.js';
import HelpReference from '../../components/HelpReference.jsx';
import {SELECTORID} from '../constants.js';

class SettingPanel extends React.Component {
    constructor(props) {
        super(props);
        this.updateOrderedColumnsFromOrganizer =
            this.updateOrderedColumnsFromOrganizer.bind(this);
        this.state = {
            orderedColumns: Immutable.List()
        };
    }

    componentDidMount() {
        this.props.registerPanel(this);
        this.updateOrderedColumns(this.props.orderedColumns.toList()
                                  .filter(col => col !== SELECTORID));
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.orderedColumns !== nextProps.orderedColumns ||
            this.props.columns !== nextProps.columns) {
            this.updateOrderedColumns(nextProps.orderedColumns.toList()
                                      .filter(col => col !== SELECTORID));
        }
    }

    updateOrderedColumns(orderedColumns) {
        this.setState({
            orderedColumns: orderedColumns,
            organizerLists: Immutable.List([
                Immutable.Map({
                    id: 'ordering',
                    label: formatStr('table_settings_title_column_orderer'),
                    items: orderedColumns.map(
                        colId => this.props.columns.find(col => col.get('id') === colId)
                    ),
                    unsortable: false
                })
            ])
        });
    }

    updateOrderedColumnsFromOrganizer(colLists) {
        this.updateOrderedColumns(colLists.get(0).get('items').map(col => col.get('id')));
    }

    dispatchSettings() {
        this.props.setOrderedColumns(this.state.orderedColumns.toOrderedSet());
    }

    resetSettings() {
        this.updateOrderedColumns(this.props.orderedColumns.toList()
                                  .filter(col => col !== SELECTORID));
    }

    render() {
        return (
            <div>
                <HelpReference helpId="user_web_components_table_order_columns" />
                <Organizer
                    itemLists={this.state.organizerLists}
                    className={prefixNS('table-column-orderer')}
                    onItemListsChange={this.updateOrderedColumnsFromOrganizer}/>
            </div>
        );
    }
}

SettingPanel.propTypes = {
    registerPanel: PropTypes.func,
    orderedColumns: ImmutablePropTypes.orderedSet,
    setOrderedColumns: PropTypes.func,
    columns: ImmutablePropTypes.list
};

const mapStateToProps = state => ({
    orderedColumns: state.orderedColumns,
    columns: state.columns
});

const WrappedPanel = connect(mapStateToProps, {setOrderedColumns})(SettingPanel);
WrappedPanel.settingsTitle = () => formatStr('table_settings_title_column_orderer');
export default WrappedPanel;
