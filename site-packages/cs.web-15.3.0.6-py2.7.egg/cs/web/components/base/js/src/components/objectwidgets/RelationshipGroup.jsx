/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RelationshipGroup.jsx 176920 2018-05-07 13:23:57Z gwe $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers';
import ContentBlockGroup from '../ContentBlockGroup.jsx';
import RelationshipTable from './RelationshipTable.jsx';
import ExpandedStateHelper from './ExpandedStateHelper.jsx';
import ClassRelshipLoader from './ClassRelshipLoader.jsx';

function combineOptions(options, name, dflt) {
    const specOpt = options && options[name] || {};
    return Object.assign({}, dflt, specOpt);
}

/**
 * Render a control that contains relationships of an object. The relationships
 * that are usable have to be provided in the app setup.
 *
 * React Properties
 * ----------------
 *
 * +----------------+-----------+----------------------+----------------------------------------------+
 * |    Property    |    Type   |       Default        |                     Use                      |
 * +================+===========+======================+==============================================+
 * | include        | array     | -                    | A list of relationship REST names. These     |
 * |                |           |                      | relationships will be displayed. If the      |
 * |                |           |                      | array is undefined the relationships that    |
 * |                |           |                      | are configured as dialog registers are used  |
 * +----------------+-----------+----------------------+----------------------------------------------+
 * | exclude        | array     | -                    | A list of relationship REST names. These     |
 * |                |           |                      | relationships will not be displayed.         |
 * +----------------+-----------+----------------------+----------------------------------------------+
 * | tableHeight    | string    | ``300px``            | The height of each relationship table.       |
 * +----------------+-----------+----------------------+----------------------------------------------+
 * | tableClassName | string    |  -                   | Style classes of each relationship table.    |
 * +----------------+-----------+----------------------+----------------------------------------------+
 * | specOptions    | object    | -                    | A mapping of relationship specific options.  |
 * |                |           |                      | Indexed by the relationship name. Each value |
 * |                |           |                      | is also a mapping of possible properties of  |
 * |                |           |                      | `RelationshipTable` component.               |
 * +----------------+-----------+----------------------+----------------------------------------------+
 *
 */
export default class RelationshipGroup extends React.Component {
    computeRelships(relships) {
        const {include, exclude} = this.props;
        let relshipConfiguration = relships;
        if (include === undefined) {
            // No include defined -> take the relships that would be shown in the
            // native client, and in the order defined by the backend
            relshipConfiguration = relshipConfiguration
                .filter(v => v.get('show_in_mask'))
                .filter(v => !v.get('is_one_on_one'))
                .filter(v => !v.get('hide'))
                .sortBy(v => v.get('pos'));
        }
        else {
            // include is defined -> take those relships, and in the order from include
            relshipConfiguration = Immutable.Map(
                Immutable.List(include)
                    .filter(incl => relshipConfiguration.has(incl))
                    .map(incl => [incl, relshipConfiguration.get(incl)]));
        }
        if (exclude !== undefined) {
            // exclude is always evaluated, if it is set
            const excludeSet = new Set(exclude);
            relshipConfiguration = relshipConfiguration.filter((v, k) => !excludeSet.has(k));
        }
        return relshipConfiguration;
    }

    renderRelships(relships) {
        const {tableHeight, specOptions, tableClassName, ...others} = this.props;
        delete others.include;
        delete others.exclude;
        return this.computeRelships(relships).map((v, k) => {
            const {expanded: initialExpanded, ...options} = combineOptions(specOptions, k, others);
            options.height = options.height ? options.height : tableHeight;
            if (tableClassName) {
                options.tableClassName = options.tableClassName ?
                    options.tableClassName : tableClassName;
            }
            // "initialExpanded || false" is used to set the prop explicitly
            // to false in case of undefined - it's default is true otherwise
            return (
                <ExpandedStateHelper key={k} initialExpanded={initialExpanded || false}>
                    {(expanded, onExpanded) => (
                        <RelationshipTable {...options}
                            relshipName={k}
                            relshipLabel={v.get('label')}
                            relshipIconUrl={v.get('icon_url')}
                            expanded={expanded}
                            onExpanded={onExpanded}
                        />
                    )}
                </ExpandedStateHelper>
            );
        }).toArray();
    }

    render() {
        return (
            <ClassRelshipLoader contextObject={this.props.contextObject}>
                {relships => (
                    <ContentBlockGroup className={prefixNS('relationship-group')}>
                        {this.renderRelships(relships)}
                    </ContentBlockGroup>
                )}
            </ClassRelshipLoader>
        );
    }
}
RelationshipGroup.propTypes = {
    contextObject: ImmutablePropTypes.map,
    include: PropTypes.array,
    exclude: PropTypes.array,
    tableHeight: PropTypes.string,
    tableClassName: PropTypes.string,
    specOptions: PropTypes.object
};
RelationshipGroup.defaultProps = {
    tableHeight: "300px"
};
