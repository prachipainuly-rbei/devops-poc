/*
 * Copyright (C) 1990-2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: i18n.js 184837 2018-10-09 09:05:12Z sla $"
 */

import Immutable from 'immutable';
import React from 'react';
import {
    ReactIntl, IntlMessageFormat, memoizeFormatConstructor, PropTypes
} from 'cs-web-components-externals';
import {getJSON} from './fetch.js';
import {Console, getAppSetup} from './helpers.js';

class I18nDB {
    constructor(locale) {
        this._locale = locale;
        this._getMessageFormat = memoizeFormatConstructor(IntlMessageFormat.default);
        this._messages = Immutable.Map();
    }

    /**
     * This function gets called from the application initialization process. It
     * must return a Promise, that resolves when the localized messages have been
     * loaded.
     */
    setLocale(locale) {
        this._locale = locale;
        const url = getAppSetup().getIn(['links', 'common', 'i18nLabels']);
        return getJSON(url).then(
            data => {
                this._messages = this._messages.mergeDeep(data);
            },
            err => {
                Console.error("Loading i18n labels failed:", err);
            }
        );
    }

    makeMessageId(domainId, messageId) {
        return `${domainId}.${messageId}`;
    }

    /**
     * Construct a message descriptor to use with ReactIntl
     * See https://github.com/yahoo/react-intl/wiki/API#message-descriptor
     */
    makeMessageDescriptor(domainId, messageId) {
        return {
            id: this.makeMessageId(domainId, messageId),
            defaultMessage: this.getMessage(domainId, messageId)
        };
    }

    getMessage(domainId, messageId) {
        const result = this._messages.getIn([domainId, messageId]);
        if (result === undefined) {
            // Don't use default in getIn to avoid string construction
            return `[Missing label: ${this.makeMessageId(domainId, messageId)}]`;
        }
        return result;
    }

    /**
     * Return a React component that renders a localized message.
     */
    makeFormat(defaultDomainId) {
        const FormatWrapper = props => {
            const {messageId, domainId, ...others} = props;
            const domain = domainId || defaultDomainId;
            return (
                <ReactIntl.FormattedMessage
                    {...others}
                    id={this.makeMessageId(domain, messageId)}
                    defaultMessage={this.getMessage(domain, messageId)} />
            );
        };
        FormatWrapper.propTypes = {
            messageId: PropTypes.string.isRequired,
            domainId: PropTypes.string,
            values: PropTypes.object
        };
        return FormatWrapper;
    }

    makeMessageFormatter(domainId, messageId) {
        return this._getMessageFormat(this.getMessage(domainId, messageId), this._locale);
    }

    /**
     * Return a localized message, replacing placeholders in the message with the
     * given values.
     */
    formatString(messageId, domainId, values = {}) {
        const formatter = this.makeMessageFormatter(domainId, messageId);
        return formatter.format(values);
    }

    /**
     * Return a function that works like formatString, but uses the given
     * defaultDomainId instead of an explicit domainId.
     */
    makeFormatStr(defaultDomainId) {
        return (messageId, values = {}) => {
            try {
                const formatter = this.makeMessageFormatter(defaultDomainId, messageId);
                return formatter.format(values);
            } catch (err) {
                Console.error("Resolving i18n label failed: ", err);
                return "[Error resolving i18n string {" + defaultDomainId + "." + messageId + "}]";
            }
        };
    }

    /**
     * Allow messages to be set from JS code instead of reading them from the
     * backend.
     */
    defaultMessages({domainId, messages}) {
        this._messages = this._messages.mergeIn([domainId], messages);
    }
}

export const i18ndb = new I18nDB();
export const Format = i18ndb.makeFormat('base');
export const formatStr = i18ndb.makeFormatStr('base');
