/*
 * Copyright (C) 1990 - 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ApplicationBar.jsx 180874 2018-07-23 12:13:03Z cso $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import {prefixNS, getAppSetup} from '../../helpers';
import ButtonToolbar from '../ButtonToolbar.jsx';
import {SVGIconAndLink, IconAndLabel} from '../IconAndLabel';
import ContentOperationToolbar from '../ContentOperationToolbar.jsx';
import Link from './Link.jsx';
import {ObjectFavoriteButton} from '../../favorites';

function getBreadcrumbItem(element) {
    const className = element.active ?
        prefixNS('applicationbar__breadcrumb--active') :
        '';

    if (element.component) {
        return (
            <div className={classNames(className, 'custom-breadcrumb')} key={element.key}>
                {element.component}
            </div>
        );
    } else if (element.icon) {
        return (
            <SVGIconAndLink
                className={className}
                key={element.key}
                src={element.icon}
                to={element.active ? undefined : element.link}
                label={element.name}
                title={element.name}
            />
        );
    } else {
        return (
            <IconAndLabel
                className={className}
                key={element.key}
                label={element.active ? element.name : (
                    <Link to={element.link}>{element.name}</Link>
                )}
                title={element.name}
            />
        );
    }
}

/**
 * Renders the application's topmost horizontal navigation bar containing a breadcrumb and
 * a toolbar area.
 *
 * The breadcrumb area renders the items array using an internal transformation.
 *
 * The toolbar area renders the children inside a right-aligned ButtonToolbar.
 *
 * +----------------+---------+---------+------------------------------------------------------------+
 * | Name           | Type    | Default | Description                                                |
 * +================+=========+=========+============================================================+
 * | items          | array   | []      | Array or Immutable.List of objects to be rendered as       |
 * |                |         |         | breadcrumbs. The objects will be displayed as labels with  |
 * |                |         |         | optional icon and link. The object's keys are described in |
 * |                |         |         | the table below.                                           |
 * +----------------+---------+---------+------------------------------------------------------------+
 *
 * Keys of each object in ``items``:
 *
 * +-----------+--------+---------+-----------+------------------------------------------------------+
 * | Name      | Type   | Default | Mandatory | Description                                          |
 * +===========+========+=========+===========+======================================================+
 * | key       | string | \-      | Yes       | Identifier of the breadcrumb item                    |
 * +-----------+--------+---------+-----------+------------------------------------------------------+
 * | icon      | string | \-      | No        | Optional icon URL                                    |
 * +-----------+--------+---------+-----------+------------------------------------------------------+
 * | active    | bool   | \-      | No        | If ``false``, the element is displayed as disabled   |
 * +-----------+--------+---------+-----------+------------------------------------------------------+
 * | name      | string | \-      | No        | Label text; Not mandatory but should be given        |
 * +-----------+--------+---------+-----------+------------------------------------------------------+
 * | link      | string | \-      | No        | Link URL; Required if ``active`` is ``true``         |
 * +-----------+--------+---------+-----------+------------------------------------------------------+
 * | component | string | \-      | No        | React element; If given, this component will be used |
 * |           |        |         |           | to render the breadcrumb item                        |
 * +-----------+--------+---------+-----------+------------------------------------------------------+
 *
 * @automodule
 */
export function ApplicationBar(props) {
    return (
        <div className={prefixNS('applicationbar')}>
            <div className={prefixNS('applicationbar__breadcrumb')}>
                {props.items.map(element => getBreadcrumbItem(element))}
            </div>
            <ButtonToolbar>
                {props.children}
            </ButtonToolbar>
        </div>
    );
}

ApplicationBar.defaultProps = {
    items: []
};

const ITEM_SHAPE = PropTypes.shape({
    key: PropTypes.string.isRequired,
    icon: PropTypes.string,
    active: PropTypes.bool,
    name: PropTypes.string,
    link: PropTypes.string,
    component: PropTypes.element
});

ApplicationBar.propTypes = {
    items: PropTypes.oneOfType([
        PropTypes.arrayOf(ITEM_SHAPE),
        ImmutablePropTypes.listOf(ITEM_SHAPE)
    ])
};

/**
 * TODO write documentation
 *
 * @class ObjectApplicationBar
 * @extends React.Component
 */
export function ObjectApplicationBar(props) {
    const {contextObject} = props;
    const appSetup = getAppSetup();
    const classTitle = appSetup.getIn(['detail_view', 'appInfo', 'classTitle']);
    const classIcon = appSetup.getIn(['detail_view', 'appInfo', 'classIcon']);
    const classUiLink = appSetup.getIn(['links', 'detail_view', 'classUiLink']);

    const items = [
        {
            key: 'app',
            name: classTitle,
            icon: classIcon,
            link: classUiLink,
            active: false
        },
        {
            key: 'obj',
            name: contextObject.get('system:description'),
            icon: contextObject.get('system:icon_link'),
            onIconClick: undefined,
            active: true
        }
    ];

    return (
        <ApplicationBar items={items}>
            <ObjectFavoriteButton contextObject={contextObject} />
            <ContentOperationToolbar {...props} iconSize="sm"/>
        </ApplicationBar>
    );
}

ObjectApplicationBar.propTypes = {
    contextObject: ImmutablePropTypes.map.isRequired
};
