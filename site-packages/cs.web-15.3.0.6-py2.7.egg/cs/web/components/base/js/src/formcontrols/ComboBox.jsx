/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ComboBox.jsx 185518 2018-10-24 12:33:23Z cla $"
 */

import React, {Component} from 'react';
import ReactDOM from 'react-dom';
import {PropTypes} from 'cs-web-components-externals';
import TextInput, {combineInputExtensions} from './TextInput';
import Button from '../components/Button';
import {sharedComboBoxProps} from './sharedPropTypes';
import {prefixNS} from '../helpers';
import {formatStr} from '../i18n';
import Overlays from '../overlays';

const {
    TypeAhead,
    Menu,
    MenuItem
} = Overlays;

function DefaultItem(props) {
    const {value, ...others} = props;
    return (
        <MenuItem {...others}>
            {value}
        </MenuItem>
    );
}

DefaultItem.propTypes = {
    value: PropTypes.node,
};

function EmptyItem() {
    return (
        <span className={prefixNS('formcontrols-combobox-emptyitem')}>
            {formatStr('combobox_empty_item')}
        </span>
    );
}

/**
 * This component provides a drop-down list of data entries for selecting.
 * It has following properties in addition to properties of
 * <:ref:`cs-web-components-base-formcontrols.TextInput.__default__`>:
 *
 * +--------------------+----------------+---------+-----------------------------------------------------------+
 * | Property           | Type           | Default | Use                                                       |
 * +====================+================+=========+===========================================================+
 * | textReadOnly       | bool           | -       | Whether to set the input field as readonly                |
 * +--------------------+----------------+---------+-----------------------------------------------------------+
 * | items              | Immutable.List | -       | List of available entries                                 |
 * +--------------------+----------------+---------+-----------------------------------------------------------+
 * | itemComponentClass | node           | -       | Optional component can be used to display an entry in     |
 * |                    |                |         | the drop-down list                                        |
 * +--------------------+----------------+---------+-----------------------------------------------------------+
 * | emptyItemClass     | node           | -       | Optional compenent to handle rendering of empty values    |
 * +--------------------+----------------+---------+-----------------------------------------------------------+
 * | onToggle           | func           | -       | A callback fired when the drop-down list is toggled.      |
 * |                    |                |         | ``function(Boolean isOpen) {}``                           |
 * +--------------------+----------------+---------+-----------------------------------------------------------+
 * | onSelect           | func           | -       | A callback fired when an entry is selected.               |
 * |                    |                |         | ``(eventKey: any, event: Object) => any``                 |
 * +--------------------+----------------+---------+-----------------------------------------------------------+
 *
 */
export default class ComboBox extends Component {
    constructor(props) {
        super(props);
        this._menu = null;
        this.onShow = this.onShow.bind(this);
        this.onHide = this.onHide.bind(this);
        this.setMenuRef = this.setMenuRef.bind(this);
        this.onOverlayFocus = this.onOverlayFocus.bind(this);
    }

    renderButtons(onToggle) {
        const {readOnly} = this.props;
        return readOnly ? null : (
            <Button.TextButton className={prefixNS('formcontrols-combobox-button')}
                               id={this.props.name + '_dropdown'}
                               caret
                               onClick={onToggle}
                               pullRight={true}
                               key="ComboboxButton" />
        );
    }

    renderItems() {
        const {items, itemComponentClass, emptyItemClass} = this.props;
        const ItemComponent = itemComponentClass || DefaultItem;
        const EmptyItemComp = emptyItemClass || EmptyItem;
        return items.map((val, idx) => {
            const value = val || <EmptyItemComp index={idx} value={val}/>;
            return (
                <ItemComponent key={idx} eventKey={idx} value={value}/>
            );
        });
    }

    onShow() {
        const {onToggle} = this.props;
        if (onToggle) {
            onToggle(true);
        }
    }

    onHide() {
        const {onToggle} = this.props;
        if (onToggle) {
            onToggle(false);
        }
    }

    setMenuRef(c) {
        this._menu = c;
    }

    onOverlayFocus(evt) {
        if (this._menu) {
            const menuElement = ReactDOM.findDOMNode(this._menu);  // eslint-disable-line react/no-find-dom-node
            menuElement.focus();
        }

        evt.stopPropagation();
    }

    render() {
        const {
            readOnly,
            onSelect,
            textReadOnly,
            afterControl,
            placeholder,
            containerRef,
            ...others
        } = this.props;
        const activeButReadOnly = textReadOnly && !readOnly;
        const placeholderHint = placeholder ? placeholder
                                : (activeButReadOnly ? formatStr("combobox_select_hint") : null);
        delete others.itemComponentClass;
        delete others.items;
        delete others.onToggle;
        return (
            <TypeAhead setContentRef={this.setMenuRef}
                       containerRef={containerRef}
                       onFocus={this.onOverlayFocus}
                       onShow={this.onShow}
                       onHide={this.onHide}
                       grabFocus={true}
                       layoutConfig={{noSwapVertical: true}}>
                {
                    ({onToggle, onHide}) => {
                        const afterControls = combineInputExtensions(
                            this.renderButtons(onToggle),
                            afterControl
                        );

                        return [
                            <TextInput
                                key={'text-input'}
                                afterControl={afterControls}
                                readOnly={readOnly || textReadOnly}
                                {...others}
                                placeholder={placeholderHint}
                                onClick={activeButReadOnly ? onToggle : null} />,
                            <Menu key={'menu'}
                                  onHide={onHide}
                                  onSelect={onSelect}>
                                {this.renderItems()}
                            </Menu>
                        ];
                    }
                }
            </TypeAhead>
        );
    }
}

ComboBox.propTypes = {
    ...sharedComboBoxProps
};
