/*
 * Copyright (C) 1990-2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: FileListColumns.jsx 178501 2018-06-06 12:15:08Z sla $"
 */

import React from 'react';
import {formatStr} from '../../i18n';
import SVGIcon from '../SVGIcon';
import {getAppSetup, prefixNS} from '../../helpers';
import Immutable from "immutable";
import EditableObjectLabel from './EditableObjectLabel';

function withDisplayName(name, component) {
    component.displayName = name;
    return component;
}

function getReadableFileSizeString(fileSizeInBytes) {
    let byteCount = fileSizeInBytes;
    let i = -1;
    const byteUnits = [' kB', ' MB', ' GB', ' TB', ' PB', ' EB', ' ZB', ' YB'];
    do {
        byteCount = byteCount / 1024;
        i++;
    } while (byteCount > 1024);
    return Math.max(byteCount, 0.1).toFixed(1) + byteUnits[i];
}

function getFileListColumns() {
    const persno = getAppSetup().getIn(["appSettings", "userPersno"]);
    const columns = Immutable.fromJS(
        [
            {
                width: "50px",
                label: formatStr("file_table_header_locked_status"),
                tooltip: formatStr("file_table_header_locked_status_tooltip"),
                id: "locked",
                contentRenderer: withDisplayName(
                    'LockedRenderer',
                    render_props => {
                        return render_props.value.get('sortableValue') ?
                               (
                                   <div className={prefixNS("filelist__state-indicator")}>
                                       {
                                            render_props.value.get('lockedBy') === persno ? (
                                                <SVGIcon name='cdb_doc_locked_usr' size='xs'/>
                                            ) : (
                                                <SVGIcon name='cdb_doc_locked' size='xs'/>
                                            )
                                       }
                                   </div>
                               )
                             : null;
                    }
                )
            },
            {
                width: "300px",
                label: formatStr("file_table_header_file_name"),
                tooltip: formatStr("file_table_header_file_name_tooltip"),
                id: "name",
                contentRenderer: withDisplayName(
                    'FileNameRenderer',
                    render_props => {
                        if (render_props.value.get('main') === "1") {
                            return (
                                <a href={render_props.value.get('alink')}
                                   className={prefixNS("filelist__primary")}>
                                    {render_props.value.get('sortableValue')}
                                </a>
                            );
                        }
                        return (
                            <a href={render_props.value.get('alink')}>
                                {render_props.value.get('sortableValue')}
                            </a>
                        );
                    }
                )
            },
            {
                width: "175px",
                label: formatStr("file_table_header_file_type"),
                tooltip: formatStr("file_table_header_file_type_tooltip"),
                id: "type",
                contentRenderer: withDisplayName(
                    'FileTypeRenderer',
                    render_props => {
                        const selectedClass = render_props.value.get('main') === "1"
                                            ? prefixNS("filelist__primary")
                                            : "";
                        return (
                            <span className={selectedClass}>
                                <EditableObjectLabel
                                    label={render_props.value.get('sortableValue')}
                                    icon={<SVGIcon
                                            src={render_props.value.get('icon')}
                                            size="xs" />}
                                />
                            </span>
                        );
                    }
                )
            },
            {
                width: "125px",
                label: formatStr("file_table_header_file_size"),
                tooltip: formatStr("file_table_header_file_size_tooltip"),
                id: "size",
                sortFunction: (a, b) => {
                    return a[0].get('sortableValue') === b[0].get('sortableValue') ? 0
                         : (a[0].get('sortableValue') > b[0].get('sortableValue') ? 1 : -1);
                },
                contentRenderer: withDisplayName(
                    'FileSizeRenderer',
                    render_props => {
                        const displayValue = getReadableFileSizeString(
                            render_props.value.get('sortableValue'));
                        const selectedClass = render_props.value.get('main') === "1"
                                            ? prefixNS("filelist__primary")
                                            : "";
                        return <span className={selectedClass}>{displayValue}</span>;
                    }
                )
            },
            {
                width: "160px",
                label: formatStr("file_table_header_file_mdate"),
                tooltip: formatStr("file_table_header_file_mdate_tooltip"),
                id: "mdate",
                contentRenderer: withDisplayName(
                    'FileMdateRenderer',
                    render_props => {
                        const selectedClass = render_props.value.get('main') === "1"
                                            ? prefixNS("filelist__primary")
                                        : "";
                        return (
                            <span className={selectedClass}>
                                {render_props.value.get('sortableValue')}
                            </span>
                        );
                    }
                )
            },
            {
                label: formatStr("file_table_header_file_autor"),
                tooltip: formatStr("file_table_header_file_autor_tooltip"),
                id: "author",
                contentRenderer: withDisplayName(
                    'FileAutorRenderer',
                    render_props => {
                        const selectedClass = render_props.value.get('main') === "1"
                                            ? prefixNS("filelist__primary")
                                            : "";
                        return (
                            <span className={selectedClass}>
                                {render_props.value.get('sortableValue')}
                            </span>
                        );
                    }
                )
            }
        ]
    );

    const orderedColumns = Immutable.OrderedSet(
        columns.map(c => c.get('id'))
    );

    const sortColumns = Immutable.fromJS(
        [{id: columns.getIn([0, 'id']), desc: true}]
    ).toOrderedSet();

    const minifiedColumns = Immutable.List(
        [columns.get(1), columns.get(3)]
    ).setIn([1, 'width'], 100);

    const minifiedOrderedColumns = Immutable.fromJS(
        [columns.getIn([1, 'id']), columns.getIn([3, 'id'])]
    ).toOrderedSet();

    const minifiedSortColumns = Immutable.fromJS(
        [{id: columns.getIn([1, 'id']), desc: false}]
    ).toOrderedSet();

    return {
        normal: {
            columns: columns,
            orderedColumns: orderedColumns,
            initSortColumns: sortColumns
        },
        minified: {
            columns: minifiedColumns,
            orderedColumns: minifiedOrderedColumns,
            initSortColumns: minifiedSortColumns
        }
    };
}

export default getFileListColumns;
