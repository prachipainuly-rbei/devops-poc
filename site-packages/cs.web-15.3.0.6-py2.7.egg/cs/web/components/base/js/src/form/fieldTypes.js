/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: fieldTypes.js 178740 2018-06-11 10:48:58Z mbr $"
 */

import Immutable from 'immutable';

// TODO: should map type number directly
const TEXT = 'text';
const CATALOG = 'catalog';
const CHECKBOX = 'checkbox';
const PASSWORD = 'password';
const EMAIL = 'email';
const HYPERLINK = 'hyperlink';
const LONGTEXT = 'longtext';
const IMAGE = 'image';
const CALENDAR = 'calendar';
const OBJECTUUID = 'objectuuid';
const COMBOBOX = 'combobox';
const NUMERICEDIT = 'numericedit';
const ENUMCOMBOBOX = 'enumcombobox';
const BUTTON = 'button';
const COMPONENT = 'component';

export default {
    TEXT,
    CATALOG,
    CHECKBOX,
    PASSWORD,
    EMAIL,
    HYPERLINK,
    LONGTEXT,
    IMAGE,
    CALENDAR,
    OBJECTUUID,
    COMBOBOX,
    NUMERICEDIT,
    ENUMCOMBOBOX,
    BUTTON,
    COMPONENT
};

export function isMandatory(field) {
    return field.get('mandatory');
}

export function isHidden(field) {
    return field.get('hidden');
}

export function isTriStateCheckBox(field) {
    return field.get('fieldtype') === CHECKBOX &&
            field.getIn(['config', 'tri_state']);
}

const INVALIDVALUES = [undefined, '', null];

export function isFilled(field, values) {
    if (values) {
        // check also additional multilanguage fields
        const ml = field.get('ml_origin')
            ? field.get('ml_origin')
            : field.get('multilang') ? field.get('multilang') : [];
        const attributes =
            Immutable.Set([field.get('attribute')]).union(ml.map(m => m.get('attribute')));
        return attributes.filter(m => isValue(values.get(m))).count();
    }
    return false;
}

export function isValue(value) {
    return INVALIDVALUES.indexOf(value) === -1;
}

export function getRelevantAttributes(field) {
    const result = [field.get('attribute')];
    if (field.get('multilang')) {
        field.get('multilang').forEach(ml => {
            result.push(ml.get('attribute'));
        });
    }
    return result;
}

export function anyAttributeIsRelevant(field) {
    return field.get('fieldtype') === CATALOG ||
           field.get('fieldtype') === COMBOBOX;
}
