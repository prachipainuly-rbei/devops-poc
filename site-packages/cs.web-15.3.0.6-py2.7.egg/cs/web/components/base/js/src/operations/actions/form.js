/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: form.js 175963 2018-04-16 13:42:50Z cla $"
 */

import {callDialogHooks as callDialogHooksRaw} from '../../form/dialog_hooks.js';
import {addNotification} from '../../actions/notification.js';
import {ACTIONS} from '../constants.js';

/**
 * Dispatched asynchronously in changeFormSaga, when dialog_hook
 * results from the backend are available. Handled by
 * ``dispatchBackendHookResultsSaga``.
 */
function backendHookResults(instanceName, nextState) {
    return {
        type: ACTIONS.DISPATCH_BACKEND_HOOK_RESULTS,
        payload: {instanceName, nextState},
    };
}

/**
 * Wrapper Thunk for callDialogHooks.
 *
 * As callDialogHooks receives a callback that modifies the Redux State,
 * we cannot handle this directly in the saga.
 */
export function callDialogHooks(instanceName, dialogHooks, params) {
    return (dispatch) => {
        function dispatchBackendResults(values, registers, wizardProgress, preventSubmitReasons) {
            dispatch(backendHookResults(
                instanceName,
                {values, registers, wizardProgress, preventSubmitReasons}
            ));
        }

        function displayErrors(errors) {
            errors.forEach(err =>
                dispatch(addNotification(
                    null,
                    err.title,
                    err.message,
                    'danger',
                    2, null, null
                ))
            );
        }

        return callDialogHooksRaw(dialogHooks, params, dispatchBackendResults, displayErrors);
    };
}
