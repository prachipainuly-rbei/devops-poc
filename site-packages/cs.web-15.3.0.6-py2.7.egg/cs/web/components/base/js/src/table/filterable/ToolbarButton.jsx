/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ToolbarButton.jsx 184132 2018-09-19 09:18:57Z vov $"
 */

import React from 'react';
import {classNames, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import Button from '../../components/Button.jsx';
import SVGIcon from '../../components/SVGIcon.jsx';
import TextInput from '../../formcontrols/TextInput.jsx';
import {formatStr} from '../../i18n';
import {prefixNS} from '../../helpers';
import {setFilter, resetFocusFilter} from './actions';
import {getFilter} from './reducers';
import connect from '../connect';
import {setFocusTable, setFocusFilter} from '../common/actions';

import csweb_filter from '../../../../resources/cis_filter_primary.svg';
import csweb_remove from '../../../../resources/cis_remove_danger.svg';

export class FilterButton extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            focused: false
        };
        this.clearFilter = this.clearFilter.bind(this);
        this.onChange = this.onChange.bind(this);
        this.focusFilter = this.focusFilter.bind(this);
        this.setFilterRef = this.setFilterRef.bind(this);
        this.resetFocusFilter = this.resetFocusFilter.bind(this);
        this.onFocus = this.onFocus.bind(this);
        this.onKeyDown = this.onKeyDown.bind(this);
    }

    setFilterRef(c) {
        this.filterField = c;
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.focusFilterSignal !== this.props.focusFilterSignal) {
            if (nextProps.focusFilterSignal.get('focusFilter')) {
                this.focusFilter();
            }
        }
    }

    focusFilter() {
        this.filterField.focus();
    }
    onFocus() {
        this.setState({focused: true});
    }

    resetFocusFilter() {
        this.setState({focused: false});
        if (this.props.focusFilterSignal.get('focusFilter')) {
            this.props.resetFocusFilter();
        }
    }

    clearFilter() {
        this.props.setFilter('');
        this.focusFilter();

    }

    onChange(event) {
        this.props.setFilter(event.target.value);
    }

    onKeyDown(event) {
        switch (event.key) {
            case 'Escape':
                this.clearFilter();
                return undefined;
            case 'Enter':
                this.props.setFocusTable();
                return undefined;
            default:
                break;
        }
        return undefined;
    }

    render() {
        const {filter} = this.props;
        const {focused} = this.state;
        const tooltip = filter > '' ? formatStr('table_clear_filter')
                                    : formatStr('table_show_hide_filter');

        const ResetButton = (
            <Button.IconButton
                onClick={this.clearFilter}
                title={tooltip}
                iconSrc={csweb_remove}
                buttonStyle={'auxiliary'}
                key={prefixNS('table-filter-reset')}/>
        );

        const cls = classNames(
            prefixNS('table-filter-form'),
            {
                [prefixNS('table-filter-form__focused')]: focused || filter !== ''
            }
        );

        return (
            <form className={cls}>
                <TextInput
                    placeholder={formatStr('table_placeholder_filter')}
                    className={prefixNS('table-filter-placeholder')}
                    ref={this.setFilterRef}
                    onFocus={this.onFocus}
                    onBlur={this.resetFocusFilter}
                    onKeyDown={this.onKeyDown}
                    name={prefixNS('table-filter')}
                    value={filter}
                    beforeControl={[
                        <SVGIcon
                            src={csweb_filter}
                            key={prefixNS('table-filter-icon')}
                            className={prefixNS('table-filter-icon')} />]}
                    afterControl={[filter ? ResetButton : null]}
                    onChange={this.onChange}
                    autoFocus/>
            </form>
        );
    }
}

FilterButton.propTypes = {
    filter: PropTypes.string,
    setFilter: PropTypes.func,
    focusFilterSignal: ImmutablePropTypes.map,
    resetFocusFilter: PropTypes.func,
    setFocusTable: PropTypes.func,
    setFocusFilter: PropTypes.func
};

const mapStateToProps = (state) => ({
    filter: getFilter(state),
    focusFilterSignal: state.focusFilterSignal,
});

export default connect(
    mapStateToProps,
    {setFilter, resetFocusFilter, setFocusTable, setFocusFilter}
)(FilterButton);
