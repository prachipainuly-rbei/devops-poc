/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Tag.jsx 184897 2018-10-10 07:57:59Z gwe $"
 */

import React from 'react';
import {prefixNS} from '../helpers.js';
import {PropTypes, classNames} from 'cs-web-components-externals';
import Button from './Button.jsx';

/**
 * A simple label component that renders a value as a tag. The component
 * provides callbacks for clicking the tag and the provided glyph. The glyph
 * is usually used as a remove-button. In order to render these components,
 * consider using :ref:`cs-web-components-base-components.Tags.__default__`
 *
 * +----------------------------+--------+---------+---------------------------------------------------+
 * | Name                       | Type   | Default | Description                                       |
 * +============================+========+=========+===================================================+
 * | name                       | string | \-      | The value to be displayed.                        |
 * +----------------------------+--------+---------+---------------------------------------------------+
 * | id                         | string | \-      | Id of the tag, used in the callbacks.             |
 * +----------------------------+--------+---------+---------------------------------------------------+
 * | onClickIcon                | func   | \-      | Callback that is executed, when the icon is       |
 * |                            |        |         | clicked.                                          |
 * +----------------------------+--------+---------+---------------------------------------------------+
 * | onClickTag                 | func   | \-      | Callback that is executed, when the tag is        |
 * |                            |        |         | clicked.                                          |
 * +----------------------------+--------+---------+---------------------------------------------------+
 */
export default class Tag extends React.Component {

    constructor(props) {
        super(props);
        this.onClickTag = this.onClickTag.bind(this);
        this.onClickIcon = this.onClickIcon.bind(this);
    }

    onClickTag() {
        if (this.props.onClickTag) {
            this.props.onClickTag(this.props.id);
        }
    }

    onClickIcon() {
        if (this.props.onClickIcon) {
            this.props.onClickIcon(this.props.id);
        }
    }

    render() {
        const {onClickTag, onClickIcon, name} = this.props;
        const clickComp = onClickIcon ? (
            <Button.CloseButton
                onClick={this.onClickIcon}
                className={prefixNS("generic-tag-click-icon")} />
        ) : null;

        const clsnames =
            classNames(
                prefixNS('generic-tag'),
                {[prefixNS('generic-tag-click')]: onClickTag},
                {[prefixNS('generic-tag-none-click')]: !onClickTag}
            );

        return (
            <div className={clsnames} onClick={this.onClickTag}>
                <span>{name}</span>
                {clickComp}
            </div>
        );
    }
}

Tag.propTypes = {
    name: PropTypes.string.isRequired,
    id: PropTypes.string.isRequired,
    onClickIcon: PropTypes.func,
    onClickTag: PropTypes.func,
};
