/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Menu.jsx 183550 2018-09-07 13:08:38Z bwf $"
 */

import React from 'react';
import {PropTypes, classNames} from 'cs-web-components-externals';
import {prefixNS} from '../helpers.js';
import {
    addLocalShortcuts,
    addLocalShortcut,
    removeAllLocalShortcuts
} from '../key-handlers.js';

/**
 * A container for MenuItems.
 *
 * This component controls the communication between its
 * :ref:`cs-web-components-base-overlays.Menu.MenuItem` children,
 * and the surrounding overlay.
 *
 * Properties
 * ==========
 *
 * =========== =========== ===============================================
 *    Name        Type        Description
 * =========== =========== ===============================================
 *  onHide      function    Handler for hiding menu when item is clicked.
 *  children    element     Content of the menu.
 * =========== =========== ===============================================
 */
export class Menu extends React.Component {
    constructor(props) {
        super(props);
        this.state = {selectedIndex: -1, selectedKey: null};
        this.setMenuRef = this.setMenuRef.bind(this);
        this.onFocus = this.onFocus.bind(this);
        this.nextItem = this.nextItem.bind(this);
        this.previousItem = this.previousItem.bind(this);
    }

    setMenuRef(c) {
        this._menuElement = c;
    }

    componentDidMount() {
        addLocalShortcuts(
            this._menuElement,
            [
                ['ArrowDown', this.nextItem],
                ['ArrowUp', this.previousItem]
            ]
        );
    }

    onFocus(evt) {
        evt.stopPropagation();
    }

    componentWillUnmount() {
        removeAllLocalShortcuts(this._menuElement);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.children !== this.props.children) {
            this.setState({selectedIndex: -1});
        }
    }

    getItemElements() {
        return this._menuElement.getElementsByClassName(prefixNS('menu__item'));
    }

    nextItem() {
        const items = this.getItemElements();
        let selectedIndex = this.state.selectedIndex + 1;
        if (selectedIndex === items.length) {
            selectedIndex = -1;
        }
        this.updateSelection(items, selectedIndex);
    }

    previousItem() {
        const items = this.getItemElements();
        const selectedIndex =
            (this.state.selectedIndex === -1 ? items.length : this.state.selectedIndex) - 1;
        this.updateSelection(items, selectedIndex);
    }

    updateSelection(items, selectedIndex) {
        const selectedElement = selectedIndex === -1 ? null :
                                items[selectedIndex];

        if (selectedElement) {
            selectedElement.focus();
        } else {
            this._menuElement.focus();
        }

        const selectedKey = selectedElement === null ? null :
                            selectedElement.attributes['data-ce-select-key'].value;
        this.setState({selectedIndex, selectedKey});
    }

    render() {
        const {onHide, onSelect, children} = this.props;
        return (
            <ul tabIndex={-1}
                onFocus={this.onFocus}
                ref={this.setMenuRef}
                className={prefixNS('menu')}>
                {
                    // We inject the overlays onHide call into items to use onClick
                    // onSelect is only injected if not provided by the item itself
                    React.Children.map(
                        children,
                        (c, idx) => {
                            const selectKey = `menu-${idx}`;
                            const selected = selectKey === this.state.selectedKey;
                            return (
                                c ?
                                (
                                    c.props.onSelect ?
                                    React.cloneElement(c, {selected, selectKey, onHide}) :
                                    React.cloneElement(c, {selected, selectKey, onHide, onSelect})
                                ) :
                                c
                            );
                        }
                    )
                }
            </ul>
        );
    }
}

Menu.propTypes = {
    onHide: PropTypes.func,
    onSelect: PropTypes.func,
};

/**
 * A headline for use in Menus. Renders the string provided by property ``label``.
 *
 * @class MenuHeader
 */
export function MenuHeader(props) {
    return (<li className={'dropdown-header'}>{props.label || props.children}</li>);
}

MenuHeader.propTypes = {
    label: PropTypes.string,
};

/**
 * Represents an entry in a menu.
 *
 * Properties
 * ==========
 *
 * =========== =========== ===============================
 *    Name        Type        Description
 * =========== =========== ===============================
 *  onSelect    function    Invoked when item is selected
 *  onClick     function    Alias for ``onSelect``
 *  children    element     Content of Item
 * =========== =========== ===============================
 */
export class MenuItem extends React.Component {
    constructor(props) {
        super(props);
        this.onSelect = this.onSelect.bind(this);
        this.setItemRef = this.setItemRef.bind(this);
    }

    setItemRef(c) {
        if (c) {
            this.itemElement = c;
            addLocalShortcut(this.itemElement, 'Enter', this.onSelect);
        } else {
            removeAllLocalShortcuts(this.itemElement);
            this.itemElement = c;
        }
    }

    onSelect() {
        const {disabled, eventKey, onSelect, onClick, onHide} = this.props;

        if (disabled) {
            return;
        }

        if (onHide) {
            onHide();
        }

        const cb = (onSelect || onClick);
        if (cb) {
            cb(eventKey);
        }
    }

    render() {
        const {
            active, className, disabled, selectKey, selected, children, divider, header
            } = this.props;
        if (divider) {
            return (<MenuDivider/>);
        }
        if (header) {
            return (<MenuHeader>{children}</MenuHeader>);
        }
        const clsNames = classNames(
            className,
            prefixNS('menu__item'),
            {[prefixNS('menu__item--selected')]: selected},
            {'active': active && !selected},
            {'disabled': disabled && !selected},
        );

        return (
            <li className={clsNames}
                ref={this.setItemRef}
                tabIndex={-1}
                data-ce-select-key={selectKey}
                onClick={this.onSelect}>
                <a>
                    {children}
                </a>
            </li>
        );
    }
}

MenuItem.propTypes = {
    selectKey: PropTypes.string,
    className: PropTypes.string,
    active: PropTypes.bool,
    disabled: PropTypes.bool,
    selected: PropTypes.bool,
    eventKey: PropTypes.any,
    onHide: PropTypes.func,
    onSelect: PropTypes.func,
    onClick: PropTypes.func,
    divider: PropTypes.bool,
    header: PropTypes.bool,
};

MenuItem.defaultProps = {
    disabled: false,
};

/**
 * A divider for use in Menus. Renders a thin line between
 * the items before and after it.
 *
 * @class MenuDivider
 */
export function MenuDivider() {
    return (<li className={'divider'} />);
}
