/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: OperationModal.jsx 184313 2018-09-24 10:09:19Z cla $"
 */

import React from 'react';
import ReactDOM from 'react-dom';
import Immutable from 'immutable';
import {PropTypes} from 'cs-web-components-externals';
import {WithOperationHandler} from '../form/containers/OperationHandler.jsx';
import Dialog from '../dialogs';
import {ConfiguredFormRaw} from '../form/containers/ConfiguredForm.jsx';

const DIALOG_SIZES = Immutable.fromJS([Dialog.SIZE_MEDIUM, Dialog.SIZE_LARGE]);

export class OperationModalRaw extends React.Component {
    constructor(props) {
        super(props);
        this.state = {containerRef: undefined};
        this.setBodyRef = this.setBodyRef.bind(this);
    }

    setBodyRef(c) {
        if (c) {
            this.setState({containerRef: ReactDOM.findDOMNode(c)});  // eslint-disable-line react/no-find-dom-node
        } else {
            this.setState({containerRef: undefined});
        }
    }

    render() {
        const {operationState} = this.props;

        if (!operationState.get('displayForm')) {
            return null;
        }

        const label = operationState.getIn(['info', 'label']);
        return (
            <ConfiguredFormRaw containerRef={this.state.containerRef} {...this.props}>
                {(form, buttons, onSubmit, onCancel) =>
                    <Dialog.Dialog title={label}
                                   bodyRef={this.setBodyRef}
                                   buttons={buttons}
                                   sizes={DIALOG_SIZES}
                                   onAction={onSubmit}
                                   onHide={onCancel}
                                   showCancel={true}
                                   show={true}>
                        {form}
                    </Dialog.Dialog>}
            </ConfiguredFormRaw>
        );
    }
}

OperationModalRaw.propTypes = {
    operationState: PropTypes.object,
};

/**
 * An operation handler that executes the given operation by
 * rendering the mask configured in |elements| in a modal dialog.
 *
 * @class OperationModal
 * @extends React.Component
 */
export default WithOperationHandler(OperationModalRaw, "modal");
