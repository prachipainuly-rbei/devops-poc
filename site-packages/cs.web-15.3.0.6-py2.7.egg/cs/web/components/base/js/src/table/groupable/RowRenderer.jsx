/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RowRenderer.jsx 184878 2018-10-09 13:31:54Z gwe $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import SVGIcon from '../../components/SVGIcon';
import {prefixNS} from '../../helpers';
import connect from '../connect';
import {formatStr} from '../../i18n';
import {toggleGroup} from './actions';
import {getCollapsedGroups} from './reducers';
import ColumnContent from '../ColumnContent';
import AmountBadge from '../../components/AmountBadge';

import down_arrow from '../../../../resources/cis_chevron-down.svg';
import right_arrow from '../../../../resources/cis_chevron-right.svg';

function ExpandButton({row, toggleCollapse, collapsed}) {
    const icon = collapsed ? right_arrow : down_arrow;
    return (
        <SVGIcon
            className={prefixNS('table-group-row__expander')}
            onClick={(event) => toggleCollapse(row, event)}
            src={icon}
            size="sm" />
    );
}

ExpandButton.propTypes = {
    row: ImmutablePropTypes.map,
    toggleCollapse: PropTypes.func,
    collapsed: PropTypes.bool
};

export class RowRenderer extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            collapsed: this.isCollapsed(props.collapsedGroups, props.row)
        };
        this.toggleGroup = this.toggleGroup.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.collapsedGroups !== this.props.collapsedGroups ||
            nextProps.row !== this.props.row) {
            this.setState({
                collapsed: this.isCollapsed(
                    nextProps.collapsedGroups, nextProps.row)
            });
        }
    }


    isCollapsed(collapsedGroups, row) {
        return collapsedGroups.contains(row.get('id'));
    }

    toggleGroup(row) {
        this.props.toggleGroup(row.get('id'));
    }

    render() {
        const {row, columns} = this.props;
        const colDef = columns.find(col =>
            col.get('id') === row.get('columnID'));
        const ColRenderer = colDef.get('contentRenderer') || ColumnContent;
        const value = row.get('value');
        const level = row.get('level');
        const style = {paddingLeft: `${level}em`};
        const groupSize = row.get('groupSize');
        return (
            <div className={prefixNS('table-group-row-renderer')}
                 style={style}>
                <ExpandButton row={row}
                              toggleCollapse={this.toggleGroup}
                              collapsed={this.state.collapsed}/>
                <AmountBadge amount={groupSize}
                            tooltip={formatStr('subelements', {amount: groupSize})} />
                <div className={prefixNS('table-group-row-renderer__content')}>
                    <ColRenderer value={value} column={colDef} row={row} isGroup/>
                </div>
            </div>
        );
    }
}

RowRenderer.propTypes = {
    columns: ImmutablePropTypes.list,
    row: ImmutablePropTypes.map,
    toggleGroup: PropTypes.func,
    collapsedGroups: ImmutablePropTypes.set
};

function mapStateToProps(state) {
    const {columns} = state;
    const collapsedGroups = getCollapsedGroups(state);
    return {
        columns, collapsedGroups
    };
}

export default connect(mapStateToProps, {toggleGroup})(RowRenderer);
