/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchByFavourite.jsx 172732 2018-02-01 15:51:20Z gwe $"
 */

import React from 'react';
import {ImmutablePropTypes, PropTypes, connect} from 'cs-web-components-externals';
import Table from '../table';
import TableWrapper from '../components/TableWrapper.jsx';
import Throbber from '../components/Throbber.jsx';
import {getFavouriteForInstance} from './selectors/instances.js';

class SearchByFavourite extends React.Component {
    constructor(props) {
        super(props);
        const resultTableOptions = Table.PredefinedTables.getDefaultTableOptions();
        resultTableOptions.Layout = Table.DefaultLayout;
        resultTableOptions.Table = Table.Table;
        this.table = Table.PredefinedTables.DefaultTable(resultTableOptions);
        this.getTable = () => this.table;
    }

    render() {
        const {searchResult, searchRunning, clsTitle, children} = this.props;
        let resultTitle = '';
        let resultArea = null;
        if (searchRunning) {
            resultArea = (<Throbber />);
        }
        else if (searchResult) {
            resultTitle = ` (${searchResult.get('no_of_records_label')})`;
            resultArea = (
                <TableWrapper
                    tableDef={searchResult.get('tabledef')}
                    rowValues={searchResult.get('rows')}
                    singleSelection={false}
                    withSelector={false}
                    table={this.getTable}/>
            );
        }
        const title = `${clsTitle}${resultTitle}`;
        return children(title, resultArea);
    }
}

SearchByFavourite.propTypes = {
    instanceName: PropTypes.string.isRequired,
    // store
    searchResult: ImmutablePropTypes.map,
    searchRunning: PropTypes.bool,
    searchError: PropTypes.any,
    clsTitle: PropTypes.string
};

function mapStateToProps(state, ownProps) {
    const {instanceName} = ownProps;
    const instance = state.search.instances.get(instanceName);
    if (instance === undefined) {
        return {};
    }
    const selectedFavourite = getFavouriteForInstance(state, instanceName);
    const designation = state.search.favouritesByClass.getIn(
        [instance.get('classname'), 'classDesignation']);
    const clsTitle = selectedFavourite ? `${designation} - ${selectedFavourite.get('name')}` : '';
    return {
        searchResult: instance.get('searchResult'),
        searchRunning: instance.get('searchRunning'),
        searchError: instance.get('searchError'),
        clsTitle
    };
}

export default connect(mapStateToProps)(SearchByFavourite);
