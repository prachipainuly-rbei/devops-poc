/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Spinner.jsx 178730 2018-06-11 09:27:47Z vov $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {combineInputExtensions} from './TextInput';
import {sharedTextInputProps} from './sharedPropTypes';
import NumericEdit from './NumericEdit.jsx';
import Button from '../components/Button';
import {formatStr} from '../i18n';

/**
 * This component extends NumericEdit to show spinner buttons for increasing/decreasing values
 *
 * +------------------+--------------+--------------+---------------------------------------------+
 * | Property         | Type         | Default      | Use                                         |
 * +==================+==============+==============+=============================================+
 * | step             | number       | 1            | The step in which to in-/decrease value     |
 * |                  |              |              | when the respective button is pushed.       |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | minValue         | number       | -            | Minimum allowed value of Spinner            |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | maxValue         | number       | -            | Maximum allowed value of Spinner            |
 * +------------------+--------------+--------------+---------------------------------------------+
 *
 */
export default class Spinner extends React.Component {
    constructor(props) {
        super(props);
        this.increaseValue = this.increaseValue.bind(this);
        this.decreaseValue = this.decreaseValue.bind(this);
        this.checkedValueChange = this.checkedValueChange.bind(this);
        this.onBlur = this.onBlur.bind(this);
    }

    checkedValueChange(value) {
        const {onValueChange, maxValue, minValue} = this.props;
        if (onValueChange === undefined) {
            return;
        } else if ((maxValue === undefined || value <= maxValue) &&
                   (minValue === undefined || value >= minValue)) {
            onValueChange(value);
        }
    }

    onBlur() {
        const {onValueChange, value, maxValue, minValue} = this.props;
        if (onValueChange === undefined) {
            return;
        } else if (value > maxValue) {
            onValueChange(maxValue);
        } else if (value < minValue) {
            onValueChange(minValue);
        }
    }

    increaseValue() {
        const {value, step} = this.props;
        this.checkedValueChange(value === undefined ?
                                this.props.minValue :
                                value + step);
    }

    decreaseValue() {
        const {value, step} = this.props;
        this.checkedValueChange(value === undefined ?
                                this.props.maxValue :
                                value - step);
    }

    render() {
        const {afterControl, ...others} = this.props;
        const {value, step, maxValue, minValue} = this.props;
        const increaseDisabled = value + step > maxValue;
        const decreaseDisabled = value - step < minValue;
        const combinedAfterControls = combineInputExtensions(
            [
                <Button.DecreaseButton
                    key="decrease"
                    onClick={this.decreaseValue}
                    disabled={decreaseDisabled}
                    title={formatStr("tree_decreaseLevel")}/>,
                <Button.IncreaseButton
                    key="increase"
                    onClick={this.increaseValue}
                    disabled={increaseDisabled}
                    title={formatStr("tree_increaseLevel")}/>
            ],
            afterControl
        );

        return (
            <NumericEdit onBlur={this.onBlur}
                         afterControl={combinedAfterControls}
                         {...others} />
        );
    }
}

Spinner.propTypes = {
    ...sharedTextInputProps,
    onValueChange: PropTypes.func,
    step: PropTypes.number,
    minValue: PropTypes.number,
    maxValue: PropTypes.number
};

Spinner.defaultProps = {
    step: 1,
    decimalPlaces: 0
};
