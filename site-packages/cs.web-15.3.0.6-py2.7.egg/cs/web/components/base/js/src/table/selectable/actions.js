/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: actions.js 175531 2018-04-05 13:41:52Z mbr $"
 */

import Immutable from 'immutable';
import {setSelectedRows, setFocusedColumn,
        setFocusedRow, selectRange} from '../common/actions';

export const SET_SINGLE_SELECTION_MODE = `${componentNameSpace}-SET_SINGLE_SELECTION_MODE`;
export const SET_ALL_SELECTOR = `${componentNameSpace}-SET_ALL_SELECTOR`;

export function setSingleSelectionMode(isSingle) {
    return {
        type: SET_SINGLE_SELECTION_MODE,
        payload: isSingle
    };
}

function updateFocus(row, col = undefined) {
    return dispatch => {
        dispatch(setFocusedRow(row));
        if (col) {
            dispatch(setFocusedColumn(col));
        }
    };
}

export function selectRow(row, col = undefined, shiftKey = false, ctrlKey = false) {
    return (dispatch, getState) => {
        const {selectedRows, singleSelectionMode, focusedRow} = getState();
        const selected = selectedRows.contains(row);
        const focused = selectedRows.contains(focusedRow);

        if (!ctrlKey && !shiftKey) {
            const _selected = selected && selectedRows.count() === 1;
            dispatch(updateFocus(row, col));
            return dispatch(setSelectedRows(
                (_selected ?
                 Immutable.OrderedSet() :
                 Immutable.OrderedSet([row])),
                row
            ));
        }

        if (singleSelectionMode) {
            dispatch(updateFocus(row, col));
            return dispatch(setSelectedRows(
                (selected ?
                 selectedRows.delete(row) :
                 Immutable.OrderedSet([row])),
                row
            ));
        } else {
            dispatch(updateFocus(row, col));
            if (shiftKey && focused) {
                return dispatch(selectRange(focusedRow, row, ctrlKey));
            }
            return dispatch(setSelectedRows(
                (selected ?
                 selectedRows.delete(row) :
                 selectedRows.add(row)),
                row
            ));
        }
    };
}

export function selectRows(rows, focusedRow, selectionAnchor) {
    return (dispatch) => {
        dispatch(updateFocus(focusedRow));
        dispatch(setSelectedRows(rows, selectionAnchor));
    };
}

export function setAllSelector(b) {
    return {
        type: SET_ALL_SELECTOR,
        payload: b
    };
}

export default {
    SET_SINGLE_SELECTION_MODE, SET_ALL_SELECTOR,
    setSingleSelectionMode, selectRow, selectRows,
    setAllSelector
};
