/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ColumnActions.jsx 174898 2018-03-22 14:54:34Z sla $"
 */

import React from 'react';
import {classNames} from 'cs-web-components-externals';
import Immutable from 'immutable';
import {prefixNS} from '../../helpers';
import connect from '../connect';
import {setSortColumns} from './actions';
import {getSortColumns} from './reducers';
import {ImmutablePropTypes} from 'cs-web-components-externals';
import SVGIcon from '../../components/SVGIcon';

import csweb_triangle_bottom from '../../../../resources/cis_triangle-bottom.svg';
import csweb_triangle_top from '../../../../resources/cis_triangle-top.svg';

export class SortButton extends React.PureComponent {
    constructor(props) {
        super(props);
        this.onSort = this.onSort.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.columnHeaderClicked !== this.props.columnHeaderClicked &&
            nextProps.columnHeaderClicked.get('columnID')
                === nextProps.column.get('id')) {
            this.setSortBy(nextProps);
        }
    }

    getSortingColumn(props) {
        const {column, sortColumns} = props;
        const columnID = column.get('id');
        return sortColumns.find(item => item.get('id') === columnID);
    }

    onSort() {
        this.setSortBy(this.props);
    }

    setSortBy(props) {
        const {column, setSortColumns, sortColumns} = props;
        const columnID = column.get('id');
        const sorting = this.getSortingColumn(props);
        // switch between unsorted => sort asc => sort desc => unsorted
        if (!sorting) {
            setSortColumns(
                sortColumns.add(
                    Immutable.Map({id: columnID, desc: false})));
        } else if (sorting.get('desc')) {
            setSortColumns(sortColumns.delete(sorting));
        } else {
            setSortColumns(
                sortColumns.delete(sorting).add(
                    sorting.set('desc', true)));
        }
    }

    render() {
        const {column, sortColumns} = this.props;
        const columnID = column.get('id');
        const sorting = this.getSortingColumn(this.props);
        const sortIcon = sorting && sorting.get('desc') ?
            csweb_triangle_bottom : csweb_triangle_top;
        const isLast = sortColumns.count() &&
            columnID === sortColumns.last().get('id');
        const sortClass = classNames(
            prefixNS('table-sort-button'), {
                'text-muted': !isLast
            }
        );
        return sorting ? (
            <span className={sortClass}
                  onClick={this.onSort}>
                <SVGIcon src={sortIcon} size="sm"/>
            </span>
        ) : null;
    }
}

SortButton.propTypes = {
    sortColumns: ImmutablePropTypes.orderedSet,
    column: ImmutablePropTypes.map,
    columnHeaderClicked: ImmutablePropTypes.map
};

function mapStateToProps(state) {
    const sortColumns = getSortColumns(state);
    const columnHeaderClicked = state.columnHeaderClicked;
    return {
        sortColumns, columnHeaderClicked
    };
}

export default connect(mapStateToProps, {setSortColumns})(SortButton);
