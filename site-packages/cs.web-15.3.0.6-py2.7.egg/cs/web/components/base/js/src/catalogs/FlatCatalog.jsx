/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: FlatCatalog.jsx 174613 2018-03-16 10:37:45Z mbr $"
 */

import React, {Component} from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS, isCEDesktop} from '../helpers';
import {postJSON} from '../fetch.js';
import Dialog from '../dialogs';
import ButtonToolbar from '../components/ButtonToolbar.jsx';
import Catalog from './Catalog.jsx';
import CatalogWithPreview from './CatalogWithPreview.jsx';

const EMPTY_PROPOSAL_IDS = Immutable.List();
const EMPTY_IDS = Immutable.List();

/**
 * This component renders a catalog. You might retrieve most of the properties using the
 * backend function `FormInfoBase.get_catalog_config`.
 *
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | Property          | Type          | Default | Required | Use                                                                                                    |
 * +===================+===============+=========+==========+========================================================================================================+
 * | formData          | Immutable.Map | -       | -        | Form data to be used to query catalog data entries                                                     |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | contextClass      | string        | -       | -        | Class of context objects for catalog data                                                              |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | activeLanguage    | string        | -       | -        | In which language should catalog data be loaded                                                        |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | selectURL         | string        | -       | yes      | URL to retrieve the result of the user selection                                                       |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | catalogTableURL   | string        | -       | yes      | URL to load table data and configuration for displaying the catalog entries                            |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | proposalCatalogURL| string        | -       | -        | URL to load table data and configuration for displaying the proposal table entries                     |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | proposalLabel     | string        | -       | -        | Proposal table title                                                                                   |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | onCancel          | function      | -       | -        | Function that is called if the user cancels the selection. The default handler closes the tab          |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | onSelect          | function      | -       | yes      | Called with the result of the selectURL as parameter                                                   |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 * | userSettings      | object        | -       | -        | Additional user settings                                                                               |
 * +-------------------+---------------+---------+----------+--------------------------------------------------------------------------------------------------------+
 *
 */
export default class FlatCatalog extends Component {
    constructor(props) {
        super(props);
        this.state = {
            selectedIDs: EMPTY_IDS,
            selectedProposalIDs: EMPTY_PROPOSAL_IDS,
            selectedURL: undefined
        };
        this.singleSelection = false;

        this.onSelectionChanged = this.onSelectionChanged.bind(this);
        this.onProposalSelectionChanged = this.onProposalSelectionChanged.bind(this);
        this.onTreeSelectionChanged = this.onTreeSelectionChanged.bind(this);
        this.setSingleSelection = this.setSingleSelection.bind(this);
        this.doCancel = this.doCancel.bind(this);
        this.doSelect = this.doSelect.bind(this);
    }

    doCancel() {
        if (isCEDesktop()) {
            window.external.cdbEFClose();
        } else {
            window.close();
        }
    }

    onSelectionChanged(selected, catalogId = '') {
        const selectedProposalIDs = this.singleSelection && selected.size !== 0 ?
            EMPTY_PROPOSAL_IDS : this.state.selectedProposalIDs;
        this.setState({selectedIDs: selected, selectedProposalIDs, catalogId});
    }

    onProposalSelectionChanged(selected) {
        const selectedIDs = this.singleSelection && selected.size !== 0 ?
            EMPTY_IDS : this.state.selectedIDs;
        this.setState({selectedProposalIDs: selected, selectedIDs});
    }

    onTreeSelectionChanged(selectedURL) {
        this.setState({
            selectedURL: selectedURL
        });
    }

    setSingleSelection(single) {
        this.singleSelection = single;
    }

    renderCatalog() {
        const {
            catalogTableURL, proposalCatalogURL, proposalLabel, queryFormURL, operationState
        } = this.props;
        return (
            <Catalog
                catalogTableURL={catalogTableURL}
                proposalCatalogURL={proposalCatalogURL}
                proposalLabel={proposalLabel}
                structureRootURL={null}
                queryFormURL={queryFormURL}
                formData={this.prepareData()}
                operationState={operationState}
                selectedIDs={this.state.selectedIDs}
                selectedProposalIDs={this.state.selectedProposalIDs}
                setSingleSelection={this.setSingleSelection}
                onSelectionChanged={this.onSelectionChanged}
                onTreeSelectionChanged={this.onTreeSelectionChanged}
                onProposalSelectionChanged={this.onProposalSelectionChanged}
            />
        );
    }

    renderCatalogWithPreview() {
        const {previewWidth, previewComponent, userSettings} = this.props;
        return (
            <CatalogWithPreview
                previewWidth={previewWidth}
                previewComponent={previewComponent}
                userSettings={Immutable.fromJS(userSettings)}>
                {this.renderCatalog()}
            </CatalogWithPreview>
        );
    }

    render() {
        const {catalogTableURL, selectButtonLabel, withPreview} = this.props;

        const selectDisabled = catalogTableURL !== '' ?
                               !(this.state.selectedIDs.count() > 0 ||
                                 this.state.selectedProposalIDs.count() > 0) :
                               (this.state.selectedURL === undefined ||
                                this.state.selectedURL === '');
        const select_label = selectButtonLabel ? selectButtonLabel : undefined;

        return (
            <div className={prefixNS('flat-catalog')}>
                <div className={prefixNS('flat-catalog__catalog')}>
                    {withPreview ?
                        this.renderCatalogWithPreview()
                        : this.renderCatalog()
                    }
                </div>
                <ButtonToolbar
                    data-ce-id="flatcatalog-action-"
                    className={prefixNS("form-actions")}
                >
                    <Dialog.Buttons.Select
                            key="select"
                            labelId={select_label}
                            disabled={selectDisabled}
                            onClick={this.doSelect} />
                        <Dialog.Buttons.Cancel
                            key="cancel"
                            onClick={this.doCancel} />
                </ButtonToolbar>
            </div>
        );
    }

    prepareData() {
        const {contextClass, activeLanguage} = this.props;
        const formData = this.props.formData;
        if (activeLanguage) {
            formData['cdb::argument.catalogfieldactivelang'] = activeLanguage;
        }
        if (contextClass) {
            formData['cdb::argument.catalogcall_cldef'] = contextClass;
        }
        return {
            'form_data': formData,
            'catalog_field': "z_nummer",
            'operation_state': this.props.operationState
        };
    }

    doSelect() {
        const ids = this.state.selectedIDs.concat(this.state.selectedProposalIDs);
        const {selectURL, onSelect} = this.props;
        const jsonData = this.prepareData();
        jsonData['selected_ids'] = ids.toArray();
        if (this.state.catalogId) {
            jsonData['catalog_id'] = this.state.catalogID;
        }
        postJSON(selectURL, jsonData)
            .then(result => {
                onSelect(result);
            });
    }
}
FlatCatalog.propTypes = {
    onSelect: PropTypes.func.isRequired,
    selectURL: PropTypes.string.isRequired,
    catalogTableURL: PropTypes.string.isRequired,
    activeLanguage: PropTypes.string,
    contextClass: PropTypes.string,
    formData: ImmutablePropTypes.map,
    operationState: PropTypes.object,
    proposalLabel: PropTypes.string,
    proposalCatalogURL: PropTypes.string,
    queryFormURL: PropTypes.string,
    selectButtonLabel: PropTypes.string,
    withPreview: PropTypes.bool,
    previewComponent: PropTypes.node,
    previewWidth: PropTypes.string,
    userSettings: PropTypes.object,
};
FlatCatalog.defaultProps = {
    withPreview: false,
    previewWidth: "200px"
};
