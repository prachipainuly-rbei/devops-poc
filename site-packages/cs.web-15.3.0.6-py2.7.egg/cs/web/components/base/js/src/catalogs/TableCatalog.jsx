/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TableCatalog.jsx 174283 2018-03-09 10:30:35Z gwe $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, connect, classNames} from 'cs-web-components-externals';
import {formatStr} from '../i18n';
import {prefixNS} from '../helpers';
import CatalogTable from './CatalogTable';
import Table from '../table';
import SplitLayout from '../layouts/SplitLayout.jsx';
import SearchBar from '../search/SearchBar.jsx';
import {createCatalogSearchInstance, removeSearchInstance} from '../search/actions';

const ProposalFilter = Table.filterable.FilterButton;

let instanceCounter = 0;

function nextInstanceName() {
    return `catalog-${++instanceCounter}`;
}

class TableCatalog extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            filter: ''
        };
        this.instanceName = nextInstanceName();
        this.proposalInstanceName = `${this.instanceName}-proposal`;
        this.setFilter = this.setFilter.bind(this);
    }

    componentDidMount() {
        const {
            createCatalogSearchInstance, catalogTableURL, proposalCatalogURL, queryFormURL, formData
        } = this.props;
        createCatalogSearchInstance(this.instanceName, catalogTableURL, queryFormURL, formData);
        if (proposalCatalogURL) {
            createCatalogSearchInstance(
                this.proposalInstanceName, proposalCatalogURL, null, formData);
        }
    }

    componentWillUnmount() {
        this.props.removeSearchInstance(this.instanceName);
        // trying to remove an instance that may not be there does no harm.
        this.props.removeSearchInstance(this.proposalInstanceName);
    }

    setFilter(filter) {
        this.setState({filter});
    }

    renderSearchComponent() {
        if (!this.props.queryFormURL) {
            return null;
        }
        return (
            <SearchBar
                instanceName={this.instanceName}
                classTitle='' />
        );
    }

    renderProposalCatalog() {
        const {
            proposalLabel, selectedProposalIDs, onProposalSelectionChanged, onSelect
        } = this.props;
        return (
            <div className={prefixNS('table-catalog-filter-and-proposal')}>
                <div className={prefixNS('table-catalog-proposal-filter')}>
                    <ProposalFilter setFilter={this.setFilter}/>
                </div>
                <div className={prefixNS('table-catalog-proposal-table')}>
                    <CatalogTable
                        instanceName={this.proposalInstanceName}
                        title={proposalLabel}
                        onSelectionChanged={onProposalSelectionChanged}
                        filter={this.state.filter}
                        proposalCatalog={true}
                        selectedIDs={selectedProposalIDs.toOrderedSet()}
                        onSelect={onSelect}
                    />
                </div>
            </div>
        );
    }

    renderTableCatalog() {
        const {
            proposalCatalogURL, selectedIDs, setSingleSelection, onSelectionChanged,
            onSelect, onPreviewEnable
        } = this.props;
        const isProposal = proposalCatalogURL ? true : false;
        const cn = classNames(prefixNS('table-catalog'), {
            [prefixNS('table-catalog-with-proposal')]: isProposal
        });
        return (
            <div className={cn}>
                {isProposal ? this.renderProposalCatalog() : null}
                <div className={prefixNS('table-catalog-table')}>
                    <CatalogTable
                        instanceName={this.instanceName}
                        title={isProposal ? formatStr("tabcatalog_proposal_all_title") : undefined}
                        onSelectionChanged={onSelectionChanged}
                        filter={this.state.filter}
                        proposalCatalog={isProposal}
                        selectedIDs={selectedIDs.toOrderedSet()}
                        onSetSingleSelection={setSingleSelection}
                        onSelect={onSelect}
                        onPreviewEnable={onPreviewEnable}
                    />
                </div>
            </div>
        );
    }

    renderTableCatalogWithSearch() {
        return (
            <SplitLayout
                split="vertical" primary="first"
                defaultSize="300px" minSize="0px"
                className={prefixNS('table-catalog-with-search')}
            >
                {this.renderSearchComponent()}
                {this.renderTableCatalog()}
            </SplitLayout>
        );
    }

    render() {
        const {queryFormURL} = this.props;
        if (queryFormURL) {
            return this.renderTableCatalogWithSearch();
        }
        else {
            return this.renderTableCatalog();
        }
    }
}

TableCatalog.propTypes = {
    catalogTableURL: PropTypes.string.isRequired,
    proposalCatalogURL: PropTypes.string,
    proposalLabel: PropTypes.string,
    queryFormURL: PropTypes.string,
    formData: PropTypes.object,
    operationState: ImmutablePropTypes.map,
    selectedIDs: ImmutablePropTypes.list,
    selectedProposalIDs: ImmutablePropTypes.list,
    setSingleSelection: PropTypes.func.isRequired,
    onSelectionChanged: PropTypes.func.isRequired,
    onProposalSelectionChanged: PropTypes.func.isRequired,
    onPreviewEnable: PropTypes.func,
    onSelect: PropTypes.func,
    // actions
    createCatalogSearchInstance: PropTypes.func.isRequired,
    removeSearchInstance: PropTypes.func.isRequired
};

const actions = {createCatalogSearchInstance, removeSearchInstance};

export default connect(null, actions)(TableCatalog);
