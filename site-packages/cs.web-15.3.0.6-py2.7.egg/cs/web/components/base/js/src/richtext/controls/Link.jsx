/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Link.jsx 184253 2018-09-21 08:57:04Z ssa $"
 */

import React from 'react';
import {PropTypes, DraftJS} from 'cs-web-components-externals';
import ButtonGroup from '../../components/ButtonGroup.jsx';
import Button from '../../components/Button.jsx';
import Dialog from '../../dialogs';
import {formatStr} from '../../i18n';
import {prefixNS} from '../../helpers';

export default class LinkControl extends React.Component {
    constructor() {
        super();
        this.state = {
            showURLInput: false,
            urlValue: ''
        };
        this.onToggle = this._onToggle.bind(this);
        this.onHide = this._onHide.bind(this);
        this.onOK = this._onOK.bind(this);
    }

    _onToggle() {
        const {editorState} = this.props;
        const selection = editorState.getSelection();
        if (!selection.isCollapsed()) {
            const contentState = editorState.getCurrentContent();
            const startKey = editorState.getSelection().getStartKey();
            const startOffset = editorState.getSelection().getStartOffset();
            const blockWithLinkAtBeginning = contentState.getBlockForKey(startKey);
            const linkKey = blockWithLinkAtBeginning.getEntityAt(startOffset);

            let url = '';
            if (linkKey) {
                const linkInstance = contentState.getEntity(linkKey);
                url = linkInstance.getData().href;
            }
            this.setState({
                showURLInput: true,
                urlValue: url
            });
        }
    }

    _onHide() {
        const {editorState, onChange} = this.props;
        const selection = editorState.getSelection();
        const newEditorState = DraftJS.EditorState.forceSelection(
            editorState,
            selection.merge({
                hasFocus: true
            })
        );
        onChange(newEditorState);
        this.setState({showURLInput: false});
    }

    _onOK(value) {
        const {editorState, onChange} = this.props;
        const selection = editorState.getSelection();
        const contentState = editorState.getCurrentContent();
        const contentStateWithEntity = contentState.createEntity(
            'LINK',
            'MUTABLE',
            {href: value}
        );
        const entityKey = contentStateWithEntity.getLastCreatedEntityKey();
        let newEditorState = DraftJS.EditorState.set(editorState,
                                              {currentContent: contentStateWithEntity});
        if (value) {
            newEditorState = DraftJS.RichUtils.toggleLink(newEditorState,
                                                  newEditorState.getSelection(),
                                                  entityKey);
        } else {
            newEditorState = DraftJS.RichUtils.toggleLink(newEditorState,
                                                  newEditorState.getSelection(),
                                                  null);
        }
        newEditorState = DraftJS.EditorState.forceSelection(
            newEditorState,
            selection.merge({
                hasFocus: true
            })
        );
        onChange(newEditorState);
    }

    render() {
        return (
            <ButtonGroup>
                <Button.IconButton onMouseDown={(event) => {
                    event.preventDefault();
                    this.onToggle();}
                }
                    iconName="csweb_richtext_link"
                    buttonStyle="outline"
                    title={formatStr('richtext_link')}
                />
                <Dialog.InputDialog show={this.state.showURLInput}
                                    title={formatStr('richtext_link')}
                                    value={this.state.urlValue}
                                    onSubmitValue={this.onOK}
                                    onHide={this.onHide}
                                    id={prefixNS('richtext-link')}
                                    />
            </ButtonGroup>
        );
    }
}

LinkControl.propTypes = {
    onChange: PropTypes.func.isRequired,
    editorState: PropTypes.object.isRequired
};
