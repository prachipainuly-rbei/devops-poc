/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: WithSpeechRecognition.jsx 164193 2017-08-30 10:33:11Z gwe $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {getAppSetup, Console} from '../helpers.js';

function getAPI() {
    return window.SpeechRecognition ||
        window.webkitSpeechRecognition ||
        window.mozSpeechRecognition ||
        window.msSpeechRecognition ||
        window.oSpeechRecognition;
}

function concatTranscripts(...transcriptParts) {
    return transcriptParts.map(t => t.trim()).join(' ').trim();
}

export default class WithSpeechRecognition extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            interimTranscript: '',
            finalTranscript: ''
        };
        this.API = getAPI();
        this.recognition = null;
        this.initSpeechAPI(props);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.allowSpeech !== this.props.allowSpeech) {
            this.initSpeechAPI(nextProps);
            if (this.recognition === null) {
                this.setState({
                    interimTranscript: '',
                    finalTranscript: ''
                });
            }
            else {
                this.recognition.start();
            }
        }
    }

    componentWillUnmount() {
        if (this.recognition !== null) {
            this.recognition.abort();
        }
    }

    initSpeechAPI(props) {
        if (props.allowSpeech && this.API !== undefined) {
            this.recognition = new this.API();
            this.recognition.continuous = false;
            this.recognition.interimResults = true;
            this.recognition.lang = getAppSetup().getIn(["appSettings", "language"]);
            this.recognition.onresult = this.onSpeechResult.bind(this);
            this.recognition.onend = this.onSpeechEnd.bind(this);
            this.recognition.onerror = this.onSpeechError.bind(this);
        }
        else if (this.recognition !== null) {
            this.recognition.abort();
            this.recognition = null;
        }
    }

    onSpeechResult(event) {
        let finalTranscript = this.state.finalTranscript;
        let interimTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; ++i) {
            if (event.results[i].isFinal) {
                finalTranscript =
                    concatTranscripts(finalTranscript, event.results[i][0].transcript);
            }
            else {
                interimTranscript =
                    concatTranscripts(interimTranscript, event.results[i][0].transcript);
            }
        }
        this.setState({finalTranscript, interimTranscript});
    }

    onSpeechEnd() {
        const {onTextRecognized} = this.props;
        const {finalTranscript} = this.state;
        if (finalTranscript !== '') {
            this.recognition.abort();
            if (onTextRecognized !== undefined) {
                onTextRecognized(finalTranscript);
            }
        }
        else if (this.recognition !== null) {
            this.recognition.start();
        }
    }

    onSpeechError(event) {
        Console.error(`Speech recognition error detected: ${event.error}, switching off!`);
        this.recognition.abort();
        this.recognition = null;
    }

    render() {
        const {interimTranscript, finalTranscript} = this.state;
        return this.props.children({
            speechAvailable: this.API !== undefined,
            interimTranscript,
            finalTranscript
        });
    }
}
WithSpeechRecognition.propTypes = {
    allowSpeech: PropTypes.bool.isRequired,
    onTextRecognized: PropTypes.func
};
