/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ToolbarButton.jsx 184479 2018-09-27 08:27:18Z mbr $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {formatStr} from '../../i18n';
import Dialog from '../../dialogs';
import Panel from './Panel';
import {storeSettings} from './actions';
import {setTableChangeConfiguration,
    setTableNewConfiguration,
    setTableRemoveConfiguration,
    setTableResetConfiguration} from '../common/actions';
import connect from '../connect';
import {DEFAULT_TABLE_CONFIGURATION_NAME} from '../constants';
import FormControl from '../../formcontrols';
import Overlays from '../../overlays';

const {
    DropdownIconButton,
    MenuDivider,
    MenuItem,
    MenuHeader,
} = Overlays;

class DeleteDialog extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            currentSelection: props.settingConfigurations.size > 0
                ? props.settingConfigurations.toArray()[0]
                : null
        };
        this.onHide = this.onHide.bind(this);
        this.onConfirm = this.onConfirm.bind(this);
        this.setSelection = this.setSelection.bind(this);
    }
    componentDidUpdate(prevProps) {
        if (this.props.currentConfiguration !== prevProps.currentConfiguration) {
            this.setSelection(this.props.currentConfiguration);
        }
    }
    setSelection(selection) {
        this.setState({currentSelection: selection});
    }

    onHide() {
        this.props.onHide();
    }

    onConfirm() {
        this.props.onConfirm(this.state.currentSelection);
    }

    render() {
        return (
            <Dialog.Alert
                title={formatStr("file_table_modal_delete_title")}
                ActionButton={<Dialog.Buttons.Delete />}
                onConfirm={this.onConfirm}
                showCancel
                onHide={this.onHide}
                show={this.props.show}>
                {formatStr('table_settings_delete_modal_text')}
            </Dialog.Alert>
        );
    }
}

DeleteDialog.propTypes = {
    settingConfigurations: PropTypes.object,
    currentConfiguration: PropTypes.string,
    show: PropTypes.bool,
    onHide: PropTypes.func,
    onConfirm: PropTypes.func,
};

import csweb_settings from '../../../../resources/cis_cog_info.svg';

// TODO: i18n
class SettingButton extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            opened: false,
            newConfigurationDialogVisible: false,
            deleteConfigurationsDialogVisible: false,
        };
        this.openDialog = this.openDialog.bind(this);
        this.closeDialog = this.closeDialog.bind(this);
        this.confirmSettingsDialog = this.confirmSettingsDialog.bind(this);
        this.changeConfiguration = this.changeConfiguration.bind(this);
        this.storeConfiguration = this.storeConfiguration.bind(this);
        this.removeConfiguration = this.removeConfiguration.bind(this);
        this.newConfiguration = this.newConfiguration.bind(this);
        this.performCreateNewConfiguration = this.performCreateNewConfiguration.bind(this);
        this.closeNewConfiguration = this.closeNewConfiguration.bind(this);
        this.deleteConfigurations = this.deleteConfigurations.bind(this);
        this.closeDeleteConfigurations = this.closeDeleteConfigurations.bind(this);
        this.resetSettings = this.resetSettings.bind(this);
    }

    openDialog() {
        this.setState({opened: true});
    }

    closeDialog() {
        this.setState({opened: false});
    }

    changeConfiguration(configuration) {
        this.props.setTableChangeConfiguration(configuration);
    }

    storeConfiguration() {
        if (this.props.settingConfigurations.size === 0 ||
            this.props.currentConfiguration === DEFAULT_TABLE_CONFIGURATION_NAME) {
            this.setState({newConfigurationDialogVisible: true});
        } else {
            this.props.storeSettings();
        }
    }

    newConfiguration() {
        this.setState({newConfigurationDialogVisible: true});
    }

    deleteConfigurations() {
        this.setState({deleteConfigurationsDialogVisible: true});
    }

    closeDeleteConfigurations() {
        this.setState({deleteConfigurationsDialogVisible: false});
    }

    removeConfiguration(configuration) {
        this.props.setTableRemoveConfiguration(configuration);
    }

    closeNewConfiguration() {
        this.setState({newConfigurationDialogVisible: false});
    }

    performCreateNewConfiguration(value) {
        this.props.setTableNewConfiguration(value);
        this.props.storeSettings();
    }

    render() {
        const isDefaultSetting =
            this.props.currentConfiguration === DEFAULT_TABLE_CONFIGURATION_NAME;
        const currentName = isDefaultSetting ? formatStr('table_store_settings_default_conf') :
            this.props.currentConfiguration;
        return [
            <DropdownIconButton
                key="dropdown"
                id="table_settings"
                iconSrc={csweb_settings}
                buttonStyle="info"
                noCaret
                title={formatStr('table_settings_tooltip')}
                pullRight>
                <MenuHeader>
                    {formatStr('table_setting', {settingName: currentName})}
                </MenuHeader>
                <MenuItem onClick={this.openDialog}>
                    {formatStr('table_edit_settings')}
                </MenuItem>
                { isDefaultSetting ?
                    <MenuItem disabled>
                        {formatStr('table_store_settings')}
                    </MenuItem> :
                    <MenuItem onClick={this.storeConfiguration}>
                        {formatStr('table_store_settings')}
                    </MenuItem>}
                <MenuItem onClick={this.newConfiguration}>
                    {formatStr('table_store_settings_save_as')}
                </MenuItem>
                {isDefaultSetting ?
                    <MenuItem disabled>
                        {formatStr('table_delete_settings')}
                    </MenuItem> :
                    <MenuItem onClick={this.deleteConfigurations}>
                        {formatStr('table_delete_settings')}
                    </MenuItem>}
                <MenuDivider />
                <MenuHeader>
                    {formatStr('table_settings')}
                </MenuHeader>
                {isDefaultSetting ?
                    <MenuItem
                        active
                        title={formatStr('table_store_settings_active_tooltip')}>
                        {formatStr('table_store_settings_default_conf')}
                    </MenuItem> :
                    <MenuItem
                        onClick={() => this.changeConfiguration(DEFAULT_TABLE_CONFIGURATION_NAME)}>
                        {formatStr('table_store_settings_default_conf')}
                    </MenuItem>
                }
                {this.props.settingConfigurations ?
                    this.props.settingConfigurations.toArray().map(v =>
                        currentName === v ?
                            <MenuItem
                                key={v}
                                active
                                title={formatStr('table_store_settings_active_tooltip')}>
                                {v}
                            </MenuItem> :
                            <MenuItem
                                key={v}
                                onClick={() => this.changeConfiguration(v)}>
                                {v}
                            </MenuItem>
                    ) :
                    null
                }
            </DropdownIconButton>,
            this.renderNewConfDialog(),
            this.renderDeleteDialog(),
            this.renderSettingsDialog(),
        ];
    }

    confirmSettingsDialog() {
        this.panel.dispatchSettings();
        this.closeDialog();
    }

    resetSettings() {
        this.props.setTableResetConfiguration();
        this.panel.resetSettings();
    }

    renderSettingsDialog() {
        return (
            <Dialog.Dialog
                key="settings_dialog"
                title={formatStr('table_settings')}
                buttons={[
                    <Dialog.Buttons.Ok
                        key="ok"
                        onClick={this.confirmSettingsDialog} />,
                    <Dialog.Buttons.Reset
                        key="reset"
                        onClick={this.resetSettings} />,
                    <Dialog.Buttons.Cancel
                        key="cancel"
                        onClick={this.closeDialog} />
                ]}
                size={Dialog.SIZE_SMALL}
                fixedHeight={true}
                onAction={this.confirmSettingsDialog}
                onHide={this.closeDialog}
                show={this.state.opened}>
                <Panel registerPanel={c => {this.panel = c}} />
            </Dialog.Dialog>
        );
    }

    renderNewConfDialog() {
        const inputControl = <FormControl.TextInput
                                 name='new_conf'
                                 placeholder={formatStr('table_store_settings_conf_name_hint')} />;
        return (
            <Dialog.InputDialog title={formatStr('table_store_settings_save_as')}
                                key="new_conf_dialog"
                                onSubmitValue={this.performCreateNewConfiguration}
                                showCancel onHide={this.closeNewConfiguration}
                                show={this.state.newConfigurationDialogVisible}
                                isValueValid={Dialog.InputDialog.NO_EMPTY_VALUE}
                                InputControl={inputControl}>
                {formatStr("table_store_settings_save_as_text")}
            </Dialog.InputDialog>
        );
    }

    renderDeleteDialog() {
        return (
            <DeleteDialog
                key="delete_dialog"
                show={this.state.deleteConfigurationsDialogVisible}
                settingConfigurations={this.props.settingConfigurations}
                currentConfiguration={this.props.currentConfiguration}
                onHide={this.closeDeleteConfigurations}
                onConfirm={this.removeConfiguration}/>
        );
    }
}

SettingButton.defaultProps = {
    currentConfiguration: DEFAULT_TABLE_CONFIGURATION_NAME
};

const mapStateToProps = (state) => ({
    settingConfigurations: state.settingConfigurations,
    currentConfiguration: state.currentConfiguration
});

SettingButton.propTypes = {
    storeSettings: PropTypes.func,
    setTableResetConfiguration: PropTypes.func,
    settingConfigurations: PropTypes.object,
    setTableChangeConfiguration: PropTypes.func,
    setTableNewConfiguration: PropTypes.func,
    setTableRemoveConfiguration: PropTypes.func,
    currentConfiguration: PropTypes.string
};

const actions = {
    storeSettings,
    setTableResetConfiguration,
    setTableChangeConfiguration,
    setTableNewConfiguration,
    setTableRemoveConfiguration
};
export default connect(mapStateToProps, actions)(SettingButton);
