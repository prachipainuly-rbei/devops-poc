/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import connect from '../connect';
import {Registry} from '../../registry';
import {prefixNS, getAppSetup} from '../../helpers';

const allFormats = getAppSetup().get('formats');

class SearchTableColumnAction extends React.Component {

    constructor(props) {
        super(props);
        const field = this.getRelevantField(props);
        this.state = {
            field: field
        };
        this.changeFields = this.changeFields.bind(this);
        this.submitForm = this.submitForm.bind(this);
        this.handleKeyPressed = this.handleKeyPressed.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.searchHeaderSettings !== nextProps.searchHeaderSettings) {
            const field = this.getRelevantField(nextProps);
            this.setState({field: field});
        }
    }

    shouldComponentUpdate(nextProps) {
        const shouldUpdate = (
            (this.props.searchHeaderSettings !== nextProps.searchHeaderSettings) ||
            (this.props.showControl !== nextProps.showControl) ||
            this.checkValueChanged(this.props, nextProps));
        return shouldUpdate;
    }

    checkValueChanged(props, nextProps) {
        if (!props.currValues || !nextProps.currValues || !this.state.field) {
            return true;
        }
        const valueNew = nextProps.currValues.get(this.state.field.get('attribute'));
        const valueOld = props.currValues.get(this.state.field.get('attribute'));
        return valueOld !== valueNew;
    }

    changeFields(fields) {
        const changeFields = this.props.searchHeaderSettings.get('changeFields');
        if (changeFields) {
            changeFields(fields);
        }
    }

    submitForm() {
        const onSubmit = this.props.searchHeaderSettings.get('onSubmit');
        if (onSubmit) {
            onSubmit();
        }
    }

    getFields(registers) {
        const fields = registers.map(register => { return register.get('fields').toArray()});
        return [].concat.apply([], fields.toArray());
    }

    handleKeyPressed(event) {
        if (event.key === "Enter") {
            this.submitForm();
        }
    }

    findField(key) {
        return function(field) {
            const attr_split = field.get('origin_attribute').split('.');
            const attr = attr_split[attr_split.length - 1];
            return attr === key;
        };
    }

    getRelevantField(props) {
        if (!props.searchHeaderSettings || !props.searchHeaderSettings.get('registers')) {
            return undefined;
        }
        const key = props.column.get('attribute');
        const registers = props.searchHeaderSettings.get('registers');
        const fields = this.getFields(registers);
        return fields.find(this.findField(key));
    }

    createControl(fieldSetting) {
        if (!fieldSetting) {
            return null;
        }
        const FormControlWrapper = Registry.findComponent(
            'cs-web-components-base-FormControlWrapper');
        const displayMappingURL = this.props.searchHeaderSettings.get('displayMappingURL');
        const operationState = this.props.searchHeaderSettings.get('operationState');
        let setting = fieldSetting;
        // no link and multilang button
        setting = setting.setIn(['config', 'link_target_url'], "");
        setting = setting.set('multilang', null);
        setting = setting.set('label', null);

        let values = this.props.searchHeaderSettings.get('initialValues');
        values = this.props.currValues ? this.props.currValues : values;
        return (<div className={prefixNS('search-header-field')}>
          <FormControlWrapper
            setting={setting}
            onFieldsChange={this.changeFields}
            formats={allFormats}
            readOnly={false}
            values={values}
            displayMappingURL={displayMappingURL}
            operationState={operationState}
            onKeyPress={this.handleKeyPressed}/></div>);
    }

    render() {
        const emptyControl = this.props.showControl ?
            <div className={prefixNS('search-header-field')}>
                <div className={prefixNS('search-header-field-empty')}/>
            </div> : null;
        if (this.props.column) {
            const control = (this.state.field && this.props.showControl)
                                ? this.createControl(this.state.field)
                                : emptyControl;
            return (
                control
            );
        }
        return null;
    }
}

SearchTableColumnAction.defaultProps = {
    showControl: false
};

SearchTableColumnAction.propTypes = {
    readOnly: PropTypes.bool,
    values: PropTypes.instanceOf(Immutable.Map),
    currValues: PropTypes.instanceOf(Immutable.Map),
    columns: ImmutablePropTypes.list,
    columnActions: ImmutablePropTypes.list,
    visibleColumns: ImmutablePropTypes.orderedSet,
    showControl: PropTypes.bool,
    column: ImmutablePropTypes.map,
    searchHeaderSettings: PropTypes.object
};

function mapStateToProps(state) {
    const {searchSettings, showColumnSearch} = state;
    return {
        searchHeaderSettings: searchSettings.get('searchHeaderSettings'),
        currValues: searchSettings.get('currValues'),
        showControl: showColumnSearch
    };
}

export default connect(mapStateToProps)(SearchTableColumnAction);
