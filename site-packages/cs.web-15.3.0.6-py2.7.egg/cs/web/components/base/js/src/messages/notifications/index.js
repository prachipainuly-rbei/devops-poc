/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: index.js 164963 2017-09-12 08:19:46Z cla $"
 */

import {removeMessageFromDisplay, updateDisplayInfo as updateDisplayInfo_} from '../actions.js';
import {prefixNS} from '../../helpers.js';
import {getType} from '../helpers.js';
import {getMessagesForDisplay} from '../reducer.js';

const NOTIFICATION_DISPLAY_ID = prefixNS('Notification');

export function removeDelayed(messageId, timeout) {
    return Object.assign(
        {meta: {delay: timeout}},
        removeMessageFromDisplay(messageId, NOTIFICATION_DISPLAY_ID)
    );
}

/**
 * Display a message as a notification in the top right corner of the viewport.
 * The first parameter is a spread argument, that may receive the ``timeout`` of
 * the notification.
 *
 * @function createNotification
 * @memberof module:Messages
 */
export function createNotification({timeout}) {
    return (dispatch, {id, ts, title, message, level, owner}) => {  // eslint-disable-line
        const cancelTimeout = timeout > 0 ? dispatch(removeDelayed(id, timeout)) : null;
        return {
            displayId: NOTIFICATION_DISPLAY_ID,
            cancelTimeout,
            type: getType(level)
        };
    };
}

/**
 * Remove the notification for the message identified by ``messageId``.
 *
 * @function removeNotification
 * @memberof module:Messages
 */
export function removeNotification(messageId) {
    return removeMessageFromDisplay(
        messageId, NOTIFICATION_DISPLAY_ID);
}

export function updateDisplayInfo(messageId, displayInfo) {
    return updateDisplayInfo_(
        messageId, NOTIFICATION_DISPLAY_ID, displayInfo);
}

export function getMessages(state) {
    return getMessagesForDisplay(
        state, NOTIFICATION_DISPLAY_ID);
}

export default {
    createNotification,
    removeNotification
};
