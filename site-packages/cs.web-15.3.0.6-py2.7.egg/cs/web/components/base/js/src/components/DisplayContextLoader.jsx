/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DisplayContextLoader.jsx 171683 2018-01-16 12:28:04Z yzh $"
 */

import React from 'react';
import Immutable from 'immutable';
import {classNames, PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../helpers.js';
import {postJSON} from '../fetch.js';
import {getAppSetup} from '../helpers.js';

/**
 * DisplayContextLoader takes a contextObject and a displayContext name, and
 * calls the backend to render the object using the configured form associated
 * with the display context and the object's class.
 * The result is passed as properties `fields` and `values` to the children.
 *
 * React Properties
 * ================
 *
 * +------------------+---------------+--------------+------------------------------------------------+
 * | Property         | Type          | Default      | Use                                            |
 * +==================+===============+==============+================================================+
 * | contextObject    | Immutable.Map | \-           | The object to render using the display context |
 * +------------------+---------------+--------------+------------------------------------------------+
 * | displayContext   | string        | \-           | Name of the display context to use             |
 * +------------------+---------------+--------------+------------------------------------------------+
 *
 */
export default class DisplayContextLoader extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            fields: Immutable.List(),
            values: Immutable.Map()
        };
    }

    componentDidMount() {
        this.loadData(this.props);
    }

    componentWillReceiveProps(nextProps) {
        if ((nextProps.contextObject !== this.props.contextObject)
            || (nextProps.displayContext !== this.props.displayContext))
        {
            this.loadData(nextProps);
        }
    }

    loadData(props) {
        const {contextObject, displayContext} = props;
        if (contextObject === null || contextObject === undefined) {
            this.setState({
                fields: Immutable.List(),
                values: Immutable.Map()
            });
        }
        else {
            const url = getAppSetup().getIn(['links', 'common', 'displayContextTemplate'])
                .replace('${context_name}', displayContext)
                .replace('${classname}', contextObject.get('system:classname'));
            const requestData = {obj_values: contextObject};
            postJSON(url, requestData).then(data => {
                // We use only the first register, anything else is ignored. This
                // assumes that no mask compositions are configured in the backend
                // for use in display contexts.
                const flds = Immutable.fromJS(data.registers[0] ? data.registers[0].fields : []);
                this.setState({
                    fields: flds.filter(field => field.get("hidden") === false),
                    values: Immutable.fromJS(data.values)
                });
            });
        }
    }

    render() {
        const {displayContext, contextObject, children} = this.props;
        const classes = classNames(
            prefixNS('display-context-loader'),
            prefixNS(`display-context-loader--${displayContext}`)
        );
        // Child component should use the same contextObject as here
        return (
            <div className={classes}>
                {React.Children.map(children,
                    child => React.cloneElement(child, {contextObject, ...this.state})
                )}
            </div>
        );
    }
}
DisplayContextLoader.propTypes = {
    contextObject: ImmutablePropTypes.map,
    displayContext: PropTypes.string.isRequired
};
