/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: bubbles.js 182951 2018-08-28 12:22:44Z cla $"
 */

import {VerticalAlignment, ALIGNED_OVERLAY_DIST} from '../constants.js';

// This depends on the width of the arrow defined in Bubble.scss.
const ARROW_WIDTH = 22;
const BORDER_WIDTH = 4;

function getHorizontalPosition(parentRect, overlayRect) {
    let left = parentRect.left + parentRect.width / 2 - overlayRect.width / 2;
    let arrowOff = 0;
    if (left < 0) {
        arrowOff = left;
        left = 0;
    } else if (left + overlayRect.width >= window.innerWidth) {
        arrowOff = (left + overlayRect.width) - window.innerWidth;
        left = window.innerWidth - overlayRect.width;
    }

    // Now adjust arrow position
    const arrowLeft =
        Math.min(
            Math.max(
                overlayRect.width / 2 - ARROW_WIDTH / 2 + arrowOff,
                BORDER_WIDTH
            ),
            overlayRect.width - BORDER_WIDTH
        );

    return [left, arrowLeft];
}

function getTopPosition(parentRect, overlayRect, isSwitched) {
    const top = parentRect.top - (overlayRect.height + ALIGNED_OVERLAY_DIST * 2);

    if (top < 0) {
        if (isSwitched) {
            return undefined;
        }

        const switchedPosition = getBottomPosition(parentRect, overlayRect, true);
        if (switchedPosition) {
            switchedPosition['_children']['isSwitched'] = true;
            return switchedPosition;
        }
    }

    const [left, arrowLeft] = getHorizontalPosition(parentRect, overlayRect);

    return {
        top: top,
        left: left,
        _children: {left: arrowLeft}
    };
}

function getBottomPosition(parentRect, overlayRect, isSwitched = false) {
    const top = parentRect.top + parentRect.height + ALIGNED_OVERLAY_DIST;

    if (top + overlayRect.height > window.innerHeight) {
        if (isSwitched) {
            return undefined;
        }

        const switchedPosition = getTopPosition(parentRect, overlayRect, true);
        if (switchedPosition) {
            switchedPosition['_children']['isSwitched'] = true;
            return switchedPosition;
        }
    }

    const [left, arrowLeft] = getHorizontalPosition(parentRect, overlayRect);

    return {
        top: top,
        left: left,
        _children: {left: arrowLeft},
    };
}

export default function layout(
    layoutConfig,
    horizontalAlign,
    verticalAlign,
    parentRect,
    overlayRect
) {
    const style = {};

    switch (verticalAlign) {
        case VerticalAlignment.BOTTOM:
            Object.assign(style, getBottomPosition(parentRect, overlayRect));
            break;
        case VerticalAlignment.TOP:
            Object.assign(style, getTopPosition(parentRect, overlayRect));
            break;
    }

    return style;
}
