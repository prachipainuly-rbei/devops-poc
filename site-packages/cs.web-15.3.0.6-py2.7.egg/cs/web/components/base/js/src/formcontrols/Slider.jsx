/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Slider.jsx 185490 2018-10-23 14:07:20Z bma $"
 */

import React from 'react';
import {FormGroup, ControlLabel, FormControl, InputGroup} from 'react-bootstrap';
import {sharedDefaultProps, sharedTextInputProps} from './sharedPropTypes';
import {PropTypes, classNames} from 'cs-web-components-externals';
import {prefixNS} from '../helpers';

/**
 * The component ``<Slider>`` allows numeric inputs and has following properties in addition to those
 * defined in :ref:`form_control_common_props`:
 *
 * +------------------+--------------+--------------+---------------------------------------------+
 * | Property         | Type         | Default      | Use                                         |
 * +==================+==============+==============+=============================================+
 * | value            | string       | \-           | Current value for the slider                |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | max              | string       | \-           | Biggest value for the slider                |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | min              | string       | \-           | Smallest value for the slider               |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | compact          | bool         | false        | Display in compact mode without label and   |
 * |                  |              |              | bottom margin                               |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | beforeControl    | node         | \-           | A component or a list of components to be   |
 * |                  |              |              | placed before the input field               |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | afterControl     | node         | \-           | A component or a list of components to be   |
 * |                  |              |              | placed after the input field                |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | onChange         | func         | \-           | Equivalent callback of `onInput`, called    |
 * |                  |              |              | everytime the value changes                 |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | onValueChange    | func         | \-           | Called everytime this.state.value changes   |
 * |                  |              |              | It's better to use this instead of onChange |
 * +------------------+--------------+--------------+---------------------------------------------+
 *
 * Example:
 *
 * .. code-block:: none
 *
 *     import {FormControl} from 'cs-web-components-base';
 *     ...
 *     // in render method of some component
 *     render() {
 *         return (
 *             <FormControl.Slider
 *                      onValueChange = { (value) => {
 *                          this.setState({
 *                              value: {value}
 *                          });
 *                      }}
 *                      min = "0"
 *                      max = "10"
 *                      value = "0"/>
 *     }
 *
 */

export default class Slider extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            value: props.value
        };
        this.onChange = this.onChange.bind(this);
    }

    onChange(event) {

        const {onChange, onValueChange} = this.props;

        this.setState({
            value: event.target.value
        }, () => {
            if (onValueChange) {
                onValueChange(this.state.value);
            }
        });

        if (onChange) {
            event.persist();
            return onChange(event);
        }

        return undefined;
    }

    componentDidUpdate(prevProps) {
        // The component is always checking if props.value changed and update this.state.value if needed
        // This way the component is responsable to update itself with onChange when you slide
        // And in cases where you update props in the parent.
        if (prevProps.value !== this.props.value) {
            this.setState({
                value: this.props.value
            });
        }
    }

    render() {

        const {
            ['data-ce-id']: data_ce_id,
            ['data-ce-type']: data_ce_type,
            beforeControl, afterControl,
            afterLabelControl,
            label, tooltip, validationState,
            mandatory, mandatoryEmptyHint, className,
            compact, ...others
        } = this.props;

        delete others["onValueChange"];

        const classes = classNames([
            prefixNS('slider'),
            className
        ]);

        let inputControl = null;

        if (!beforeControl && !afterControl) {
            inputControl = <FormControl
                                type = "range"
                                {...others}
                                value = {this.state.value}
                                className = {classes}
                                onChange = {this.onChange}
                            />;
        } else {
            const before = beforeControl ?
                (
                    <InputGroup.Button>
                        {beforeControl}
                    </InputGroup.Button>
                ) : null;
            const after = afterControl ?
                (
                    <InputGroup.Button>
                        {afterControl}
                    </InputGroup.Button>
                ) : null;
            inputControl = (
                <InputGroup>
                    {before}
                    <FormControl
                        type = "range"
                        {...others}
                        value = {this.state.value}
                        className = {classes}
                        onChange = {this.onChange}
                    />
                    {after}
                </InputGroup>
            );
        }

        const groupClass = classNames(
            prefixNS('formcontrols-formcontrol'),  // CSS class to identify formcontrol in css
            {
                [prefixNS('formcontrols-formcontrol-readonly')]: others.readOnly,
                [prefixNS('formcontrols-textinput-compact')]: compact
            }
        );

        return (
            <FormGroup
                className={groupClass}
                validationState={validationState}
                data-ce-id={data_ce_id}
                data-ce-type={data_ce_type}
                data-mandatory={mandatory}
                data-mandatory-empty-hint={mandatoryEmptyHint}>
                { label ? (
                    <span className={prefixNS('formcontrols-label-aftercontrol')}>
                        <ControlLabel title={tooltip}>
                            {label}
                        </ControlLabel>
                        {afterLabelControl}
                    </span>
                ) : null}
                {inputControl}
            </FormGroup>
        );
    }
}

Slider.propTypes = {
    ...sharedTextInputProps,
    onValueChange: PropTypes.func,
    value: PropTypes.string
};

Slider.defaultProps = {
    ...sharedDefaultProps,
    compact: false
};
