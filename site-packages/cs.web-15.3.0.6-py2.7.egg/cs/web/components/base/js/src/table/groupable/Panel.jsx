/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Panel.jsx 161953 2017-07-20 12:55:37Z yzh $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames, ReactDnD} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers';
import {formatStr} from '../../i18n';
import {setGroupColumns} from './actions';
import {getGroupColumns} from './reducers';
import connect from '../connect';
import {draggableColumnType} from '../constants';
import GroupLabel from './GroupLabel';

const groupTarget = {
    canDrop(props, monitor) {
        const {groupColumns} = props;
        const item = monitor.getItem();
        return !groupColumns.contains(item.columnID);
    },

    drop(props, monitor) {
        const {groupColumns, setGroupColumns} = props;
        const draggedColumn = monitor.getItem().columnID;
        if (!groupColumns.contains(draggedColumn)) {
            setGroupColumns(groupColumns.add(draggedColumn));
        }
        return {};
    }
};

function collect(connect, monitor) {
    return {
        connectDropTarget: connect.dropTarget(),
        isOverCurrent: monitor.isOver({shallow: true}),
        canDrop: monitor.canDrop(),
        draggedItemType: monitor.getItemType()
    };
}

// TODO: i18n
export class GroupPanel extends React.Component {
    render() {
        const {connectDropTarget, isOverCurrent, canDrop, groupColumns, columns} = this.props;
        const panelClass = classNames(
            prefixNS('table-group-panel'),
            {
                'bg-success': isOverCurrent && canDrop
            }
        );
        return connectDropTarget(
            <div className={prefixNS('table-group-panel-container')}>
                <div className={panelClass} >
                    {groupColumns.count() ? groupColumns.map((columnID) => {
                        const column = columns.find(
                            col => col.get('id') === columnID);
                        if (column === undefined) {
                            return null;
                        }
                        return (
                            <GroupLabel key={columnID}
                                        column={column} />
                        );
                    }) :
                        (<span className="text-muted">
                                {formatStr('table_group_drag_here_hint')}
                        </span>) }
                </div>
            </div>
        );
    }
}

GroupPanel.propTypes = {
    connectDropTarget: PropTypes.func,
    isOverCurrent: PropTypes.bool,
    canDrop: PropTypes.bool,
    groupColumns: ImmutablePropTypes.orderedSet,
    columns: ImmutablePropTypes.list
};

function mapStateToProps(state) {
    const groupColumns = getGroupColumns(state);
    const {columns} = state;
    return {
        groupColumns, columns
    };
}

export default connect(mapStateToProps, {setGroupColumns})(
    ReactDnD.DropTarget(draggableColumnType, groupTarget, collect)(GroupPanel));
