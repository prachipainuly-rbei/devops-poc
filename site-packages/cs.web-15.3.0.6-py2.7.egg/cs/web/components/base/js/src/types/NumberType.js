/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: NumberType.js 163691 2017-08-22 10:55:47Z mbr $"
 */

import {getAppSetup} from '../helpers';

const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -MAX_SAFE_INTEGER;

function getUIDecimalSeparator() {
    try {
        return getAppSetup().getIn(['formats', 'decimalSeparator']);
    } catch (e) {
        return '.';
    }
}

function getUIGroupSeparator() {
    try {
        return getAppSetup().getIn(['formats', 'groupSeparator']);
    } catch (e) {
        return '';
    }
}

export default class NumberType {
    constructor(value) {
        this.originalValue = value;
        this._value = Number(value);
    }

    valueOf() {
        return this._value.valueOf();
    }

    toString() {
        return this.valueOf().toString();
    }

    isValid() {
        return !Number.isNaN(this.valueOf());
    }

    isSafe() {
        return NumberType.isSafeNumber(this.valueOf());
    }

    isSign() {
        return this.originalValue === '-';
    }

    format(decimalPlace, decimalSeparator, groupSeparator, groupLength) {
        if (!this.isValid()) {
            return this.toString();
        }
        const dp = decimalPlace > 0 ? decimalPlace : 0;
        const ds = decimalSeparator !== undefined ?
            decimalSeparator : getUIDecimalSeparator();
        const gs = groupSeparator !== undefined ?
            groupSeparator : getUIGroupSeparator();

        // this is inspired and borrowed by
        // http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript/14428340#comment34151293_14428340
        const re = `\\d(?=(\\d{${groupLength || 3}})+${dp > 0 ? '\\D' : '$'})`;
        const rounded = isFinite(dp) ? this.toFixed(dp) : this.toString();
        return (ds ? rounded.replace('.', ds) : rounded)
            .replace(new RegExp(re, 'g'), '$&' + (gs || ''));
    }

    formatUnfixed(decimalSeparator, groupSeparator, groupLength) {
        return this.format(Infinity, decimalSeparator, groupSeparator, groupLength);
    }

    toFixed(decimalPlace) {
        const value = this.valueOf();
        const dp = decimalPlace > 0 ? decimalPlace : 0;
        // fix Number.toFixed() precision bug
        // (e.g. 0.2525.fixedTo(3) = 0.252 <unexpected>)
        return (Math.round(`${value}e+${dp}`) / Math.pow(10, dp)).toFixed(dp);
    }

    static fromInput(input, decimalSeparator, groupSeparator) {
        const ds = (decimalSeparator !== undefined ?
                    decimalSeparator :
                    getUIDecimalSeparator()).replace(/\./g, '\\.');
        const gs = (groupSeparator !== undefined ?
                    groupSeparator :
                    getUIGroupSeparator()).replace(/\./g, '\\.');
        // remove group separator and normalize decimal separator
        let value = input
            .replace(new RegExp(gs, 'g'), '')
            .replace(new RegExp(ds, 'g'), '.');
        const re = new RegExp(`^-{0,1}\\d*\\.{0,1}\\d*$`);
        if (!re.test(value)) {
            value = Number.NaN;
        }
        return new NumberType(value);
    }

    static normalizeInput(input, decimalPlace, decimalSeparator, groupSeparator) {
        const inputNumber = NumberType.fromInput(input, decimalSeparator, groupSeparator);
        if (inputNumber.isValid()) {
            return inputNumber.toFixed(decimalPlace);
        }
        return Number.NaN;
    }

    static isSafeNumber(value) {
        return value >= MIN_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    static removeTrailingDecimalsZeros(numberStr, decimalSeparator) {
        const ds = decimalSeparator !== undefined ? decimalSeparator
                  : getUIDecimalSeparator();
        let numberStrTmp = numberStr;
        const re = new RegExp(`(?:\\${ds}0+|(\\${ds}\\d+?)0+)$`);
        numberStrTmp = numberStrTmp.replace(re, '$1');
        return numberStrTmp;
    }

    toVariableFixed() {
        if (!this.isValid()) {
            return this.toString();
        }

        let precision = 16;
        const truncated = Math.trunc(this.valueOf());
        const predec = truncated.toString().length;
        precision = precision - predec - 1;
        precision = precision > 0 ? precision : 0;
        return this.toFixed(precision);
    }

    formatVariableFixed() {
        if (!this.isValid()) {
            return this.toString();
        }
        const rounded = this.toVariableFixed();
        // this is inspired and borrowed by
        // http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript/14428340#comment34151293_14428340
        const re = `\\d(?=(\\d{3})+${rounded.indexOf('.') > -1 ? '\\D' : '$'})`;
        return (getUIDecimalSeparator() ? rounded.replace('.', getUIDecimalSeparator()) : rounded)
            .replace(new RegExp(re, 'g'), '$&' + (getUIGroupSeparator() || ''));
    }
}
