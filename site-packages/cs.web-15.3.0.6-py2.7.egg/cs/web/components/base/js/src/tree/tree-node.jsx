/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: tree-node.jsx 185371 2018-10-19 15:19:25Z eab $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import Icon from '../components/Icon';
import SVGIcon from '../components/SVGIcon';
import {prefixNS} from '../helpers';

import csweb_tree_down from '../../../resources/cis_chevron-down.svg';
import csweb_tree_right from '../../../resources/cis_chevron-right.svg';
import csweb_ajax_loader from '../../../resources/ajax-loader.gif';

export default class TreeNode extends React.PureComponent {
    constructor(props) {
        super(props);
        this.toggleTreeNode = this.toggleTreeNode.bind(this);
    }

    _ifSelectedScrollToMe() {
        const {scrollToNode} = this.props;

        if (this.selected()) {
            scrollToNode(this.scrollTarget);
        }
    }

    selected() {
        return this.props.node.get('is_selected');
    }

    toggleTreeNode() {
        this.props.toggleTreeNode(this.props.node.get('id'));
    }

    selectTreeNode(event) {
        const add = this.props.multiSelect === true && event.ctrlKey === true;
        this.props.selectTreeNode(this.props.node, add);
    }

    componentWillReceiveProps(nextProps) {
        const next_node = nextProps.node;
        if ((next_node.get('expanded') &&
            !this.props.node.get('expanded')) &&
            next_node.get('children').size === 0 &&
            next_node.get('has_children')) {
            this.props.fetchNodeChildren(next_node);
        }
    }

    componentDidMount() {
        this._ifSelectedScrollToMe();

        const node = this.props.node;
        if (node.get('expanded') &&
                node.get('children').size === 0 &&
                node.get('has_children')) {
            this.props.fetchNodeChildren(node);
        }
    }

    componentDidUpdate() {
        this._ifSelectedScrollToMe();
    }

    render() {
        const {NodeRenderer} = this.props;
        const {node, hide, ...rest} = this.props;

        const children = node.get('children');
        const expanded = node.get('expanded');
        const hasChildren = node.get('has_children');

        const classNameSubtree = classNames(
            prefixNS('tree-subtree'),
            {
                [prefixNS('tree-subtree-indented')]: !hide,
                [prefixNS('tree-subtree__hidden')]: !expanded
            }
        );

        return (
            <div className="tree-node">
                <div ref={elem => {this.scrollTarget = elem}}>
                    {
                        hide ?
                        undefined : [
                            <div key="tree-icon"
                                 className={prefixNS("tree-icon")}
                                 onClick={this.toggleTreeNode}>
                                {
                                    hasChildren ?
                                    <SVGIcon
                                        src={expanded ? csweb_tree_down : csweb_tree_right}
                                        size="sm" /> :
                                    undefined
                                }
                            </div>,
                            <div key="tree-content"
                                 aria-expanded={expanded}
                                 className={prefixNS('tree-content')}
                                 onClick={this.selectTreeNode.bind(this)}>
                                <NodeRenderer
                                    searchMatch={this.props.searchResult.get(node.get('id'))}
                                    {...this.props} />
                            </div>
                        ]
                    }
                </div>
                <div className={classNameSubtree}>
                    {
                        expanded && hasChildren && children.size === 0 ?
                        // Render loader
                        (
                            <Icon src={csweb_ajax_loader} />
                        ) :
                        // Render Children
                        children.map(child =>
                            <TreeNode
                                key={child.get('id')}
                                node={child}
                                {...rest} />
                        )
                    }
                </div>
            </div>
        );
    }
}

TreeNode.propTypes = {
    NodeRenderer: PropTypes.oneOfType([
        PropTypes.func,
        PropTypes.instanceOf(React.Component)
    ]),
    keys: PropTypes.object.isRequired,
    node: ImmutablePropTypes.map.isRequired,
    hide: PropTypes.bool,
    multiSelect: PropTypes.bool,
    scrollToNode: PropTypes.func,
    selectTreeNode: PropTypes.func.isRequired,
    selectedId: PropTypes.string,

    toggleTreeNode: PropTypes.func.isRequired,
    fetchNodeChildren: PropTypes.func.isRequired,
    searchResult: ImmutablePropTypes.map,
};

TreeNode.defaultProps = {
    keys: {
        'activeKeys': [],
        'multiSelect': false,
    }
};
