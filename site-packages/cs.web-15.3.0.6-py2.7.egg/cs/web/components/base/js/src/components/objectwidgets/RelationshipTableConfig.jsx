/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RelationshipTableConfig.jsx 184309 2018-09-24 09:39:23Z cla $"
 */

import Immutable from 'immutable';
import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {handleOperationSuccess} from '../../search/actions/instances.js';
import {ContextObjectWrapper} from '../../containers/context-wrapper.jsx';
import RelshipTableOperationToolbar from '../RelshipTableOperationToolbar.jsx';
import Table from '../../table';
import {formatStr} from '../../i18n';
import Button from '../Button';

/**
 * Component build after the FACC pattern that build a table configuration
 * suitable as prop for TableWrapper
 */
export default class RelationshipTableConfig extends React.Component {
    constructor(props) {
        super(props);
        this.tableConfig = this.makeTableConfig(props);
        this.getTableConfig = this.getTableConfig.bind(this);
    }

    makeTableConfig(props) {
        const {
            instanceName, contextObject, relshipName, selectionName, refreshTable,
            hideTableHeaderPanels, height, asTree, tableLayout, operationParams
        } = props;
        const options = asTree ?
            Table.PredefinedTables.getDefaultTreeTableOptions()
            : Table.PredefinedTables.getDefaultTableOptions();

        if (refreshTable) {
            options.toolbarButtons.push({
                toolbarButtons: [
                    () =>
                        <Button.IconButton
                          onClick={refreshTable}
                          buttonStyle="info"
                          iconName="csweb_refresh"
                          title={formatStr('refresh')}/>
                ]
            });
        }

        // Insert table update operation into handler
        const augmentedOpParams = operationParams || {};
        if (!augmentedOpParams['successActions']) {
            augmentedOpParams['successActions'] = [];
        }
        augmentedOpParams['successActions'].push(handleOperationSuccess(instanceName));

        options.toolbarButtons.push({
            toolbarButtons: [
                () =>
                    <ContextObjectWrapper readPath={selectionName}>
                        <RelshipTableOperationToolbar
                            instanceName={instanceName}
                            parentObject={contextObject}
                            operationParams={augmentedOpParams}
                            relshipName={relshipName}
                            refreshTable={refreshTable} />
                    </ContextObjectWrapper>
            ]
        });
        if (hideTableHeaderPanels === true) {
            options.headerPanels = [];
        }
        if (height === 'auto') {
            options.Table = Table.Table;
        }
        if (tableLayout !== undefined) {
            options.Layout = tableLayout;
        }
        return Table.PredefinedTables.DefaultTable(options);
    }

    componentWillReceiveProps(nextProps) {
        const propNames = [
            "contextObject", "relshipName", "selectionName", "refreshTable",
            "hideTableHeaderPanels", "height", "asTree", "tableLayout"
        ];
        if (propNames.some(
                propName => nextProps[propName] !== this.props[propName])) {
            this.makeTableConfig(nextProps);
        }
    }

    getTableConfig() {
        return this.tableConfig;
    }

    render() {
        return this.props.children(this.getTableConfig);
    }
}
RelationshipTableConfig.propTypes = {
    instanceName: PropTypes.string.isRequired,
    operationParams: PropTypes.object,
    contextObject: PropTypes.instanceOf(Immutable.Map),
    relshipName: PropTypes.string.isRequired,
    selectionName: PropTypes.string.isRequired,
    refreshTable: PropTypes.func,
    height: PropTypes.string.isRequired,
    hideTableHeaderPanels: PropTypes.bool,
    tableLayout: PropTypes.func,
    asTree: PropTypes.bool,
};

RelationshipTableConfig.defaultProps = {
    hideTableHeaderPanels: false,
    asTree: false
};
