/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Tab.jsx 184636 2018-10-01 15:40:38Z eab $"
 */

import React from 'react';
import {Tab, Nav} from 'react-bootstrap';
import {PropTypes, classNames, ReactDnD} from 'cs-web-components-externals';

import {prefixNS} from '../helpers.js';
import {formatStr} from '../i18n.js';
import Overlays from '../overlays';
import {SVGIconAndLabel} from '../components/IconAndLabel.jsx';
import TextInput from '../formcontrols/TextInput';

const {DropdownTextButton, MenuItem} = Overlays;

/**
 * Components for creating a tab layout. A tab's titles are displayed in Titles within the Bar.
 * A tab's content is rendered within Panes within the Content container.
 * Panes and corresponding Titles are linked via the ``eventKey`` parameter.
 * Bar and Content are again wrapped in the Container component.
 *
 * Example of use:
 *
 * .. code-block:: none
 *
 *     <Tab.Container>
 *         <Tab.Bar
 *             onSelectFromMenu={myOnSelect}>
 *             <Tab.Title title="First Tab" eventKey="A"/>
 *             <Tab.Title title="Second Tab" eventKey="B"/>
 *             ...
 *         </Tab.Bar>
 *         <Tab.Content>
 *             <Tab.Pane eventKey="A">
 *                 // render tab content here
 *             </Tab.Pane>
 *             <Tab.Pane eventKey="B">
 *                 // render tab content here
 *             </Tan.Pane>
 *             ...
 *         </Tab.Content>
 *     </Tab.Container>
 *
 * @module Tab
 */

/**
 * Constant for the add new tab control. Can be used used in the ``onSelect`` callBacks
 * passed to Container and Bar. See also the ``addControlLabel`` property of Bar.
 *
 * Example of use:
 *
 * .. code-block:: none
 *
 *     function myOnSelect(key) {
 *         if (key === Tab.EVENT_KEY_ADD) {
 *             // create a new tab pane and title
 *         }
 *         ...
 *     }
 */
const EVENT_KEY_ADD = 'ADD_NEW_TAB';


function NavItem(props) {
    const tabClasses = classNames(
        props.className,
        {active: props.active}
    );

    return (
        <li role="presentation" className={tabClasses}>
            <span role="tab" onClick={() => {props.onSelect(props.eventKey)}}>
                {props.children}
            </span>
        </li>
    );
}

NavItem.propTypes = {
    className: PropTypes.string,
    active: PropTypes.bool,
    onSelect: PropTypes.func,
    eventKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};

/**
 * Renders a tab in the Bar with the label passed in ``title``. The icon is optional.
 * Additonal controls such as a tab toolbar can be passed as children.
 *
 * +-------------+---------------+-----------+-----------------------------------------------+
 * | Name        | Type          | Default   | Description                                   |
 * +=============+===============+===========+===============================================+
 * | title       | string        | \-        | Label for the tab.                            |
 * +-------------+---------------+-----------+-----------------------------------------------+
 * | eventKey    | string/number | \-        | Unique identifier for associating with        |
 * |             |               |           | correspondiog Pane.                           |
 * +-------------+---------------+-----------+-----------------------------------------------+
 * | iconName    | string        | \-        | Identifier of the icon.                       |
 * +-------------+---------------+-----------+-----------------------------------------------+
 * | iconSrc     | string        | \-        | Url of the icon.                              |
 * +-------------+---------------+-----------+-----------------------------------------------+
 * | onChange    | func          | \-        | If passed, causes label to render as input.   |
 * |             |               |           | On changing form callback is called.          |
 * +-------------+---------------+-----------+-----------------------------------------------+
 * | disabled    | bool          | \-        | Disables tab.                                 |
 * +-------------+---------------+-----------+-----------------------------------------------+
 */

const TabSource = {
    beginDrag(props) {
        return {
            id: props.eventKey
        };
    },

    endDrag(props, monitor) {
        const draggedItem = monitor.getItem();
        const droppedResult = monitor.getDropResult();
        if (droppedResult) {
            props.onReorderTabs(draggedItem.id, droppedResult.id);
        }
    }
};

const TabTarget = {
    drop(props) {
        return {
            id: props.eventKey
        };
    },
};

class _TabDragDrop extends React.PureComponent {
    render() {
        const {connectDragSource, connectDropTarget} = this.props;
        return connectDragSource(connectDropTarget(
            <div className={prefixNS('tab__nav-item--draggable')}>
                {this.props.children}
            </div>
        ));
    }
}

_TabDragDrop.propTypes = {
    connectDragSource: PropTypes.func,
    connectDropTarget: PropTypes.func
};

class Title extends React.Component {

    textInputRenderCallback(c) {
        const {title} = this.props;
        if (c) {
            c.focus();
            c.setSelectionRange(title.length, title.length);
        }
    }

    render() {
        const {onEnter, onCancel, iconName, iconSrc, title, onChange, ...others} = this.props;
        return (
            <NavItem
                className={prefixNS('tab__nav-item')}
                {...others}>
                {onChange ?
                    <TextInput
                        name="tab-rename"
                        value={title}
                        onChange={onChange}
                        onEnter={onEnter}
                        onCancel={onCancel}
                        ref={this.textInputRenderCallback.bind(this)} />
                    :
                    <SVGIconAndLabel
                        name={iconName}
                        src={iconSrc}
                        label={title}
                    />}
                {this.props.children}
            </NavItem>
        );
    }
}
Title.propTypes = {
    title: PropTypes.string,
    eventKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    iconName: PropTypes.string,
    iconSrc: PropTypes.string,
    onChange: PropTypes.func,
    onEnter: PropTypes.func,
    onCancel: PropTypes.func,
    disabled: PropTypes.bool
};

class DraggableTitle extends React.PureComponent {
    constructor(props) {
        super(props);
    }

    render() {
        const {eventKey, onReorderTabs, title, iconName,
             draggableItemId, ...others} = this.props;
        const TabDragDrop = ReactDnD.DragSource(
                draggableItemId, TabSource, (connect, monitor) => ({
                    connectDragSource: connect.dragSource(),
                    isDragging: monitor.isDragging()
                })
            )(ReactDnD.DropTarget(
                draggableItemId, TabTarget, connect => ({
                    connectDropTarget: connect.dropTarget()
                })
            )(_TabDragDrop));
        return (
            <TabDragDrop
                eventKey={eventKey}
                onReorderTabs={onReorderTabs}>
                <Title
                    eventKey={eventKey}
                    iconName={iconName}
                    title={title}
                    {...others}
                />
            </TabDragDrop>
        );
    }
}

DraggableTitle.propTypes = {
    title: PropTypes.string,
    eventKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    iconName: PropTypes.string,
    iconSrc: PropTypes.string,
    onReorderTabs: PropTypes.func,
    draggableItemId: PropTypes.string,
};

/**
 * Wraps the Bar and Content components
 *
 * +-------------+---------------+-----------+-----------------------------------------------+
 * | Name        | Type          | Default   | Description                                   |
 * +=============+===============+===========+===============================================+
 * | activeKey   | string/number | \-        | Event key of the currently active tab.        |
 * +-------------+---------------+-----------+-----------------------------------------------+
 * | className   | string        | \-        | Optional style class for custom layouting.    |
 * +-------------+---------------+-----------+-----------------------------------------------+
 */
function Container(props) {
    const {children, className, ...others} = props;
    return (
        <Tab.Container {...others}>
            <div className={`${prefixNS('tab__wrapper')} ${className}`}>
                {children}
            </div>
        </Tab.Container>
    );
}
Container.propTypes = {
    className: PropTypes.string
};


/**
 * Wraps the Pane components.
 */
function Content(props) {
    const {children, ...others} = props;
    return (
        <Tab.Content
            className={prefixNS('tab__content')}
            {...others}>
            {children}
        </Tab.Content>
    );
}


/**
 * Renders the content of one tab page.
 *
 * +-------------+--------+-----------+------------------------------------------------------+
 * | Name        | Type   | Default   | Description                                          |
 * +=============+========+===========+======================================================+
 * | eventKey    | string | \-        | Unique key to associate pane with the bar entry.     |
 * +-------------+--------+-----------+------------------------------------------------------+
 */
function Pane(props) {
    const {children, ...others} = props;
    return (
        <Tab.Pane
            className={prefixNS('tab__content-pane')}
            {...others}>
            {children}
        </Tab.Pane>
    );
}


/**
 * Renders the TabTitles and an overflow menu that lists every tab.
 *
 * +------------------+---------------+----------+-------------------------------------------+
 * | Name             | Type          | Default  | Description                               |
 * +==================+===============+==========+===========================================+
 * | activeKey        | string/number | \-       | Event key of the currently active tab.    |
 * +------------------+---------------+----------+-------------------------------------------+
 * | onSelectFromMenu | func          | \-       | callBack for when a tab is selected from  |
 * |                  |               |          | the overflow menu.                        |
 * +------------------+---------------+----------+-------------------------------------------+
 * | addControlLabel  | string        | \-       | If passed, renders an additional TabTitle |
 * |                  |               |          | with ``eventKey`` === EVENT_KEY_ADD       |
 * +------------------+---------------+----------+-------------------------------------------+
 * | diabled          | bool          | \-       | Deactivates add control and menu          |
 * |                  |               |          | (not tabs, these must be deactivated      |
 * |                  |               |          | manually).                                |
 * +------------------+---------------+----------+-------------------------------------------+
 */
class Bar extends React.Component {

    renderOverflowEntry(tabProps, active) {
        return (
            <MenuItem
                key={tabProps.eventKey}
                eventKey={tabProps.eventKey}
                active={active}
                disabled={tabProps.disabled}>
                <SVGIconAndLabel
                    name={tabProps.iconName}
                    src={tabProps.iconSrc}
                    label={tabProps.title}
                    allowEmptyIcon
                />
            </MenuItem>
        );
    }

    render() {
        const addProps = {
            iconName: 'csweb_add',
            title: this.props.addControlLabel,
            disabled: this.props.disabled,
            eventKey: EVENT_KEY_ADD};
        const addTabTitle = this.props.addControlLabel ? <Title {...addProps} /> : null;
        const addMenuItem = this.props.addControlLabel ?
            [<MenuItem key="divider" divider/>, this.renderOverflowEntry(addProps, false)] :
            null;
        return (
            <div className={prefixNS('tab__titles')}>
                <Nav
                    bsStyle="tabs"
                    className={prefixNS('tab__nav')}>
                    {this.props.children}
                    {addTabTitle}
                </Nav>
                <DropdownTextButton
                    className={prefixNS('tab__nav-dropdown')}
                    pullRight
                    buttonStyle="link"
                    title={formatStr('object_details_more')}
                    id="object-details-dropdown"
                    onSelect={this.props.onSelectFromMenu}
                    disabled={this.props.disabled}>
                    {React.Children.toArray(this.props.children)
                        .filter(child =>
                            child !== null &&
                            child !== undefined &&
                            (child.type === Title || child.type === DraggableTitle) &&
                            child.props.eventKey !== EVENT_KEY_ADD)
                        .map(tab =>
                            this.renderOverflowEntry(
                                tab.props,
                                tab.props.eventKey === this.props.activeKey))
                    }
                    {addMenuItem}
                </DropdownTextButton>
            </div>
        );
    }
}
Bar.propTypes = {
    activeKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    onSelectFromMenu: PropTypes.func,
    onReorderTabs: PropTypes.func,
    addControlLabel: PropTypes.string,
    disabled: PropTypes.bool
};


export default{
    EVENT_KEY_ADD,
    Container,
    Content,
    Pane,
    Bar,
    Title,
    DraggableTitle
};
