/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DateRange.js 174476 2018-03-14 16:00:48Z yzh $"
 */

import moment from 'moment';

export default class DateRange {
    constructor(startDate, endDate) {
        const startMoment = startDate ? moment(startDate) : null;
        const endMoment = endDate ? moment(endDate) : null;
        this.startMoment = startMoment;
        this.endMoment = endMoment;
        if (startMoment && endMoment && endMoment.isBefore(startMoment)) {
            this.startMoment = endMoment;
            this.endMoment = startMoment;
        }
    }

    contains(toCheck) {
        // check inclusively
        if (!toCheck || !this.startMoment && !this.endMoment) {
            return false;
        }
        const checkMoment = moment(toCheck);
        if (this.startMoment && !this.endMoment) {
            return checkMoment.isSameOrAfter(this.startMoment);
        }
        if (!this.startMoment && this.endMoment) {
            return checkMoment.isSameOrBefore(this.endMoment);
        }
        return checkMoment.isBetween(
                this.startMoment, this.endMoment, null, '[]');
    }

    toDayArray() {
        // return array of moment objects for days in range
        // work only for valid range(start AND end set)
        const dates = [];
        if (!this.startMoment || !this.endMoment) {
            return dates;
        }
        for (const day = this.startMoment.clone();
             day.isSameOrBefore(this.endMoment, 'day');
             day.add(1, 'day')) {
            dates.push(day.clone());
        }
        return dates;
    }

    getStart() {
        // return the first date in range
        return this.startMoment;
    }

    getEnd() {
        // return the last date in range
        return this.endMoment;
    }

    weekNumbers() {
        // return array of numbers for weeks in range
        // work only for valid range(start AND end set)
        const weeks = [];
        if (!this.startMoment || !this.endMoment) {
            return weeks;
        }
        for (const day = this.startMoment.clone();
             day.isSameOrBefore(this.endMoment, 'week');
             day.add(1, 'week')) {
            weeks.push(day.isoWeek());
        }
        return weeks;
    }

    duration(unit, floating) {
        if (!this.startMoment || !this.endMoment) {
            return Infinity;
        }
        return this.endMoment.diff(this.startMoment, unit, floating);
    }

    isDayBegin() {
        // Check whether it is a single day and
        // the time part can be omitted(i.e. 00:00:00)
        return this.duration() === 0 &&
            this.startMoment.isSame(this.startMoment.clone().startOf('day'));
    }
}
