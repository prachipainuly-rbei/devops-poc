/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchDialog.jsx 176542 2018-04-25 13:23:27Z mbr $"
 */

import Immutable from 'immutable';
import React from 'react';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {formatStr} from '../i18n.js';
import {getAppSetup} from '../helpers.js';
import Dialog from '../dialogs';
import {TextButton} from '../components/Button.jsx';
import {
    initOperationInstance,
    clearOperationInstance,
} from '../form/actions/form_with_operations.js';
import FormLayout from '../form/components/FormLayout';
import {getFormUrl, getOpData} from './selectors/instances.js';

const allFormats = getAppSetup().get('formats');

class SearchDialog extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            searchValues: props.opData.get('values').merge(props.searchValues),
            uncheckedValues: Immutable.Set()
        };
        this.changeFields = this.changeFields.bind(this);
        this.saveValues = this.saveValues.bind(this);
    }

    componentDidMount() {
        const {instanceName, initOperationInstance} = this.props;
        initOperationInstance(instanceName);
    }

    componentWillUnmount() {
        const {instanceName, clearOperationInstance} = this.props;
        clearOperationInstance(instanceName);
    }

    changeFields(fields) {
        this.setState(prevState => {
            return {searchValues: prevState.searchValues.merge(fields)};
        });
    }

    saveValues() {
        this.props.onSave(this.state.searchValues);
    }

    render() {
        const {instanceName, opData, onCancel} = this.props;
        // TODO mbr: onClick because of E046476
        // https://github.com/facebook/react/issues/12643
        // https://github.com/react-bootstrap/react-bootstrap/issues/3105
        return (<div onClick={e => e.stopPropagation()}>
            <Dialog.Dialog
                title={formatStr('do_extended_search')}
                buttons={[
                    <TextButton
                        key="save"
                        buttonStyle="primary"
                        label={formatStr('do_extended_search')}
                        onClick={this.saveValues} />,
                    <Dialog.Buttons.Cancel key="cancel" onClick={onCancel}/>
                ]}
                size={Dialog.Dialog.SIZE_MEDIUM}
                onAction={this.saveValues}
                onHide={onCancel}
                showCancel={true}
                show={true}
            >
                {opData.get('registers').map(register =>
                    <FormLayout
                        key={register.get('label')}
                        operationInstance={instanceName}
                        register={register}
                        onFieldsChange={this.changeFields}
                        onNavigateLink={this.navigateLink}
                        values={this.state.searchValues}
                        uncheckedValues={this.state.uncheckedValues}
                        displayMappingURL={opData.get('display_mapping_url')}
                        operationState={opData.get('operation_state')}
                        formats={allFormats} />
                )}
            </Dialog.Dialog></div>
        );
    }
}
SearchDialog.propTypes = {
    instanceName: PropTypes.string.isRequired,
    searchValues: ImmutablePropTypes.map,
    onSave: PropTypes.func.isRequired,
    onCancel: PropTypes.func.isRequired,
    // store
    formURL: PropTypes.string,
    opData: ImmutablePropTypes.map.isRequired,
    // actions
    initOperationInstance: PropTypes.func.isRequired,
    clearOperationInstance: PropTypes.func.isRequired,
};

function mapStateToProps(state, ownProps) {
    const {instanceName} = ownProps;
    return {
        formURL: getFormUrl(state, instanceName),
        opData: getOpData(state, instanceName)
    };
}

const actions = {
    initOperationInstance,
    clearOperationInstance,
};

export default connect(mapStateToProps, actions)(SearchDialog);
