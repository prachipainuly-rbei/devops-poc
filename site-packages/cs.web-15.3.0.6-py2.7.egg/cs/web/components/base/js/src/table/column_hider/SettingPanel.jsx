/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SettingPanel.jsx 184479 2018-09-27 08:27:18Z mbr $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers';
import {setHiddenColumns} from '../common/actions';
import {formatStr} from '../../i18n';
import connect from '../connect';
import Immutable from 'immutable';
import Organizer from '../../components/Organizer';
import HelpReference from '../../components/HelpReference.jsx';
import {SELECTORID} from '../constants.js';

export class HiderSettingPanel extends React.Component {
    constructor(props) {
        super(props);
        this.updateHiddenColumnsFromOrganizer =
            this.updateHiddenColumnsFromOrganizer.bind(this);
        this.state = {
            hiddenColumnIds: Immutable.List(),
            organizerLists: undefined
        };
    }

    componentDidMount() {
        this.props.registerPanel(this);
        this.updateHiddenColumnsFromProps(this.props);
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.hiddenColumns !== nextProps.hiddenColumns ||
            this.props.unhidableColumns !== nextProps.unhidableColumns ||
            this.props.columns !== nextProps.columns) {
            this.updateHiddenColumnsFromProps(nextProps);
        }
    }

    dispatchSettings() {
        this.props.setHiddenColumns(this.state.hiddenColumnIds.toSet());
    }

    resetSettings() {
        this.updateHiddenColumnsFromProps(this.props);
    }

    updateHiddenColumnsFromProps(props) {
        const {hiddenColumns, unhidableColumns, columns} = props;
        this.updateHiddenColumns(hiddenColumns, unhidableColumns, columns);
    }

    // updateHiddenColumns(hiddenColumnIds) {
    updateHiddenColumns(shouldHiddenIDs, unhidableColumns, columns) {
        const hiddenColumnIds = shouldHiddenIDs.subtract(unhidableColumns);
        this.setState({
            hiddenColumnIds: hiddenColumnIds.toList(),
            organizerLists: Immutable.List([
                Immutable.Map({
                    id: 'available',
                    label: formatStr('table_unused_columns'),
                    items: columns.filter(
                        col => !col.get('alwaysHidden') &&
                            !hiddenColumnIds.contains(col.get('id')) &&
                            !unhidableColumns.contains(col.get('id'))
                    ).filter(col => col.get('id') !== SELECTORID),
                    unsortable: true
                }),
                Immutable.Map({
                    id: 'hidden',
                    label: formatStr('table_hide_columns'),
                    items: columns.filter(
                        col => hiddenColumnIds.contains(col.get('id'))
                    ).filter(col => col.get('id') !== SELECTORID),
                    unsortable: true
                })
            ])
        });
    }

    updateHiddenColumnsFromOrganizer(colLists) {
        this.updateHiddenColumns(
            colLists.get(1).get('items').map(col => col.get('id')).toSet(),
            this.props.unhidableColumns,
            this.props.columns
        );
    }

    render() {
        return (
            <div>
                <HelpReference helpId="user_web_components_table_hide_columns" />
                <Organizer itemLists={this.state.organizerLists}
                           className={prefixNS('table-column-hider')}
                           onItemListsChange={this.updateHiddenColumnsFromOrganizer}/>
            </div>
        );
    }
}

HiderSettingPanel.propTypes = {
    setHiddenColumns: PropTypes.func,
    registerPanel: PropTypes.func,
    columns: ImmutablePropTypes.list,
    hiddenColumns: ImmutablePropTypes.set,
    unhidableColumns: ImmutablePropTypes.set
};

const mapStateToProps = (state) => ({
    hiddenColumns: state.hiddenColumns,
    unhidableColumns: state.unhidableColumns,
    columns: state.columns
});

const WrappedPanel = connect(mapStateToProps, {setHiddenColumns})(HiderSettingPanel);
WrappedPanel.settingsTitle = () => formatStr('table_settings_title_column_hider');
export default WrappedPanel;
