/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Zoomer.jsx 184925 2018-10-11 08:40:23Z gwe $"
 */

import React from 'react';
import {PropTypes, classNames} from 'cs-web-components-externals';
import ButtonGroup from '../components/ButtonGroup.jsx';
import Button from '../components/Button.jsx';
import {prefixNS} from '../helpers.js';
import {formatStr} from '../i18n.js';

/**
 * This Component provides basic controls for zooming in and out of embedded media
 * content, e.g. images. It displays the current zoom level as percentage, and
 * provides buttons to zoom in and out, to reset, as well as to scale the content to
 * best fit its container.
 *
 * Note that this component does not handle zooming logic, manipulation of zoom level
 * depends on the content that is modified, and should be implemented in the
 * component that renders the content.
 *
 * The following properties should be provided to Zoomer:
 *
 * +-----------------------+--------+---------+---------------------------------------------------+
 * | Name                  | Type   | Default | Description                                       |
 * +=======================+========+=========+===================================================+
 * | currentScale          | number | \-      | The current scale of the associated content, this |
 * |                       |        |         | should be stored in the state of a parent         |
 * |                       |        |         | component.                                        |
 * +-----------------------+--------+---------+---------------------------------------------------+
 * | onZoomIn              | func   | \-      | Increase the zoom level, and zoom into the        |
 * |                       |        |         | associated content.                               |
 * +-----------------------+--------+---------+---------------------------------------------------+
 * | onZoomOut             | func   | \-      | Decrease the zoom level, and zoom out of the      |
 * |                       |        |         | associated content.                               |
 * +-----------------------+--------+---------+---------------------------------------------------+
 * | onReset               | func   | \-      | Reset the zoom level to a default value.          |
 * +-----------------------+--------+---------+---------------------------------------------------+
 * | onZoomToFit           | func   | \-      | Set the zoom level to a value that best fits the  |
 * |                       |        |         | layout in which the content is rendered.          |
 * +-----------------------+--------+---------+---------------------------------------------------+
 * | onZoomToFitHorizontal | func   | \-      | Set the zoom level to a value that best fits the  |
 * |                       |        |         | width of the layout.                              |
 * +-----------------------+--------+---------+---------------------------------------------------+
 * | onZoomToFitVertical   | func   | \-      | Set the zoom level to a value that best fits the  |
 * |                       |        |         | height of the layout.                             |
 * +-----------------------+--------+---------+---------------------------------------------------+
 *
 */
export default class Zoomer extends React.PureComponent {
    renderZoomInOut() {
        const {currentScale, onZoomIn, onReset, onZoomOut} = this.props;
        return (
            <React.Fragment>
                <Button.ZoomOutButton onClick={onZoomIn}
                                      className={prefixNS('zoomer__zoom-out')}
                                      title={formatStr('zoomer_out')}/>
                <Button.TextButton onClick={onReset}
                                   className={prefixNS('zoomer__zoom-reset')}
                                   bsSize='xsmall'
                                   buttonStyle="primary"
                                   title={formatStr('zoomer_reset')}
                                   label={`${Math.floor(currentScale * 100)}%`}/>
                <Button.ZoomInButton onClick={onZoomOut}
                                     className={prefixNS('zoomer__zoom-in')}
                                     title={formatStr('zoomer_in')}/>
            </React.Fragment>
        );
    }

    renderZoomToFit() {
        const {onZoomToFit, zoomToFitActive} = this.props;
        if (onZoomToFit === undefined) {return null}
        const clsnames = classNames(
            prefixNS('zoomer__zoom-fit'),
            {active: zoomToFitActive}
        );
        return (
            <Button.IconButton onClick={onZoomToFit}
                               className={clsnames}
                               buttonStyle="primary"
                               title={formatStr('zoomer_fit')}
                               iconName='csweb_zoom_fit' />
        );
    }

    renderZoomToFitHorizontal() {
        const {onZoomToFitHorizontal, zoomToFitHorizontalActive} = this.props;
        if (onZoomToFitHorizontal === undefined) {return null}
        const clsnames = classNames(
            prefixNS('zoomer__zoom-horizontal'),
            {active: zoomToFitHorizontalActive}
        );
        return (
            <Button.IconButton onClick={onZoomToFitHorizontal}
                               className={clsnames}
                               buttonStyle="primary"
                               title={formatStr('zoomer_horizontal')}
                               iconName='csweb_zoom_horizontal' />
        );
    }

    renderZoomToFitVertical() {
        const {onZoomToFitVertical, zoomToFitVerticalActive} = this.props;
        if (onZoomToFitVertical === undefined) {return null}
        const clsnames = classNames(
            prefixNS('zoomer__zoom-vertical'),
            {active: zoomToFitVerticalActive}
        );
        return (
            <Button.IconButton onClick={onZoomToFitVertical}
                               className={clsnames}
                               buttonStyle="primary"
                               title={formatStr('zoomer_vertical')}
                               iconName='csweb_zoom_vertical'/>
        );
    }

    render() {
        return (
            <ButtonGroup className={prefixNS('zoomer')}>
                {this.renderZoomInOut()}
                {this.renderZoomToFit()}
                {this.renderZoomToFitHorizontal()}
                {this.renderZoomToFitVertical()}
            </ButtonGroup>
        );
    }
}

Zoomer.propTypes = {
    currentScale: PropTypes.number.isRequired,
    onZoomIn: PropTypes.func,
    onReset: PropTypes.func,
    onZoomOut: PropTypes.func,
    onZoomToFit: PropTypes.func,
    zoomToFitActive: PropTypes.bool,
    onZoomToFitHorizontal: PropTypes.func,
    zoomToFitHorizontalActive: PropTypes.bool,
    onZoomToFitVertical: PropTypes.func,
    zoomToFitVerticalActive: PropTypes.bool
};

// Defaults for the ...Active flags are "false" because that reflects the behaviour
// before introduction of the properties.
Zoomer.defaultProps = {
    zoomToFitActive: false,
    zoomToFitHorizontalActive: false,
    zoomToFitVerticalActive: false
};
