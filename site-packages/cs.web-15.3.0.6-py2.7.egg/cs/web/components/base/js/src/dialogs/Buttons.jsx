/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Buttons.jsx 175857 2018-04-12 15:19:21Z ssz $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import Button from '../components/Button.jsx';
import {formatStr} from '../i18n.js';

const buttonPropTypes = {
    label: PropTypes.string,
    labelId: PropTypes.string,
    title: PropTypes.string,
    titleId: PropTypes.string,
    buttonStyle: PropTypes.string
};

function createButton(displayName, buttonStyle, labelId = undefined, titleId = undefined) {
    const labelId_ = labelId || 'dialog_' + displayName.toLowerCase();
    const button = function(props) {
        const {label, labelId, title, titleId, ...others} = props;
        return (
            <Button.TextButton {...others}
                               title={title || formatStr(titleId)}
                               label={label || formatStr(labelId)} />
        );
    };
    button.displayName = displayName;
    button.propTypes = buttonPropTypes;
    button.defaultProps = {
        titleId: titleId || labelId_ + '_tooltip', buttonStyle,
        labelId: labelId_
    };
    return button;
}

const Ok = createButton('Ok', 'primary', 'ok', 'dialog_ok_tooltip');
const Close = createButton('Close', 'primary');
const Yes = createButton('Yes', 'primary');
const No = createButton('No', 'primary');
const Apply = createButton('Apply', 'primary');

const Select = createButton('Select', 'success');
const Save = createButton('Save', 'success');
const Change = createButton('Change', 'success');
const Submit = createButton('Submit', 'success');
const Add = createButton('Add', 'success');
const Create = createButton('Create', 'success');
const Copy = createButton('Copy', 'success');
const Import = createButton('Import', 'success');
const Export = createButton('Export', 'success');
const Share = createButton('Share', 'success');
const Delegate = createButton('Delegate', 'success');
const Rename = createButton('Rename', 'success');

const Delete = createButton('Delete', 'danger');
const Reset = createButton('Reset', 'danger');

const Cancel = createButton('Cancel', 'outline', 'cancel', 'dialog_cancel_tooltip');

// Generic Button Components

const genericPropTypes = {
    buttonStyle: PropTypes.string
};

function createGeneric(displayName, buttonStyle) {
    const button = function(props) {
        return (
            <Button.TextButton {...props} buttonStyle={buttonStyle} />
        );
    };
    button.displayName = displayName;
    button.propTypes = genericPropTypes;
    return button;
}

const Confirm = createGeneric('Confirm', 'primary');

/**
 * This module provides generic and concrete default buttons to be used in Dialog Footers.
 * Though it is possible to use the more generic
 * :ref:`cs-web-components-base-components.Button.TextButton` component, it is encouraged
 * to use these Buttons to enforce a unified User Interface across applications.
 *
 * .. _`cs-web-components-base-dialogs.Buttons._Generics`:
 *
 * Generic Buttons
 * ---------------
 *
 * These Button components override the ``buttonStyle`` of
 * :ref:`cs-web-components-base-components.Button.TextButton` with a style specific to the
 * semantics of the button. Other properties are according to
 * :ref:`cs-web-components-base-components.Button.TextButton`.
 *
 * Use these buttons if you would like to provide a label for a button that is not found
 * among default buttons.
 *
 * .. _`cs-web-components-base-dialogs.Buttons._Defaults`:
 *
 * Default Buttons
 * ---------------
 *
 * These Buttons provide a default label to symbolize semantic actions common to all web
 * applications, like ``Cancel`` or ``Save``.
 *
 * The ``buttonStyle`` of these components may be overridden, though it is generally not
 * advised to do so, since the default matches the semantics of the action symbolized by
 * the label used.
 *
 * Even though these components provide a generic tooltip, users are advised to provide
 * a custom tooltip, that matches the application by passing either an i18n label id (see
 * :ref:`web_ui_app_impl_tut_i18n`) as property titleId or a string title which directly
 * sets the tooltip.
 *
 * React Properties
 * ----------------
 *
 * All default buttons expect the following properties:
 *
 * +-------------+--------+---------+---------------------------------------------------+
 * | Name        | Type   | Default | Description                                       |
 * +=============+========+=========+===================================================+
 * | buttonStyle | string | default | Determines the color of the button                |
 * +-------------+--------+---------+---------------------------------------------------+
 * | title       | string | \-      | A tooltip for the component                       |
 * +-------------+--------+---------+---------------------------------------------------+
 * | titleId     | string | yes     | A tooltip provided as label id                    |
 * +-------------+--------+---------+---------------------------------------------------+
 *
 * @module Buttons
 * @memberof module:Dialog
 */
export default {
    // -------------------------------- Generic Buttons

    /**
     * A generic Confirm Button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Generics`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Confirm,

    // -------------------------------- Concrete Buttons

    /**
     * Default ``Ok`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Ok,
    /**
     * Default ``Cancel`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Cancel,
    /**
     * Default ``Close`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Close,
    /**
     * Default ``Yes`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Yes,
    /**
     * Default ``No`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    No,
    /**
     * Default ``Select`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Select,
    /**
     * Default ``Apply`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Apply,
    /**
     * Default ``Save`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Save,
    /**
     * Default ``Change`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Change,
    /**
     * Default ``Submit`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Submit,
    /**
     * Default ``Add`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Add,
    /**
     * Default ``Create`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Create,
    /**
     * Default ``Copy`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Copy,
    /**
     * Default ``Import`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Import,
    /**
     * Default ``Export`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Export,
    /**
     * Default ``Share`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Share,
    /**
     * Default ``Delegate`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Delegate,
    /**
     * Default ``Rename`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Rename,
    /**
     * Default ``Delete`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Delete,
    /**
     * Default ``Reset`` button.
     * See :ref:`cs-web-components-base-dialogs.Buttons._Defaults`
     *
     * @param props {object} - React Properties
     * @return {element} a rendered element
     */
    Reset
};
