/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: CompactHeader.jsx 176348 2018-04-20 11:24:37Z yzh $"
 */

import React from 'react';
import {
    connect,
    PropTypes,
    ImmutablePropTypes
} from 'cs-web-components-externals';
import {prefixNS, getObjectImage} from '../../helpers';
import Thumbnail from '../Thumbnail';
import ContentOperationToolbar from '../ContentOperationToolbar';
import Link from '../navigation/Link';
import {fetchType} from '../../actions/object-actions';

function getType(contextObject) {
    return contextObject.get('@type');
}

/**
 * A component to show the thumbnail, type, description and operations of
 * an object, which will fit into e.g. a detail area.
 *
 * It can also be used as configured component.
 * If the default result handling of the operations is not wanted, e.g. it should
 * stay on current page instead of navigate to the object page, the callback
 * functions should be specified in order to disable the default handling .
 *
 * React Properties
 * ----------------
 *
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | Property              | Type         | Default          | Use                                       |
 * +=======================+==============+==================+===========================================+
 * | contextObject         | Immutable.Map| \-               | The object to be showed                   |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | onOperationSuccess    | func         | undefined        | The callback function in case an          |
 * |                       |              |                  | operation ends successfully               |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | onOperationFailure    | func         | undefined        | The callback function in case an          |
 * |                       |              |                  | operation fails                           |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 *
 */
class CompactHeader extends React.PureComponent {
    componentWillReceiveProps(nextProps) {
        if (
            getType(this.props.contextObject) !==
            getType(nextProps.contextObject)
        ) {
            this.checkType(nextProps);
        }
    }

    componentDidMount() {
        this.checkType(this.props);
    }

    checkType(props) {
        if (props.contextObject && !props.contextType && props.fetchType) {
            props.fetchType(getType(props.contextObject));
        }
    }

    render() {
        const {
            contextObject,
            contextType,
            onOperationSuccess,
            onOperationFailure
        } = this.props;
        const link = contextObject.get('system:ui_link');
        const imgFileUrl = getObjectImage(contextObject);
        const desc = contextObject.get('system:description');
        const typeDesc = contextType ? contextType.get('designation') : '';
        return (
            <div className={prefixNS('compact-header-tile')}>
                <Thumbnail
                    className={prefixNS('compact-header-tile__thumbnail')}
                    imgSrc={imgFileUrl}
                    fallbackSrc={contextObject.get('system:icon_link')}
                    size="md"
                    title={desc}
                />
                <div className={prefixNS('compact-header-tile__content')}>
                    <div className={prefixNS('compact-header-tile__container')}>
                        <div className={prefixNS('compact-header-tile__headerbar')}>
                            <div className={prefixNS('compact-header-tile__type-desc')}
                                 title={typeDesc}>
                                {typeDesc}
                            </div>
                            <ContentOperationToolbar
                                className={prefixNS('compact-header-tile__actions')}
                                onSubmitSuccess={onOperationSuccess}
                                onSubmitFail={onOperationFailure}
                                contextObject={contextObject}
                                iconSize="sm"
                            />
                        </div>
                        <Link
                            className={prefixNS('compact-header-tile__title')}
                            to={link}
                            title={desc}
                            disabled={!link}>
                            {desc}
                        </Link>
                    </div>
                </div>
            </div>
        );
    }
}

CompactHeader.propTypes = {
    contextObject: ImmutablePropTypes.map.isRequired,
    contextType: ImmutablePropTypes.map,
    onOperationSuccess: PropTypes.func,
    onOperationFailure: PropTypes.func,
    fetchType: PropTypes.func
};

function mapStateToProps(state, ownProps) {
    const typeId = getType(ownProps.contextObject);
    return {
        contextType: state.typesById.get(typeId)
    };
}

export default connect(mapStateToProps, {fetchType})(CompactHeader);
