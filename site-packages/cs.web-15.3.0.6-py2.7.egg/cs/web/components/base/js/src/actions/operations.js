/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: operations.js 179163 2018-06-18 14:26:28Z gwe $"
 */

/**
 * This module provides actions to retrieve operation information objects from the server.
 * This forms the basis for retrieving information about available operations for a class
 * or object in general or in a specified operation context, and is the first step to
 * executing operations in Web UI.
 *
 * @module
 */

import {singleFetch} from './fetching.js';
import {createLinkWithPattern} from '../helpers';
import Immutable from 'immutable';

export const OPERATION_CONTEXT_FETCHED = `${componentNameSpace}-OPERATION_CONTEXT_FETCHED`;
export const OPERATION_INFO_FETCHED = `${componentNameSpace}-OPERATION_INFO_FETCHED`;
export const OPERATION_INFO_FAILED = `${componentNameSpace}-OPERATION_INFO_FAILED`;
export const RELSHIP_OP_INFO_FETCHED = `${componentNameSpace}-RELSHIP_OP_INFO_FETCHED`;

/**
 * Helper to create operation context url.
 *
 * @private
 */
function getOperationContextUrl(objectType, contextName) {
    return createLinkWithPattern('opContextPattern',
        {classname: objectType, opContextName: contextName});
}

function getOperationInfoUrl(objectType) {
    return createLinkWithPattern('opClassPattern', {classname: objectType});
}

function operationContextFetched(url, objectType, contextName, data) {
    return {
        type: OPERATION_CONTEXT_FETCHED,
        objectType: objectType,
        contextName: contextName,
        data: data,
        meta: {
            url: url
        }
    };
}

function operationInfoFetched(url, objectType, data) {
    return {
        type: OPERATION_INFO_FETCHED,
        objectType: objectType,
        data: data,
        meta: {
            url: url
        }
    };
}

function operationInfoFailed(url, objectType, error) {
    return {
        type: OPERATION_INFO_FAILED,
        objectType: objectType,
        error: error,
        meta: {
            url: url
        }
    };
}

function relshipOperationInfoFetched(url, parentObject, relshipName, data) {
    return {
        type: RELSHIP_OP_INFO_FETCHED,
        payload: {
            parentObject,
            relshipName,
            data
        },
        meta: {
            url: url
        }
    };
}

/**
 * Retrieve the operation infos for the object type provided.
 *
 * @param {string} objectType - a CE classname
 */
export function fetchOperationInfo(objectType) {
    return (dispatch, getState) => {
        const state = getState();
        // If all operations have been fetched, we may omit the fetch
        if (!state.operationsById.getIn([objectType, 'fetchedAll'], false)) {
            const opInfoUrl = getOperationInfoUrl(objectType);
            dispatch(singleFetch(
                opInfoUrl,
                data => {
                    dispatch(operationInfoFetched(opInfoUrl, objectType, Immutable.fromJS(data)));
                }
            )).catch(error => {
                dispatch(operationInfoFailed(opInfoUrl, objectType, error));
            });
        }
    };
}

/**
 * Retrieve the operation infos a relationship context
 *
 * @param {string} url - the URL to retireve the operations for the relationship context
 */
export function fetchRelshipOperationInfo(parentObject, relshipName) {
    const url = createLinkWithPattern('opRelshipPattern', {
        parent_classname: parentObject.get('system:classname'),
        keys: parentObject.get('system:navigation_id'),
        relship_name: relshipName
    });
    return (dispatch) => {
        dispatch(singleFetch(
            url,
            data => {
                dispatch(relshipOperationInfoFetched(
                    url, parentObject, relshipName, Immutable.fromJS(data)));
            }
        ));
    };
}

/**
 * Retrieve an operation context with operation info objects already resolved.
 *
 * @param {string} objectType - a CE classname
 * @param {string} contextName - the name of an operation context as defined in Elements
 */
export function fetchOperationContext(objectType, contextName) {
    return (dispatch, getState) => {
        const state = getState();
        // check if this context has already been fetched.
        const operationNames = state.operationContextById.getIn([objectType, contextName]);
        if (operationNames === undefined) {
            const opContextUrl = getOperationContextUrl(objectType, contextName);
            dispatch(singleFetch(
                opContextUrl,
                data => {
                    dispatch(operationContextFetched(
                        opContextUrl, objectType, contextName, Immutable.fromJS(data)));
                }
            ));
        }
    };
}
