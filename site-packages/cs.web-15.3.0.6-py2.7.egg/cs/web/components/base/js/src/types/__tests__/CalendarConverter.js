/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: CalendarConverter.js 174476 2018-03-14 16:00:48Z yzh $"
 */

/* eslint-env jest */

import CalendarConverter from '../CalendarConverter.js';

describe('The CalendarConverter class', () => {

    const backendFormat = 'DD.MM.YYYY';
    const frontendFormat = 'YYYY-MM-DD HH:mm:ss';
    const frontendDateOnlyFormat = 'YYYY-MM-DD';
    const converter = new CalendarConverter(
        backendFormat, frontendFormat, frontendDateOnlyFormat);

    it('parses single date value format "someDate"', () => {
        expect.assertions(1);
        const dateStr = '08.03.2018';
        expect(converter.convertToDisplay(dateStr)).toBe('2018-03-08');
    });

    it('parses value format ">=fromDate"', () => {
        expect.assertions(1);
        const dateStr = '>=08.03.2018';
        expect(converter.convertToDisplay(dateStr)).toBe('>=2018-03-08');
    });

    it('parses value format "<=toDate"', () => {
        expect.assertions(1);
        const dateStr = '<=15.03.2018';
        expect(converter.convertToDisplay(dateStr)).toBe('<=2018-03-15');
    });

    it('parses value format ">=fromDate AND/OR <=toDate"', () => {
        expect.assertions(6);
        const dateStrS1 = '>=08.03.2018 AND <=15.03.2018';
        const dateStrS2 = '>=08.03.2018 AND <=08.03.2018';
        const dateStrS3 = '<=08.03.2018 OR >=15.03.2018';
        const dateStrS4 = '>=08.03.2018 AND <=15.03.2018 OR >=21.03.2018';
        const dateStrS5 = '>=8.3.18 AND <=15.3.18 OR >=01.04.18';
        const dateStrS6 = 'abc';
        expect(converter.convertToDisplay(dateStrS1)).toBe('>=2018-03-08 AND <=2018-03-15');
        expect(converter.convertToDisplay(dateStrS2)).toBe('>=2018-03-08 AND <=2018-03-08');
        expect(converter.convertToDisplay(dateStrS3)).toBe('<=2018-03-08 OR >=2018-03-15');
        expect(converter.convertToDisplay(dateStrS4)).toBe('>=2018-03-08 AND <=2018-03-15 OR >=2018-03-21');
        expect(converter.convertToDisplay(dateStrS5)).toBe('>=2018-03-08 AND <=2018-03-15 OR >=2018-04-01');
        expect(converter.convertToDisplay(dateStrS6)).toBe('abc');
    });

    it('checks whether the input is valid', () => {
        expect.assertions(7);
        const dateStrS1 = '>=2018-03-08';
        const dateStrS2 = '<=2018-03-15';
        const dateStrS3 = '>=2018-03-08 AND <=2018-03-15';
        const dateStrS4 = '<=2018-03-15 AND >=2018-03-08';
        const dateStrS5 = '2018-03-08';
        const dateStrS6 = '>=2018';  // parsed to >=2018-01-01
        const dateStrF1 = 'abc';
        expect(converter.checkDisplayValue(dateStrS1)).toBe(true);
        expect(converter.checkDisplayValue(dateStrS2)).toBe(true);
        expect(converter.checkDisplayValue(dateStrS3)).toBe(true);
        expect(converter.checkDisplayValue(dateStrS4)).toBe(true);
        expect(converter.checkDisplayValue(dateStrS5)).toBe(true);
        expect(converter.checkDisplayValue(dateStrS6)).toBe(true);
        expect(converter.checkDisplayValue(dateStrF1)).toBe(false);
    });

    it('converts input in format ">=fromDate" to value', () => {
        expect.assertions(1);
        const dateStr = '>=2018-03-08';
        expect(converter.convertToValue(dateStr)).toBe('>=08.03.2018');
    });

    it('converts input in format "<=toDate" to value', () => {
        expect.assertions(1);
        const dateStr = '<=2018-03-15';
        expect(converter.convertToValue(dateStr)).toBe('<=15.03.2018');
    });

    it('converts input in format ">=fromDate AND <=toDate" to value', () => {
        expect.assertions(1);
        const dateStr = '>=2018-03-08 AND <=2018-03-15';
        expect(converter.convertToValue(dateStr)).toBe('>=08.03.2018 AND <=15.03.2018');
    });

    it('creates DateRange object if possible', () => {
        expect.assertions(17);
        const dateStrS1 = '>=08.03.2018 AND <=15.03.2018';
        const dateStrS2 = '>08.03.2018 AND <15.03.2018';
        const dateStrS3 = '>=08.03.2018 AND <=08.03.2018';
        const dateStrS4 = '>=08.03.2018';
        const dateStrS5 = '<=15.03.2018';
        const dateStrF1 = '>=08.03.2018 OR <=15.03.2018';
        const dateStrF2 = '<=08.03.2018 AND <=15.03.2018';
        const dateStrF3 = '>=08.03.2018 AND >=15.03.2018';
        const dateStrF4 = '>=08.03.2018 AND 15.03.2018';
        const dateStrF5 = '>=08.03.2018 AND';
        const dateStrF6 = '08.03.2018 AND';
        const dateStrF7 = 'abc';
        const dr1 = converter.getRangeFromValue(dateStrS1);
        const dr2 = converter.getRangeFromValue(dateStrS2);
        const dr3 = converter.getRangeFromValue(dateStrS3);
        const dr4 = converter.getRangeFromValue(dateStrS4);
        const dr5 = converter.getRangeFromValue(dateStrS5);
        expect(dr1.getStart().toISOString()).toBe(new Date('2018-03-08').toISOString());
        expect(dr1.getEnd().toISOString()).toBe(new Date('2018-03-15').toISOString());
        expect(dr2.getStart().toISOString()).toBe(new Date('2018-03-09').toISOString());
        expect(dr2.getEnd().toISOString()).toBe(new Date('2018-03-14').toISOString());
        expect(dr3.getStart().toISOString()).toBe(new Date('2018-03-08').toISOString());
        expect(dr3.duration('days')).toBe(0);
        expect(dr4.getStart().toISOString()).toBe(new Date('2018-03-08').toISOString());
        expect(dr4.getEnd()).toBe(null);
        expect(dr5.getStart()).toBe(null);
        expect(dr5.getEnd().toISOString()).toBe(new Date('2018-03-15').toISOString());
        expect(converter.getRangeFromValue(dateStrF1)).toBe(null);
        expect(converter.getRangeFromValue(dateStrF2)).toBe(null);
        expect(converter.getRangeFromValue(dateStrF3)).toBe(null);
        expect(converter.getRangeFromValue(dateStrF4)).toBe(null);
        expect(converter.getRangeFromValue(dateStrF5)).toBe(null);
        expect(converter.getRangeFromValue(dateStrF6)).toBe(null);
        expect(converter.getRangeFromValue(dateStrF7)).toBe(null);
    });
});
