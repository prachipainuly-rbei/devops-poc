/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ImageViewer.jsx 185838 2018-10-29 16:23:26Z sla $"
 */

import React from 'react';
import {Alert} from 'react-bootstrap';
import {PropTypes} from 'cs-web-components-externals';
import Zoomer from '../Zoomer.jsx';
import ContentBlock from '../ContentBlock.jsx';
import {formatStr} from '../../i18n';
import Button from '../Button.jsx';

/**
 * A simple plugin component to display an image file.
 *
 * React Properties
 * ----------------
 *
 * ==========  ========  =========  ===================================
 * Property    Type      Default    Use
 * ==========  ========  =========  ===================================
 * url         string    \-         The URL of the image file to render
 * filename    string    \-         The filename of the image file
 * ==========  ========  =========  ===================================
 *
 * @class ImageViewer
 */
const SCALESELECTION_MANUAL = 0;
const SCALESELECTION_FIT = 1;
const SCALESELECTION_FIT_HORIZONTAL = 2;
const SCALESELECTION_FIT_VERTICAL = 3;

export default class ImageViewer extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            currentScale: 1.0,
            imageError: false,
            scaleSelection: SCALESELECTION_MANUAL,
        };
        this.updateViewSize = this.updateViewSize.bind(this);
        this.timeoutID = 0;
    }

    updateViewSize() {
        if (this.state.scaleSelection) {
            this.setScaleToFit(this.state.scaleSelection);
            this.timeoutID = setTimeout(() => this.updateViewSize(), 200);
            return;
        }
        this.timeoutID = 0;
    }

    componentDidMount() {
        this.timeoutID = setTimeout(() => this.updateViewSize(), 200);
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.url !== nextProps.url) {
            if (this.state.imageError) {
                this.setState({imageError: false});
            }
        }
        if (!this.timeoutID) {
            this.timeoutID = setTimeout(() => this.updateViewSize(), 200);
        }
    }

    componentWillUnmount() {
        clearTimeout(this.timeoutID);
    }

    updateContainerRef(ref) {
        if (ref) {
            this.containerRef = ref;
            this.updateContainerValues(ref);
        }
    }

    updateContainerValues() {
        if (this.containerRef) {
            const newClientWidth = this.containerRef.clientWidth - 14;
            const newClientHeight = this.containerRef.clientHeight - 14;
            if (newClientWidth !== this.containerWidth ||
                newClientHeight !== this.containerHeight) {
                this.containerWidth = newClientWidth;
                this.containerHeight = newClientHeight;
            }
        }
    }

    updateImageRef() {
        if (!this.imageRef) { return }

        this.imageWidth = this.imageRef.naturalWidth;
        this.imageHeight = this.imageRef.naturalHeight;
        if (this.props.minified) {
            this.setScaleToFit(SCALESELECTION_FIT_HORIZONTAL);
        }
    }

    setScaleToFit(scaleSelection) {
        if (scaleSelection) {
            this.updateContainerValues();
            if (this.imageWidth && this.containerWidth &&
                this.imageHeight && this.containerHeight && scaleSelection) {
                const factorWidth = this.containerWidth / this.imageWidth;
                const factorHeight = this.containerHeight / this.imageHeight;
                switch (scaleSelection) {
                    case SCALESELECTION_FIT:
                        this.setScale(Math.min(factorWidth, factorHeight), scaleSelection);
                        break;
                    case SCALESELECTION_FIT_HORIZONTAL:
                        this.setScale(factorWidth, scaleSelection);
                        break;
                    case SCALESELECTION_FIT_VERTICAL:
                        this.setScale(factorHeight, scaleSelection);
                        break;
                }
            }
        }
    }

    setScale(newScale, newScaleSelection = SCALESELECTION_MANUAL) {
        if (this.state.currentScale !== newScale ||
            this.state.scaleSelection !== newScaleSelection) {
            this.setState({
                currentScale: newScale,
                scaleSelection: newScaleSelection
            });
        }
        if (newScaleSelection && !this.timeoutID) {
            this.timeoutID = setTimeout(() => this.updateViewSize(), 200);
        }
    }

    imageError() {
        this.setState({
            imageError: true
        });
    }

    render() {
        const {currentScale} = this.state;

        const styles = this.imageWidth && this.imageHeight ? {
            width: this.imageWidth * currentScale,
            height: this.imageHeight * currentScale
        } : {};

        return (
            <ContentBlock collapsible={false} expanded={true}
                          title={this.props.filename}
                          className={`${componentNameSpace}-image-viewer`}>
                <ContentBlock.Header>
                    <Zoomer currentScale={currentScale}
                            onZoomIn={() => this.setScale(currentScale * 0.8)}
                            onReset={() => this.setScale(1.0)}
                            onZoomOut={() => this.setScale(currentScale * 1.2)}
                            onZoomToFit={() => this.setScaleToFit(SCALESELECTION_FIT)}
                            onZoomToFitHorizontal={
                                () => this.setScaleToFit(SCALESELECTION_FIT_HORIZONTAL)}
                            onZoomToFitVertical={
                                () => this.setScaleToFit(SCALESELECTION_FIT_VERTICAL)} />
                    {this.props.toolbar}
                    <Button.DownloadButton
                        url = {this.props.url}
                    />
                </ContentBlock.Header>
                <ContentBlock.Body>
                    <div className={`${componentNameSpace}-image-viewer-scroller`}>
                    <div ref={ref => this.updateContainerRef(ref)}
                         className={`${componentNameSpace}-image-viewer-container`}>
                         {this.state.imageError ?
                             <Alert bsStyle="warning">
                                 {formatStr('image_viewer_error')}
                             </Alert> :
                        <img ref={ref => {if (ref) {this.imageRef = ref}}}
                             className={`${componentNameSpace}-image-viewer-image`}
                             onLoad={() => this.updateImageRef()}
                             style={styles}
                             src={this.props.url}
                             onError={() => this.imageError()} />}
                    </div>
                    </div>
                </ContentBlock.Body>
            </ContentBlock>
        );
    }
}

ImageViewer.propTypes = {
    url: PropTypes.string.isRequired,
    filename: PropTypes.string.isRequired,
    minified: PropTypes.bool,
    toolbar: PropTypes.node
};

ImageViewer.defaultProps = {
    toolbar: null
};
