/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ObjectContent.jsx 174987 2018-03-23 12:51:09Z gwe $"
 */

import React from 'react';
import {Alert} from 'react-bootstrap';
import {PropTypes, classNames, ImmutablePropTypes} from 'cs-web-components-externals';
import {getJSON} from '../../fetch.js';
import {prefixNS, getPlugin} from '../../helpers.js';
import {formatStr} from '../../i18n.js';
import Throbber from '../Throbber.jsx';
import ContentBlock from '../ContentBlock.jsx';

function SpecialContentBlock({children}) {
    return (
        <ContentBlock collapsible={false} expanded={true}>
            <ContentBlock.Body>
                <div className={prefixNS('object-preview-not-found-div')}>
                    <h3>
                        {children}
                    </h3>
                </div>
            </ContentBlock.Body>
        </ContentBlock>
    );
}

function NoPreviewFileAvailable() {
    return (
        <SpecialContentBlock>
            {formatStr("preview_no_file_available_header")}
        </SpecialContentBlock>
    );
}
NoPreviewFileAvailable.propTypes = {
    contextObject: PropTypes.object
};

function NoPreviewPluginAvailable(props) {
    return (
        <SpecialContentBlock>
            {formatStr("preview_no_plugin_available_header", {fileName: props.filename})}
        </SpecialContentBlock>
    );
}
NoPreviewPluginAvailable.propTypes = {
    contextObject: PropTypes.object,
    filename: PropTypes.object
};

function NoSelection() {
    return (
        <SpecialContentBlock>
            {formatStr('select_entry_for_details')}
        </SpecialContentBlock>
    );
}

function ViewerError() {
    return (
        <SpecialContentBlock>
            <Alert bsStyle="danger">
                Error in Viewer component!
            </Alert>
        </SpecialContentBlock>
    );
}

/**
 * A plugin container component that displays the "content" of an object in the
 * form of a file. Which file to use is determined by the backend, through the
 * URL of the context object + '/file'. The content_type of the file is used as
 * discriminator to find a plugin component that is suitable for displaying the
 * file format.
 *
 * The plugin components receive the URL of the file they should render in the
 * ``url`` property, and the name of the file as ``filename``.
 *
 * React Properties
 * ----------------
 *
 * =================  =============  ==============  ===================================
 * Property           Type           Default         Use
 * =================  =============  ==============  ===================================
 * contextObject      Immutable.Map  \-              The object whose content is shown
 * pluginContextName  string         'content-view'  The plugin ID for the configuration
 * showPlaceholder    bool           \-              Whether to show an empty view if no
 *                                                   context object selected
 * =================  =============  ==============  ===================================
 */
export default class ObjectContent extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            previewFile: null,
            viewerComponent: this.getEmptyView(props),
            hasError: false
        };
    }

    componentDidMount() {
        const {contextObject} = this.props;
        if (contextObject) {
            this.retrieveContentFileFromObject(this.props);
        }
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.contextObject !== undefined &&
            nextProps.contextObject === undefined) {
            this.setState({
                previewFile: null,
                viewerComponent: this.getEmptyView(nextProps),
                hasError: false
            });
        }
        else if (nextProps.contextObject !== undefined &&
                 nextProps.selectedFile === undefined &&
                 (this.props.contextObject === undefined ||
                  this.props.selectedFile !== undefined ||
                  (this.props.contextObject.get('@id') !== nextProps.contextObject.get('@id')))) {
            this.retrieveContentFileFromObject(nextProps);
        }
        else if (nextProps.selectedFile !== undefined &&
                 (this.props.selectedFile === undefined ||
                  this.props.selectedFile.get('@id') !== nextProps.selectedFile.get('@id'))) {
            this.retrieveContentFileFromFile(nextProps);
        }
    }

    componentDidCatch(/* error, info */) {
        this.setState({hasError: true});
    }

    getEmptyView(props) {
        return props.showPlaceholder ? NoSelection : null;
    }

    retrieveContentFileFromObject(props) {
        const {contextObject, pluginContextName} = props;
        const url = `${contextObject.get('@id')}/file`;
        getJSON(url).then(data => {
            if (data === null) { // No file found
                this.setState({
                    previewFile: null,
                    viewerComponent: NoPreviewFileAvailable,
                    hasError: false
                });
            }
            else {
                const matcher = re => data.content_type.search(new RegExp(re, 'i')) !== -1;
                this.setState({
                    previewFile: data,
                    viewerComponent: getPlugin(
                        pluginContextName, matcher, NoPreviewPluginAvailable
                    ),
                    hasError: false
                });
            }
        });
    }

    retrieveContentFileFromFile(props) {
        const {pluginContextName} = props;
        const matcher = re => props.selectedFile.get('system:content_type')
                                   .search(new RegExp(re, 'i')) !== -1;
        this.setState({
            previewFile: {
                url: props.selectedFile.get('@id'),
                filename: props.selectedFile.get('cdbf_name'),
                content_type: props.selectedFile.get('system:content_type')
            },
            viewerComponent: getPlugin(
                pluginContextName, matcher, NoPreviewPluginAvailable
            ),
            hasError: false
        });
    }

    renderViewer(Viewer) {
        return (
            <Viewer
                {...this.props}
                url={this.state.previewFile ? this.state.previewFile.url : undefined}
                filename={this.state.previewFile ? this.state.previewFile.filename : undefined}
            />
        );
    }

    render() {
        if (this.state.hasError) {
            return <ViewerError />;
        }
        const Viewer = this.state.viewerComponent;
        return (
            <div className={classNames(prefixNS("object-content"), this.props.className)}>
                {Viewer ? this.renderViewer(Viewer) : <Throbber />}
            </div>
        );
    }
}
ObjectContent.propTypes = {
    contextObject: ImmutablePropTypes.map,
    pluginContextName: PropTypes.string,
    className: PropTypes.string,
    selectedFile: ImmutablePropTypes.map,
    showPlaceholder: PropTypes.bool
};
ObjectContent.defaultProps = {
    pluginContextName: 'content-view'
};
