/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Provider.jsx 158306 2017-05-08 08:29:40Z gwe $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import Immutable from 'immutable';
import connect from '../connect';

function getNodes(rows, idIndex, parentIDIndex, parentID = '') {
    const nodes = rows.filter(
        row => row.get('columns').get(parentIDIndex) === parentID);
    return nodes.map(
        row => Immutable.Map({
            id: row.get('id'),
            children: getNodes(rows, idIndex, parentIDIndex, row.get('columns').get(idIndex))
        })
    );
}

export default function(WrappedTable) {
    class TabelToTree extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                treeNodes: Immutable.List()
            };
        }

        componentWillMount() {
            this.updateNodes(this.props);
        }

        updateNodes(props) {
            const {rows, treeParentColumnID, treeIDColumnID, columns} = props;
            let treeNodes = Immutable.List();
            if (treeIDColumnID && treeParentColumnID) {
                const nIdx = columns.findIndex(col => col.get('id') === treeIDColumnID);
                const pIdx = columns.findIndex(col => col.get('id') === treeParentColumnID);
                if (nIdx > -1 && pIdx > -1) {
                    treeNodes = getNodes(rows, nIdx, pIdx);
                }
            }
            this.setState({treeNodes});
        }


        componentWillReceiveProps(nextProps) {
            if (nextProps.rows !== this.props.rows ||
                nextProps.columns !== this.props.columns ||
                nextProps.treeParentColumnID !== this.props.treeParentColumnID ||
                nextProps.treeIDColumnID !== this.props.treeIDColumnID) {
                this.updateNodes(nextProps);
            }
        }

        render() {
            const {...props} = this.props;
            delete props.columns;
            delete props.treeParentColumnID;
            delete props.treeIDColumnID;

            return (
                <WrappedTable
                    {...props}
                    treeNodes={this.state.treeNodes}/>
            );
        }
    }

    TabelToTree.propTypes = {
        rows: ImmutablePropTypes.list,
        columns: ImmutablePropTypes.list,
        treeParentColumnID: PropTypes.string.isRequired,
        treeIDColumnID: PropTypes.string.isRequired
    };

    const mapStateToProps = (state) => {
        return ({
            columns: state.columns
        });
    };

    return connect(mapStateToProps, {})(TabelToTree);
}
