/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: NumericEdit.jsx 165071 2017-09-13 11:10:39Z mbr $"
 */

import React, {Component} from 'react';
import {PropTypes} from 'cs-web-components-externals';
import TextInput from './TextInput';
import {sharedTextInputProps} from './sharedPropTypes';
import NumberType from '../types/NumberType';

/**
 * This component can be used to enter a numeric value. It can round the value up or down if
 * specified. Following properties in addition to properties of
 * <:ref:`cs-web-components-base-formcontrols.TextInput.__default__`> can be set:
 *
 * +------------------+--------------+--------------+---------------------------------------------+
 * | Property         | Type         | Default      | Use                                         |
 * +==================+==============+==============+=============================================+
 * | decimalPlaces    | number       | -            | Decimal places to display and round the     |
 * |                  |              |              | value up or down                            |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | onValueChange    | func         | -            | A callback fired when the numeric value     |
 * |                  |              |              | gets changed.                               |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | minValue         | number       | -            | Minimum allowed value                       |
 * +------------------+--------------+--------------+---------------------------------------------+
 * | maxValue         | number       | -            | Maximum allowed value                       |
 * +------------------+--------------+--------------+---------------------------------------------+
 * |variableDecimal   | bool         | false        | If true and decimalPlaces are undefined,    |
 * |                  |              |              | the number of decimal places is calculated  |
 * |                  |              |              | that the total value does not               |
 * |                  |              |              | exceed 16 characters                        |
 * +------------------+--------------+--------------+---------------------------------------------+
 *
 * .. note::
 *
 *     ``onValueChange`` will be called with the rounded value. ``onChange`` should only be used if
 *     the original user input is needed.
 *
 *     Due to the double-precision floating-point format, which javascript uses to represent a number,
 *     this component only accepts number inputs between -9007199254740991 and 9007199254740991. And
 *     that gives 15â€“17 significant decimal digits precision. It means if there are more than 15
 *     digits, the precision can not be guaranteed.
 *
 */
export default class NumericEdit extends Component {
    constructor(props) {
        super(props);
        this.state = {
            editing: false,
            editingValue: ''
        };
        this.stopBlurring = false;
    }

    onBlur(event) {
        if (this.stopBlurring) {
            this.stopBlurring = false;
        } else {
            event.persist();
            this.setState({
                editing: false,
                editingValue: ''
            }, () => this.props.onBlur && this.props.onBlur(event));
        }
    }

    ignoreBlurring() {
        this.stopBlurring = true;
    }

    quitEditing() {
        this.setState({
            editing: false,
            editingValue: ''
        });
    }

    onChange(event) {
        const {onChange, onValueChange, decimalPlaces, variableDecimal} = this.props;
        const editingValue = event.target.value;
        let inputNumber = null;
        if (editingValue !== '') {
            inputNumber = NumberType.fromInput(editingValue);
        }
        if (inputNumber === null ||
            inputNumber.isSign() ||
            inputNumber.isValid() &&
            inputNumber.isSafe() &&
            this.checkRange(inputNumber)) {
            event.persist();
            this.setState({
                editing: true,
                editingValue: editingValue
            }, () => {
                if (onChange !== undefined) {
                    onChange(event);
                }
                if (onValueChange !== undefined) {
                    let changed;
                    if (inputNumber === null || inputNumber.isSign()) {
                        changed = '';
                    } else if (variableDecimal && decimalPlaces === undefined) {
                        changed = NumberType.removeTrailingDecimalsZeros(
                                    inputNumber.toVariableFixed(), '.');
                    } else {
                        changed = inputNumber.toFixed(decimalPlaces);
                    }
                    onValueChange(changed);
                }
            });
        }
    }

    checkRange(inputNumber) {
        const {minValue, maxValue} = this.props;
        const value = inputNumber.valueOf();
        const minV = new NumberType(minValue);
        const maxV = new NumberType(maxValue);
        return (!minV.isValid() || value >= minV.valueOf()) &&
                (!maxV.isValid() || value <= maxV.valueOf());
    }

    render() {
        const {value, decimalPlaces, variableDecimal, ...others} = this.props;
        let valueStr = '';

        if (this.state.editing) {
            valueStr = this.state.editingValue;
        } else if (value !== null && value !== '' && value !== undefined) {
            if (variableDecimal && decimalPlaces === undefined) {
                valueStr = (new NumberType(value)).formatVariableFixed();
                valueStr = NumberType.removeTrailingDecimalsZeros(valueStr);
            } else {
                valueStr = (new NumberType(value)).format(decimalPlaces);
            }
        }

        // delete props that should be passed to subcomponents
        delete others['minValue'];
        delete others['maxValue'];
        delete others['onValueChange'];

        return (
            <TextInput
                value={valueStr}
                {...others}
                onChange={(e) => this.onChange(e)}
                onBlur={(e) => this.onBlur(e)}/>
        );
    }
}

NumericEdit.defaultProps = {
    variableDecimal: false
};

NumericEdit.propTypes = {
    ...sharedTextInputProps,
    onValueChange: PropTypes.func,
    decimalPlaces: PropTypes.number,
    minValue: PropTypes.number,
    maxValue: PropTypes.number,
    variableDecimal: PropTypes.bool
};
