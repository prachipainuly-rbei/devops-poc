/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: PreSubmitDialog.jsx 175683 2018-04-10 09:25:31Z gwe $"
 */

import React from 'react';
import Dialog from '../../dialogs';
import {PropTypes} from 'cs-web-components-externals';
import Button from '../../components/Button';
import FrontendDialog from '../FrontendDialog.js';
import {Console} from '../../helpers.js';

/**
 * Shows a dialog as defined by a pre-submit hook.
 *
 * @class PreSubmitDialog
 * @extends React.Component
 */
export default function PreSubmitDialog({show, dialog, buttonPressed}) {
    const defaultButtons = dialog.buttons.filter(btn => btn.isDefault);
    if (defaultButtons.size > 1) {
        Console.warning('PreSubmitDialog has more than one default button');
    }
    const defaultAction = defaultButtons[0] ?
                          (() => buttonPressed(defaultButtons[0].action,
                                               defaultButtons[0].value)) :
                          undefined;

    const cancelButtons = dialog.buttons.filter(btn => btn.isCancel);
    if (cancelButtons.size > 1) {
        Console.warning('PreSubmitDialog has more than one cancel button');
    }
    const cancelAction = cancelButtons[0] ?
                         (() => buttonPressed(cancelButtons[0].action,
                                              cancelButtons[0].value)) :
                         undefined;
    return (
        <Dialog.Dialog title={dialog.title}
                       buttons={dialog.buttons.map(btn => (
                                    <Button.TextButton
                                        key={btn.label}
                                        title={btn.label}
                                        buttonStyle={btn.isDefault ? 'primary' : 'default'}
                                        onClick={() => buttonPressed(btn.action, btn.value)} />))}
                       onAction={defaultAction}
                       onHide={cancelAction}
                       size={Dialog.SIZE_SMALL}
                       show={show}>
            {dialog.text.split('\n').map((item, key) => {
                return <span key={key}>{item}<br/></span>;
            })}
        </Dialog.Dialog>
    );
}
PreSubmitDialog.propTypes = {
    show: PropTypes.bool,
    dialog: PropTypes.instanceOf(FrontendDialog).isRequired,
    buttonPressed: PropTypes.func.isRequired
};
PreSubmitDialog.defaultProps = {
    show: true
};
