/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Dialog.jsx 182712 2018-08-23 12:56:06Z vov $"
 */

import Immutable from 'immutable';
import React from 'react';
import {storiesOf, appContainer, centered} from 'cs-web-components-storybook';
import {Dialog, Button} from 'cs-web-components-base';
import {PropTypes} from 'cs-web-components-externals';
import {Table} from 'cs-web-components-base';
import {FormControl} from 'cs-web-components-base';

const columns = Immutable.fromJS(
    [
        {
            width: 400,
            label: "col1",
            tooltip: "Tooltip for col1",
            id: "col1"
        },
        {
            label: "col2",
            tooltip: "Tooltip for col2",
            id: "col2"
        }
    ]
);

const orderedColumns = Immutable.OrderedSet(
    columns.map(c => c.get('id'))
);

const initSortColumns = Immutable.fromJS(
    [{id: columns.getIn([0, 'id']), desc: true}]
).toOrderedSet();

const rows = Immutable.fromJS([
    {
        id: "0",
        columns: [
            "Hallo",
            "Welt"
        ]
    },
    {
        id: "1",
        columns: [
            "Hallo",
            "Erde"
        ]
    },
    {
        id: "2",
        columns: [
            "Guten Morgen",
            "Erde"
        ]
    },
    {
        id: "3",
        columns: [
            "Guten Morgen",
            "Welt"
        ]
    }

]);

class BaseDialogStory extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showDialog1: false,
            showDialog2: false,
            showDialog3: false
        };

        this.dialogSizes = Immutable.List([Dialog.Dialog.SIZE_SMALL, Dialog.Dialog.SIZE_MEDIUM]);
    }

    render() {
        return (
            <div>
                <Dialog.Dialog title={"Foo"}
                               buttons={[
                                   <Dialog.Buttons.Ok
                                       key={1}
                                       onClick={() => {this.setState({showDialog1: false})}} />,
                                   <Dialog.Buttons.Cancel
                                       key={2}
                                       onClick={() => {this.setState({showDialog1: false})}} />]}
                               show={this.state.showDialog1}
                               size={Dialog.Dialog.SIZE_MEDIUM}
                               onHide={() => {this.setState({showDialog1: false})}}>
                                   {"Hallo, Welt"}
                </Dialog.Dialog>
                <Button.TextButton label="Fixed Width Dialog"
                                   onClick={() => {this.setState({showDialog1: true})}} />

                <Dialog.Dialog title={"Foo"}
                               buttons={[
                                   <Dialog.Buttons.Ok
                                       key={1}
                                       onClick={() => {this.setState({showDialog2: false})}} />,
                                   <Dialog.Buttons.Cancel
                                       key={2}
                                       onClick={() => {this.setState({showDialog2: false})}} />]}
                               show={this.state.showDialog2}
                               showCancel={true}
                               sizes={this.dialogSizes}
                               onHide={() => {this.setState({showDialog2: false})}}>
                                   {"Hallo, Welt"}
                </Dialog.Dialog>
                <Button.TextButton label="Variable Width Dialog"
                                   onClick={() => {this.setState({showDialog2: true})}} />

                <Dialog.Dialog title={"Wide content"}
                               buttons={[
                                   <Dialog.Buttons.Ok
                                       key={1}
                                       onClick={() => {this.setState({showDialog3: false})}} />,
                                   <Dialog.Buttons.Cancel
                                       key={2}
                                       onClick={() => {this.setState({showDialog3: false})}} />]}
                               show={this.state.showDialog3}
                               showCancel={true}
                               sizes={this.dialogSizes}
                               onHide={() => {this.setState({showDialog3: false})}}>
                   <MyTable rows={rows}
                            title={"Simple Table"}
                            columns={columns}
                            orderedColumns={orderedColumns}
                            initSortColumns={initSortColumns}
                            contentHeight="120px"
                            className="my-table"/>
                </Dialog.Dialog>
                <Button.TextButton label="Wide content"
                                   onClick={() => {this.setState({showDialog3: true})}} />
            </div>
        );
    }
}

class Content extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        return <div>{this.props.str}</div>;
    }
}

Content.propTypes = {
    str: PropTypes.string
};

const MyTable = Table.PredefinedTables.DefaultTable();

const largeText = `Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed
    diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat,
    sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.
    Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit
    amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy
    eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.
    At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
    no sea takimata sanctus est Lorem ipsum dolor sit amet.`;

const LargeContent = () => (
    <div>
        {[1, 2, 3, 4, 5, 6].map((idx) => (
             <p key={idx}>
                 {largeText}
             </p>
         ))}
    </div>
);

class OptionPaneStory extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showDialog1: false,
            showDialog2: false,
            textDialog2: 'Push me!',
            showDialog3: false,
            textDialog3: 'Push me!',
            showDialog4: false,
            showDialog5: false,
            showDialog6: false,
            showDialog7: false,
        };
        this.confirmCB = field => yes => {
            this.setState({
                [field]: yes ? 'Pushed Yes' : 'Pushed No'
            });
        };
    }

    render() {
        return (
            <div>
                <Dialog.Message.Deferred title={'Message Box'}
                                         show={this.state.showDialog1}
                                         onHide={() => {this.setState({showDialog1: false})}}>
                    <Content str={'I am a message box'}/>
                </Dialog.Message.Deferred>
                <Button.TextButton label="Show message"
                                   onClick={() => {this.setState({showDialog1: true})}} />

                <Dialog.YesNo.Deferred title={'I make a choice'}
                                       show={this.state.showDialog2}
                                       onHide={() => {this.setState({showDialog2: false})}}
                                       onConfirm={this.confirmCB('textDialog2')}>
                    {'Should I stay or should I go?'}
                </Dialog.YesNo.Deferred>
                <Button.TextButton label={this.state.textDialog2}
                                   onClick={() => {this.setState({showDialog2: true})}} />

                <Dialog.YesNoCancel.Deferred title={'I may be cancelled'}
                                             show={this.state.showDialog3}
                                             onHide={() => {this.setState({showDialog3: false})}}
                                             onConfirm={this.confirmCB('textDialog3')}>
                    {'Should I stay or should I go?'}
                </Dialog.YesNoCancel.Deferred>
                <Button.TextButton label={this.state.textDialog3}
                                   onClick={() => {this.setState({showDialog3: true})}} />

                <Dialog.Message.Deferred title={'Large Content'}
                                         show={this.state.showDialog4}
                                         onHide={() => {this.setState({showDialog4: false})}}>
                    <LargeContent />
                </Dialog.Message.Deferred>
                <Button.TextButton label="Large Content"
                                   onClick={() => {this.setState({showDialog4: true})}} />

                <Dialog.Notice.Deferred title={'Notice Message'}
                                        show={this.state.showDialog5}
                                        onHide={() => {this.setState({showDialog5: false})}}>
                    Hello, world!
                    <br/>
                    What a beautiful day it is.
                </Dialog.Notice.Deferred>
                <Button.TextButton label="Notice"
                                   onClick={() => {this.setState({showDialog5: true})}} />

                <Dialog.Error.Deferred title={'Error Message'}
                                       show={this.state.showDialog7}
                                       onHide={() => {this.setState({showDialog7: false})}}>
                    This is aweful!
                    <br/>
                    Something terrible happened
                </Dialog.Error.Deferred>
                <Button.TextButton label="Error"
                                   onClick={() => {this.setState({showDialog7: true})}} />


                <Dialog.Alert.Deferred ActionButton={<Dialog.Buttons.Copy />}
                                       title={'Alert Message'}
                                       show={this.state.showDialog6}
                                       onHide={() => {this.setState({showDialog6: false})}}>
                    Hello, world!
                    <br/>
                    What a beautiful day it is.
                </Dialog.Alert.Deferred>
                <Button.TextButton label="Alert"
                                   onClick={() => {this.setState({showDialog6: true})}} />
            </div>
        );
    }
}

class SingleSelectionStory extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showDialog1: false,
            labelDialog1: 'No item selected',
            showDialog2: false,
            showOverlay: false,
            showDialog3: false
        };
    }

    onItemSelected(dialog) {
        return index => {
            this.setState({
                ['showDialog' + dialog]: false,
                ['labelDialog' + dialog]: index !== undefined ?
                                          `Item ${index} selected` :
                                          'No item selected'
            });
        };
    }

    render() {
        return (
            <div>
                <Dialog.SingleListSelection title={'Select some option'}
                                            show={this.state.showDialog1}
                                            onItemSelected={this.onItemSelected(1)}
                                            showCancel={true}>
                    <div>Option 0</div>
                    <div>Option 1</div>
                    <div>Option 2</div>
                </Dialog.SingleListSelection>
                <Button.TextButton label={this.state.labelDialog1}
                                   onClick={() => {this.setState({showDialog1: true})}} />
            </div>
        );
    }
}

class CornerCases extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            showDialog1: false,
            showDialog2: false
        };
    }

    render() {
        return (
            <div>
                <Dialog.Message.Deferred title={'Message Box'}
                                         show={this.state.showDialog1}
                                         onHide={() => {this.setState({showDialog1: false})}}>
                    <FormControl.ComboBox name={'foobah1'}
                                          textReadOnly={true}
                                          items={Immutable.List(['foo', 'bah'])}/>
                </Dialog.Message.Deferred>
                <Button.TextButton label="Dialog with ComboBox"
                                   onClick={() => {this.setState({showDialog1: true})}} />

                <Dialog.Message.Deferred title={'Message Box'}
                                         show={this.state.showDialog2}
                                         onHide={() => {this.setState({showDialog2: false})}}>
                    <LargeContent />
                    <FormControl.ComboBox name={'foobah2'}
                                          textReadOnly={true}
                                          items={Immutable.List(['foo', 'bah'])}/>
                    <LargeContent />
                </Dialog.Message.Deferred>
                <Button.TextButton label="Large Dialog with ComboBox"
                                   onClick={() => {this.setState({showDialog2: true})}} />
            </div>
        );
    }
}

storiesOf('New Dialog', {})
    .addDecorator(appContainer)
    .addDecorator(centered)
    .addWithInfo(
        'Base Dialog',
        'Base',
        () => (<BaseDialogStory />)
    )
    .addWithInfo(
        'Option Panes',
        'Option Panes',
        () => (<OptionPaneStory />)
    )
    .addWithInfo(
        'SingleSelection',
        'SingleSelection',
        () => (<SingleSelectionStory />)
    )
    .addWithInfo(
        'Corner Cases',
        'Corner Cases',
        () => (<CornerCases />)
    )
    .addWithInfo(
        'Buttons',
        'Buttons',
        () => {
            const rowStyle = {display: 'flex', flexDirection: 'row'};
            const colStyle = {display: 'flex', flexDirection: 'column'};
            return (
                <div style={rowStyle}>
                    <div style={colStyle}>
                        <Dialog.Buttons.Ok/>
                        <Dialog.Buttons.Close/>
                        <Dialog.Buttons.Yes/>
                        <Dialog.Buttons.No/>
                    </div>
                    <div style={colStyle}>
                        <Dialog.Buttons.Save/>
                        <Dialog.Buttons.Change/>
                        <Dialog.Buttons.Submit/>
                        <Dialog.Buttons.Add/>
                        <Dialog.Buttons.Create/>
                        <Dialog.Buttons.Copy/>
                        <Dialog.Buttons.Import/>
                        <Dialog.Buttons.Export/>
                        <Dialog.Buttons.Share/>
                        <Dialog.Buttons.Delegate/>
                    </div>
                    <div style={colStyle}>
                        <Dialog.Buttons.Delete/>
                        <Dialog.Buttons.Reset />
                    </div>
                    <div style={colStyle}>
                        <Dialog.Buttons.Cancel/>
                    </div>
                </div>
            );
        }
    )
;
