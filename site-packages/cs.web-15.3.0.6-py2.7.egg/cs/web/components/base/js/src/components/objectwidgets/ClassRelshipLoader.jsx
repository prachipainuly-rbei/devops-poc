/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ClassRelshipLoader.jsx 176920 2018-05-07 13:23:57Z gwe $"
 */

import Immutable from 'immutable';
import React from 'react';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {fetchClassRelships} from '../../actions/object-actions.js';

/**
 * Wrapper component that loads relationship metadata for a class from the backend.
 * The class can be given either directly via the ``classname`` property, or it
 * can be extracted from a ``contextObject`` property.
 * ClassRelshipLoader is a FACC that calls its child as a funtion, with the relship
 * data as parameter of type Immutable.Map.
 *
 * +---------------+---------------+----------------------------------------------+
 * | Property      | Type          |  Use                                         |
 * +===============+===============+==============================================+
 * | classname     | String        | Name of the CE class to load data for. Takes |
 * |               |               | precedence over contextObject.               |
 * +---------------+---------------+----------------------------------------------+
 * | contextObject | Immutable.Map | An object whose classname is used to load    |
 * |               |               | data for. Is ignored if classname is given.  |
 * +---------------+---------------+----------------------------------------------+
 */
class ClassRelshipLoader extends React.Component {
    componentDidMount() {
        this.load(this.getClassname(this.props));
    }

    getClassname(props) {
        return props.classname ?
            props.classname
            : (props.contextObject ?
                props.contextObject.get('system:classname')
                : undefined);
    }

    componentWillReceiveProps(nextProps) {
        const nextClassname = this.getClassname(nextProps);
        const thisClassname = this.getClassname(this.props);
        if (nextClassname !== thisClassname) {
            this.load(nextClassname);
        }
    }

    load(classname) {
        if (classname !== undefined) {
            this.props.fetchClassRelships(classname);
        }
    }

    render() {
        const {relships} = this.props;
        const classname = this.getClassname(this.props);
        return this.props.children(relships.get(classname, Immutable.Map()));
    }
}
ClassRelshipLoader.propTypes = {
    contextObject: ImmutablePropTypes.map,
    classname: PropTypes.string,
    // Store
    relships: ImmutablePropTypes.map,
    // Actions
    fetchClassRelships: PropTypes.func
};

function mapStateToProps(state) {
    return {
        relships: state.relshipsByClass
    };
}

export default connect(mapStateToProps, {fetchClassRelships})(ClassRelshipLoader);
