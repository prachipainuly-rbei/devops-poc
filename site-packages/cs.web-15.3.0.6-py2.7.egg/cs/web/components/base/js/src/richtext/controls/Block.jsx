/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Block.jsx 174679 2018-03-19 11:49:45Z ssa $"
 */

import React from 'react';
import Immutable from 'immutable';
import ButtonGroup from '../../components/ButtonGroup.jsx';
import {PropTypes, DraftJS} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers.js';
import StyleControlButton from './StyleControlButton';


const BLOCK_STYLES = [
    {iconName: 'csweb_richtext_align_left', style: 'text-align-left'},
    {iconName: 'csweb_richtext_align_center', style: 'text-align-center'},
    {iconName: 'csweb_richtext_align_right', style: 'text-align-right'},
    {iconName: 'csweb_richtext_list_bulleted', style: 'unordered-list-item'},
    {iconName: 'csweb_richtext_list_numbered', style: 'ordered-list-item'}
];


export default class BlockControl extends React.Component {
    constructor(props) {
        super(props);
        this.toggleBlockStyle = this._toggleBlockStyle.bind(this);
    }

    _toggleBlockStyle(blockStyle) {
        const {editorState, onChange} = this.props;

        onChange(
            DraftJS.RichUtils.toggleBlockType(
                editorState,
                blockStyle
            )
        );
    }

    render() {
        const {editorState, styles} = this.props;
        const selection = editorState.getSelection();
        const blockType = editorState.getCurrentContent()
                                     .getBlockForKey(selection.getStartKey())
                                     .getType();

        return (
            <ButtonGroup>
                {styles.map((type) =>
                    <StyleControlButton
                        key={type.style}
                        active={type.style === blockType}
                        iconName={type.iconName}
                        onToggle={this.toggleBlockStyle}
                        style={type.style}
                    />
                )}
            </ButtonGroup>
        );
    }
}

BlockControl.propTypes = {
    onChange: PropTypes.func.isRequired,
    editorState: PropTypes.object.isRequired,
    styles: PropTypes.array
};

BlockControl.defaultProps = {
    styles: BLOCK_STYLES
};

const blockRenderMap = Immutable.Map({
    'text-align-left': {
        element: 'div'
    },
    'text-align-center': {
        element: 'div'
    },
    'text-align-right': {
        element: 'div'
    }
});

export const extendedBlockRenderMap = DraftJS.DefaultDraftBlockRenderMap.merge(blockRenderMap);

export function extendedBlockStyleFn(contentBlock) {
    const type = contentBlock.getType();
    if (type.startsWith("text-align-")) {
        return prefixNS(type);
    }
    return type;
}
