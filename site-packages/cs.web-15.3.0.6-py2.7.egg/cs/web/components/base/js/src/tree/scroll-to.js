/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: scroll-to.js 169193 2017-11-24 11:18:13Z gwe $"
 */

/**
 * Cloned from the jquery offset function
 */
function offset(elem) {
    // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
    // Support: IE <=11 only
    // Running getBoundingClientRect on a
    // disconnected node in IE throws an error
    if (!elem.getClientRects().length) {
        return {top: 0, left: 0};
    }

    // Get document-relative position by adding viewport scroll to viewport-relative gBCR
    const rect = elem.getBoundingClientRect();
    const win = elem.ownerDocument.defaultView;
    return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
    };
}

export function isInView(container, element, leftBound = 0) {
    if (container !== undefined && element !== undefined) {
        const containerOffset = offset(container);
        const elementOffset = offset(element);

        const overTop =
            elementOffset.top < containerOffset.top;
        const overBottom =
            elementOffset.top + element.clientHeight > containerOffset.top + container.clientHeight;
        const overLeft =
            elementOffset.left < leftBound + containerOffset.left;
        const overRight =
            elementOffset.left + element.clientWidth > containerOffset.left + container.clientWidth;

        return !(overTop || overBottom || overLeft || overRight);
    }

    return undefined;
}

export default function scrollIntoViewIfNeeded(container, leftBound = 0) {
    return function(element) {
        if (container !== undefined && element !== undefined) {
            const containerOffset = offset(container);
            const elementOffset = offset(element);

            const overTop =
                elementOffset.top < containerOffset.top;
            const overBottom =
                elementOffset.top + element.clientHeight > containerOffset.top +
                container.clientHeight;
            const overLeft =
                elementOffset.left < leftBound + containerOffset.left;
            const overRight =
                elementOffset.left + element.clientWidth > containerOffset.left +
                container.clientWidth;

            if (overTop || overBottom) {
                container.scrollTop +=
                    elementOffset.top - containerOffset.top -
                    container.clientHeight / 2.0;
            }
            if (overRight) {
                container.scrollLeft +=
                    (elementOffset.left + element.clientWidth) -
                    (containerOffset.left + container.clientWidth);
            }
            else if (overLeft) {
                container.scrollLeft -= leftBound - elementOffset.left + containerOffset.left;
            }
        }
    };
}
