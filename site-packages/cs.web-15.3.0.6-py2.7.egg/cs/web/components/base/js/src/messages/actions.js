/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: actions.js 177456 2018-05-22 14:59:44Z cla $"
 */

import Immutable from 'immutable';
import {prefixNS, getAppSetup} from '../helpers.js';
import {getJSON} from '../fetch.js';
import {Level, Global} from './index.js';

/**
 * This module provides action creators to post messages. All post functions defined
 * in this module receive a javascript object as argument, specifying the general
 * attributes of the message, as well as an unspecified number of displayInfos,
 * that determine how the message should be displayed to the user.
 *
 * The general properties object may contain the following fields:
 *
 * - ``level``: One of the Level constants defined in
 *   :ref:`cs-web-components-base-messages.index.__module__`
 * - ``title``: A string that will be displayed as the title of the message.
 * - ``owner``: The component that posted this message.
 * - ``message``: A string containing the message that will be displayed to the user.
 *
 * Display Infos are generated using special factory functions, such as
 * :ref:`cs-web-components-base-messages.banners.index.createBanner` or
 * :ref:`cs-web-components-base-messages.notifications.index.createNotification`
 *
 * On dispatching, these action creators return the unique id assigned to the message,
 * which can be used to further interact with the message. The possible interactions
 * depend on the display infos used.
 *
 * For an example on how to use these action creators, see
 * :ref:`cs-web-components-base-messages.index.__module__`
 *
 * @memberof module:Messages
 * @module Actions
 */

const ACTION_PREFIX = prefixNS('MESSAGES:');

export const MSG_SRV_FETCH = `${ACTION_PREFIX}FETCH`;
export const MSG_POST = `${ACTION_PREFIX}POST`;
export const MSG_UPDATE_DISPLAY_INFO = `${ACTION_PREFIX}UPDATE_DISPLAY_INFO`;
export const MSG_REMOVE_FROM_OWNER = `${ACTION_PREFIX}REMOVE_FROM_OWNER`;
export const MSG_REMOVE_FROM_DISPLAY = `${ACTION_PREFIX}REMOVE_FROM_DISPLAY`;

function serverMessagesFetched(messages) {
    return {type: MSG_SRV_FETCH, payload: {messages}};
}

export function fetchServerMessages() {
    return dispatch => {
        const error_log_link = getAppSetup().getIn(['links', 'common', 'errorLog']);
        getJSON(error_log_link).then(data => {
            dispatch(serverMessagesFetched(Immutable.fromJS(data.messages)));
        });
    };
}

let idCounter = 0;

function createId() {
    return 'msg_' + idCounter++;
}

/**
 * Create a message. The displayInfos object should be an array of functions,
 * each of which generates a displayInfo object for a message display system.
 *
 * TODO allow user-defined id?
 *
 * @param {level}  level - The type of level. One of Messages.Level
 * @param {string} title - A short title of the message.
 * @param {owner} object - the component the object belongs to
 * @param {string} message - message to print.
 * @param {array} displayInfo - Determines how the message should be displayed.
 *
 * @private
 */
function createMessage(  // eslint-disable-line
    dispatch, {id, level, title, message, owner, global}, ...displayInfos
) {
    const theId = id || createId();
    const theGlobal = global || Global.NONE;
    const ts = new Date().getTime();

    return Immutable.fromJS({
        id: theId, ts, title, level, owner, global: theGlobal,
        displayInfos: Object.assign({}, ...displayInfos.map(
            displayInfo => {
                const resolvedDisplayInfo = displayInfo(
                    dispatch, {id: theId, ts, title, message, level, owner});
                return {[resolvedDisplayInfo.displayId]: resolvedDisplayInfo};
            }
        ))
    }).set('message', message);
}

/**
 * Post a message to the user. ``displayInfos`` is a
 *
 * @param {object} attributes - The general attributes of this message
 * @param {...displayInfos} - spread parameter that specifies how this message is displayed
 * @returns {string} the id of the message
 */
function postMessage(attributes /*{id, level, title, message, owner, global}*/, ...displayInfos) {
    return dispatch => {
        const message = createMessage(dispatch, attributes, ...displayInfos);
        dispatch({type: MSG_POST, payload: message});
        return message.get('id');
    };
}

/**
 * A wrapper around :ref:`cs-web-components-base-messages.actions.postMessage`
 * that sets ``Level.INFO`` as the default level.
 */
export function postInfo(attributes /*{id, title, message, owner, global}*/, ...displayInfos) {
    return postMessage({level: Level.INFO, ...attributes}, ...displayInfos);
}

/**
 * A wrapper around :ref:`cs-web-components-base-messages.actions.postMessage`
 * that sets ``Level.WARNING`` as the default level.
 */
export function postWarning(attributes /*{id, title, message, owner, global}*/, ...displayInfos) {
    return postMessage({level: Level.WARNING, ...attributes}, ...displayInfos);
}

/**
 * A wrapper around :ref:`cs-web-components-base-messages.actions.postMessage`
 * that sets ``Level.ERROR`` as the default level.
 */
export function postError(attributes /*{id, title, message, owner, global}*/, ...displayInfos) {
    return postMessage({level: Level.ERROR, ...attributes}, ...displayInfos);
}

/**
 * Update the display info of the message identified by ``messageId`` for
 * the display adapter identified by ``displayId`` with the attributes
 * in ``displayInfo``.
 *
 * @param {string} messageId - The message to be updated.
 * @param {string} displayId - The display adapter to be updated.
 * @param {object} displayInfo - The new attribute values.
 */
export function updateDisplayInfo(messageId, displayId, displayInfo) {
    return {
        type: MSG_UPDATE_DISPLAY_INFO,
        payload: {messageId, displayId, displayInfo}
    };
}

/**
 * Remove the message identified by ``messageId`` from the display adapter
 * identified by ``displayId``.
 *
 * @param {string} messageId - The message to be removed.
 * @param {string} displayId - The display adapter from which to remove the message.
 */
export function removeMessageFromDisplay(messageId, displayId) {
    return {
        type: MSG_REMOVE_FROM_DISPLAY,
        payload: {messageId, displayId}
    };
}

export function removeMessageFromOwner(messageId, owner) {
    return {
        type: MSG_REMOVE_FROM_OWNER,
        payload: {messageId, owner}
    };
}

export default {
    fetchServerMessages,
    postMessage,
    postError,
    postWarning,
    postInfo,
    updateDisplayInfo,
    removeMessageFromDisplay,
    removeMessageFromOwner
};
