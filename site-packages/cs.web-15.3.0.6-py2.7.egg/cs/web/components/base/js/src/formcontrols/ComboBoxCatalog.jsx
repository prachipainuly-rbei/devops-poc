/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ComboBoxCatalog.jsx 185520 2018-10-24 12:55:24Z cla $"
 */

import React, {Component} from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {postJSON} from '../fetch.js';
import ComboBox from './ComboBox';
import {sharedComboBoxProps, sharedCatalogProps} from './sharedPropTypes';
import Immutable from 'immutable';

/**
 * This component enhances the <:ref:`cs-web-components-base-formcontrols.ComboBox.__default__`>
 * to allow loading data entries from specified URL. The selection will be processed
 * like the <:ref:`cs-web-components-base-formcontrols.CatalogField.CatalogField`>. It
 * has following properties in addition to
 * <:ref:`cs-web-components-base-formcontrols.ComboBox.__default__`>:
 *
 * +-----------------+---------------+---------+----------+----------------------------------------------------------------------------+
 * | Property        | Type          | Default | Required | Use                                                                        |
 * +=================+===============+=========+==========+============================================================================+
 * | itemsURL        | string        | -       | -        | URL to load entries for the drop-down list                                 |
 * +-----------------+---------------+---------+----------+----------------------------------------------------------------------------+
 * | formData        | Immutable.Map | -       | -        | Form data to be used to query catalog data entries                         |
 * +-----------------+---------------+---------+----------+----------------------------------------------------------------------------+
 * | contextClass    | string        | -       | -        | Class of context objects for catalog data                                  |
 * +-----------------+---------------+---------+----------+----------------------------------------------------------------------------+
 * | activeLanguage  | string        | -       | -        | In which language should catalog data be loaded                            |
 * +-----------------+---------------+---------+----------+----------------------------------------------------------------------------+
 * | selectURL       | string        | -       | -        | URL to process the user selection, as result the changed fields and values |
 * |                 |               |         |          | would be returned as a mapping                                             |
 * +-----------------+---------------+---------+----------+----------------------------------------------------------------------------+
 * | onCatalogChange | func          | -       | -        | A callback fired when a catalog entry is selected                          |
 * +-----------------+---------------+---------+----------+----------------------------------------------------------------------------+
 *
 */
export default class ComboBoxCatalog extends Component {
    constructor(props) {
        super(props);
        this.state = {
            items: this.checkItems(props.items)
        };
        this.onToggle = this.onToggle.bind(this);
        this.onSelect = this.onSelect.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            items: this.checkItems(nextProps.items)
        });
    }

    checkItems(items) {
        return items !== undefined ? items : Immutable.List();
    }

    render() {
        const {...others} = this.props;

        delete others.contextClass;
        delete others.activeLanguage;
        delete others.selectURL;
        delete others.itemsURL;
        delete others.formData;
        delete others.onCatalogChange;
        delete others.operationState;

        return (
            <ComboBox
                onToggle={this.onToggle}
                onSelect={this.onSelect}
                {...others}
                items={this.state.items} />
        );
    }

    prepareData() {
        const {contextClass, activeLanguage, name} = this.props;
        const formData = this.props.formData.toJS();
        formData['cdb::argument.catalogcall_cldef'] = contextClass;
        formData['cdb::argument.catalogfieldactivelang'] = activeLanguage;
        return {
            'form_data': formData,
            'operation_state': this.props.operationState,
            'catalog_field': name
        };
    }

    onSelect(eventKey, event) {
        const {selectURL, onSelect, name, onCatalogChange, value} = this.props;
        const selected_string = this.state.items.get(eventKey);
        if (selected_string !== value) {
            if (selectURL) {
                const jsonData = this.prepareData();
                jsonData['selected_string'] = selected_string;
                postJSON(selectURL, jsonData)
                    .then(result => onCatalogChange(result.selected_values));
            } else {
                // No selection URL - just fill the selected value into my field
                const result = {};
                result[name] = selected_string;
                onCatalogChange(result);
            }
        }
        if (onSelect) {
            onSelect(eventKey, event);
        }
    }

    onToggle(isOpen) {
        const {items, itemsURL, onToggle} = this.props;
        if (isOpen) {
            if (items === undefined && itemsURL) {
                const jsonData = this.prepareData();
                postJSON(itemsURL, jsonData)
                    .then(result => this.setState({items: Immutable.fromJS(result.items)}));
            }
        }
        if (onToggle) {
            onToggle(isOpen);
        } else {
            this.forceUpdate();
        }
    }
}


ComboBoxCatalog.propTypes = {
    ...sharedComboBoxProps,
    ...sharedCatalogProps,
    itemsURL: PropTypes.string
};
