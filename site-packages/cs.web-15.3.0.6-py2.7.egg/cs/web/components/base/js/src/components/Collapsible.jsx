/*
 * Copyright (C) 2015 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Collapsible.jsx 184338 2018-09-24 14:22:54Z cla $"
 */

import React, {Component} from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {Collapse} from 'react-bootstrap';
import {formatStr} from '../i18n';
import {prefixNS, getIcon} from '../helpers';
import SVGIcon from './SVGIcon.jsx';

import down_arrow from '../../../resources/cis_chevron-down.svg';
import right_arrow from '../../../resources/cis_chevron-right.svg';

let id = 0;

/**
 * A container that consists of a header and a body. Inside the body,
 * child components are displayed.  The header consists of a clickable
 * expander control and a header text line. If the control is clicked,
 * the body is collapsed/expanded.
 *
 * :ref:`cs-web-components-base-components.PersistentCollapsible.__default__` is a variation of
 * this component, that persists its state.
 *
 * React Properties
 * ----------------
 *
 * +------------------+--------------+--------------+-------------------------------------------+
 * | Property         | Type         | Default      | Use                                       |
 * +==================+==============+==============+===========================================+
 * | header           | string/node  | \-           | Text to be displayed in header            |
 * +------------------+--------------+--------------+-------------------------------------------+
 * | initialCollapsed | bool         | true         | Initial state of the component            |
 * +------------------+--------------+--------------+-------------------------------------------+
 * | onCollapsed      | func         | undefined    | Callback invoked when component state     |
 * |                  |              |              | changes                                   |
 * +------------------+--------------+--------------+-------------------------------------------+
 * | children         | nodes        | \-           | Components to be displayed in body        |
 * +------------------+--------------+--------------+-------------------------------------------+
 *
 * Automation Properties
 * .....................
 *
 * **CollapsibleControl**: The control displayed in the header of the
 * collapsible. Click on it to toggle the collapsibles state. The
 * component defines a data-ce-state that represents the state of the
 * collapsible.
 *
 *   +---------------+--------------------------+
 *   | Value         | Use                      |
 *   +===============+==========================+
 *   | collapsed     | Collapsible is collapsed |
 *   +---------------+--------------------------+
 *   | expanded      | Collapsible is expanded  |
 *   +---------------+--------------------------+
 *
 */
export default class Collapsible extends Component {

    constructor(props) {
        super(props);
        this.state = {
            collapsed: this.props.initialCollapsed,
            ident: 'collapse' + id++
        };
        this.onToggleCollapseClicked = this.onToggleCollapseClicked.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (Boolean(nextProps.initialCollapsed) !== Boolean(this.props.initialCollapsed)) {
            // parent component will force changing expand status
            this.setState({
                collapsed: nextProps.initialCollapsed
            });
        }
    }

    onToggleCollapseClicked() {
        const newCollapsed = !this.state.collapsed;
        this.setState({collapsed: newCollapsed});

        if (this.props.onCollapsed) {
            this.props.onCollapsed(newCollapsed);
        }
    }

    render() {
        const {header, headerTooltip, useGlyphiconStyle, ...others} = this.props;
        const {collapsed} = this.state;
        const headerNode = React.isValidElement(header) ?
            header : <span>{header}</span>;
        const tooltip =
            headerTooltip ||
            (React.isValidElement(header) ?
                formatStr(collapsed ?
                    'tooltip_collapsible_open_gen' : 'tooltip_collapsible_close_gen') :
                formatStr(
                    collapsed ?
                        'tooltip_collapsible_open' : 'tooltip_collapsible_close',
                    {header: `"${header}"`}));
        const expIcon = getIcon(
            collapsed ? 'csweb_collapsible_closed' : 'csweb_collapsible_open');
        const expander = useGlyphiconStyle ?
            (<SVGIcon
                 src={collapsed ? right_arrow : down_arrow}
                 size="sm" />) :
            (<img data-ce-id="CollapsibleControl"
                  data-ce-state={collapsed ? "collapsed" : "expanded"}
                  className={prefixNS('collapsible-icon')}
                  src={expIcon} />);
        delete others.onCollapsed;
        delete others.initialCollapsed;
        return (
            <div className={prefixNS('collapsible')}>
                <div {...others}
                     className={prefixNS('collapsible-head')}
                     onClick={this.onToggleCollapseClicked}>
                        {expander}
                        <div title={tooltip}
                             className={prefixNS('collapsible-title')}>
                            {headerNode}
                        </div>
                </div>
                <Collapse className={prefixNS('collapsible-container')}
                          in={!collapsed}>
                    <div className={prefixNS('collapsible-content')}>
                        {this.props.children}
                    </div>
                </Collapse>
            </div>
        );
    }
}

Collapsible.propTypes = {
    // header element to display
    header: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,
    // callback when collapsed / expanded
    onCollapsed: PropTypes.func,
    // initial Collapsible state
    initialCollapsed: PropTypes.bool,
    useGlyphiconStyle: PropTypes.bool,
    headerTooltip: PropTypes.string
};

Collapsible.defaultProps = {
    onCollapsed: undefined,
    initialCollapsed: true,
    useGlyphiconStyle: false,
    headerTooltip: undefined
};
