/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SettingPanel.jsx 184479 2018-09-27 08:27:18Z mbr $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {formatStr} from '../../i18n.js';
import {prefixNS} from '../../helpers.js';
import {getSortColumns} from './reducers.js';
import Immutable from 'immutable';
import connect from '../connect';
import Organizer from '../../components/Organizer';
import {setSortColumns} from './actions';
import HelpReference from '../../components/HelpReference.jsx';
import SVGIcon from '../../components/SVGIcon';
import {SELECTORID} from '../constants.js';

class SettingPanel extends React.Component {
    constructor(props) {
        super(props);
        this.toggleSorting = this.toggleSorting.bind(this);
        this.updateSortColumnsFromOrganizer =
            this.updateSortColumnsFromOrganizer.bind(this);
        this.state = {
            sortColumns: Immutable.List(),
            organizerLists: undefined
        };
    }

    componentDidMount() {
        this.props.registerPanel(this);
        this.updateSortColumns(this.props.sortColumns.toList());
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.sortColumns !== nextProps.sortColumns ||
            this.props.columns !== nextProps.columns) {
            this.updateSortColumns(nextProps.sortColumns.toList());
        }
    }

    updateSortColumns(sortColumns) {
        const createItem = sortColumn => {
            const col = this.props.columns.find(col => col.get('id') === sortColumn.get('id'));
            const sortIcon = sortColumn.get('desc') ?
                             'csweb_triangle_bottom' : 'csweb_triangle_top';
            const onClick = () => {
                this.toggleSorting(sortColumn.get('id'));
            };
            return Immutable.Map({
                tooltip: col.get('tooltip'),
                desc: sortColumn.get('desc'),
                label: (
                    <span className={prefixNS("settings-sortable-item")}>
                        <span className={prefixNS("settings-sortable-item-label")}>
                            {col.get('label')}
                        </span>
                        <SVGIcon name={sortIcon} size="sm"
                                 onClick={onClick}/>
                    </span>
                ),
                id: col.get('id')
            });
        };

        const availableColumns =
            this.props.columns
                .filter(c =>
                    sortColumns.find(sc => c.get('id') === sc.get('id')) === undefined
                )
                .map(c => Immutable.Map({
                    id: c.get('id'),
                    label: c.get('label'),
                    tooltip: c.get('tooltip'),
                    desc: true
                }))
                .toList().filter(col => col.get('id') !== SELECTORID);

        this.setState({
            sortColumns: sortColumns,
            organizerLists: Immutable.List([
                Immutable.Map({
                    id: 'unsorted',
                    label: formatStr('table_unused_columns'),
                    items: availableColumns,
                    unsortable: true
                }),
                Immutable.Map({
                    id: 'sorted',
                    label: formatStr('table_sorted_columns'),
                    items: sortColumns.map(createItem),
                    unsortable: false
                })
            ])
        });
    }

    updateSortColumnsFromOrganizer(colLists) {
        const sortColumns = colLists.getIn([1, 'items']).map(c => Immutable.Map({
            id: c.get('id'),
            desc: c.get('desc')
        }));
        this.updateSortColumns(sortColumns);
    }

    toggleSorting(columnId) {
        const idx = this.state.sortColumns.findIndex(col => col.get('id') === columnId);
        if (idx === -1) {
            return;
        }

        const value = !this.state.sortColumns.get(idx).get('desc');
        this.updateSortColumns(this.state.sortColumns.setIn([idx, 'desc'], value));
    }

    dispatchSettings() {
        this.props.setSortColumns(this.state.sortColumns.toOrderedSet());
    }

    resetSettings() {
        this.updateSortColumns(this.props.sortColumns.toList());
    }

    render() {
        return (
            <div>
                <HelpReference helpId="user_web_components_table_sort_columns" />
                <Organizer
                    itemLists={this.state.organizerLists}
                    className={prefixNS('table-column-sorter')}
                    onItemListsChange={this.updateSortColumnsFromOrganizer}/>
            </div>
        );
    }
}

SettingPanel.propTypes = {
    registerPanel: PropTypes.func,
    sortColumns: ImmutablePropTypes.orderedSet,
    setSortColumns: PropTypes.func,
    columns: ImmutablePropTypes.list
};

const mapStateToProps = state => ({
    sortColumns: getSortColumns(state),
    columns: state.columns
});

const WrappedPanel = connect(mapStateToProps, {setSortColumns})(SettingPanel);
WrappedPanel.settingsTitle = () => formatStr('table_settings_title_sortable');
export default WrappedPanel;
