/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: user-settings-actions.js 175143 2018-03-28 09:06:04Z gwe $"
 */

import {getJSON, postJSON, deleteObject} from '../fetch';
import {Console, createLinkWithPattern} from '../helpers.js';

export const USER_SETTING_FETCHED = `${componentNameSpace}-USER_SETTINGS_FETCHED`;
export const USER_SETTING_STORED = `${componentNameSpace}-USER_SETTINGS_STORED`;
export const USER_SETTING_RESET = `${componentNameSpace}-USER_SETTINGS_RESET`;

/**
 * Returns the URL for a specific UserSetting entry, created from the template
 * URL that comes from the backend.
 */
function userSettingURL(componentId, settingKey) {
    return createLinkWithPattern('userSettingsTemplate', {
        id1: componentId,
        id2: settingKey
    });
}

function userSettingFetched(componentId, settingKey, value) {
    return {
        type: USER_SETTING_FETCHED,
        payload: {
            componentId,
            settingKey,
            value,
        }
    };
}

function userSettingStored(componentId, settingKey, value) {
    return {
        type: USER_SETTING_STORED,
        payload: {
            componentId,
            settingKey,
            value,
        }
    };
}

function userSettingReset(componentId, settingKey) {
    return {
        type: USER_SETTING_RESET,
        payload: {
            componentId,
            settingKey
        }
    };
}

export function fetchUserSetting(componentId, settingKey) {
    return (dispatch) => {
        return getJSON(userSettingURL(componentId, settingKey))
            .then((data) => dispatch(userSettingFetched(componentId, settingKey, data)));
    };
}

export function storeUserSetting(componentId, settingKey, value) {
    return (dispatch) => {
        return postJSON(userSettingURL(componentId, settingKey), value).then(
            (data) => dispatch(userSettingStored(componentId, settingKey, data)),
            (error) => {
                Console.log('Could not store user setting: ', error);
                throw error;
            }
        );
    };
}

export function resetUserSetting(componentId, settingKey) {
    return (dispatch, getState) => {
        const oldState = getState().userSettings;
        dispatch(userSettingReset(componentId, settingKey));
        const newState = getState().userSettings;
        return deleteObject(userSettingURL(componentId, settingKey)).then(() => ({
            hasChanged: newState !== oldState
        }));
    };
}
