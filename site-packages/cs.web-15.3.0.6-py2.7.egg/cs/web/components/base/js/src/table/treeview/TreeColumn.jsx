/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TreeColumn.jsx 175535 2018-04-05 14:23:59Z sla $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers';
import SVGIcon from '../../components/SVGIcon';
import Icon from '../../components/Icon';
import connect from '../connect';
import {toggleTreeNode} from './actions';
import {isTreeViewOff} from './helpers';

import csweb_tree_down from '../../../../resources/cis_chevron-down.svg';
import csweb_tree_right from '../../../../resources/cis_chevron-right.svg';


class ExpandButton extends React.PureComponent {
    render() {
        const {expanded, filteredOut, ...others} = this.props;
        const icon = expanded ? csweb_tree_down : csweb_tree_right;
        const clsname = classNames(
            prefixNS('table-treeview-expand-button'),
            {[prefixNS('table-treeview-unexpandable')]: filteredOut}
        );
        if (filteredOut) {
            delete others.onClick;
        }
        return (
            <SVGIcon
                {...others}
                className={clsname}
                src={icon}
                size="sm"/>
        );
    }
}

ExpandButton.propTypes = {
    expanded: PropTypes.bool,
    filteredOut: PropTypes.bool
};

const PlaceHolderIcon = (<Icon src={Icon.BLANK_ICON_SRC} size="sm"/>);

class TreeColumn extends React.Component {
    constructor(props) {
        super(props);
        this.toggleTreeNode = this.toggleTreeNode.bind(this);
    }

    toggleTreeNode(e) {
        const {row, toggleTreeNode} = this.props;
        if (row && toggleTreeNode) {
            toggleTreeNode(row.get('id'));
        }
        e.preventDefault();
        e.stopPropagation();
    }

    render() {
        const {row, treeviewState, treeViewOff} = this.props;
        const rowState = treeviewState.get(row.get('id'));
        const level = rowState ? rowState.get('level') : 0;
        const style = treeViewOff ? undefined : {paddingLeft: `${level * 0.75}em`};
        const expanded = rowState ? rowState.get('expanded') : false;
        const filteredOut = rowState && rowState.get('filteredOut', false);
        const hasChild = rowState &&
            (rowState.get('hasChild') ||
            rowState.get('children') && rowState.get('children').count() > 0);
        return (
            <div className={prefixNS('table-treeview-column-renderer')}
                 style={style}>
                {treeViewOff ?
                    null :
                    (hasChild ?
                        <ExpandButton
                            filteredOut={filteredOut}
                            expanded={expanded}
                            onClick={this.toggleTreeNode}/> :
                        PlaceHolderIcon
                    )
                }
                {this.props.children}
            </div>
        );
    }
}

TreeColumn.propTypes = {
    // column: ImmutablePropTypes.map,
    row: ImmutablePropTypes.map,
    treeviewState: ImmutablePropTypes.map,
    treeViewOff: PropTypes.bool,
    toggleTreeNode: PropTypes.func
};

const mapStateToProps = (state) => ({
    treeviewState: state.treeViewState,
    treeViewOff: isTreeViewOff(state)
});

export default connect(mapStateToProps, {toggleTreeNode})(TreeColumn);
