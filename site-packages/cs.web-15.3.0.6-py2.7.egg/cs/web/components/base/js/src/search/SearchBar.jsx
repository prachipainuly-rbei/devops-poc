/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchBar.jsx 181930 2018-08-09 12:22:59Z gwe $"
 */

import Immutable from 'immutable';
import React from 'react';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {prefixNS} from '../helpers.js';
import {formatStr} from '../i18n.js';
import ContentBlock from '../components/ContentBlock.jsx';
import SearchField from '../components/SearchField.jsx';
import SVGIcon from '../components/SVGIcon.jsx';
import {changeFields, addSearchField, removeSearchField,
        runSearch, changeFieldsFromSearchBar,
        removeSearchFieldIncludingDependencies} from './actions/instances.js';
import {
    isSearchRunning, getSearchValues, getAttributeOrder, getFields, getOperationState,
    getReadOnlyAttributes, getVisibleAttributes, getDisplayMappingURL, getOpData
} from './selectors/instances.js';
import SearchBarHeader from './SearchBarHeader.jsx';
import SearchBarControls from './SearchBarControls.jsx';
import SearchAttribute from './SearchAttribute.jsx';
import {FTS_ATTRNAME} from './constants.js';
import {addNotification} from '../actions/notification.js';

import search_icon from '../../../resources/cis_search_primary.svg';

class SearchBar extends React.Component {
    constructor(props) {
        super(props);
        this.doChangeFields = this.doChangeFields.bind(this);
        this.handleSearchTextChange = this.handleSearchTextChange.bind(this);
        this.doAddSearchField = this.doAddSearchField.bind(this);
        this.doRemoveSearchField = this.doRemoveSearchField.bind(this);
        this.doRunSearch = this.doRunSearch.bind(this);
        this.changeFieldsAndRunSearch = this.changeFieldsAndRunSearch.bind(this);
        this.changeFieldsFromSearchBar = this.changeFieldsFromSearchBar.bind(this);
        this.checkSearchValues(props);
    }

    componentDidUpdate() {
        this.checkSearchValues(this.props);
    }

    checkSearchValues(props) {
        const {fields, attributeOrder, instanceName, classTitle} = props;
        if (attributeOrder && fields) {
            const unfittingAttributes = attributeOrder.filterNot(a => fields.has(a));
            if (unfittingAttributes.size > 0) {
                props.addNotification(`${componentNameSpace}-SearchBar#${instanceName}`,
                    formatStr('search_unknown_attribute_error', {name: classTitle}),
                    formatStr(
                        'search_unknown_attribute_info',
                        {attributes: unfittingAttributes.toJS()}),
                    'info',
                    3,
                    null,
                    10000);
            }
        }
    }

    doChangeFields(fields) {
        const {instanceName, changeFields} = this.props;
        changeFields(instanceName, fields);
    }

    handleSearchTextChange(txt) {
        const {instanceName, changeFields} = this.props;
        changeFields(instanceName, Immutable.Map([[FTS_ATTRNAME, txt]]));
    }

    doAddSearchField(fieldname) {
        const {instanceName, addSearchField} = this.props;
        addSearchField(instanceName, fieldname);
    }

    doRemoveSearchField(field) {
        const {instanceName, removeSearchFieldIncludingDependencies} = this.props;
        removeSearchFieldIncludingDependencies(instanceName, field);
    }

    doRunSearch() {
        const {instanceName, runSearch} = this.props;
        runSearch(instanceName);
    }

    changeFieldsAndRunSearch(fields) {
        this.doChangeFields(fields);
        this.doRunSearch();
    }

    changeFieldsFromSearchBar(fields, attr) {
        const {instanceName, changeFieldsFromSearchBar} = this.props;
        changeFieldsFromSearchBar(instanceName, fields, attr);
    }

    renderFtsField(visibleAttributes, searchValues, classTitle) {
        if (!visibleAttributes.has(FTS_ATTRNAME)) {
            return null;
        }
        const beforeControl = (
            <SVGIcon src={search_icon} className={prefixNS('class-search-area__fts-icon')} />
        );
        return (
            <div className={prefixNS('class-search-area__attribute-line')}>
                <SearchField
                    productName={classTitle}
                    beforeControl={beforeControl}
                    searchCallback={this.doRunSearch}
                    searchTextChangedCallback={this.handleSearchTextChange}
                    searchText={searchValues.get(FTS_ATTRNAME)}
                    searchButtonSize={'small'}/>
            </div>
        );
    }

    render() {
        const {
            searchRunning, attributeOrder, searchValues, visibleAttributes, fields,
            classTitle, instanceName, operationState, readOnlyAttributes,
            displayMappingURL, opData} = this.props;
        if (searchValues === undefined || fields === undefined) {
            return null;
        }
        return (
            <ContentBlock
                className={prefixNS('class-search-bar')}
                collapsible={false}
                expanded={true}
                title={formatStr('do_extended_search')}
            >
                <ContentBlock.Header>
                    <SearchBarHeader instanceName={instanceName} />
                </ContentBlock.Header>
                <ContentBlock.Body>
                    <div className='elements-formcontrol-grid'>
                        <div className={prefixNS('class-search-area__search-attributes')}>
                            {this.renderFtsField(visibleAttributes, searchValues, classTitle)}
                            <div className={prefixNS('class-search-area__attribute-list')}>
                                {attributeOrder.filter(a => fields.has(a)).map((attr, idx) =>
                                    <SearchAttribute
                                        key={attr}
                                        attr={attr}
                                        focus={idx === attributeOrder.size - 1}
                                        runSearch={
                                            value => this.changeFieldsAndRunSearch(
                                                Immutable.Map([[attr, value]])
                                            )
                                        }
                                        searchRunning={searchRunning}
                                        searchValues={searchValues}
                                        fields={fields}
                                        operationState={operationState}
                                        readOnlyAttributes={readOnlyAttributes}
                                        doChangeFields={this.changeFieldsFromSearchBar}
                                        doRemoveSearchField={this.doRemoveSearchField}
                                        displayMappingURL={displayMappingURL}
                                        opData={opData}/>
                                )}
                            </div>
                        </div>
                    </div>
                    <SearchBarControls
                        searchRunning={searchRunning}
                        fields={fields}
                        searchValues={searchValues}
                        visibleAttributes={visibleAttributes}
                        addSearchField={this.doAddSearchField}
                        runSearch={this.doRunSearch} />
                </ContentBlock.Body>
            </ContentBlock>
        );
    }
}
SearchBar.propTypes = {
    instanceName: PropTypes.string.isRequired,
    classTitle: PropTypes.string.isRequired,
    // store
    searchRunning: PropTypes.bool.isRequired,
    searchValues: ImmutablePropTypes.map,
    attributeOrder: ImmutablePropTypes.list,
    fields: ImmutablePropTypes.map,
    operationState: ImmutablePropTypes.map,
    readOnlyAttributes: ImmutablePropTypes.set,
    visibleAttributes: ImmutablePropTypes.set,
    displayMappingURL: PropTypes.string,
    opData: ImmutablePropTypes.map,
    // actions
    changeFields: PropTypes.func.isRequired,
    addSearchField: PropTypes.func.isRequired,
    removeSearchField: PropTypes.func.isRequired,
    removeSearchFieldIncludingDependencies: PropTypes.func.isRequired,
    changeFieldsFromSearchBar: PropTypes.func.isRequired,
    runSearch: PropTypes.func.isRequired,
    addNotification: PropTypes.func.isRequired,
};

function mapStateToProps(state, ownProps) {
    const {instanceName} = ownProps;
    return {
        searchRunning: isSearchRunning(state, instanceName),
        searchValues: getSearchValues(state, instanceName),
        attributeOrder: getAttributeOrder(state, instanceName),
        fields: getFields(state, instanceName),
        operationState: getOperationState(state, instanceName),
        displayMappingURL: getDisplayMappingURL(state, instanceName),
        readOnlyAttributes: getReadOnlyAttributes(state, instanceName),
        visibleAttributes: getVisibleAttributes(state, instanceName),
        opData: getOpData(state, instanceName),
    };
}

const actions = {
    changeFields, addSearchField, removeSearchField,
    runSearch, changeFieldsFromSearchBar, removeSearchFieldIncludingDependencies,
    addNotification
};

export default connect(mapStateToProps, actions)(SearchBar);
