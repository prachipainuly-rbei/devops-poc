/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: type-aheads.js 184646 2018-10-02 10:09:11Z cla $"
 */

import {VerticalAlignment} from '../constants.js';
import {getTopPosition, getBottomPosition} from './menus.js';

function getHorizontalPosition(parentRect) {
    // default alignment with scrollbar
    return {
        left: parentRect.left,
        width: parentRect.width,
        overflowX: "hidden",
    };
}

export default function layout(
    layoutConfig,
    horizontalAlign,
    verticalAlign,
    parentRect,
    overlayRect
) {
    // We calculate horizontal style before vertical style, as it allows us to
    // know when a horizontal scrollbar is displayed. That way we can calculate
    // the correct position for top alignment without having a constant margin
    // when horizontal rendering is inactive.
    // Rendering a margin on the right side of the overlay on the other hand is
    // not looking as out of place.
    const style = getHorizontalPosition(parentRect, overlayRect);

    switch (verticalAlign) {
        case VerticalAlignment.BOTTOM:
            Object.assign(
                style,
                getBottomPosition(layoutConfig, parentRect, overlayRect, false)
            );
            break;
        case VerticalAlignment.TOP:
            Object.assign(
                style,
                getTopPosition(layoutConfig, parentRect, overlayRect, false)
            );
            break;
    }

    return style;
}
