/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: enumWrapper.jsx 163064 2017-08-10 11:05:43Z cla $"
 */

import React, {Component} from 'react';
import Immutable from 'immutable';
import {PropTypes} from 'cs-web-components-externals';
import {getDisplayName} from '../../helpers.js';

export default function(WrappedComponent) {
    class EnumWrapper extends Component {
        constructor(props) {
            super(props);
            this.onSelect = this.onSelect.bind(this);
        }

        getMappings() {
            const mappings = this.props.config.getIn(['display_mapping', 'mappings']);
            return mappings ? mappings : Immutable.List();
        }

        render() {
            const {value, ...others} = this.props;
            const items = this.getMappings();
            const display = items.find(i => i.get(0) === value);
            delete others.onCatalogChange;
            delete others.config;
            return (
                <WrappedComponent
                    {...others}
                    items={items.map(i => i.get(1))}
                    onSelect={this.onSelect}
                    value={display ? display.get(1) : value}/>
            );
        }

        onSelect(eventKey, event) {
            const {onSelect, name, onCatalogChange} = this.props;
            const result = {};
            result[name] = this.getMappings().get(eventKey).get(0);
            if (onCatalogChange) {
                onCatalogChange(result);
            }
            if (onSelect) {
                onSelect(eventKey, event);
            }
        }
    }

    EnumWrapper.propTypes = {
        config: PropTypes.instanceOf(Immutable.Map),
        name: PropTypes.string.isRequired,
        value: PropTypes.string.isRequired,
        onCatalogChange: PropTypes.func,
        onSelect: PropTypes.func
    };

    EnumWrapper.displayName = `EnumWrapper(${getDisplayName(WrappedComponent)})`;

    return EnumWrapper;
}
