/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RelationshipFetcher.jsx 184452 2018-09-26 14:42:57Z cla $"
 */

import React from 'react';
import {Alert} from 'react-bootstrap';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {
    createRelshipSearchInstance, removeSearchInstance, runSearch, repeatSearch,
    loadRelshipSearchForm
} from '../../search/actions/instances.js';
import {getSearchResult, getSearchError} from '../../search/selectors/instances.js';

/**
 * Component build after the FACC pattern that retrieves relationship data as a
 * table, and passes it on to its function child.
 */
class RelationshipFetcher extends React.Component {
    constructor(props) {
        super(props);
        this.refreshTable = this.refreshTable.bind(this);
    }

    componentDidMount() {
        const {
            instanceName, active, contextObject, relshipName, tableName,
            createRelshipSearchInstance, runSearch
        } = this.props;
        createRelshipSearchInstance(instanceName, contextObject, relshipName, tableName);
        if (active) {
            runSearch(instanceName);
        }
    }

    componentWillUnmount() {
        this.props.removeSearchInstance(this.props.instanceName);
    }

    componentWillReceiveProps(nextProps) {
        if (!this.props.active && nextProps.active) {
            nextProps.runSearch(this.props.instanceName);
        }
        if (nextProps.searchAgainOpInfo &&
            nextProps.searchAgainOpInfo !== this.props.searchAgainOpInfo)
        {
            nextProps.loadRelshipSearchForm(
                nextProps.instanceName,
                nextProps.searchAgainOpInfo.get('form_url'),
                nextProps.searchAgainOpInfo.get('submit_url'));
        }
    }

    refreshTable() {
        if (this.props.active) {
            this.props.repeatSearch(this.props.instanceName);
        }
    }

    render() {
        const {searchAgainOpInfo, searchResult, searchError} = this.props;
        if (searchError) {
            // On error, ignore the children and just render an error indication
            return <Alert bsStyle="warning">{searchError.message}</Alert>;
        } else if (!searchResult) {
            return null;
        } else {
            // Normal case, we have data and call the child function
            return this.props.children(
                searchResult.get('tabledef'),
                searchResult.get('rows'),
                this.refreshTable,
                searchAgainOpInfo);
        }
    }
}
RelationshipFetcher.propTypes = {
    instanceName: PropTypes.string.isRequired,
    contextObject: ImmutablePropTypes.map,
    relshipName: PropTypes.string.isRequired,
    tableName: PropTypes.string,
    active: PropTypes.bool,
    // store
    searchResult: ImmutablePropTypes.map,
    searchError: PropTypes.any,
    searchAgainOpInfo: ImmutablePropTypes.map,
    // actions
    createRelshipSearchInstance: PropTypes.func.isRequired,
    removeSearchInstance: PropTypes.func.isRequired,
    runSearch: PropTypes.func.isRequired,
    repeatSearch: PropTypes.func.isRequired,
    loadRelshipSearchForm: PropTypes.func.isRequired
};

RelationshipFetcher.defaultProps = {
    tableName: '',
    active: true
};

function searchAgainOperation(state, ownProps) {
    const {contextObject, relshipName} = ownProps;
    const refOpInfos = state.operationsByRelship.getIn(
        [contextObject.get('@id'), relshipName, 'reference_opinfo', 1]);
    if (!refOpInfos) {
        return undefined;
    }
    const opInfo = refOpInfos.find(op => op.get('opname') === 'CDB_SearchAgain');
    if (!opInfo || !opInfo.get('form_url') || !opInfo.get('submit_url')) {
        return undefined;
    }
    return opInfo;
}

function mapStateToProps(state, ownProps) {
    const {instanceName} = ownProps;
    return {
        searchResult: getSearchResult(state, instanceName),
        searchError: getSearchError(state, instanceName),
        searchAgainOpInfo: searchAgainOperation(state, ownProps)
    };
}

const actions = {
    createRelshipSearchInstance, removeSearchInstance, runSearch, repeatSearch,
    loadRelshipSearchForm
};

export default connect(mapStateToProps, actions)(RelationshipFetcher);
