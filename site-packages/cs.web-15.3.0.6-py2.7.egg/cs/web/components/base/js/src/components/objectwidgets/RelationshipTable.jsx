/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RelationshipTable.jsx 184281 2018-09-21 12:51:08Z cla $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import TableWrapper from '../TableWrapper';
import SVGIcon from '../SVGIcon.jsx';
import RelationshipFetcher from './RelationshipFetcher.jsx';
import RelationshipTableConfig from './RelationshipTableConfig.jsx';
import TableSelectionHelper from './TableSelectionHelper.jsx';
import SplitterLayout from '../../layouts/SplitterLayout.jsx';
import SearchBar from '../../search/SearchBar.jsx';

let instanceCounter = 0;

function nextInstanceName() {
    return `relship-search-${++instanceCounter}`;
}

/**
 * A Control to show the result of a relationship navigation in a table.
 *
 * React Properties
 * ----------------
 *
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | Property              | Type         | Default          | Use                                       |
 * +=======================+==============+==================+===========================================+
 * | contextObject         | Immutable.Map| \-               | The parent object of the relationship     |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | relshipName           | string       | undefined        | The :guilabel:`Semantical Name`  of the   |
 * |                       |              |                  | relationship as configured in the system  |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | tableName             | string       | undefined        | The name of the table that is used to     |
 * |                       |              |                  | display the result. If the name is not    |
 * |                       |              |                  | defined the system will use the table that|
 * |                       |              |                  | is configured for the given relationship  |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | singleSelection       | bool         | false            | Allow only single or multi selection      |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | height                | string       | \-               | Height of the control. If set to 'auto',  |
 * |                       |              |                  | the table size will auto fit its rows.    |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | hideTableHeaderPanels | bool         | false            | If true, the feature panels over the      |
 * |                       |              |                  | table would be turned off to save places. |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | tableClassName        | string       | \-               | Style classes of the table component.     |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 * | columnAggregator      | object       | \-               | Settings for an aggregation row.          |
 * +-----------------------+--------------+------------------+-------------------------------------------+
 *
 */
export default class RelationshipTable extends React.PureComponent {
    constructor(props) {
        super(props);
        instanceCounter = instanceCounter + 1;
        this.state = {
            expanded: props.expanded
        };
        this.instanceName = nextInstanceName();
        this.selectionName = `relationship/selection_${instanceCounter}`;
        this.onExpansionChanged = this.onExpansionChanged.bind(this);
    }

    onExpansionChanged(expanded) {
        const {onExpanded} = this.props;
        this.setState({expanded});
        if (onExpanded !== undefined) {
            onExpanded(expanded);
        }
    }

    renderTable(tableDef, rowValues, tableConfig, onSelectionChanged, searchAgainOp) {
        const {
            relshipLabel, relshipIconUrl, height, tableClassName, columnAggregator, asTree,
            treeParentColumnID, treeIDColumnID, treeColumnID, collapsible, singleSelection
        } = this.props;
        const treeProps = asTree ? {treeParentColumnID, treeIDColumnID, treeColumnID} : {};
        const title = rowValues === undefined ?
            `${relshipLabel}` : `${relshipLabel} (${rowValues.count()})`;
        const icon = relshipIconUrl ? <SVGIcon src={relshipIconUrl} size="sm" /> : null;

        const tbl = (
            <TableWrapper
                title={title}
                icon={icon}
                table={tableConfig}
                tableDef={tableDef}
                rowValues={rowValues}
                singleSelection={singleSelection}
                withSelector={true}
                onSelectionChanged={onSelectionChanged}
                expanded={this.state.expanded}
                onExpansionChanged={this.onExpansionChanged}
                contentHeight={height}
                className={tableClassName}
                columnAggregator={columnAggregator}
                collapsible={collapsible}
                {...treeProps}
            />
        );
        if (searchAgainOp && !asTree) {
            return (
                <SplitterLayout>
                    <SplitterLayout.SecondaryPane initCollapsed={true} defaultSize="300px">
                        <SearchBar
                            instanceName={this.instanceName}
                            classTitle={relshipLabel} />
                    </SplitterLayout.SecondaryPane>
                    <SplitterLayout.PrimaryPane>
                        {tbl}
                    </SplitterLayout.PrimaryPane>
                </SplitterLayout>
            );
        }
        else {
            return tbl;
        }
    }

    render() {
        const {
            contextObject, relshipName, tableName, height, operationParams,
            hideTableHeaderPanels, onSelect, asTree, tableLayout
        } = this.props;
        return (
            <RelationshipFetcher
                    instanceName={this.instanceName}
                    contextObject={contextObject}
                    relshipName={relshipName}
                    tableName={tableName}
                    active={this.state.expanded}>
                {(tableDef, rowValues, refreshTable, searchAgainOp) => (
                    <RelationshipTableConfig
                            instanceName={this.instanceName}
                            operationParams={operationParams}
                            contextObject={contextObject}
                            relshipName={relshipName}
                            selectionName={this.selectionName}
                            refreshTable={refreshTable}
                            height={height}
                            hideTableHeaderPanels={hideTableHeaderPanels}
                            tableLayout={tableLayout}
                            asTree={asTree}>
                        {tableConfig => (
                            <TableSelectionHelper
                                    rows={rowValues}
                                    selectionName={this.selectionName}
                                    onSelect={onSelect}>
                                {onSelectionChanged => this.renderTable(
                                    tableDef, rowValues, tableConfig,
                                    onSelectionChanged, searchAgainOp
                                )}
                            </TableSelectionHelper>
                        )}
                    </RelationshipTableConfig>
                )}
            </RelationshipFetcher>
        );
    }
}
RelationshipTable.propTypes = {
    contextObject: ImmutablePropTypes.map,
    operationParams: PropTypes.object,
    relshipName: PropTypes.string.isRequired,
    relshipLabel: PropTypes.string.isRequired,
    relshipIconUrl: PropTypes.string.isRequired,
    height: PropTypes.string.isRequired,
    tableName: PropTypes.string,
    expanded: PropTypes.bool,
    onSelect: PropTypes.func,
    hideTableHeaderPanels: PropTypes.bool,
    tableClassName: PropTypes.string,
    tableLayout: PropTypes.func,
    collapsible: PropTypes.bool,
    columnAggregator: PropTypes.object,
    onExpanded: PropTypes.func,
    asTree: PropTypes.bool,
    treeParentColumnID: PropTypes.string,
    treeIDColumnID: PropTypes.string,
    treeColumnID: PropTypes.string,
    singleSelection: PropTypes.bool
};

RelationshipTable.defaultProps = {
    expanded: false,
    hideTableHeaderPanels: false,
    collapsible: true,
    asTree: false,
    singleSelection: false
};
