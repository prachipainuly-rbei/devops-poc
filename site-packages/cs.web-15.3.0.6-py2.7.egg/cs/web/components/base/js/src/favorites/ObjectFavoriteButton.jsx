/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ObjectFavoriteButton.jsx 164928 2017-09-11 11:52:23Z cla $"
 */

import React from 'react';
import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import Button from '../components/Button.jsx';
import {addFavorite, deleteFavorite} from './actions.js';
import {formatStr} from '../i18n.js';

function getFavoriteURL(contextObject) {
    if (contextObject === null || contextObject === undefined) {
        return undefined;
    }
    const a = document.createElement('a');
    a.href = contextObject.get('system:ui_link');
    // Workaround for IE to include the leading / required for location.pathname
    return a.pathname.startsWith('/') ? a.pathname : ('/' + a.pathname);
}

/**
 * ObjectFavoriteButton renders an IconButton that signals whether the given
 * contextObject is marked as a fovorite, and allows to toggle the favorite state
 * by clicking on the icon.
 */
class ObjectFavoriteButton extends React.Component {
    constructor(props) {
        super(props);
        this.toggleFavorite = this.toggleFavorite.bind(this);
    }

    getFavorite() {
        const {contextObject} = this.props;
        return Immutable.fromJS({
            frontend_url: getFavoriteURL(contextObject),
            classname: contextObject.get('system:classname'),
            rest_id: contextObject.get('system:navigation_id'),
            ref_object_id: contextObject.get('cdb_object_id')
        });
    }

    toggleFavorite() {
        const {contextObjectFavorite} = this.props;
        if (contextObjectFavorite === undefined) {
            this.props.addFavorite(this.getFavorite());
        } else {
            this.props.deleteFavorite(contextObjectFavorite);
        }
    }

    render() {
        const iconName = this.props.isFavorite ? 'csweb_favorite_added' : 'csweb_favorite';
        const title = this.props.isFavorite ?
                      formatStr('favorite_delete_tooltip') :
                      formatStr('favorite_add_tooltip');
        return (
            <Button.IconButton
                onClick={this.toggleFavorite}
                title={title}
                buttonStyle="success"
                iconName={iconName} />
        );
    }
}
ObjectFavoriteButton.propTypes = {
    contextObject: ImmutablePropTypes.map.isRequired,
    contextObjectFavorite: ImmutablePropTypes.map,
    isFavorite: PropTypes.bool.isRequired,
    // actions injected from connect
    addFavorite: PropTypes.func.isRequired,
    deleteFavorite: PropTypes.func.isRequired
};

function mapStateToProps(state, ownProps) {
    const favoriteURL = getFavoriteURL(ownProps.contextObject);
    const contextObjectFavorite = state.favorites.get(favoriteURL);
    return {
        contextObjectFavorite,
        isFavorite: (contextObjectFavorite !== undefined)
    };
}

export default connect(mapStateToProps, {addFavorite, deleteFavorite})(ObjectFavoriteButton);
