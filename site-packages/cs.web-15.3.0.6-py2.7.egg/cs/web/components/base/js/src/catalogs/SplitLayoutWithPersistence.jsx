/*
* Copyright (C) 2018 CONTACT Software GmbH
* All rights reserved.
* http://www.contact-software.com
*
* Revision "$Id: SplitLayoutWithPersistence.jsx 183305 2018-09-04 10:20:16Z mbr $"
*/

import React from 'react';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import SplitterLayout from '../layouts/SplitterLayout';
import {storeUserSetting, fetchUserSetting} from '../actions/user-settings-actions.js';
import Immutable from 'immutable';

const USER_SETTING_STORE_DELAY = 500;

/**
 * Extended SplitLayout component which saves the last settings in the user settings or loads them from the user settings.
 *
 * +------------------+---------------+--------------+---------------------------------------------+
 * | Property         | Type          | Default      | Use                                         |
 * +==================+===============+==============+=============================================+
 * | componentID      | string        | -            | Settings are persisted in the user settings |
 * |                  |               |              | with [componentID, settingKey]              |
 * +------------------+---------------+--------------+---------------------------------------------+
 * | settingKey       | string        | -            |               ""                            |
 * +------------------+---------------+--------------+---------------------------------------------+
 * | size             | string or     | 132px        |  The size of the second pane if no other    |
 * |                  | number        |              |  settings is specified                      |
 * +------------------+---------------+--------------+---------------------------------------------+
 * | visible          | bool          | true         |  Is the second panel initially visible.     |
 * |                  |               |              |  Used if no other settings is specified     |
 * +------------------+---------------+--------------+---------------------------------------------+
 * | initialFetch     | bool          | -            | initially fetch settings                    |
 * +------------------+---------------+--------------+---------------------------------------------+
 *
 */
class SplitLayoutWithPersistence extends React.Component {

    constructor(props) {
        super(props);
        let paneVisible = props.visible;
        let splitSize = props.size;
        if (props.userSetting) {
            splitSize = props.userSetting.get('size', splitSize);
            paneVisible = props.userSetting.get('visible', paneVisible);
        }
        this.state = {
            paneVisible: paneVisible,
            splitSize: splitSize
        };

        this.onChange = this.onChange.bind(this);

        this.timeoutIDSizeChange = null;
    }

    componentDidMount() {
        const {initialFetch, settingKey, componentID,
               fetchUserSetting, userSetting} = this.props;
        if (initialFetch && !userSetting && settingKey && componentID) {
            fetchUserSetting(componentID, settingKey);
        }
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.userSetting !== nextProps.userSetting) {
            const splitSize = nextProps.userSetting
            ? nextProps.userSetting.get('size')
            : this.props.size;
            const paneVisible = nextProps.userSetting
            ? nextProps.userSetting.get('visible')
            : false;
            this.setState({
                paneVisible: paneVisible,
                splitSize: splitSize});
        }
    }

    onChange(data) {
        const {collapsed, size} = data;
        if (this.timeoutIDSizeChange) {
            clearTimeout(this.timeoutIDSizeChange);
        }
        this.setState({splitSize: size, paneVisible: !collapsed});
        this.timeoutIDSizeChange
            = setTimeout(() => {this.saveSettings(size, !collapsed)},
                         USER_SETTING_STORE_DELAY);
    }

    saveSettings(splitSize, paneVisible) {
        const {settingKey, componentID} = this.props;
        if (settingKey && componentID) {
            this.props.storeUserSetting(
                componentID, settingKey,
                Immutable.Map({
                    size: splitSize,
                    visible: paneVisible
                })
            );
        }
    }

    render() {
        const {paneVisible, splitSize} = this.state;
        return (
            <SplitterLayout>
                <SplitterLayout.PrimaryPane>
                    {this.props.children[0]}
                </SplitterLayout.PrimaryPane>
                <SplitterLayout.SecondaryPane
                    initCollapsed={!paneVisible}
                    defaultSize={splitSize}
                    onChange={this.onChange}>
                    {this.props.children[1]}
                </SplitterLayout.SecondaryPane>
            </SplitterLayout>
        );
    }
  }

SplitLayoutWithPersistence.propTypes = {
    size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    visible: PropTypes.bool,
    userSetting: ImmutablePropTypes.map,
    storeUserSetting: PropTypes.func,
    fetchUserSetting: PropTypes.func,
    settingKey: PropTypes.string,
    componentID: PropTypes.string,
    initialFetch: PropTypes.bool,
};

SplitLayoutWithPersistence.defaultProps = {
    visible: true,
    size: "132px",
    initialFetch: true,
};

function mapStateToProps(state, ownProps) {
    if (ownProps.settingKey && ownProps.componentID) {
        const userSettingRaw = state.userSettings.getIn(
            [ownProps.componentID, ownProps.settingKey]);
        const userSetting = userSettingRaw === undefined || userSettingRaw === '' ?
        undefined :
        userSettingRaw;
        return {userSetting: userSetting};
    }
    return {};
}

const actions = {storeUserSetting, fetchUserSetting};
export default connect(mapStateToProps, actions)(SplitLayoutWithPersistence);
