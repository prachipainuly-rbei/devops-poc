/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: TitleBar.jsx 185884 2018-10-30 14:22:27Z vov $"
 */

import {formatStr} from '../../i18n';
import React from 'react';
import Immutable from 'immutable';
import {
    Navbar, Nav, NavItem, NavDropdown, MenuItem
} from 'react-bootstrap';
import {PropTypes, connect, classNames, ImmutablePropTypes} from 'cs-web-components-externals';
import {fetchObject} from '../../actions/object-actions.js';
import {getAppSetup, prefixNS, isCEDesktop, getIcon} from '../../helpers.js';
import SVGIcon from '../SVGIcon';
import {SVGIconAndLabel} from '../IconAndLabel.jsx';
import Navigation from '../navigation';
import ErrorLog from '../../messages/ErrorLog.jsx';
import PasswordChange from '../../components/PasswordChange';
import Messages from '../../messages';
import Dialog from '../../dialogs';
import UserPanel from './UserPanel.jsx';
import TitleBarSearchField from './TitleBarSearchField.jsx';

import {addGlobalShortcuts, removeGlobalShortcuts} from '../../key-handlers.js';

const getAppSettings = (name) => getAppSetup().getIn(['appSettings', name]);
const getAppLinks = (name) => getAppSetup().getIn(['links', 'common', name]);

const productName = getAppSettings('productName');
const helpLink = getAppLinks('help');
const userLink = getAppLinks('currentUser');
const hideSearchField = getAppSettings('hideTitleBarSearchField');
const applications = JSON.parse(getAppSettings('accountMenuItems') || "[]");
const userName = getAppSettings('userFullName');

/**
 * The application titlebar that is usually displayed on the top of the
 * |elements| Web UI.  This component shouldn't be directly used, as it
 * is rendered as part of
 * :ref:`cs-web-components-base-components.pageframe.ApplicationFrame.ApplicationFrame`.
 *
 * Automation Properties
 * ---------------------
 *
 */
export class CDBTitleBarContent extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            displaySearchField: true,
            showErrorLog: false,
            showPasswordDialog: false,
            passwordError: false,
        };
        this.toggleSearchField = this.toggleSearchField.bind(this);
        this.focusSearchField = this.focusSearchField.bind(this);
        this.showErrorLog = this.showErrorLog.bind(this);
        this.hideErrorLog = this.hideErrorLog.bind(this);
        this.showPasswordDialog = this.showPasswordDialog.bind(this);
        this.hidePasswordDialog = this.hidePasswordDialog.bind(this);
        this.passwordLoadError = this.passwordLoadError.bind(this);
    }

    componentDidMount() {
        if (this.props.currentUser === undefined) {
            this.props.fetchObject(userLink);
        }

        addGlobalShortcuts([
            ['g s', this.focusSearchField]
        ]);
    }

    componentWillUnmount() {
        removeGlobalShortcuts(['g s']);
    }

    focusSearchField() {
        this.setState({displaySearchField: true});
        this.searchField.setFocusToInputField();
    }

    toggleSearchField() {
        this.searchField.setFocusToInputField();
    }

    showErrorLog() {
        this.setState({showErrorLog: true});
    }

    hideErrorLog() {
        this.setState({showErrorLog: false});
    }

    renderErrorLog() {
        if (isCEDesktop() || !this.state.showErrorLog) {
            return null;
        }

        return (
            <Dialog.SingleSelection
                title={formatStr('error_log_title')}
                sizes={Immutable.fromJS([Dialog.SIZE_LARGE, Dialog.SIZE_MEDIUM])}
                showCancel onHide={this.hideErrorLog}
            >
                <ErrorLog />
            </Dialog.SingleSelection>
        );
    }

    renderInfoMenu() {
        if (isCEDesktop()) {
            return null;
        }
        const icon = <SVGIcon name="csweb_information"
                              title={formatStr("tooltip_infomenu")}
                              className={classNames(prefixNS('titlebar__icon'))}/>;
        return (
            <NavDropdown id={prefixNS('webui_menu_profile')}
                         title={icon}
                         className={prefixNS('titlebar__button')}>
                {applications.map((app, idx) => (
                    <MenuItem key={idx}
                              href={app.link}
                              target={app.presentation_id === 'navigate-new-tab'
                                ? '_blank'
                                : null}>
                        <SVGIconAndLabel
                            label={app.title}
                            src={app.imageSrc}/>
                    </MenuItem>
                ))}
                <MenuItem>
                    <SVGIconAndLabel
                        label={<span onClick={this.showErrorLog}>
                                  {formatStr('error_protocol_label')}</span>}
                        name="csapp_error_protocol"/>
                </MenuItem>
            </NavDropdown>
        );
    }

    renderPasswordDialog() {
        if (isCEDesktop()) {
            return null;
        }

        return this.props.currentUser ? (
            <PasswordChange
                show={this.state.showPasswordDialog}
                onClose={this.hidePasswordDialog}
                onLoadError={this.passwordLoadError}
                userLogin={this.props.currentUser.get('login')}
                userName={this.props.currentUser.get('name')}
                userRole={this.props.currentUser.get('beruf')}
                userPasswordRule={this.props.currentUser.get('password_rule')}
            />
        ) : null;
    }

    renderPasswordError() {
        if (isCEDesktop()) {
            return null;
        }

        return (
            <Dialog.Error title={formatStr('error_title')}
                          show={this.state.passwordError}
                          onHide={() => this.setState({passwordError: false})}>
                {formatStr('pwd_load_error')}
            </Dialog.Error>
        );
    }

    showPasswordDialog(ev) {
        ev.preventDefault();
        this.setState({showPasswordDialog: true});
        return false;
    }

    hidePasswordDialog() {
        this.setState({
            showPasswordDialog: false,
        });
    }

    passwordLoadError() {
        this.setState({passwordError: true});
    }

    renderUserMenu() {
        if (isCEDesktop()) {
            return null;
        }
        const icon = <SVGIcon name="csweb_person_fallback"
                              title={formatStr("tooltip_usersettings") + ": " + userName}
                              className={classNames(prefixNS('titlebar__icon'))}/>;

        return (
            <NavDropdown id={prefixNS('webui_menu_profile')}
                         title={icon}
                         className={classNames(prefixNS('titlebar__button'),
                             prefixNS('titlebar__usermenu'))}>
                {
                    this.props.currentUser ?
                    <UserPanel
                        contextObject={this.props.currentUser}
                        fallBackImg={getIcon('csweb_person_fallback')}/> : null
                }
                    <MenuItem divider/>
                    <MenuItem
                        href="#"
                        onClick={(ev) => this.showPasswordDialog(ev)}>
                        <SVGIconAndLabel
                            name="csweb_password"
                            label={formatStr('change_password')}/>
                    </MenuItem>
                    <MenuItem
                        href="/server/__quit__"
                        id={prefixNS("webui_menu_logout")}>
                        <SVGIconAndLabel
                            name="csweb_logout"
                            label={formatStr('logoff')}/>
                    </MenuItem>
            </NavDropdown>
        );
    }

    renderMessageMenu() {
        if (isCEDesktop()) {
            return null;
        }

        const icon = <SVGIcon name="csweb_notifications_added"
                              title={formatStr("messages_tooltip")}
                              className={classNames(prefixNS('titlebar__icon'))}/>;

        return (
            <NavDropdown id={prefixNS("webui_menu_messages")}
                         title={icon}
                         className={prefixNS('titlebar__button')}>
                <Messages.MessageView/>
            </NavDropdown>
        );
    }

    renderHistory() {
        if (isCEDesktop()) {
            return null;
        }
        return (
            <Navigation.History className={prefixNS('titlebar__button')}/>
        );
    }

    renderFavorites() {
        if (isCEDesktop()) {
            return null;
        }
        return (
            <Navigation.Favorites className={prefixNS('titlebar__button')}/>
        );
    }

    renderSearch() {
        let hide = false;
        if (isCEDesktop() || hideSearchField || !this.state.displaySearchField) {
            hide = true;
        }
        return (
            <TitleBarSearchField
                ref={ref => {this.searchField = ref}}
                productName={productName}
                focused={!hide}
                hide={hide} />
        );
    }

    renderHelp() {
        if (!helpLink) {
            return null;
        }
        return (
            <NavItem
                className={prefixNS('titlebar__button')}
                href={helpLink}
                target="_blank">
                <SVGIcon
                    name="csweb_question_sign"
                    className={classNames(prefixNS('titlebar__icon'))}/>
            </NavItem>
        );
    }

    renderReload() {
        if (!isCEDesktop()) {
            return null;
        }

        return (
            <Nav className="navbar-image">
                <NavItem
                    className={prefixNS('titlebar__button')}
                    onClick={() => {
                        location.reload(true);
                    }}>
                    <SVGIcon
                        name="csweb_refresh"
                        className={classNames(prefixNS('titlebar__icon'))}/>
                </NavItem>
            </Nav>
        );
    }

    render() {
        return (
            <Nav pullRight>
                {this.renderReload()}
                {this.renderSearch()}
                {this.renderMessageMenu()}
                {this.renderHelp()}
                {this.renderFavorites()}
                {this.renderHistory()}
                {this.renderInfoMenu()}
                {this.renderUserMenu()}
                {this.renderErrorLog()}
                {this.renderPasswordDialog()}
                {this.renderPasswordError()}
            </Nav>
        );
    }
}

CDBTitleBarContent.propTypes = {
    fetchObject: PropTypes.func.isRequired,
    currentUser: ImmutablePropTypes.map
};

function mapStateToProps(state) {
    return {
        currentUser: state.objectsById.get(userLink)
    };
}

const actions = {fetchObject};
export const CDBTitleBar = connect(mapStateToProps, actions)(CDBTitleBarContent);


export default class TitleBar extends React.Component {

    renderHome() {
        const classes = classNames(
            "visible-lg-inline",
            "visible-md-inline",
            prefixNS("titlebar__brand-centered")
        );
        return (
            <span title={formatStr("tooltip_home")} className={classes}>
                {isCEDesktop() ?
                    (<span>{this.props.title}</span>) :
                    <a href={this.props.homeLink}>{this.props.title}</a>}
            </span>
        );
    }

    render() {
        return (
            <Navbar className={prefixNS('titlebar')} fixedTop fluid>
                <Navbar.Header>
                    <Navbar.Brand className={prefixNS('titlebar__logo-title')}>
                        {isCEDesktop() ? null :
                            <a href={this.props.homeLink}>
                                <span className={prefixNS("logo-spacing")}>
                                    <SVGIcon
                                        src={this.props.logoSrc}
                                        className={prefixNS('logo-size')}/>
                                </span>
                            </a>
                        }
                        {this.renderHome()}
                    </Navbar.Brand>
                </Navbar.Header>
                {this.props.children}
            </Navbar>
        );
    }
}

TitleBar.propTypes = {
    title: PropTypes.string.isRequired,
    homeLink: PropTypes.string.isRequired,
    logoSrc: PropTypes.string
};
