/*
 * Copyright (C) 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: CatalogWithPreview.jsx 183513 2018-09-07 10:56:20Z cla $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../helpers';
import {ContextObjectSetter, ContextObjectWrapper} from '../containers/context-wrapper';
import CatalogPreview from './CatalogPreview.jsx';
import SplitLayoutWithPersistence from './SplitLayoutWithPersistence.jsx';

let count = 0;

export default class CatalogWithPreview extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            previewEnable: false
        };

        this.objectSelectPath = prefixNS(`catalog-preview-${++count}`);
        this.setPreviewEnable = this.setPreviewEnable.bind(this);
    }

    setPreviewEnable(previewEnable) {
        this.setState({
            previewEnable: previewEnable
        });
    }

    renderCatalog() {
        return (
            <ContextObjectSetter setPath={this.objectSelectPath}>
                {React.cloneElement(
                    React.Children.only(this.props.children),
                    {onPreviewEnable: this.setPreviewEnable}
                )}
            </ContextObjectSetter>
        );
    }

    renderPreview() {
        return (
            <ContextObjectWrapper readPath={this.objectSelectPath}>
                {this.props.previewComponent}
            </ContextObjectWrapper>
        );
    }

    renderWithPreview() {
        const {userSettings} = this.props;
        let initialFetch = true;
        let previewWidth = this.props.previewWidth;
        let previewVisible = true;
        if (userSettings && userSettings.get("preview")) {
            previewWidth = userSettings.get("preview").get("size");
            previewVisible = userSettings.get("preview").get("visible");
            initialFetch = false;
        }
        const settingKey = userSettings && userSettings.get("settingKey")
          ? userSettings.get("settingKey") : "";
        return (
            <SplitLayoutWithPersistence
                split="vertical"
                primary="second"
                size={previewWidth}
                visible={previewVisible}
                initialFetch={initialFetch}
                settingKey={settingKey}
                componentID="catalog.preview">
                    {this.renderCatalog()}
                    {this.renderPreview()}
            </SplitLayoutWithPersistence>
        );
    }

    render() {
        if (this.state.previewEnable) {
            return this.renderWithPreview();
        }
        else {
            return this.renderCatalog();
        }
    }
}
CatalogWithPreview.propTypes = {
    children: PropTypes.element.isRequired,
    previewComponent: PropTypes.object,
    previewWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    userSettings: ImmutablePropTypes.map,
};

CatalogWithPreview.defaultProps = {
    previewComponent: <CatalogPreview />,
    previewWidth: "132px"
};
