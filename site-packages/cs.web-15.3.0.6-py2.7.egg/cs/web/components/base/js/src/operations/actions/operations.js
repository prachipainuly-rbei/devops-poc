/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: operations.js 184133 2018-09-19 09:19:59Z cla $"
 */

import Immutable from 'immutable';
import {handleOperationSuccess, postError} from './handlers.js';
import {ACTIONS} from '../constants.js';

/**
 * This module provides the Redux action creators that are the interface for executing
 * operations, and sending changes to the form state. Usually you will dispatch the
 * :ref:`cs-web-components-base-operations.actions.operations.runOperation`
 * action by invoking the corresponding method from either your
 * :ref:`cs-web-components-base-form.containers.OperationTrigger.__module__` component
 * or your :ref:`cs-web-components-base-form.containers.OperationHandler.__module__`
 * component.
 *
 * The other actions in this module control the communication between the saga running the
 * operation and the form that the user interacts with, as well as dialog hooks. You only
 * need to use those, if you are implementing your own
 * :ref:`cs-web-components-base-form.containers.OperationHandler.__module__` and do not
 * rely on the ConfiguredForm component.
 *
 * These actions can be divided by the direction of the communication:
 *
 * - Actions sent from the form to the saga, usually in response to user input.
 * - Actions sent from the saga to modify the form state, which usually results
 *   in updates to the displayed form.
 *
 * .. warning::
 *
 *    Besides :ref:`cs-web-components-base-operations.actions.operations.runOperation`
 *    the actions provided by this module are considered internal, and may be subject
 *    to change without prior note.
 *
 * @module
 */

/**
 * Execute the operation identified by operationInfo. This function takes two positional
 * paramaters:
 *
 * - instanceName, which is usually filled in by an OperationTrigger component.
 * - parameters, an object detailing which operation to execute and how to execute it.
 *
 * .. _`cs-web-components-base-operations.actions.operations.runOperation_parameters`:
 *
 * Operation Parameters
 * ....................
 *
 * The ``parameters`` object itself, may contain the following fields if ``runOperation``
 * is called from OperationTrigger or OperationHandler:
 *
 * +----------------------------+----------------+----------------------------------------------------+
 * | Name                       | Type           | Description                                        |
 * +============================+================+====================================================+
 * | contextObjects             | Immutable.List | A List of objects to operate on. Required for      |
 * |                            |                | operations that act on objects.                    |
 * +----------------------------+----------------+----------------------------------------------------+
 * | parameters                 | Immutable.Map  | These parameters are passed as query parameters    |
 * |                            |                | to the submit operation call. Wether the operation |
 * |                            |                | requires any of these depends on the operation     |
 * |                            |                | implementation.                                    |
 * +----------------------------+----------------+----------------------------------------------------+
 * | resultInNewTab             | boolean        | If set, the result will be opened in a new tab.    |
 * |                            |                | Should only be set, if the result is a URL.        |
 * +----------------------------+----------------+----------------------------------------------------+
 * | successActions             | array          | A list of actions to be dispatched if operation    |
 * |                            |                | is successfully executed.                          |
 * +----------------------------+----------------+----------------------------------------------------+
 * | failedActions              | array          | A list of actions to be dispatched if operation    |
 * |                            |                | execution fails.                                   |
 * +----------------------------+----------------+----------------------------------------------------+
 * | generalActions             | array          | A list of actions to be dispatched regardless of   |
 * |                            |                | wether the operation fails or completes            |
 * |                            |                | successfully.                                      |
 * +----------------------------+----------------+----------------------------------------------------+
 * | dialog                     | string         | Specify an alternate dialog to the one configured  |
 * |                            |                | in the operation's operation configuration.        |
 * +----------------------------+----------------+----------------------------------------------------+
 * | suppressHandler            | boolean        | Suppress OperationHandler execution, even though   |
 * |                            |                | a dialog is configured                             |
 * +----------------------------+----------------+----------------------------------------------------+
 * | forceHandler               | boolean        | Force OperationHandler execution, even though      |
 * |                            |                | no dialog is configured.                           |
 * +----------------------------+----------------+----------------------------------------------------+
 *
 * If you're dispatching the operation directly, the following parameter needs also be provided:
 *
 * +----------------------------+----------------+----------------------------------------------------+
 * | Name                       | Type           | Description                                        |
 * +============================+================+====================================================+
 * | operationInfo              | Immutable.Map  | An object describing the operation.                |
 * +----------------------------+----------------+----------------------------------------------------+
 *
 * Operation Instances
 * ...................
 *
 * instanceName is used to identify this operation execution in various contexts,
 * such as form display and window handling (for tab navigation). This parameter
 * is usually set when runOperation is invoked by
 * :ref:`cs-web-components-base-form.containers.OperationTrigger.__module__`.
 *
 * If you are planning on using this action without relying on the
 * :ref:`cs-web-components-base-form.containers.OperationHandler.__module__`.
 * component, you should ensure that instanceName gets a unique value. Furthermore
 * you need to take care of (de-)initializing a state for this instance, by calling
 * ``initFormInstance`` and ``clearFormInstance``.
 *
 * Operations on objects and types
 * ...............................
 *
 * If the operation is run on a set of objects (which is determined by the field
 * ``activation_mode`` in ``operationInfo``), you should set the parameter
 * contextObjects to an Immutable.List containing the objects, the operation acts on.
 * Operations that operate on Classes, such as CDB_Search or
 * CDB_Create use the type that is part of the operationInfo object.
 *
 * Additional Parameters
 * .....................
 *
 * Some operations require additional arguments in addition to the objects they
 * operate on, e.g., CDB_Create may be triggered with the UUID of a template.
 * These additional arguments should be put into field parameters.
 *
 * .. _`cs-web-components-base-operations.actions.operations.runOperation__handlingresults`:
 *
 * Handling results
 * ................
 *
 * The results of running an operation can be handled by providing a list of actions
 * for each result type. These must be plain Redux Actions, as the operation saga
 * modifies the payload to include the operation result in the field action.payload.operation,
 * which will be identified as the ``operation field`` in the rest of the section.
 *
 * In all three cases, the operation field contains the following values:
 *
 * - **info**: identifies the operation that was executed
 *
 * The following parameters allow to handle the three available result types:
 *
 * - **successActions**: A list of actions that will be dispatched on successfull completion
 *   of an operation. The operation field will contain the field result, which contains
 *   the result of the operation, sent from the server
 * - **failedActions**: A list of actions that will be dispatched when the operation fails.
 *   The operation field error will contain the error that was returned by the server.
 * - **cancelActions**: A list of actions that will be dispatched when the operation is
 *   cancelled. No further information will be added to the operation field.
 * - **generalActions**: These actions will be run, in any case (wether the operation was
 *   submitted, failed, or cancelled).
 *
 * Default Handlers are provided by module
 * :ref:`cs-web-components-base-operations.actions.handlers.__module__`.
 * For an example on how to implement your own custom handler, see
 * :ref:`cs-web-components-base-operations.sagas.handlers.dispatchResultHandler`.
 *
 * Opening tabs
 * ............
 *
 * If the operation should display its result in a new tab, you need to set the field
 * ``resultInNewTab``. This field may take on two possible values, depending on wether the
 * operation displays a form or not:
 *
 * - ``OPEN_ON_SUBMIT``: If the call to submit will be the last user interaction.
 * - ``OPEN_ON_RUN``: If no form is displayed.
 *
 * Display configured forms
 * ........................
 *
 * Displaying a form and interacting with the user is done by an OperationHandler. These
 * handlers are usually only invoked if a configured form is available, as indicated by the
 * operationInfo object. The operation will then be run with the default attribute values
 * defined in the operationInfo object.
 *
 * If you want to for some reason override this default behaviour, the field
 * ``suppressHandler`` -- if set -- will suppress the handler invocation, even though a
 * form is configured, while the field forceHandler will invoke a handler, even though no
 * form is configured. The latter allows the API user to invoke their own front-end based
 * form.
 *
 * Overriding the operations default form
 * ......................................
 *
 * Usually, the operation saga will display the form configured for the operation to the user.
 * If an alternative configured form should be displayed to the user, the form name may be
 * passed to runOperation in field dialog.
 *
 * Non-Blocking Paramater
 * ......................
 *
 * If set, the running operation instance will not block other OperationTriggers.
 * May be used for operations which do not modify data, such as CDB_ShowObject.
 *
 * A typical example is the form component.
 */
export function runOperation(
    instanceName,
    {
        operationInfo = undefined,
        contextObjects = Immutable.List(),
        parameters = Immutable.Map(),
        resultInNewTab = false,
        successActions = [handleOperationSuccess()],
        failedActions = [postError()],
        cancelActions = [],
        generalActions = [],
        suppressHandler = false,
        forceHandler = false,
        nonBlocking = false,
        initialFiles = undefined,
        dialog = undefined,
    },
) {
    return {
        type: ACTIONS.RUN_OPERATION,
        payload: {
            instanceName,
            operationInfo,
            parameters,
            contextObjects,
            resultInNewTab,
            successActions,
            failedActions,
            cancelActions,
            generalActions,
            suppressHandler,
            forceHandler,
            nonBlocking,
            initialFiles,
            dialog,
        },
    };
}

/**
 * Invoked by form when the user alters the value of one or more fields.
 * This will invoke dialog hooks configured for the changed fields.
 * Invoked by the form/operation-handler and handled by ``changeFormSaga``.
 *
 * @param instanceName - Handler for user interaction
 * @param values - An Immutable.Map containing the attribute-value pairs for
 *    the form
 * @param unchecked - This flag is set by the form if the values have been
 *    validated, for example when they are set by a catalogue.
 */
export function changeOperationValues(instanceName, values, unchecked = false) {
    return {
        type: ACTIONS.CHANGE_OPERATION_VALUES,
        payload: {instanceName, values, unchecked},
    };
}

/**
 * Ask the user if he wants to cancel, as this will cause data to be
 * lost. This action is issued by the saga and handled by the store.
 * The Form Component should respond with either ``queryCancelForce``
 * or ``queryCancelBack``.
 *
 * @param instanceName - Handler for user interaction
 */
export function queryCancel(instanceName) {
    return {
        type: ACTIONS.QUERY_CANCEL,
        payload: {instanceName},
    };
}

/**
 * User notifies operation to be cancelled even though values have
 * been changed. This action is sent by the form/operation-handler
 * and handled by the saga in response to ``queryCancel`` being set.
 *
 * @param instanceName - Handler for user interaction
 */
export function queryCancelForce(instanceName) {
    return {
        type: ACTIONS.QUERY_CANCEL_FORCE,
        payload: {instanceName},
    };
}

/**
 * User notifies operation cancellation to be cancelled, i.e.
 * the operation is continued. This action is sent by the form/
 * operation-handler and handled by the saga in response to
 * ``queryCancel`` being set.
 *
 * @param {string} instanceName - Handler for user interaction
 */
export function queryCancelBack(instanceName) {
    return {
        type: ACTIONS.QUERY_CANCEL_BACK,
        payload: {instanceName},
    };
}

/**
 * Display a dialog from dialog_hook to the user. This
 * action is handled by the form. See also ``queryUserSaga``.
 *
 * @param {string} instanceName - Handler for user interaction
 * @param {FrontendDialog} dialog - The Dialog definition
 */
export function queryUser(instanceName, dialog) {
    return {
        type: ACTIONS.QUERY_USER,
        payload: {instanceName, dialog},
    };
}

/**
 * Dismiss a dialog from dialog_hook after a result has been
 * dispatched. This action is sent by ``queryUserSaga`` to form.
 *
 * @param {string} instanceName - Handler for user interaction
 */
export function queryDismiss(instanceName) {
    return {
        type: ACTIONS.QUERY_DISMISS,
        payload: {instanceName},
    };
}

/**
 * Cancel operation-handler from dialog_hook dialog. This is sent
 * by the form and handled by ``queryUserSaga``.
 *
 * @param {string} instanceName - Handler for user interaction
 */
export function queryResultCancel(instanceName) {
    return {
        type: ACTIONS.QUERY_RESULT_CANCEL,
        payload: {instanceName},
    };
}

/**
 * Submit operation from dialog_hook dialog. This is sent by
 * the form and handlded by ``queryUserSaga``.
 *
 * @param {string} instanceName - Handler for user interaction
 * @param {object} attribute - entries ``name`` and ``value`` specify an attribute
 *   to be updated by the dialog hook.
 */
export function queryResultSubmit(instanceName, attribute) {
    return {
        type: ACTIONS.QUERY_RESULT_SUBMIT,
        payload: {instanceName, attribute},
    };
}

/**
 * Call back to server from dialog_hook dialog. This is sent by
 * the form and handlded by ``queryUserSaga``.
 */
export function queryResultCall(instanceName, attribute) {
    return {
        type: ACTIONS.QUERY_RESULT_CALL,
        payload: {instanceName, attribute},
    };
}

/**
 * Return back to form from dialog_hook dialog. This is sent by
 * the form and handlded by ``queryUserSaga``.
 */
export function queryResultBack(instanceName, attribute) {
    return {
        type: ACTIONS.QUERY_RESULT_BACK,
        payload: {instanceName, attribute},
    };
}

/**
 * Operation State contains invalid values. This is sent by
 * operations saga, and should be displayed to the user by
 * form.
 *
 * @param {string} instanceName - Handler for user interaction
 * @param {Immutable.List.<Immutable.Map>} fields - an Immutable.List containing Immutable.Map
 *   objects. Each map has a ``field`` and a ``type`` field, specifying the
 *   type of error that occured.
 */
export function submitValueError(instanceName, fields) {
    return {
        type: ACTIONS.SUBMIT_VALUE_ERROR,
        payload: {instanceName, fields},
    };
}

/**
 * A general error occured during operation execution. This
 * is sent by operations saga, and should be displayed to
 * the user by form.
 *
 * @param {string} instanceName - Handler for user interaction
 * @param errors - An Immutable.List containing error messages
 */
export function submitGeneralError(instanceName, errors) {
    return {
        type: ACTIONS.SUBMIT_GENERAL_ERROR,
        payload: {instanceName, errors},
    };
}

/**
 * Operation State contains no errors. This is sent by
 * operations saga, and should remove outdated messages.
 *
 * @param {string} instanceName - Handler for user interaction
 */
export function clearErrors(instanceName) {
    return {
        type: ACTIONS.CLEAR_ERRORS,
        payload: {instanceName},
    };
}

/**
 * User requested to cancel the operation during form execution.
 * Dispatched by form, handled by saga.
 *
 * By default this queries the user, if he wants to dispose of
 * changes he has made to the form. Use parameter ``force`` to
 * suppress this behaviour.
 *
 * @param {string} instanceName - Handler for user interaction
 * @param {bool} force - if true, the user won't be queried.
 */
export function cancelOperation(instanceName, force = false) {
    return {
        type: ACTIONS.CANCEL_OPERATION,
        payload: {instanceName, force},
    };
}

/**
 * User requested to submit the operation during form execution.
 * Dispatched by form, handled by saga.
 *
 * @param {string} instanceName - Handler for user interaction
 */
export function submitOperation(instanceName) {
    return {
        type: ACTIONS.SUBMIT_OPERATION,
        payload: {instanceName},
    };
}

/**
 * Adds a list of files to the operation state. Dispatched by form.
 *
 * @param {string} instanceName - Handler for user interaction
 * @param {array} files - a list of file objects to be added to the current state.
 */
export function addFiles(instanceName, files) {
    return {
        type: ACTIONS.ADD_FILES,
        payload: {instanceName, files},
    };
}

/**
 * Remove a list of files to the operation state. Dispatched by form.
 *
 * @param {string} instanceName - Handler for user interaction
 * @param {array} files - a list of file objects to be removed from the current state.
 */
export function removeFiles(instanceName, files) {
    return {
        type: ACTIONS.REMOVE_FILES,
        payload: {instanceName, files},
    };
}
