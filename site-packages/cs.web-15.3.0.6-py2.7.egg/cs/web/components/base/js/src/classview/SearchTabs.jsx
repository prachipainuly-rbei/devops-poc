/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchTabs.jsx 184636 2018-10-01 15:40:38Z eab $"
 */

import React from 'react';

import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import {prefixNS} from '../helpers.js';
import {formatStr} from '../i18n.js';
import OperationModal from '../components/OperationModal.jsx';
import OperationScope from '../form/containers/OperationScope.jsx';
import {initClassSearch} from '../search/actions';
import {addTabForClass, removeTabForClass, setActiveTab, reOrderTabsForClass} from './actions.js';
import Button from '../components/Button.jsx';
import SearchTab from './SearchTab.jsx';
import SpecialTab from './SpecialTab.jsx';
import Tab from '../layouts/Tab.jsx';
import {getClassOpInfo} from './helpers.js';
import {OPERATION_NAMES} from '../constants.js';

let draggableItemId = 0;
/**
 * Shows a list of tabs, each with an individual search instance.
 */
class SearchTabs extends React.Component {
    constructor(props) {
        super(props);
        this.draggableItemId = `${prefixNS('tab')}-${++draggableItemId}`;
        this.onSelectTab = this.onSelectTab.bind(this);
        this.onReorderTabs = this.onReorderTabs.bind(this);
    }

    componentDidMount() {
        this.props.initClassSearch(this.props.rootClassname);
    }

    onSelectTab(key) {
        if (key === Tab.EVENT_KEY_ADD) {
            const {rootClassname, addTabForClass} = this.props;
            addTabForClass(rootClassname);
        }
        else {
            // TODO: store new tab key in user settings
            const {rootClassname, setActiveTab} = this.props;
            setActiveTab(rootClassname, key);
        }
    }

    onRemoveTab(event, key) {
        const {rootClassname, removeTabForClass} = this.props;
        removeTabForClass(rootClassname, key);
        // Stop propagation, because that would trigger an onSelectTab
        event.stopPropagation();
    }

    renderTabTitle(tab) {
        const instanceName = tab.get('instanceName');
        const button = (tab.get('kind') === 'SEARCH')
            ? <Button.CloseButton
                title={formatStr('delete_search_tab')}
                onClick={evt => this.onRemoveTab(evt, instanceName)}/>
            : null;
        return (
            <Tab.DraggableTitle
                key={instanceName}
                eventKey={instanceName}
                iconName={tab.get('iconName')}
                title={tab.get('name')}
                onReorderTabs={this.onReorderTabs}
                draggableItemId={this.draggableItemId}>
                {button}
            </Tab.DraggableTitle>
        );
    }

    onReorderTabs(draggedInstanceName, droppedInstanceName) {
        const {rootClassname, reOrderTabsForClass} = this.props;
        reOrderTabsForClass(rootClassname, draggedInstanceName, droppedInstanceName);
    }

    render() {
        const {tabs, activeInstance, detail, classTitle,
               rootClassname, childConfiguration} = this.props;
        if (tabs === undefined) {
            // TODO: move up into wrapper?
            return null;
        }
        const addControlLabel =
            getClassOpInfo(rootClassname, OPERATION_NAMES.kOperationSearch)
            ? formatStr('new_search') : null;
        return (
            <OperationScope>
                <OperationModal handlerName="editor"/>
                <Tab.Container
                    activeKey={activeInstance}
                    onSelect={this.onSelectTab}
                    id={prefixNS('class-search-tabs')}
                    className={prefixNS('class-search-tabs-wrapper')}>
                    <Tab.Bar
                        activeKey={activeInstance}
                        onSelectFromMenu={this.onSelectTab}
                        addControlLabel={addControlLabel}>
                        {tabs.map((tab, idx) => this.renderTabTitle(tab, idx))}
                    </Tab.Bar>
                    <Tab.Content>
                        {tabs.map(tab => (
                            <Tab.Pane
                                mountOnEnter={true}
                                key={tab.get('instanceName')}
                                eventKey={tab.get('instanceName')}>
                                {tab.get('kind') === 'SEARCH' ?
                                    <SearchTab
                                        instanceName={tab.get('instanceName')}
                                        rootClassname={rootClassname}
                                        classTitle={classTitle}
                                        detail={detail}
                                        childConfiguration={childConfiguration}/>
                                    : <SpecialTab
                                        instanceName={tab.get('instanceName')}
                                        rootClassname={rootClassname}
                                        classTitle={classTitle}
                                        detail={detail}
                                        childConfiguration={childConfiguration}/>
                                }
                            </Tab.Pane>
                        ))}
                    </Tab.Content>
                </Tab.Container>
            </OperationScope>
        );
    }
}
SearchTabs.propTypes = {
    rootClassname: PropTypes.string.isRequired,
    classTitle: PropTypes.string.isRequired,
    detail: PropTypes.element,
    childConfiguration: PropTypes.object,
    // Store data
    tabs: ImmutablePropTypes.list,
    activeInstance: PropTypes.string,
    // Actions
    initClassSearch: PropTypes.func.isRequired,
    addTabForClass: PropTypes.func.isRequired,
    removeTabForClass: PropTypes.func.isRequired,
    setActiveTab: PropTypes.func.isRequired,
    reOrderTabsForClass: PropTypes.func.isRequired
};

function mapStateToProps(state, ownProps) {
    const tabs = state.tabsByClass.get(ownProps.rootClassname);
    const activeInstance = state.currentTabByClass.get(ownProps.rootClassname);
    return {
        tabs,
        activeInstance
    };
}

const actions = {
    initClassSearch, addTabForClass, removeTabForClass,
    setActiveTab, reOrderTabsForClass
};

export default connect(mapStateToProps, actions)(SearchTabs);
