/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ObjectDetails.jsx 178725 2018-06-11 08:29:25Z gwe $"
 */

import React from 'react';
import {Alert} from 'react-bootstrap';
import Tab from '../layouts/Tab.jsx';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';

import {prefixNS} from '../helpers.js';
import {formatStr} from '../i18n.js';

/**
 * Renders the tabs on detail pages. Which tabs exist is defined as an outlet
 * in the configuration.
 */
export default class ObjectDetails extends React.Component {
    constructor(props) {
        super(props);
        // TODO: activeKey should come from user settings (last used tab) or from
        // URL parameter, and only as fallback use the first tab
        const {__outlets: outlets} = props;
        this.state = {
            activeKey: outlets.length > 0 ? outlets[0].key : null
        };
        this.onSelectTab = this.onSelectTab.bind(this);
    }

    onSelectTab(key) {
        // TODO: store new tab key in user settings
        this.setState({activeKey: key});
    }

    renderTitles() {
        const {__outlets: outlets} = this.props;
        if (outlets.length <= 1) {
            // If we have only one tab, there is no reason to render the title
            return null;
        }
        return (
            <Tab.Bar
                activeKey={this.state.activeKey}
                onSelectFromMenu={this.onSelectTab}>
                {outlets.map(({key, title, icon_id, icon_url}) => (
                    <Tab.Title
                        key={key}
                        eventKey={key}
                        iconName={icon_id}
                        iconSrc={icon_url}
                        title={title}/>
                ))}
            </Tab.Bar>
        );
    }

    renderChildren() {
        const {children, __outlets: outlets} = this.props;
        const {activeKey} = this.state;
        // TODO: check that all children are indeed outlets? Or do something
        // intelligent if not?
        return React.Children.map(children, (child, idx) => (
            <Tab.Pane
                mountOnEnter={true}
                key={outlets[idx].key}
                eventKey={outlets[idx].key}>
                {React.cloneElement(
                    child,
                    {active: outlets[idx].key === activeKey})
                }
            </Tab.Pane>
        ));
    }

    renderNoOutlets() {
        return (
            <Alert bsStyle="warning">
                {formatStr('no_detail_outlet_found')}
            </Alert>
        );
    }

    render() {
        const {__outlets: outlets} = this.props;
        if (outlets.length === 0) {
            return this.renderNoOutlets();
        }
        return (
            <Tab.Container
                activeKey={this.state.activeKey}
                onSelect={this.onSelectTab}
                id={prefixNS('object-details')}>
                {this.renderTitles()}
                <Tab.Content>
                    {this.renderChildren()}
                </Tab.Content>
            </Tab.Container>
        );
    }
}
ObjectDetails.propTypes = {
    __outlets: PropTypes.arrayOf(PropTypes.shape({
        childIndex: PropTypes.number.isRequired,
        key: PropTypes.string.isRequired,
        title: PropTypes.string.isRequired,
        icon: PropTypes.string
    })).isRequired,
    contextObject: ImmutablePropTypes.map
};
