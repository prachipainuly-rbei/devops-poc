/* -*- mode: Web; coding: utf-8 -*-
 * Copyright (C) 1990-2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: CatalogTable.jsx 183635 2018-09-11 08:10:54Z mbr $"
 */

import Immutable from 'immutable';
import {PropTypes, ImmutablePropTypes, connect} from 'cs-web-components-externals';
import React from 'react';
import {Alert} from 'react-bootstrap';
import {formatStr} from '../i18n';
import Table from '../table';
import TableWrapper from '../components/TableWrapper';
import {prefixNS} from '../helpers.js';
import {getSearchResult, getSearchError} from '../search/selectors/instances.js';

const configTable = (options = {}) =>
    Table.Manager(Object.assign(
        {
            Table: Table.Scrolled(Table.Table),
            Layout: Table.ContentBlockLayout,
            providers: [Table.sortable, Table.filterable, Table.selectable, Table.SettingPanels],
            columnActions: [Table.sortable, Table.columnResizer,
                Table.columnDragger, Table.columnOrderer, Table.selectable],
            toolbarButtons: [Table.filterable, Table.SettingPanels],
            settingPanels: [Table.columnHider]
        },
        options
    ));

const configTableForProposal = (options = {}) =>
        Table.Manager(Object.assign(
            {
                Table: Table.Scrolled(Table.Table),
                Layout: Table.ContentBlockLayout,
                providers: [Table.sortable, Table.filterable,
                    Table.selectable, Table.SettingPanels],
                columnActions: [Table.sortable, Table.columnResizer,
                    Table.columnDragger, Table.columnOrderer, Table.selectable],
                toolbarButtons: [Table.SettingPanels],
                settingPanels: [Table.columnHider]
            },
            options
        ));

/**
 * Used by CatalogField FormControl to render a table catalog.
 *
 * @private
 */
class CatalogTable extends React.Component {

    constructor(props) {
        super(props);
        this.onSelectionChanged = this.onSelectionChanged.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.searchResult && (nextProps.searchResult !== this.props.searchResult)) {
            if (nextProps.onSetSingleSelection) {
                nextProps.onSetSingleSelection(!nextProps.searchResult.get('multiselect'));
            }
            if (nextProps.onPreviewEnable) {
                nextProps.onPreviewEnable(nextProps.searchResult.get('preview'));
            }
        }
    }

    render() {
        const {filter, proposalCatalog, title, selectedIDs, searchResult, searchError} = this.props;
        if (searchError) {
            return (
                <Alert key="alert" bsStyle="danger">
                    {searchError.message}
                </Alert>
            );
        }
        if (searchResult) {
            const table = proposalCatalog ? configTableForProposal : configTable;

            let table_title = title ? title + ': ' : '';
            const tab_title = searchResult.get('label');
            if (tab_title !== undefined) {
                table_title += tab_title;
            }
            const no_of_records_label = searchResult.get('no_of_records_label');
            if (no_of_records_label !== undefined) {
                table_title += " (" + no_of_records_label + ")";
            }

            return (
                <div className={prefixNS("table-catalog-wrapper")}>
                    <TableWrapper
                        table={table}
                        title={table_title}
                        collapsible={false}
                        expanded={true}
                        contentHeight={"100%"}
                        tableDef={searchResult.get('tabledef')}
                        rowValues={searchResult.get('rows')}
                        singleSelection={!searchResult.get('multiselect')}
                        withSelector={true}
                        onSelectionChanged={this.onSelectionChanged}
                        className={prefixNS("catalog-table")}
                        filter={filter}
                        initSelected={selectedIDs}
                        renderDirectives={{linkTarget: '_blank'}}/>
                </div>
            );
        }
        return (
            <Alert bsStyle="info">
                {formatStr("tabcatalog_fetching")}
            </Alert>
        );
    }

    onSelectionChanged(selected) {
        // add the catalog_id and call the function we got
        const {onSelectionChanged, searchResult} = this.props;
        onSelectionChanged(selected, searchResult.get('catalog_id'));
        if (this.props.onSelect) {
            const idMap = Immutable.Map(
                searchResult.get('rows')
                    .filter(row => selected.includes(row.get('id')))
                    .map(row => [row.get('id'), row.get('restLink')])
            );
            // For the result, keep the selection order from the table.
            if (selected.size > 0) {
                window.setTimeout(
                    this.props.onSelect.bind(
                        null, ...selected.map(id => idMap.get(id)).filter(oid => oid !== undefined))
                    , 200);
            } else {
                this.props.onSelect();
            }
        }
    }

}
CatalogTable.propTypes = {
    instanceName: PropTypes.string.isRequired,
    onSelectionChanged: PropTypes.func,
    filter: PropTypes.string,
    proposalCatalog: PropTypes.bool,
    title: PropTypes.string,
    selectedIDs: ImmutablePropTypes.orderedSet,
    onSetSingleSelection: PropTypes.func,
    onPreviewEnable: PropTypes.func,
    onSelect: PropTypes.func,
    // store
    searchResult: ImmutablePropTypes.map,
    searchError: PropTypes.any
};

CatalogTable.defaultProps = {
    filter: '',
    proposalCatalog: false,
    title: '',
    selectedIDs: Immutable.OrderedSet()
};

function mapStateToProps(state, ownProps) {
    const {instanceName} = ownProps;
    return {
        searchResult: getSearchResult(state, instanceName),
        searchError: getSearchError(state, instanceName),
    };
}

export default connect(mapStateToProps)(CatalogTable);
