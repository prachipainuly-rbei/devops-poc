/*
 * Copyright (C) 1990-2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: CheckBoxMenuItem.jsx 183579 2018-09-10 08:29:57Z gwe $"
 */

import React from 'react';
import {MenuItem} from 'react-bootstrap';
import {classNames, PropTypes} from 'cs-web-components-externals';
import {sharedCheckboxProps, sharedDefaultProps} from './sharedPropTypes';
import {prefixNS} from '../helpers';
import CheckBox from './CheckBox';

/**
 * A ``CheckBoxMenuItem`` can be set in 2 states: ``checked`` or ``unchecked``. It has one more
 * property in addition to those defined in :ref:`form_control_common_props`:
 *
 * +------------------+--------------+--------------+---------------------------------------------+
 * | Property         | Type         | Default      | Use                                         |
 * +==================+==============+==============+=============================================+
 * | checked          | bool         | -            | Display the checkbox as checked             |
 * +------------------+--------------+--------------+---------------------------------------------+
 *
 * The CheckBox's ``name`` property is also used as the MenuItem's ``eventKey``.
 *
 * Interactivity is handled somewhat different from regular checkboxes because of the MenuItem
 * wrapper:
 *
 * - The ``checked`` state is controlled by properties only, there is no internal state
 * - Thus, you have to provide the required ``onChange`` property, which is used as the MenuItem's
 *
 * @module
 */
export default function CheckBoxMenuItem(
    {name, onChange, checked, tooltip, children, divider, header, label, ...others})
{
    return (
        divider ?
            <MenuItem divider/> :
            header ?
                <MenuItem header>{children || label}</MenuItem> :
                <MenuItem eventKey={name}
                          onSelect={onChange}
                          className={classNames([
                              prefixNS('checkbox-menuitem'),
                              checked ? 'checked' : 'unchecked'
                          ])}
                          disabled={others.disabled || false}
                  title={tooltip}>
                    <CheckBox name={name}
                              tooltip={tooltip}
                              checked={checked}
                              label={label}
                              onChange={() => null}
                              {...others} />
                    {children}
                </MenuItem>
    );
}

CheckBoxMenuItem.propTypes = {
    ...sharedCheckboxProps,
    divider: PropTypes.bool,
    header: PropTypes.string,
    onChange: PropTypes.func.isRequired
};

CheckBoxMenuItem.defaultProps = {...sharedDefaultProps};
