/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: constants.js 176156 2018-04-18 14:51:22Z cla $"
 */

import Immutable from 'immutable';

/**
 * This module provides constants used by the form module.
 *
 * @name form-constants
 * @module
 */

/**
 * These constants correspond to CDB::IOperation::ResultType, defined in
 * src/cdbidl/CDBIOperation.idl.
 */
export const ResultType = {
    NO_TYPE: 0,
    OBJECT: 1,
    CLASS: 2,
    HTML_VIEW: 3,
    FILE_ACTION: 4,
    FILE_ACTION_EXT: 5,
    HELP: 6,
};

/**
 * Internal modes for a component that shows a UI to perform a backend operation.
 * The UI will typically reflect the current mode in the way it renders, and which
 * actions are available to the user.
 * :ref:`cs-web-components-base-form.containers.OperationHandler.__module__`
 * Components may access the current mode of the operation via
 * ``props.operationState.get('mode')``.
 *
 * Possible values are:
 *
 * - INITIAL: Default mode, no user interaction yet
 * - STARTING: Set when runOperation is called, but state has not been initialized
 * - STARTED: The user started an operation, interactions with the operation's UI
 *   are happening here
 * - SUCCEEDED: The operation has been successfully completed.
 * - FAILED: The execution of the operation has failed.
 * - CANCELLED: The operation has been cancelled by the user.
 *
 * The values ``SUCCEEDED``, ``FAILED`` and ``CANCELLED`` will be reset directly
 * after it has been propagated to the operation handler via ``componentWillReceiveProps``.
 */
export const OperationMode = {
    INITIAL: 'initial',     // Default mode, no user interaction yet
    STARTING: 'starting',   // Set when runOperation is called, but state has not been initialized
    STARTED: 'started',     // The user started an operation, interactions with the operation's UI
                            // are happening here
    SUCCEEDED: 'succeeded', // The operation has been successfully executed
    FAILED: 'failed',       // The backend signaled an error while executing the operation
    CANCELLED: 'cancelled', // The user cancelled the operation
};

// CAUTION: These sets determine in which modes the corresponding flags are not set
export const NOT_ACTIVE_SET = Immutable.Set([OperationMode.INITIAL]);
export const NOT_RUNNING_SET = Immutable.Set([OperationMode.INITIAL, OperationMode.STARTED]);

// An Operation is finished, if one of these modes is reached
export const FINISHED_SET = Immutable.Set([
    OperationMode.SUCCEEDED,
    OperationMode.FAILED,
    OperationMode.CANCELLED
]);

/**
 * The possible actions that a pre-submit dialog can associate with buttons. The
 * values must match the corresponding constants in the backend (see class
 * cs.web.components.ui_support.frontend_dialog.FrontendDialog), to avoid another
 * translation step.
 */
export const ButtonActions = {
    Submit: 'SUBMIT',              // Submit the operation to the backend
    Cancel: 'CANCEL',              // Cancel the operatoion
    CallServer: 'CALL_SERVER',     // Call the backend hooks again
    BackToDialog: 'BACK_TO_DIALOG' // Show the operation dialog again
};

export const CE_DATEFORMAT = 'DD.MM.YYYY';
