// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-base() {
    box-sizing: border-box !important;
    background-image: none !important;
    outline: none !important;
    border: 1px solid;
    border-radius: $border-radius-large;
    font-weight: 600;
    -webkit-transition: all 0.3s ease !important;
    -moz-transition: all 0.3s ease !important;
    -o-transition: all 0.3s ease !important;
    transition: all 0.3s ease !important;

    .#{$componentNameSpace}-svg-icon svg * {
        transition: fill 0.3s ease !important;
    }
}

@mixin button-state(
  $txt: null,
  $txt2: null,
  $focus: null,
  $std: null,
  $dark: null,
  $darker: null,
  $border: null,
  $icon: null,
  $icon2: null) {

  @include button-base();

  @if ($txt != null) { color: $txt; }
  @if ($std != null) { background-color: $std !important; }
  @if ($border != null) { border-color: $border; } @else if ($std != null) { border-color: $std; }
  @if ($icon != null) { @include cs-web-svg-icon-color($icon); }

  &:focus,
  &.focus {
    @if ($txt != null) { color: $txt; }
    @if ($focus != null) {
      border-color: $focus;
      box-shadow: 0px 0px 5px $focus;
    }
    @if ($icon != null) { @include cs-web-svg-icon-color($icon); }
  }
  &:hover {
    @if ($txt != null) { color: $txt; }
    @if ($dark != null) { background-color: $dark !important; }
    @if ($border != null) { border-color: $border; } @else if ($dark != null) { border-color: $dark; }
    @if ($icon != null) { @include cs-web-svg-icon-color($icon); }
  }
  &:active,
  &.active,
  // Styling for DropdownIconButtons using overlays
  &.#{$componentNameSpace}-open.#{$componentNameSpace}-icon-button,
  .open > &.dropdown-toggle {
    @if ($txt2 != null) { color: $txt2; }
    box-shadow: none !important;
    @if ($darker != null) { background-color: $darker !important; }
    @if ($border != null) { border-color: $border; } @else if ($darker != null) { border-color: $darker; }
    @if ($icon2 != null) { @include cs-web-svg-icon-color($icon2); }

    &:hover,
    &:active,
    &.active,
    &:focus,
    &.focus {
      @if ($txt2 != null) { color: $txt2; }
      @if ($darker != null) { background-color: $darker !important; }
      @if ($icon2 != null) { @include cs-web-svg-icon-color($icon2); }
    }
  }
  &:active,
  &.active,
  // Styling for DropdownIconButtons using overlays
  &.#{$componentNameSpace}-open.#{$componentNameSpace}-icon-button,
  .open > &.dropdown-toggle {
    @if ($txt2 != null) { color: $txt2; !important; }
    @if ($icon2 != null) { @include cs-web-svg-icon-color($icon2); }
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    color: $gray-dark;
    background-color: $gray-lighter !important;
    border-color: $gray-lighter;
    @include cs-web-svg-icon-color($gray-dark);
    &:hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
      color: $gray-dark;
      background-color: $gray-lighter !important;
      border-color: $gray-lighter;
      @include cs-web-svg-icon-color($gray-dark);
    }
  }
}

.#{$componentNameSpace}-text-button {
  background-image: none !important;
  display: inline-flex;
  align-items: center;

  .caret {
    margin-left: $margin-md;
  }
}

.#{$componentNameSpace}-icon-button {
  padding: 0;
  margin-left: $margin-xs !important;
  font-size: 0;
}

.#{$componentNameSpace}-icon-button-primary,
.#{$componentNameSpace}-icon-button-success,
.#{$componentNameSpace}-icon-button-info,
.#{$componentNameSpace}-icon-button-warning,
.#{$componentNameSpace}-icon-button-danger {
  @include cs-web-svg-icon-color($white-base)
}

.#{$componentNameSpace}-icon-button-auxiliary {
    @include button-base();
    border: 0;
    background-color: rgba(black, 0);
    @include cs-web-svg-icon-color($gray)
}

.#{$componentNameSpace}-icon-button-auxiliary:hover {
    @include cs-web-svg-icon-color($gray-dark);
    background-color: rgba(black, 0.1);
}

.#{$componentNameSpace}-icon-button-auxiliary:active {
    @include cs-web-svg-icon-color($gray-darker);
    box-shadow: none !important;
    background-color: rgba(black, 0.2);
}

.#{$componentNameSpace}-icon-button-auxiliary:focus {
    border: 1px solid rgba(black, 0.4);
}

.#{$componentNameSpace}-icon-button-auxiliary {
    &.disabled,
    &[disabled],
    fieldset[disabled] & {
        background-color: transparent !important;
    }
}

.#{$componentNameSpace}-icon-button[href] {
  padding-top: 4px;
}

.#{$componentNameSpace}-icon-button-size-xxs {
  width: $icon-button-size-sm;
  height: $icon-button-size-sm;
}

.#{$componentNameSpace}-icon-button-size-xs {
  width: $icon-button-size-sm;
  height: $icon-button-size-sm;
}

.#{$componentNameSpace}-icon-button-size-sm {
  width: $icon-button-size-sm;
  height: $icon-button-size-sm;
}

.#{$componentNameSpace}-icon-button-size-md {
  width: $icon-button-size-md;
  height: $icon-button-size-md;
}

.#{$componentNameSpace}-icon-button-size-lg {
  width: $icon-button-size-lg;
  height: $icon-button-size-lg;
}

.#{$componentNameSpace}-icon-button-size-xl {
  width: $icon-button-size-lg;
  height: $icon-button-size-lg;
}

.#{$componentNameSpace}-icon-button-size-xxl {
  width: $icon-button-size-lg;
  height: $icon-button-size-lg;
}

.#{$componentNameSpace}-semantic-button-outline {
  @include button-state(
          $txt: $elements-primary,
          $txt2: $elements-primary-darker,
          $focus: $elements-primary,
          $icon: $elements-primary,
          $std: $white-base,
          $dark: $elements-primary-lightest,
          $darker: $elements-primary-lightest,
          $border: $gray-light);
}

.#{$componentNameSpace}-semantic-button-primary {
  @include button-state(
          $txt: $white-base,
          $txt2: $white-base,
          $focus: $elements-primary-darker,
          $std: $elements-primary,
          $dark: $elements-primary-dark,
          $darker: $elements-primary-darker);
}

.#{$componentNameSpace}-semantic-button-success {
  @include button-state(
          $txt: $white-base,
          $txt2: $white-base,
          $focus: $elements-success-darker,
          $std: $elements-success,
          $dark: $elements-success-dark,
          $darker: $elements-success-darker);
}

.#{$componentNameSpace}-semantic-button-info {
  @include button-state(
          $txt: $white-base,
          $txt2: $white-base,
          $focus: $elements-info-darker,
          $std: $elements-info,
          $dark: $elements-info-dark,
          $darker: $elements-info-darker);
}

.#{$componentNameSpace}-semantic-button-warning {
  @include button-state(
          $txt: $white-base,
          $txt2: $white-base,
          $focus: $elements-warning-darker,
          $std: $elements-warning,
          $dark: $elements-warning-dark,
          $darker: $elements-warning-darker);
}

.#{$componentNameSpace}-semantic-button-danger {
  @include button-state(
          $txt: $white-base,
          $txt2: $white-base,
          $focus: $elements-danger-darker,
          $std: $elements-danger,
          $dark: $elements-danger-dark,
          $darker: $elements-danger-darker);
}

.#{$componentNameSpace}-icon-text-button-primary,
.#{$componentNameSpace}-icon-text-button-success,
.#{$componentNameSpace}-icon-text-button-info,
.#{$componentNameSpace}-icon-text-button-warning,
.#{$componentNameSpace}-icon-text-button-danger {
  @include cs-web-svg-icon-color($white-base)
}
