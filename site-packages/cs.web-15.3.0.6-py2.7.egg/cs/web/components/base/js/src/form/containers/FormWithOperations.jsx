/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: FormWithOperations.jsx 175972 2018-04-16 15:12:19Z cla $"
 */

import Immutable from 'immutable';
import React, {Component} from 'react';
import {Panel} from 'react-bootstrap';
import {PropTypes, ImmutablePropTypes} from 'cs-web-components-externals';
import OperationToolbar from '../../components/OperationToolbar.jsx';
import ConfiguredForm from './ConfiguredForm.jsx';
import {prefixNS} from '../../helpers.js';
import {OperationMode} from '../constants.js';
import {WithOperations} from '../../components/WithOperations.jsx';
import {WithOperationHandler} from '../containers/OperationHandler.jsx';

/**
 * This component displays the configured info mask for the provided context object.
 * Furthermore operations that are available for the object will be displayed as
 * buttons, above the form.
 *
 * Required Properties:
 *
 * - instanceName: A unique name identifying the component instance
 * - contextObject: The object to be displayed
 * - opContextName: The name of an operation contextname
 *
 * Optional Properties:
 *
 * - dialogNames: An object providing alternative dialogs for operations.
 *   This is optional.
 */
class FormWithOperations extends Component {
    componentWillReceiveProps(nextProps) {
        if (nextProps.operations.size && !nextProps.isInstanceActive) {
            this.runOperation(nextProps, nextProps.operations.get(0));
        }
    }

    runOperation(props, operationInfo, handlerName = undefined) {
        const opName = operationInfo.get('opname');
        const dialog = props.dialogNames && props.dialogNames[opName];
        props.runOperation(
            operationInfo,
            {
                contextObjects: Immutable.List([props.contextObject]),
                nonBlocking: opName === 'CDB_ShowObject',
                dialog,
            },
            handlerName
        );
    }

    renderHeader() {
        const {
            operationState, contextObject, operationContext, forceCancel, isOperationRunning
        } = this.props;

        if (operationState.get('mode') === OperationMode.STARTED &&
            !operationState.get('nonBlocking')) {
            return (<h4>{operationState.getIn(['info', 'label'])}</h4>);
        }

        return (
            <OperationToolbar
                contextObject={contextObject}
                operationContextName={operationContext}
                disabled={isOperationRunning}
                selectCB={opInfo => {
                    forceCancel();
                    return this.runOperation(this.props, opInfo);
                }}
                deleteCB={opInfo => {
                    // For delete, use default handler
                    this.runOperation(this.props, opInfo, opInfo.get('presentation_id'));
                }}
            />
        );
    }

    render() {
        const {isInstanceActive, operationState} = this.props;

        if (!isInstanceActive) {
            return null;
        }

        const hideButtons = operationState.getIn(['info', 'opname']) === 'CDB_ShowObject';
        return (
            <div className={prefixNS('form-max-form-width')}>
                <Panel header={this.renderHeader()}>
                    <ConfiguredForm {...this.props} hideButtons={hideButtons} />
                </Panel>
            </div>
        );
    }
}

FormWithOperations.propTypes = {
    // Free Properties
    operationContext: PropTypes.string.isRequired,
    contextObject: PropTypes.instanceOf(Immutable.Map).isRequired,
    dialogNames: PropTypes.object,

    // WithOperations
    operations: ImmutablePropTypes.list.isRequired,

    // WithOperationHandler
    operationInstance: PropTypes.string.isRequired,
    operationState: ImmutablePropTypes.map.isRequired,
    runOperation: PropTypes.func.isRequired,
    forceCancel: PropTypes.func.isRequired,
    isInstanceActive: PropTypes.bool.isRequired,
    isOperationRunning: PropTypes.bool.isRequired,
};

export default WithOperations(
    WithOperationHandler(FormWithOperations, 'DisplayForm'),
    {operationNames: ["CDB_ShowObject"]},
);
