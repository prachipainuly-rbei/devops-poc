/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: RichTextEditor.jsx 185904 2018-10-31 07:28:58Z ssa $"
 */

import React from 'react';
import {PropTypes, DraftJS, classNames} from 'cs-web-components-externals';
import {isCEDesktop, prefixNS} from '../helpers';
import StyleControlBar from './controls/StyleControlBar';
import {FONTMAP, COLORMAP} from './controls/Font';
import {INLINEMAP} from './controls/Inline';
import LinkEntity from './entities/LinkEntity';
import {findLinkEntities} from './entities/strategies';
import {extendedBlockRenderMap, extendedBlockStyleFn} from './controls/Block';

/**
 * RichTextEditor provides the possibility to enter enhanced text with properties of color, size, etc.
 * It receives the following properties:
 *
 * +----------------------+--------+---------+----------------------------------------------------+
 * | Name                 | Type   | Default | Description                                        |
 * +======================+========+=========+====================================================+
 * | Content              | string | \-      | The content as stringified json to be shown in the |
 * |                      |        |         | editor.                                            |
 * +----------------------+--------+---------+----------------------------------------------------+
 * | readOnly             | bool   | false   | Specifies if the editor is shown in readonly mode  |
 * +----------------------+--------+---------+----------------------------------------------------+
 * | styleMap             | map    | {}      | Additional styles like font color, sizes, etc.     |
 * +----------------------+--------+---------+----------------------------------------------------+
 * | additionalButtons    | list   | []      | Additional buttons for new entities, styles, etc.  |
 * +----------------------+--------+---------+----------------------------------------------------+
 * | additionalDecorators | list   | []      | Additional decorators for additional entities      |
 * +----------------------+--------+---------+----------------------------------------------------+
 * | height               | number | -       | Specifies the height of the editor. Normally that  |
 * |                      |        |         | is 100vh - 34 px. In case height is set to 0 the   |
 * |                      |        |         | styling is removed.                                |
 * +----------------------+--------+---------+----------------------------------------------------+
 * | containerRef         | object | -       | When using the RichTextEditor component inside a   |
 * |                      |        |         | scrollable container provide the ref to this       |
 * |                      |        |         | container here.                                    |
 * +----------------------+--------+---------+----------------------------------------------------+
 *
 */

export default class RichTextEditor extends React.Component {
    constructor(props) {
        super(props);
        const decorator = new DraftJS.CompositeDecorator([
            {
                strategy: findLinkEntities,
                component: LinkEntity,
            },
        ].concat(props.additionalDecorators));
        this.stylesFromContent = {};
        if (!props.Content) {
            this.state = {editorState: DraftJS.EditorState.createEmpty(decorator)};
        }
        else {
            this.state = {
                editorState:
                    DraftJS.EditorState.moveSelectionToEnd(
                        DraftJS.EditorState.createWithContent(
                            DraftJS.convertFromRaw(JSON.parse(props.Content)),
                            decorator))
            };
        }

        this.focus = () => this.editor.focus();
        this.onChange = this._onChange.bind(this);

        this.handleKeyCommand = this._handleKeyCommand.bind(this);
        this.onTab = this._onTab.bind(this);
        this.getContent = this._getContent.bind(this);
        this.onBlur = this.onBlur.bind(this);
    }

    _onChange(editorState) {
        this.setState({editorState: editorState});
        if (isCEDesktop() && this.state.editorState.getUndoStack().size > 0) {
            window.external.ctrlNotifyDataChanged();
        }
    }

    _getContent() {
        const {editorState} = this.state;
        return JSON.stringify(DraftJS.convertToRaw(editorState.getCurrentContent()));
    }

    _handleKeyCommand(command) {
        const {editorState} = this.state;
        const newState = DraftJS.RichUtils.handleKeyCommand(editorState, command);
        if (newState) {
            this.onChange(newState);
            return 'handled';
        } else if (this.props.handleKeyCommand) {
            return this.props.handleKeyCommand(command);
        } else {
            return 'not-handled';
        }
    }

    _onTab(e) {
        this.onChange(DraftJS.RichUtils.onTab(e, this.state.editorState, 4));
    }

    onBlur(event) {
        const {onBlurValueChange} = this.props;
        if (onBlurValueChange && (event.relatedTarget === null ||
            (!event.relatedTarget.closest("." + prefixNS('RichTextEditor__Container')) &&
            !event.relatedTarget.closest("#" + prefixNS('richtext-link'))
            ))) {
            onBlurValueChange(this._getContent());
        }
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.Content !== nextProps.Content) {
            const decorator = new DraftJS.CompositeDecorator([
                {
                    strategy: findLinkEntities,
                    component: LinkEntity,
                },
            ].concat(nextProps.additionalDecorators));
            this.onChange(
                DraftJS.EditorState.moveSelectionToEnd(
                    DraftJS.EditorState.createWithContent(
                        DraftJS.convertFromRaw(JSON.parse(nextProps.Content)),
                        decorator)));
        }
    }

    render() {
        const {editorState} = this.state;
        const {readOnly, styleMap, height, containerRef,
               classNameEditor, additionalButtons, ...others} = this.props;
        const combinedStyleMap = Object.assign(styleMap, FONTMAP, COLORMAP, INLINEMAP);
        const styles = height ? {height} : null;
        const stylesControlBar = height ? {position: 'relative'} : null;
        const classesEditor = classNames(
            classNameEditor,
            readOnly ?
                prefixNS('RichTextEditor__Editor--readOnly') :
                prefixNS('RichTextEditor__Editor')
        );
        delete others.Content;
        delete others.readOnly;
        delete others.styleMap;
        delete others.onBlurValueChange;
        delete others.height;
        delete others.classNameEditor;
        delete others.additionalButtons;
        delete others.additionalDecorators;

        return (
            <div style={styles} className={prefixNS('RichTextEditor__Container')}>
                {readOnly === false &&
                  <div style={stylesControlBar}
                      className={prefixNS('RichTextEditor__ControlBar')}>
                      <StyleControlBar
                          editorState={editorState}
                          onChange={this.onChange}
                          readOnly={readOnly}
                          additionalButtons={additionalButtons}
                          containerRef={containerRef}/>
                  </div>}
                <div onMouseDown={readOnly ? null : this.focus}
                    className={classesEditor}>
                    <DraftJS.Editor
                        {...others}
                        editorState={editorState}
                        blockRenderMap={extendedBlockRenderMap}
                        blockStyleFn={extendedBlockStyleFn}
                        onChange={this.onChange}
                        handleKeyCommand={this.handleKeyCommand}
                        customStyleMap={combinedStyleMap}
                        onTab={this.onTab}
                        spellCheck={true}
                        ref={elem => {this.editor = elem}}
                        readOnly={readOnly}
                        onBlur={this.onBlur} />
                </div>
            </div>
        );
    }
}

RichTextEditor.propTypes = {
    Content: PropTypes.string,
    readOnly: PropTypes.bool,
    styleMap: PropTypes.object,
    onBlurValueChange: PropTypes.func,
    height: PropTypes.number,
    classNameEditor: PropTypes.string,
    additionalButtons: PropTypes.array,
    additionalDecorators: PropTypes.array,
    handleKeyCommand: PropTypes.func,
    containerRef: PropTypes.object
};

RichTextEditor.defaultProps = {
    readOnly: false,
    styleMap: {},
    additionalButtons: [],
    additionalDecorators: []
};
