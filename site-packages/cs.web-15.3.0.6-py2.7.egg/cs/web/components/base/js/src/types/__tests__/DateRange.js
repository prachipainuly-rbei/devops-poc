/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: DateRange.js 174476 2018-03-14 16:00:48Z yzh $"
 */

/* eslint-env jest */

import DateRange from '../DateRange.js';

describe('The DateRange class', () => {

    it('takes start and end dates', () => {
        expect.assertions(2);
        const start = new Date('2018-03-08');
        const end = new Date('2018-03-15');
        const dr = new DateRange(start, end);
        expect(dr.getStart().toISOString()).toBe(start.toISOString());
        expect(dr.getEnd().toISOString()).toBe(end.toISOString());
    });

    it('takes start and end dates also in reverse order', () => {
        expect.assertions(2);
        const start = new Date('2018-03-08');
        const end = new Date('2018-03-15');
        const dr = new DateRange(end, start);
        expect(dr.getStart().toISOString()).toBe(start.toISOString());
        expect(dr.getEnd().toISOString()).toBe(end.toISOString());
    });

    it('calculates duration between start and end dates', () => {
        expect.assertions(1);
        const start = new Date('2018-03-08');
        const end = new Date('2018-03-15');
        const dr = new DateRange(start, end);
        expect(dr.duration('days')).toBe(7);
    });

    it('checks whether a date is between start and end dates', () => {
        expect.assertions(2);
        const start = new Date('2018-03-08');
        const end = new Date('2018-03-15');
        const dr = new DateRange(start, end);
        expect(dr.contains(new Date('2018-03-11'))).toBe(true);
        expect(dr.contains(new Date('2018-03-21'))).toBe(false);
    });

    it('takes also one date', () => {
        expect.assertions(4);
        const start = new Date('2018-03-08');
        const end = new Date('2018-03-15');
        const dr1 = new DateRange(start);
        const dr2 = new DateRange(null, end);
        expect(dr1.getStart().toISOString()).toBe(start.toISOString());
        expect(dr1.duration('days')).toBe(Infinity);
        expect(dr2.getEnd().toISOString()).toBe(end.toISOString());
        expect(dr2.duration('days')).toBe(Infinity);
    });

    it('takes also the same dates', () => {
        expect.assertions(1);
        const start = new Date('2018-03-08');
        const dr = new DateRange(start, start);
        expect(dr.duration('days')).toBe(0);
    });

    it('checks whether that is a single day and the time part can be omitted ', () => {
        expect.assertions(3);
        const start = new Date('2018-03-08T00:00:00');
        const dayWithTime = new Date('2018-03-08T15:00:00');
        const dr1 = new DateRange(start, start);
        const dr2 = new DateRange(dayWithTime, dayWithTime);
        const dr3 = new DateRange(start, dayWithTime);
        expect(dr1.isDayBegin()).toBe(true);
        expect(dr2.isDayBegin()).toBe(false);
        expect(dr3.isDayBegin()).toBe(false);
    });

    it('calculates the day list between start and end dates', () => {
        expect.assertions(1);
        const start = new Date('2018-03-08');
        const end = new Date('2018-03-15');
        const dr = new DateRange(start, end);
        const strs = dr.toDayArray().map(m => m.format('YYYY-MM-DD'));
        expect(strs).toEqual(
            ['2018-03-08', '2018-03-09', '2018-03-10', '2018-03-11',
                '2018-03-12', '2018-03-13', '2018-03-14', '2018-03-15']
        );
    });

    it('calculates the week numbers between start and end dates', () => {
        expect.assertions(1);
        const start = new Date('2018-03-08');
        const end = new Date('2018-03-15');
        const dr = new DateRange(start, end);
        expect(dr.weekNumbers()).toEqual(
            [10, 11]
        );
    });
});
