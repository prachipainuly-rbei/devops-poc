/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: fetching.js 163715 2017-08-22 13:23:02Z cla $"
 */
import {getJSON} from '../fetch.js';

export const FETCHING_URL = `${componentNameSpace}-FETCHING_URL`;
export const FETCH_OK = `${componentNameSpace}-FETCH_OK`;
export const FETCH_ERROR = `${componentNameSpace}-FETCH_ERROR`;

/**
 * @module
 */

// XXX: urls query parameters may not be normalized when using URL as key
export function fetching(url, promise) {
    return {
        type: FETCHING_URL,
        meta: {
            url: url,
            promise: promise
        }
    };
}

export function fetchOk(url) {
    return {
        type: FETCH_OK,
        meta: {
            url: url
        }
    };
}

export function fetchError(url, err) {
    return {
        type: FETCH_ERROR,
        payload: err,
        error: true,
        meta: {
            url: url
        }
    };
}

/**
 * Wrapper around getJSON that manages multiple simultaneous GET
 * requests for a URL. A request is uniquely identified by its URL and
 * may be in three states:
 *
 * - Unknown: There is currently no pending request for this state.
 * - Pending: A request is pending, subsequent calls to singleFetch
 *   yield the Promise associated with this URL
 * - Error: A request was done for the URL and failed.
 *
 * Since each call to the returned promise's then will be executed
 * (multiple times if the user code is called multiple times) parameter
 * callOnce allows to attach a callback that is invoked only once this
 * Promise is fulfilled.
 *
 * The signature of callOnce is as follows:
 *
 * .. code-block:: none
 *
 *    callOnce(data) => result|Promise
 *
 * @param url {string} - URL to fetch from
 * @param callOnce {func} - Callback that is invoked on successful fetching
 */
export function singleFetch(url, callOnce) {
    return (dispatch, getState) => {
        const oldPromise = getState().fetchingById.get(url);
        if (oldPromise) {
            return oldPromise;
        }

        const newPromise = getJSON(url).then(
            data => {
                dispatch(fetchOk(url));
                if (callOnce) {
                    return callOnce(data);
                }
                return data;
            },
            error => {
                dispatch(fetchError(url, error));
                throw error;
            }
        );
        dispatch(fetching(url, newPromise));     // Store promise
        return newPromise;
    };
}
