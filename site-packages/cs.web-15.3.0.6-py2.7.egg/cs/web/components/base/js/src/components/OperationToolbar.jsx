/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: OperationToolbar.jsx 175632 2018-04-09 10:49:03Z cla $"
 */

import Immutable from 'immutable';
import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {ButtonToolbar, Button} from 'react-bootstrap';
import {prefixNS} from '../helpers.js';
import {OpInfoWrapper} from './WithOperations.jsx';

function OperationButton(props) {
    const {opInfo, selectCB, disabled} = props;
    return (
        <Button bsSize="small"
                onClick={() => selectCB(opInfo)}
                title={(opInfo.get('tooltip') || opInfo.get('label')).trim()}
                disabled={disabled}
                data-ce-id={opInfo.get('opname')}>
            {opInfo.get('icon') ? <img src={opInfo.get('icon')} /> : null}
            {opInfo.get('label')}
        </Button>
    );
}

OperationButton.propTypes = {
    contextObject: PropTypes.instanceOf(Immutable.Map).isRequired,
    opInfo: PropTypes.object.isRequired,
    selectCB: PropTypes.func,
    disabled: PropTypes.bool,
};

/**
 * Display the Toolbar on top of core operations based forms.
 *
 * React Properties
 * ----------------
 *
 * +-------------------+--------------+---------------------+------------------------------------------------+
 * | Property          | Type         | Default             | Use                                            |
 * +===================+==============+=====================+================================================+
 * | selectCB          | function     | \-                  | Called when Button is selected.                |
 * +-------------------+--------------+---------------------+------------------------------------------------+
 *
 * @class OperationToolbar
 * @extends React.Component
 */
export default function OperationToolbar(props) {
    const {contextObject, operationContextName, selectCB, deleteCB, disabled} = props;
    return (
        <OpInfoWrapper contextObjects={Immutable.List([contextObject])}
                       operationContextName={operationContextName}>
            {opInfos =>
                <ButtonToolbar className={prefixNS("OperationToolbar")}>
                    {opInfos.map(opInfo => {
                        if (opInfo.get('target_url') ||
                            opInfo.get('submit_url') ||
                            opInfo.get('form_url')) {
                            const opname = opInfo.get('opname');
                            const cb =
                                opname === 'CDB_Delete' ?
                                (deleteCB || selectCB) :
                                selectCB;
                            return (<OperationButton
                                        key={opname}
                                        contextObject={contextObject}
                                        opInfo={opInfo}
                                        selectCB={cb}
                                        disabled={disabled} />);
                        }

                        return undefined;
                    })}
                </ButtonToolbar>
            }
        </OpInfoWrapper>
    );
}
OperationToolbar.propTypes = {
    contextObject: PropTypes.instanceOf(Immutable.Map).isRequired,
    operationContextName: PropTypes.string.isRequired,
    fetchOperationContext: PropTypes.func,
    disabled: PropTypes.bool,
    selectCB: PropTypes.func,
    deleteCB: PropTypes.func,
};
