/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ColumnActions.jsx 165152 2017-09-14 13:45:37Z vov $"
 */

import React from 'react';
import {PropTypes, ImmutablePropTypes, classNames, ReactDnD} from 'cs-web-components-externals';
import {prefixNS} from '../../helpers';
import connect from '../connect';
import {setOrderedColumns} from '../common/actions';
import {draggableColumnType} from '../constants';

const orderTarget = {
    canDrop(props, monitor) {
        const {column} = props;
        const item = monitor.getItem();
        return item.columnID !== column.get('id');
    },

    drop(props, monitor) {
        const {orderedColumns, setOrderedColumns, column} = props;
        const columnID = column.get('id');
        const draggedColumn = monitor.getItem().columnID;
        if (orderedColumns &&
            orderedColumns.contains(columnID) &&
            orderedColumns.contains(draggedColumn)) {
            const removed = orderedColumns.delete(draggedColumn).toList();
            const order = removed.indexOf(columnID);
            const newOrder = removed.insert(order, draggedColumn).toOrderedSet();
            if (!newOrder.equals(orderedColumns)) {
                setOrderedColumns(newOrder);
            }
        }
        return {};
    }
};

function collect(connect, monitor) {
    return {
        connectDropTarget: connect.dropTarget(),
        isOverCurrent: monitor.isOver({shallow: true}),
        canDrop: monitor.canDrop(),
        draggedItemType: monitor.getItemType()
    };
}

export class ColumnDropper extends React.PureComponent {
    render() {
        const {connectDropTarget, isOverCurrent, canDrop, draggedItemType} = this.props;
        const ready = draggedItemType === draggableColumnType && canDrop;
        const dropperClass = classNames(
            prefixNS('table-column-dropper'),
            {
                'drop-ready': ready,
                'table-column-dropper--is-over': isOverCurrent && ready
            }
        );
        return connectDropTarget(
            <div className={dropperClass} />
        );
    }
}

ColumnDropper.propTypes = {
    column: ImmutablePropTypes.map,
    connectDropTarget: PropTypes.func,
    isOverCurrent: PropTypes.bool,
    canDrop: PropTypes.bool,
    draggedItemType: PropTypes.string
};

function mapStateToProps(state) {
    const {columns, orderedColumns} = state;
    return {
        columns, orderedColumns
    };
}

export default connect(mapStateToProps, {setOrderedColumns})(
    ReactDnD.DropTarget(draggableColumnType, orderTarget, collect)(ColumnDropper));
