/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: FileDropzone.jsx 174212 2018-03-08 10:50:39Z vov $"
 */

import React from 'react';
import {PropTypes, classNames, ImmutablePropTypes, ReactDnD} from 'cs-web-components-externals';
import {prefixNS} from '../helpers';
import {Button} from 'react-bootstrap';
import {formatStr} from '../i18n';

const fileTarget = {
    drop(props, monitor) {
        props.onDrop && props.onDrop(monitor.getItem().files);
    }
};

const FILETYPE = ReactDnD.NativeTypes.FILE;

const collect = (connect, monitor) => ({
    connectDropTarget: connect.dropTarget(),
    isOver: monitor.isOver(),
    canDrop: monitor.canDrop(),
    draggedItemType: monitor.getItemType()
});

class FileDropArea extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            opened: false
        };
        this.onChange = this.onChange.bind(this);
        this.choose = this.choose.bind(this);
        this._fileInput = null;
    }

    choose() {
        if (this._fileInput) {
            this._fileInput.value = null;
            this._fileInput.click();
        }
    }

    onChange(event) {
        const files = [];
        for (let idx = 0; idx < event.target.files.length; idx++) {
            files.push(event.target.files[idx]);
        }
        this.props.onDrop && this.props.onDrop(files);
    }

    render() {
        const {
            className, autoHide, connectDropTarget,
            isOver, canDrop, draggedItemType,
            children, ...inputProps
        } = this.props;
        const hidden = autoHide && draggedItemType !== FILETYPE;
        const clsnames = classNames(
            className,
            prefixNS('file-droparea'),
            isOver && canDrop ?
                prefixNS('file-droparea-dropping') : undefined,
            hidden ?
                prefixNS('file-droparea-hidden') : undefined
        );
        return connectDropTarget(
            <div className={clsnames}
                 onClick={hidden ? undefined : this.choose}>
                <input {...inputProps}
                    className={prefixNS('file-droparea-trigger')}
                    type="file"
                    multiple
                    ref={(c) => {this._fileInput = c}}
                    onChange={this.onChange}/>
                {hidden ? null : children}
            </div>
        );
    }
}

FileDropArea.propTypes = {
    onDrop: PropTypes.func,
    autoHide: PropTypes.bool,
    className: PropTypes.string,
    connectDropTarget: PropTypes.func,
    isOver: PropTypes.bool,
    canDrop: PropTypes.bool,
    draggedItemType: PropTypes.string
};

FileDropArea.defaultProps = {
    autoHide: false
};

const DnDArea = ReactDnD.DropTarget(FILETYPE, fileTarget, collect)(FileDropArea);

/**
 * This component enables dropping files that dragged from file system in it, or
 * to select files via dialog.
 *
 * Examples
 * --------
 *
 * .. code-block:: none
 *
 *    class MyFiles extends React.Component {
 *        onDrop(files) {
 *            console.log('received', files);
 *            this.setState({
 *                files: files
 *            });
 *        }
 *
 *        render() {
 *            <div>
 *                <FileDropzone onDrop={this.onDrop.bind(this)}>
 *                    <p>Drag and drop files here</p>
 *                </FileDropzone>
 *                {this.state && this.state.files ?
 *                    <FileDropzone.Preview files={this.state.files}/> : null
 *                }
 *            </div>
 *        }
 *    }
 *
 * React Properties
 * ================
 *
 * +------------------+--------------+--------------+-----------------------------------------------+
 * | Property         | Type         | Default      | Use                                           |
 * +==================+==============+==============+===============================================+
 * | onDrop           | func         | -            | A callback, fired when files get dropped here |
 * +------------------+--------------+--------------+-----------------------------------------------+
 * | autoHide         | boolean      | false        | whether to hide content in this component     |
 * |                  |              |              | until files are being dragged                 |
 * +------------------+--------------+--------------+-----------------------------------------------+
 *
 * Static Methods
 * ==============
 * **getPreview(file)**: Get the generated URL to the specific file that is dropped or chosen. The result
 * can be used e.g. as value to `src` attribute on `img` tag.
 *
 * Instance Methods
 * ================
 * **choose()**: Open the browser native file choosing dialog.
 *
 */
export default class FileDropzone extends React.Component {
    constructor(props) {
        super(props);
        this.choose = this.choose.bind(this);
        this._dropArea = null;
    }

    static getPreview(file) {
        return window.URL.createObjectURL(file);
    }

    static revokePreview(url) {
        return window.URL.revokeObjectURL(url);
    }

    choose() {
        if (this._dropArea) {
            this._dropArea.getDecoratedComponentInstance().choose();
        }
    }

    render() {
        return (
            <div className={prefixNS('file-dropzone')}>
                <DnDArea {...this.props} ref={(c) => {this._dropArea = c}}/>
            </div>
        );
    }
}

FileDropzone.propTypes = {
    onDrop: PropTypes.func,
    autoHide: PropTypes.bool
};

FileDropzone.defaultProps = {
    autoHide: false
};

class FileRenderer extends React.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            src: FileRenderer.getPreview(props)
        };
    }

    static getPreview(props) {
        return FileDropzone.getPreview(props.file);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.file !== this.props.file) {
            this.setState({
                src: this.getPreview(nextProps)
            });
        }
    }

    componentWillUnmount() {
        FileDropzone.revokePreview(this.state.src);
    }

    render() {
        return (
            <img src={this.state.src}/>
        );
    }
}

FileRenderer.propTypes = {
    file: PropTypes.any

};

class FileThumbnail extends React.PureComponent {
    constructor(props) {
        super(props);
        this.onDelete = this.onDelete.bind(this);
    }

    onDelete(event) {
        event.stopPropagation();
        this.props.onDelete && this.props.onDelete(this.props.file);
    }

    render() {
        const {file, onDelete, Renderer} = this.props;
        return (
            <div className={prefixNS('file-dropzone-thumbnail')}>
                <div className={prefixNS('file-dropzone-thumbnail-image')}>
                    <Renderer file={file}/>
                </div>
                <p className={prefixNS('file-dropzone-thumbnail-name')}
                   title={file.name}>
                    {file.name}
                </p>
                {onDelete ? (
                    <Button bsSize="sm"
                            bsStyle="default"
                            onClick={this.onDelete}>
                        {formatStr('delete')}
                    </Button>
                ) : null}
            </div>
        );
    }
}

FileThumbnail.propTypes = {
    onDelete: PropTypes.func,
    file: PropTypes.any,
    Renderer: PropTypes.oneOfType([
        PropTypes.element, PropTypes.func])
};

FileThumbnail.defaultProps = {
    Renderer: FileRenderer
};

FileDropzone.FileThumbnail = FileThumbnail;

class Preview extends React.PureComponent {
    render() {
        const {files, onDelete, Renderer} = this.props;
        return (
            <div className={prefixNS('file-dropzone-preview')}>
                {files.map(file => (
                    <FileThumbnail file={file}
                                   onDelete={onDelete}
                                   key={file.name}
                                   Renderer={Renderer}/>
                ))}
            </div>
        );
    }
}

Preview.propTypes = {
    onDelete: PropTypes.func,
    files: ImmutablePropTypes.list,
    Renderer: PropTypes.oneOfType([
        PropTypes.element, PropTypes.func])
};

FileDropzone.Preview = Preview;
