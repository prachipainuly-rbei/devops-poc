/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: PersistentCollapsible.jsx 159881 2017-06-07 13:45:17Z gwe $"
 */

import React, {Component} from 'react';
import {PropTypes} from 'cs-web-components-externals';
import Collapsible from './Collapsible';

// TODO proptype collapsedKey = 'contact-elements-preferred-collapsible-state'

/**
 * Extends :ref:`cs-web-components-base-components.Collapsible.__default__` to persist its state.
 *
 * React Properties
 * ----------------
 *
 * +------------------+--------------+--------------+-------------------------------------------+
 * | Property         | Type         | Default      | Use                                       |
 * +==================+==============+==============+===========================================+
 * | header           | string/node  | \-           | Text to be displayed in header            |
 * +------------------+--------------+--------------+-------------------------------------------+
 * | onCollapsed      | func         | undefined    | Callback invoked when component state     |
 * |                  |              |              | changes                                   |
 * +------------------+--------------+--------------+-------------------------------------------+
 * | collapsedKey     | nodes        | \-           | A unique key to persist the state to      |
 * +------------------+--------------+--------------+-------------------------------------------+
 * | children         | nodes        | \-           | Components to be displayed in body        |
 * +------------------+--------------+--------------+-------------------------------------------+
 *
 */
export default class PersistentCollapsible extends Component {
    constructor(props) {
        super(props);
    }

    getStoredCollapsed() {
        const storedCollapsed = localStorage.getItem(this.props.collapsedKey);
        if (storedCollapsed === undefined) {
            return true;
        }

        return JSON.parse(storedCollapsed);
    }

    onCollapsed(collapsed) {
        localStorage.setItem(this.props.collapsedKey, JSON.stringify(collapsed));

        if (this.props.onCollapsed) {
            this.props.onCollapsed(collapsed);
        }
    }

    render() {
        return (
            <Collapsible header={this.props.header}
                         onCollapsed={this.onCollapsed.bind(this)}
                         initialCollapsed={this.getStoredCollapsed()}
                         useGlyphiconStyle={this.props.useGlyphiconStyle}>
                {this.props.children}
            </Collapsible>
        );
    }
}

PersistentCollapsible.propTypes = {
    header: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,
    onCollapsed: PropTypes.func,
    collapsedKey: PropTypes.string.isRequired,
    useGlyphiconStyle: PropTypes.bool
};

PersistentCollapsible.defaultProps = {
    onCollapsed: undefined
};
