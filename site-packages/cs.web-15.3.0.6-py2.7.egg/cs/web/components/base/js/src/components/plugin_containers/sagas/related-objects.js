/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: related-objects.js 175798 2018-04-11 13:54:00Z cla $"
 */

import Immutable from 'immutable';
import {ReduxSaga} from 'cs-web-components-externals';
import {Registry} from '../../../registry.js';
import {FETCH_RELATED_OBJECT_TILES, relatedObjectTilesFetched} from '../actions/related-objects.js';
import {postJSON} from '../../../fetch.js';
import {receivedRelship} from '../../../actions/object-actions.js';
import {notifyError} from '../../../actions/notification.js';

const {takeEvery, call, put, all} = ReduxSaga.effects;

function* fetchRelatedObjectTilesSaga({payload: {classname, id, relshipNames}}) {
    try {
        const relshipConfigs = yield call(
            postJSON,
            `/internal/uisupport/related_objects/${classname}/${id}`,
            {relships: relshipNames || []},
        );

        yield all(
            relshipConfigs
                .map(relshipConfig => relshipConfig['relship'])
                .map(relship => put(receivedRelship(relship['@id'], relship)))
        );

        const tileConfig = Immutable.List(relshipConfigs.map(
            relshipConfig => Immutable.Map({
                id: relshipConfig['relship']['@id'],
                label: relshipConfig['label'],
                name: relshipConfig['name'],
            })
        ));
        yield put(relatedObjectTilesFetched(classname, tileConfig));

    } catch (error) {
        yield put(notifyError(error));
    }
}

function* relatedObjectTilesWatcher() {
    yield takeEvery(FETCH_RELATED_OBJECT_TILES, fetchRelatedObjectTilesSaga);
}

Registry.registerSaga(relatedObjectTilesWatcher);
