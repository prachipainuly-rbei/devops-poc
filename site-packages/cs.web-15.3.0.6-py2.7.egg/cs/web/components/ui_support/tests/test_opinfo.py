#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Tests for retrieving operation info using
REST-API Calls
"""

import unittest

from webtest import TestApp as Client
from cs.platform.web.root import Root
from cdb import testcase


class TestOperations(testcase.RollbackTestCase):

    # we want to see the complete JSON diff, not truncated
    maxDiff = None

    def setUp(self):
        """
        Set up the test case
        """
        try:
            from cs.restgenericfixture import Foo
        except ImportError:
            raise unittest.SkipTest("this test needs cs.restgenericfixture")
        self.c = Client(Root())

        # NEVER!!! raise after initializing the transaction context of
        # RollbackTestCase
        super(TestOperations, self).setUp()

    def test_opinfo_for_activated_op(self):
        """
        Retrieve information for an operation that is fully available
        in Web-UI
        """
        response = self.c.get('/internal/uisupport/operation/class/rest_foo/CDB_Search')
        json = response.json
        for attr in ["submit_url", "icon", "form_url", "label", "tooltip"]:
            self.assertTrue(attr in json,
                            "Failed to retrieve '%s' from opinfo" % (attr))
            self.assertTrue(json[attr],
                            "Attr %s should contain a value" % (attr))
        for attr, value in [("activation_mode", 0),
                            ("opname", "CDB_Search"),
                            ("presentation_id", "editor"),
                            ("essential", False),
                            ("classname", "rest_foo")]:
            self.assertTrue(attr in json,
                            "Failed to retrieve '%s' from opinfo" % (attr))
            self.assertEqual(json[attr], value)

    def test_opinfo_for_webui_deactivated_op(self):
        """
        Retrieve information for an operation that is generally available but
        cannot be used with form based operations (disabled using
        Web-UI-Operation configuration.
        """
        try:
            from cs.webtest import OpActivation
        except ImportError:
            raise unittest.SkipTest("this test needs cs.webtest")

        response = self.c.get('/internal/uisupport/operation/class/cswebtest_op_activation/CDB_ShowObject')
        json = response.json
        for attr, value in [("submit_url", False),
                            ("icon", True),
                            ("form_url", False),
                            ("label", True),
                            ("presentation_id", False),
                            ("tooltip", True)]:
            self.assertTrue(attr in json,
                            "Failed to retrieve '%s' from opinfo" % (attr))
            if value:
                self.assertTrue(json[attr],
                                "Attr %s should contain a value" % (attr))
            else:
                self.assertFalse(json[attr],
                                 "Attr %s should not contain a value" % (attr))

        for attr, value in [("activation_mode", 2),
                            ("opname", "CDB_ShowObject"),
                            ("essential", False),
                            ("classname", "cswebtest_op_activation")]:
            self.assertTrue(attr in json,
                            "Failed to retrieve '%s' from opinfo" % (attr))
            self.assertEqual(json[attr], value)

    def test_opinfo_for_op_the_user_cannot_access(self):
        """
        Retrieve information for an operation that is not
        available for the user. We expect 404 (HTTPNotFound)
        """
        # Unknown class
        with testcase.error_logging_disabled():
            self.c.get('/internal/uisupport/operation/class/unknown_class/CDB_Create',
                       status=404)

        # Unknown operation
        with testcase.error_logging_disabled():
            self.c.get('/internal/uisupport/operation/class/rest_foo/unknown',
                       status=404)

    def test_opinfo_for_class(self):
        """
        Retrieve information for all operations of the class.
        """
        response = self.c.get('/internal/uisupport/operation/class/rest_complex/')
        json = response.json
        self.assertTrue(isinstance(json, list),
                        "Result should be a list")
        # We expect at least CDB_ShowObject
        self.assertTrue(json)
        for op in json:
            op_url = "/internal/uisupport/operation/class/rest_complex/%s" % (op["opname"])
            self.assertEqual(op,
                             self.c.get(op_url).json)


class TestRelshipOperations(testcase.RollbackTestCase):
    """
    Test that the form & operation links returned for relship contexts point
    to the correct URLs
    """
    maxDiff = None

    def setUp(self):
        try:
            from cs.restgenericfixture import RelshipParent, RelshipChild
        except ImportError:
            raise unittest.SkipTest("this test needs cs.restgenericfixture")

        super(TestRelshipOperations, self).setUp()
        self.c = Client(Root())
        self.parent = RelshipParent.Create(id=42, name="parent")

    def test_opinfo(self):
        response = self.c.get('/internal/uisupport/operation/relship/rest_rel_parent/42/DD_Children').json
        parent_ops = response["reference_opinfo"][1]
        for opname in ['CDB_ShowObject', 'CDB_Create']:
            ops = [op for op in parent_ops if op['opname'] == opname]
            self.assertEqual(len(ops), 1)
            self.assertEqual(ops[0]['form_url'],
                             'http://localhost/internal/uisupport/form/operation/relship/rest_rel_parent/42/DD_Children/%s/%s' % (opname, ops[0]['classname']))
            self.assertEqual(ops[0]['submit_url'],
                             'http://localhost/internal/uisupport/operation/relship/rest_rel_parent/42/DD_Children/%s/run' % opname)

    def test_opinfo_for_single_op(self):
        response = self.c.get('/internal/uisupport/operation/relship/reference/rest_rel_parent/42/DD_Children/CDB_ShowObject').json
        self.assertEqual(response['form_url'],
                         'http://localhost/internal/uisupport/form/operation/relship/rest_rel_parent/42/DD_Children/CDB_ShowObject/%s' % response['classname'])
        self.assertEqual(response['submit_url'],
                         'http://localhost/internal/uisupport/operation/relship/rest_rel_parent/42/DD_Children/CDB_ShowObject/run')


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
