# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
This module contains functions that implements the batch loading REST-API for
objects.

Note that POST request are used because the object informations might be too
large to be transferred using the request parameters. They do not alter the
database state as it might be expected during a POST request.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: batchload.py 177052 2018-05-09 11:33:42Z mbr $"


__all__ = []

from cdb import ElementsError
from cs.platform.web.rest import get_collection_app, support
from . import App, get_uisupport_app
from cdb.objects import Object


class BatchModel(Object):

    @classmethod
    def make_link(cls, request):
        return request.class_link(BatchModel, app=get_uisupport_app(request))


@App.path(path='/batchload', model=BatchModel)
def _batch():
    return BatchModel()


@App.json(model=BatchModel, request_method='POST')
def _json_post(self, request):
    colApp = get_collection_app(request)
    result = {"objects": [], "errors": []}
    try:
        identifiers = request.json.get("identifiers")
        for restname, keys in identifiers:
            try:
                obj = support.get_object_from_rest_name(restname, keys)
                if obj:
                    result["objects"].append(request.view(obj, name="base_data", app=colApp))
                else:
                    result["errors"].append("Object not found (%s, %s)" % (restname, key))
            except AttributeError as e:
                result["errors"].append(unicode(e))
    except ElementsError as e:
        raise HTTPForbidden(unicode(e))
    return result
