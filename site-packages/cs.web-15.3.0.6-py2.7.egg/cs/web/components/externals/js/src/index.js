/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: index.js 175442 2018-04-04 09:08:03Z gwe $"
 */

/*
 * This library bundles all the external dependencies that are reused across
 * our web applications, but are not served via separate <script> tags. We
 * don't bundle them with our own components to avoid lengthy webpack runs.
 */

// Polyfills to add missing functionality to the global namespace
import 'babel-polyfill';
import 'whatwg-fetch';

// Former statics, will be re-exported and additionally set in the global namespace
// so that we don't break libs that import them as separate libs (mentioned in
// webpack externals).

import React from 'react';
import ReactDOM from 'react-dom';
import * as ReactBootstrap from 'react-bootstrap';
import * as Immutable from 'immutable';
import * as moment from 'moment';

window.React = React;
window.ReactDOM = ReactDOM;
window.ReactBootstrap = ReactBootstrap;
window.Immutable = Immutable;
window.moment = moment.default;

// Re-exported functionality
import PropTypes from 'prop-types';
import redux from 'redux';
import {createStore, combineReducers, applyMiddleware} from 'redux';
import thunk from 'redux-thunk';
import {Provider, getState, connect} from 'react-redux';
import * as ReactIntl from 'react-intl';
import * as IntlMessageFormat from 'intl-messageformat';
import memoizeFormatConstructor from 'intl-format-cache';
import classNames from 'classnames';
import ImmutablePropTypes from 'react-immutable-proptypes';
import key from 'keymaster';
import {DragSource, DropTarget, DragLayer,
    DragDropContext, DragDropContextProvider} from 'react-dnd';
import HTML5Backend, {NativeTypes} from 'react-dnd-html5-backend';
import * as ReactRouter from 'react-router-dom';
import createHistory from 'history/createBrowserHistory';
import qs from 'qs';
import * as reselect from 'reselect';
import SplitPane from 'react-split-pane';
import {Editor, EditorState, RichUtils, Modifier, convertFromRaw,
        convertToRaw, CompositeDecorator, DefaultDraftBlockRenderMap} from 'draft-js';
import {CSSTransitionGroup} from 'react-transition-group';
import cuid from 'cuid';

// load locales for ReactIntl
import {addLocaleData} from 'react-intl';
import en from 'react-intl/locale-data/en';
import de from 'react-intl/locale-data/de';
import tr from 'react-intl/locale-data/tr';
import zh from 'react-intl/locale-data/zh';

addLocaleData([...de, ...en, ...tr, ...zh]);

import * as ReduxSaga from 'redux-saga';
// keep official documented usage of 'createSagaMiddleware'
ReduxSaga.createSagaMiddleware = ReduxSaga.default;

const browserHistory = createHistory();

const ReactDnD = {
    DragSource, DropTarget, DragLayer, DragDropContext, DragDropContextProvider,
    HTML5Backend, NativeTypes
};

const DraftJS = {
    Editor, EditorState, RichUtils, Modifier, convertFromRaw,
    convertToRaw, CompositeDecorator, DefaultDraftBlockRenderMap
};

export {
    fetch, redux,
    createStore, combineReducers, applyMiddleware,
    thunk,
    Provider, getState, connect,
    classNames,
    ImmutablePropTypes,
    key,
    PropTypes,
    ReactIntl, IntlMessageFormat, memoizeFormatConstructor,
    ReactDnD,
    ReactRouter, browserHistory,
    qs,
    reselect,
    SplitPane,
    DraftJS,
    CSSTransitionGroup,
    ReduxSaga,
    cuid
};
