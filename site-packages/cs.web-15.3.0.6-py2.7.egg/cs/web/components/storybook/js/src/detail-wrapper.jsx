/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: detail-wrapper.jsx 168528 2017-11-15 11:35:33Z gwe $"
 */

import React from 'react';
import {ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {connect} from 'cs-web-components-externals';
import {fetchObject, fetchType, notifyError} from 'cs-web-components-base';

/**
 * DetailWrapper determines the current objects URL from a base URL provided by
 * the backend, and the routing params provided in the props. When mounted, or
 * when the object URL changes, an action to fetch the current object from the
 * REST API is dispatched.
 *
 * The current object is provided as property ``contextObject`` to the single
 * child.
 *
 * This component is normally not used by itself, but is automatically
 * employed by the frontend routing.
 */
class DetailWrapper extends React.Component {

    componentDidMount() {
        const {contextObject, fetchObject, fetchType} = this.props;
        fetchObject(this.props.objectUrl);
        if (contextObject !== undefined) {
            fetchType(contextObject.get('@type'));
        }
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.objectUrl !== this.props.objectUrl) {
            this.props.fetchObject(nextProps.objectUrl);
        }

        if (nextProps.fetchError && nextProps.fetchError !== this.props.fetchError) {
            this.props.notifyError(nextProps.fetchError, null, 'Error while fetching object');
        }
    }

    render() {
        const {contextObject, fetchError} = this.props;
        if (fetchError) {
            return (
                <div>
                    Fetch Error: {fetchError.status} {fetchError.statusText}
                </div>
            );
        }
        else if (contextObject === undefined) {
            return (
                <div>
                    Fetching ...
                </div>
            );
        }
        else {
            return this.props.children(contextObject);
        }
    }
}

DetailWrapper.propTypes = {
    // the current object; may not be available until retrieved
    contextObject: ImmutablePropTypes.map,
    // URL for the current object, as constructed from base URL and routing params
    objectUrl: PropTypes.string.isRequired,
    // if object retrieval failed, the corresponding Error
    fetchError: PropTypes.object,
    // action functions
    fetchObject: PropTypes.func.isRequired,
    fetchType: PropTypes.func.isRequired,
    notifyError: PropTypes.func.isRequired
};

function mapStateToProps(state, ownProps) {
    const {objectUrl} = ownProps;
    const contextObject = state.objectsById.get(objectUrl);
    return {
        contextObject,
        fetchError: state.errorsById.get(objectUrl)
    };
}

const actions = {fetchObject, fetchType, notifyError};
const Wrapper = connect(mapStateToProps, actions)(DetailWrapper);

/**
 * Wraps a React component, so that it can be used as the detailComponent in a
 * generic frame.
 *
 * @module
 */
export default function wrapContext(objectUrl, store) {
    return function useContextWrapper(story) {
        return (
            <Wrapper objectUrl={objectUrl}>
                {(contextObject) => {
                    store.contextObject = contextObject;
                    return story();
                }}
            </Wrapper>
        );
    };
}
