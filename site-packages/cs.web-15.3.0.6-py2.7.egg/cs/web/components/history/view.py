#!/usr/bin/env powerscript
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

"""
Morepath view implementations for Web UI history
"""

__revision__ = "$Id: view.py 169070 2017-11-23 09:20:34Z mbr $"

import urllib2
from datetime import datetime
from itertools import izip

from cdb import auth
from cdb import sqlapi
from cdb import transactions
from cdb.objects.core import Object
from cdb.objects.iconcache import IconCache
from cs.platform.web.rest import get_collection_app
from cs.platform.web.uisupport import get_ui_link
from cs.platform.web.rest.support import rest_name_for_class_name
from cs.web.components.ui_support.utils import get_handles_from_restitems

from .model import HistoryCollection, HistoryItem
from .main import HistoryApp
from . import get_history_entries_per_class


@HistoryApp.json(model=HistoryCollection)
def _history_collection_get(model, request):
    collection_app = get_collection_app(request)

    def render_item(item, item_handle):
        icon_id = item_handle.getClassDef().getObjectIconId()
        rest_url = request.class_link(Object,
                                       {'rest_name': item.rest_name,
                                        'keys': item.rest_id},
                                       app=collection_app)
        return {
            'title': item_handle.getDesignation(),
            'frontend_url': get_ui_link(request, item_handle),
            'rest_url': urllib2.unquote(rest_url),
            'icon_url': IconCache.getIcon(icon_id, accessor=item_handle),
            'timestamp': item.cdb_cdate.isoformat(),
            'classname': item_handle.getClassDef().getClassname(),
            'ref_object_id': item.ref_object_id
        }

    items = model.get_recent_items()
    handles = get_handles_from_restitems(items)
    if model.as_table is None:
        result = {'@id': request.link(model),
                  'history_items': [render_item(item, item_handle)
                                    for (item, item_handle) in izip(items, handles)
                                    if item_handle is not None]
                 }
    else:
        result = {'@id': request.link(model)}
        valid_handles = [hndl for hndl in handles if hndl is not None]
        result.update(model.getTableResult(valid_handles).get_rest_data(request))
    return result


@HistoryApp.json(model=HistoryCollection, request_method='POST')
def _history_collection_post(model, request):
    """ Add a new history entry to the DB. Returns the new list of history
        entries for the current user.
    """
    json = request.json
    rest_name = rest_name_for_class_name(json['classname'])
    rest_id = json['rest_id']
    with transactions.Transaction():
        # Try to update the timestamp for the record that should be added, to
        # move it to the top of the list. If this returns 0 (ie. no records
        # updated), the entry is not in the DB yet and must be created.
        stmt = ("%s SET cdb_cdate=%s"
                " WHERE cdb_cpersno='%s' AND rest_name='%s' AND rest_id='%s'"
                % (HistoryItem.GetTableName(),
                   sqlapi.SQLdbms_date(datetime.now()),
                   sqlapi.quote(auth.persno),
                   sqlapi.quote(rest_name),
                   sqlapi.quote(rest_id)))
        updates = sqlapi.SQLupdate(stmt)
        if updates == 0:
            # Entry doesn't exist yet, so make one. Don't do any access checks here,
            # because that will be done anyway when retrieving the entries later on.
            HistoryItem.Create(cdb_cpersno=auth.persno,
                               rest_name=rest_name,
                               rest_id=rest_id,
                               cdb_cdate=datetime.now(),
                               ref_object_id=json.get('ref_object_id'))
            # Check if there are more entries then the maximum number per user for
            # this REST name. If so, delete the oldest ones.
            existing = (HistoryItem
                        .KeywordQuery(cdb_cpersno=auth.persno, rest_name=rest_name)
                        .Query(condition="1=1",
                               order_by='cdb_cdate desc',
                               max_rows=get_history_entries_per_class() + 1)
                        .Execute())
            if len(existing) > get_history_entries_per_class():
                # There are too many! Get the timestamp of the last 'valid' entry
                # (which is the entry before the last), and delete everything that
                # is older.
                del_stmt = ("FROM %s"
                            " WHERE cdb_cpersno='%s' AND rest_name='%s' AND cdb_cdate < %s"
                            % (HistoryItem.GetTableName(),
                               sqlapi.quote(auth.persno),
                               sqlapi.quote(rest_name),
                               sqlapi.SQLdbms_date(existing[-2].cdb_cdate)))
                sqlapi.SQLdelete(del_stmt)
        # Return the updated list
        return request.view(model)


@HistoryApp.json(model=HistoryCollection, request_method='DELETE')
def _history_collection_delete(model, request):
    """ Deletes the history of the current user.
    """
    del_stmt = ("FROM %s WHERE cdb_cpersno='%s'"
                % (HistoryItem.GetTableName(), sqlapi.quote(auth.persno)))
    sqlapi.SQLdelete(del_stmt)

    # Return the updated list
    return request.view(model)
