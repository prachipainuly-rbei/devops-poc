# !/usr/bin/env powerscript
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 2015 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

"""
Model classes for the search app
"""

__revision__ = "$Id: model.py 165069 2017-09-13 10:14:19Z mbr $"

from cdb.storage.index.queries import ESQueryPage
from cdb.storage.index import terms_query


class FullTextSearchModel(ESQueryPage):
    """ Model for ES related activities. Re-uses the existing ES logic, only
        overwriting things that are related to the old elink/template stuff.
    """
    HIGHLIGHT_BLOCK_SIZE = 150
    HIGHLIGHT_MAX_BLOCKS = 1

    @property
    def request(self):
        if not hasattr(self._request, "image_uri"):
            setattr(self._request, "image_uri", "")
        return self._request

    def __init__(self, searchtext, query_params):
        super(FullTextSearchModel, self).__init__()
        query_params["fulltextsearch"] = searchtext.strip()

        self.classname = query_params.get("classname", "").split(",")
        # Rewrite the date filter
        df = query_params.get("df", None)
        if df is not None:
            query_params["df"] = ";;[%s]" % df
        self.__query_params = query_params

    def settings(self):
        """ This is called from the superclass' _prepare_result method: return
            the parameters of the current search to the client.
        """
        result = self._base_settings()
        if self.classname:
            result["classname"] = self.classname

        total_rows = self._query_helper.curr_total if self._query_helper else 0
        result["page"] = self._page_no + 1
        result["has_more"] = total_rows > 0 and (self._page_no + 1) * result["rpp"] < total_rows
        result["df"] = result["df"].strip(";;[").strip("]") if result["df"] is not None else ""
        return result

    def _prepare_result(self, request):
        """ Runs the actual ES query
        """
        # TODO: get all params from request (via self)
        self._request = request
        return super(FullTextSearchModel, self)._prepare_result(self.__query_params)


class TermSearchModel(object):
    def __init__(self, searchtext):
        self.searchtext = searchtext

    def search(self, request):
        query = terms_query.TermsQuery(self.searchtext)
        names = [term.term for term in query.execute()]
        return names
