/**
 * Reducer Template
 */

import Immutable from 'immutable';
import {combineReducers} from 'cs-web-components-externals';
import {
    FULL_TEXT_SEARCH_RESULT, FULL_TEXT_SEARCH_APPEND_RESULT,
    SEARCH_FAILED, IS_FETCHING,
    OP_SET_FACET, OP_RESET_OFFSET,
    OP_SET_SEARCH_TEXT, OP_TOGGLE_OBSOLETE,
    OP_SET_FILTER_DATE, OP_SET_SORT_DATE,
    OP_UPDATE_SETTINGS
} from '../actions/actions';

export function result(state = Immutable.Map(), action) {
    switch (action.type) {
        case FULL_TEXT_SEARCH_RESULT:
            return state.set("searchResult", Immutable.fromJS(action.payload));
        case FULL_TEXT_SEARCH_APPEND_RESULT: {
            const appendResult = Immutable.fromJS(action.payload.result);
            const existResult = state.getIn(['searchResult', 'result']);
            return state.setIn(['searchResult', 'result'], existResult.concat(appendResult));
        }
        case SEARCH_FAILED:
            return state.set("searchError", action.err);
        default:
            return state;
    }
}

export function fetchingById(state = Immutable.Set(), action) {
    switch (action.type) {
        case IS_FETCHING:
            return state.add(action.meta.url);
        case FULL_TEXT_SEARCH_RESULT:
        case FULL_TEXT_SEARCH_APPEND_RESULT:
        case SEARCH_FAILED:
            return state.delete(action.meta.url);
        default:
            return state;
    }
}

export function settings(state = Immutable.Map(), action) {
    switch (action.type) {
        case OP_SET_FACET: {
            const classname = action.payload.classname;
            const add = action.payload.add;
            const classnameList = state.get('classname', Immutable.Set()).toSet();
            if (add) {
                if (classname === '') {
                    return state.set('classname', Immutable.Set.of(classname));
                } else {
                    return state.set('classname', classnameList.delete('').add(classname));
                }
            } else {
                return state.set('classname', classnameList.delete(classname));
            }
        }
        case OP_SET_SEARCH_TEXT:
            return state.set('query', action.payload);
        case OP_UPDATE_SETTINGS:
            return Immutable.fromJS(action.payload);
        case OP_TOGGLE_OBSOLETE:
            return state.set('obsolete', action.payload ? 1 : 0);
        case OP_RESET_OFFSET:
            return state.set('page', 0);
        case OP_SET_FILTER_DATE:
            return state.set('df', action.payload);
        case OP_SET_SORT_DATE:
            return state.set('sortDate', action.payload ? 1 : 0);
        default:
            return state;
    }
}

export default combineReducers({
    result, fetchingById, settings
});
