/*
 * Copyright (C) 2016 CONTACT Software GmbH All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchResultSection.jsx 158306 2017-05-08 08:29:40Z gwe $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';
import {Row, Col as Colu} from 'react-bootstrap';
import {formatStr} from '../i18n';
import {prefixNS} from '../helpers.js';
import SearchResultFacets from './SearchResultFacets';
import SearchFilterObsolete from './SearchFilterObsolete';
import SearchFilterDate from './SearchFilterDate';
import SearchFilterSort from './SearchFilterSort';
import SearchResultList from './SearchResultList';

export default class SearchResultSection extends React.Component {
    renderFacetInfo() {
        const {searchResult, searchError, isFetching} = this.props;
        const facetInfo = searchResult.get('facetInfo');
        if (searchError !== null) {
            return null;
        }
        if (facetInfo !== undefined && facetInfo.count() > 0) {
            return (
                <div className={prefixNS('filter-panel')}>
                    <SearchResultFacets
                        facetInfo={facetInfo}
                        isFetching={isFetching} />
                    <SearchFilterObsolete isFetching={isFetching} />
                    <SearchFilterDate filters={[{name: formatStr("all"), value: ""},
                                                {name: formatStr("7days"), value: "7"},
                                                {name: formatStr("4weeks"), value: "28"},
                                                {name: formatStr("3months"), value: "3M"},
                                                {name: formatStr("12months"), value: "12M"},
                                                {name: formatStr("3years"), value: "3Y"}]}
                                      isFetching={isFetching} />
                    <SearchFilterSort isFetching={isFetching} />
                </div>
            );
        }
        else {
            return null;
        }
    }

    renderResult() {
        const {searchResult, searchText} = this.props;
        const {isFetching, searchError} = this.props;
        const result = searchResult.get('result');
        if (searchText === '') {
            return (
                <p className="no_search_results">
                    {formatStr("no_searchtext")}
                </p>
            );
        }
        if (searchError !== null) {
            return (<SearchError error={searchError} />);
        }
        else if (result === undefined || result.count() === 0) {
            if (isFetching) {
                return null;
            }
            else {
                return (
                    <p className="no_search_results">
                        {formatStr("no_search_results", [searchText])}
                    </p>
                );
            }
        }
        else {
            return (
                <SearchResultList resultList={result} isFetching={isFetching} />
            );
        }
    }

    render() {
        return (
            <Row>
                <Colu sm={3} className="">
                    {this.renderFacetInfo()}
                </Colu>
                <Colu sm={9} xs={12}>
                    {this.renderResult()}
                </Colu>
            </Row>
        );
    }
}

SearchResultSection.propTypes = {
    searchResult: PropTypes.object.isRequired,
    isFetching: PropTypes.bool.isRequired,
    searchError: PropTypes.object,
    searchText: PropTypes.string
};

SearchResultSection.defaultProps = {
    searchResult: null,
    isFetching: false,
    searchText: ""
};

class SearchError extends React.Component {
    render() {
        const {responseText, responseJSON} = this.props.error;
        const errMsg = (responseJSON !== undefined) ? responseJSON : responseText;
        return (
            <p className="search-error">
                {formatStr("search_error", [errMsg]).replace(/\\n/g, "\n")}
            </p>
        );
    }
}
SearchError.propTypes = {
    error: PropTypes.object.isRequired
};
