/*
 * Copyright (C) 2016 CONTACT Software GmbH All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: Content.jsx 164371 2017-09-01 12:01:39Z mbr $"
 */

import React from 'react';
import SearchBox from './SearchBox';
import SearchResultSection from './SearchResultSection';
import {Grid} from 'react-bootstrap';
import {connect, PropTypes} from 'cs-web-components-externals';
import {parseQuery} from 'cs-web-components-base';
import {doSearch, doSearchHistoryReplace,
        updateSettings, setSearchText} from '../actions/actions.js';
import {parseQueryParams, compareRelevantSearchSettings} from '../helpers';
import Immutable from 'immutable';

export class Content extends React.Component {
    componentDidMount() {
        const query = parseQuery(this.props.location);
        const searchText = query.searchtext;
        const settings = parseQueryParams(query);
        if (settings) {
            this.props.updateSettings(settings);
        }
        if (searchText !== undefined && searchText !== '') {
            this.props.setSearchText(searchText);
            this.props.doSearchHistoryReplace();
        }
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.location.state && nextProps.location.state.hist) {
            const query = parseQuery(nextProps.location);
            const nextSearchSettings = Immutable.Map(parseQueryParams(query));
            if (!nextProps.isFetching &&
                compareRelevantSearchSettings(nextProps.searchSettings, nextSearchSettings)) {
                this.props.updateSettings(nextSearchSettings);
                this.props.doSearchHistoryReplace();
            }
        }
    }

    renderSearchResultSection() {
        const {searchResult, isFetching, searchError} = this.props;
        const searchText = searchResult.getIn(['settings', 'query']);
        if (searchResult.size !== 0 || searchError !== null) {
            return (<SearchResultSection searchResult={searchResult}
                                         isFetching={isFetching}
                                         searchError={searchError}
                                         searchText={searchText}/>);
        }
        return null;
    }

    render() {
        const {isFetching} = this.props;
        return (
            <Grid className="page-content" fluid>
                <SearchBox isFetching={isFetching}/>
                {this.renderSearchResultSection()}
            </Grid>
        );
    }
}

Content.propTypes = {
    location: PropTypes.object,
    doSearch: PropTypes.func,
    doSearchHistoryReplace: PropTypes.func,
    updateSettings: PropTypes.func,
    setSearchText: PropTypes.func,
    searchResult: PropTypes.instanceOf(Immutable.Map),
    searchError: PropTypes.object,
    isFetching: PropTypes.bool.isRequired,
    searchSettings: PropTypes.instanceOf(Immutable.Map),
};

Content.defaultProps = {
    searchResult: Immutable.Map(),
    searchError: null,
    isFetching: false
};

function mapStateToProps(state) {
    return {
        searchResult: state.search.result.get('searchResult'),
        searchError: state.search.result.get('searchError'),
        isFetching: state.search.fetchingById.size > 0,
        searchSettings: state.search.settings
    };
}

const actions = {doSearch, doSearchHistoryReplace, updateSettings, setSearchText};

export default connect(mapStateToProps, actions)(Content);
