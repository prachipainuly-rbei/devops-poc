/*
 * Copyright (C) 2016 CONTACT Software GmbH All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: SearchBox.jsx 174212 2018-03-08 10:50:39Z vov $"
 */

import React from 'react';
import {Row, Col} from 'react-bootstrap';
import {PropTypes, connect} from 'cs-web-components-externals';
import {
    SearchField, getAppSetup, WithSpeechRecognition, Button, i18ndb
} from 'cs-web-components-base';
import {doSearch, setSearchText} from '../actions/actions.js';
import Spinner from './Spinner.jsx';
import {prefixNS} from '../helpers.js';

const title = getAppSetup().getIn(['appSettings', 'title']);

class SearchBox extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            speechActive: false
        };
        this.doSearch = this.doSearch.bind(this);
        this.requestSearch = this.requestSearch.bind(this);
        this.toggleSpeechActive = this.toggleSpeechActive.bind(this);
        this.speechRecognized = this.speechRecognized.bind(this);
    }

    doSearch(searchText) {
        this.props.setSearchText(searchText.trim());
        this.props.doSearch();
    }

    requestSearch(event) {
        this.searchField.onSearchRequested(event);
    }

    toggleSpeechActive() {
        this.setState(prevState => ({speechActive: !prevState.speechActive}));
    }

    speechRecognized(text) {
        this.props.setSearchText(text);
        this.searchField.search(text);
        this.setState({speechActive: false});
    }

    getButtons(speechAvailable, speechActive) {
        const searchButton = (
            <Button.IconButton
                key='search'
                size="sm"
                title={title}
                onClick={this.requestSearch}
                iconName='csweb_search_icon_svg'
                buttonStyle="primary" />
        );
        if (!speechAvailable) {
            return searchButton;
        }
        const speechButton = (
            <Button.IconButton
                key='speech'
                size="sm"
                title={i18ndb.formatString('speech', 'base')}
                onClick={this.toggleSpeechActive}
                iconName={speechActive ? 'csweb_microphone' : 'csweb_microphone_off'} />
        );
        return [speechButton, searchButton];
    }

    render() {
        const {searchText, isFetching} = this.props;
        const {speechActive} = this.state;
        return (
            <Row>
                <Col xs={9} smOffset={3}>
                    <div className={`${prefixNS('search-box')} center-block`}>
                        <WithSpeechRecognition
                                allowSpeech={speechActive}
                                onTextRecognized={this.speechRecognized}>
                            {({speechAvailable, finalTranscript}) => (
                                <SearchField
                                    ref={node => this.searchField = node}
                                    className='elements-formcontrol-grid'
                                    isFetching={isFetching}
                                    searchCallback={this.doSearch}
                                    productName={title}
                                    searchText={speechActive ? finalTranscript : searchText}
                                    afterControl={this.getButtons(speechAvailable, speechActive)}
                                />
                            )}
                        </WithSpeechRecognition>
                        <Spinner left="100%" isFetching={isFetching}/>
                    </div>
                </Col>
            </Row>
        );
    }
}

SearchBox.propTypes = {
    doSearch: PropTypes.func.isRequired,
    setSearchText: PropTypes.func.isRequired,
    searchText: PropTypes.string,
    isFetching: PropTypes.bool.isRequired,
};

function mapStateToProps(state) {
    const searchText = state.search.settings.get('query');
    return {
        searchText: searchText
    };
}

const actions = {doSearch, setSearchText};
export default connect(mapStateToProps, actions)(SearchBox);
