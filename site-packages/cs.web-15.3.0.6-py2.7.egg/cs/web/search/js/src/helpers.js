/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: helpers.js 170792 2017-12-22 10:00:07Z mbr $"
 */

import {getAppSetup} from 'cs-web-components-base';
import {qs} from 'cs-web-components-externals';
import Immutable from 'immutable';

export function prefixNS(name) {
    return `${componentNameSpace}-${name}`;
}

export function getQueryParams(searchText,
                               settings = undefined,
                               withSession = false,
                               resetOffset = false) {
    const result = {
        searchtext: searchText
    };
    if (settings !== undefined) {
        if (settings.get('classname') !== undefined) {
            result.classname = settings.get('classname').join(',');
        }
        if (!resetOffset && settings.get('page') !== undefined) {
            result.page = settings.get('page');
        }
        if (settings.get('r') !== undefined && withSession) {
            result.r = settings.get('r');
        }
        if (settings.get('obsolete') !== undefined) {
            result.obsolete = settings.get('obsolete');
        }
        if (settings.get('sortDate') !== undefined) {
            result.sortDate = settings.get('sortDate');
        }
        if (settings.get('df') !== undefined) {
            result.df = settings.get('df');
        }
    }
    return result;
}

export function parseQueryParams(query) {
    const result = {};
    if (query.searchtext !== undefined && query.searchtext !== null) {
        result.query = query.searchtext;
    }

    if (query.classname !== undefined) {
        result.classname = query.classname.split(',');
    }
    // re-search, reset page offset
    // result.page = query.page;
    result.r = query.r;
    result.obsolete = query.obsolete;
    result.sortDate = query.sortDate;
    result.df = query.df;
    return result;
}

export function getDisplayURL(searchText, basePath, settings) {
    const params = {
        searchtext: searchText
    };
    if (settings !== undefined) {
        if (settings.get('classname') !== undefined) {
            params.classname = settings.get('classname').join(",");
        }
        if (settings.get('obsolete') !== undefined) {
            params.obsolete = settings.get('obsolete');
        }
        if (settings.get('sortDate') !== undefined) {
            params.sortDate = settings.get('sortDate');
        }
        if (settings.get('df') !== undefined) {
            params.df = settings.get('df');
        }
    }

    const url = getAppSetup().getIn(
            ['links', componentNameSpace, 'fulltext_search_route']);
    const paramString = qs.stringify(params).replace(/\+/g, '%20');
    return basePath + '/' + url + '?' + paramString;
}

function parameterIntCompare(parameterA, parameterB) {
    let a = parameterA === "0" ? 0 : parameterA;
    a = parameterA === "1" ? 1 : a;
    let b = parameterB === "0" ? 0 : parameterB;
    b = parameterB === "1" ? 1 : b;
    return (a === undefined && b === 0)
        || (b === undefined && a === 0)
        || (a === undefined && b === undefined)
        || (a === b);
}

function parameterStringCompare(a, b) {
    return (a === undefined && b === "")
        || (b === undefined && a === "")
        || (b === undefined && a === undefined)
        || (a.trim() === b.trim());
}

function parameterClassnamesCompare(a, b) {
    return (a === undefined && Immutable.is(b, Immutable.List([""])))
        || (b === undefined && Immutable.is(a, Immutable.List([""])))
        || (b === undefined && a === undefined)
        || Immutable.is(Immutable.List(a), Immutable.List(b));
}

export function compareRelevantSearchSettings(searchSettings, nextSearchSettings) {
    return !parameterStringCompare(searchSettings.get('df'), nextSearchSettings.get('df'))
        || !parameterStringCompare(searchSettings.get('query'), nextSearchSettings.get('query'))
        || !parameterIntCompare(searchSettings.get('sortDate'), nextSearchSettings.get('sortDate'))
        || !parameterIntCompare(searchSettings.get('obsolete'), nextSearchSettings.get('obsolete'))
        || !parameterClassnamesCompare(searchSettings.get('classname'),
                                       nextSearchSettings.get('classname'));
}
