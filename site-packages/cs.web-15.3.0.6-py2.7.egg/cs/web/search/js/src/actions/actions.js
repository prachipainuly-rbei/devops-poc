/*
 * Copyright (C) 2016 CONTACT Software GmbH All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: actions.js 170792 2017-12-22 10:00:07Z mbr $"
 */

import {qs} from 'cs-web-components-externals';
import {getQueryParams, getDisplayURL, prefixNS} from '../helpers';
import {getJSON, getAppSetup} from 'cs-web-components-base';
import {browserHistory} from 'cs-web-components-externals';

export const FULL_TEXT_SEARCH_RESULT = prefixNS('FULL_TEXT_SEARCH_RESULT');
export const FULL_TEXT_SEARCH_APPEND_RESULT = prefixNS('FULL_TEXT_SEARCH_APPEND_RESULT');
export const SEARCH_FAILED = prefixNS('SEARCH_FAILED');
export const IS_FETCHING = prefixNS('IS_FETCHING');

//Settings related
export const OP_SET_FACET = prefixNS('OP_SET_FACET');
export const OP_SET_SEARCH_TEXT = prefixNS('OP_SET_SEARCH_TEXT');
export const OP_UPDATE_SETTINGS = prefixNS('OP_UPDATE_SETTINGS');
export const OP_TOGGLE_OBSOLETE = prefixNS('OP_TOGGLE_OBSOLETE');
export const OP_SET_FILTER_DATE = prefixNS('OP_SET_FILTER_DATE');
export const OP_SET_SORT_DATE = prefixNS('OP_SET_SORT_DATE');
export const OP_RESET_OFFSET = prefixNS('OP_RESET_OFFSET');

const basePath = getAppSetup().getIn(['appSettings', 'basePath']);

function getSearchLink(name) {
    return getAppSetup().getIn(['links', componentNameSpace, name]);
}

export function fetching(url) {
    return {
        type: IS_FETCHING,
        meta: {url: url}
    };
}

export function setFacet(classname, add) {
    return (dispatch) => {
        dispatch({
            type: OP_SET_FACET,
            payload: {
                classname: classname,
                add: add
            }
        });
    };
}

export function resetOffset() {
    return {
        type: OP_RESET_OFFSET,
        payload: null
    };
}

export function setSearchText(searchText) {
    return (dispatch) => {
        dispatch({
            type: OP_SET_SEARCH_TEXT,
            payload: searchText
        });
    };
}

export function updateSettings(settings) {
    return {
        type: OP_UPDATE_SETTINGS,
        payload: settings
    };
}

export function toggleObsolete(withObsolete) {
    return (dispatch) => {
        dispatch({
            type: OP_TOGGLE_OBSOLETE,
            payload: withObsolete
        });
        dispatch(resetOffset());
    };
}

export function setFilterDate(date_filter) {
    return (dispatch) => {
        dispatch({
            type: OP_SET_FILTER_DATE,
            payload: date_filter
        });
        dispatch(resetOffset());
    };
}

export function setSortDate(byDate) {
    return (dispatch) => {
        dispatch({
            type: OP_SET_SORT_DATE,
            payload: byDate
        });
        dispatch(resetOffset());
    };
}

export function doSearch(withSession = false,
                         resetOffset = false,
                         searchType = FULL_TEXT_SEARCH_RESULT,
                         replaceHistory = false) {
    return (dispatch, getState) => {
        const settings = getState().search.settings;
        const searchText = settings.get('query');
        const queryParams = getQueryParams(searchText, settings, withSession, resetOffset);
        const displayURL = getDisplayURL(searchText, basePath, settings);
        const searchURL = getSearchLink('fulltext_search_api') +
            '?' + qs.stringify(queryParams);
        if (getState().search.fetchingById.has(searchURL)) {
            // Don't fetch again while a request is in progress
            return null;
        }
        dispatch(fetching(searchURL));
        if (replaceHistory) {
            browserHistory.replace(displayURL, {hist: true});
        } else {
            browserHistory.push(displayURL, {hist: true});
        }
        return getJSON(searchURL).then(
            data => {
                dispatch({
                    type: searchType,
                    payload: data.result,
                    meta: {url: searchURL}
                });
                dispatch(updateSettings(data.result.settings));
            },
            err => {
                dispatch({
                    type: SEARCH_FAILED,
                    err: {
                        status: err.status,
                        statusText: err.statusText,
                        responseText: err.responseText,
                        responseJSON: err.responseJSON
                    },
                    meta: {url: searchURL}
                });
            }
        );
    };
}

export function doSearchHistoryReplace() {
    return doSearch(false, false, FULL_TEXT_SEARCH_RESULT, true);
}

export function fetchNextSearchResult() {
    return doSearch(true, false, FULL_TEXT_SEARCH_APPEND_RESULT, true);
}
