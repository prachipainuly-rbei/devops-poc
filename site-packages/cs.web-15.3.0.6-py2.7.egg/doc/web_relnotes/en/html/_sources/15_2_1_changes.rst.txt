.. _`csweb_release_notes_15_2_1`:

Release Notes for 15.2.1
########################

Operation Frontend API changes
==============================

Redux Action ``startOperation``
-------------------------------

Due to the introduction of OperationHandler Extensions the redux
action ``startOperation`` defined in ``cs-web-components-base`` has a
new signature:

.. code-block:: javascript

   startOperation(
       instanceName,
       operationInfo,
       operationParameters,
       extensionParameters,
       submitHandler
   )

If you call this API directly and pass a submit handler definition,
make sure you update your calls accordingly by passing an empty object
for the fourth parameter.


``OperationTrigger``: ``handlerName`` evaluation
------------------------------------------------

In cs.web 15.2.0 the startOperation call evaluated the provided
``handlerName`` property only if no handler was set by the Web-UI
operation definition. This was changed: this property -- if set -- now
overrides the ``handlerName`` provided by the backend.


Changes in Frontend Components
==============================

RelatedObjects
--------------

The ``RelatedObjects`` component now actively fetches the data it requires from
the backend. This allows for more flexible page configurations, but also requires
at least Elements Version 15.2 SL 26.

Attributes
----------

The ``Attributes`` component has been changed to retrieve its configuration from
a DisplayContext named ``attributes``. Formerly, the component could only be used
on an ObjectPage for the main object, or a ClassPage beside the search result.
Now, the only requirement for the component is that it has to be provided with a
``contextObject`` property. For each class this component is used for, a form must
be configured in the DisplayContext for that class.

New SVG Icons
=============

The PNG icons are replaced by vector-based SVG icons in this version. The
new SVG icons are rebranded and redesigned. And the SVG icons can be scaled up
without looking pixelated.

Migrating to the web
--------------------

The PNG icons are still in use in the PC client, therefore it is important
to create corresponding SVG icons when a customized application is migrated
to the web frontend. Otherwise in certain components the icons may be
rendered inappropriately.

The Elements icon library under
cs.designsystem/cs/designsystem/resources/icon/svg provides an essential list
of icon candidates. Free vector graphic editor such as Inkscape, Vectr can
be used to modify and create new icons.

Give the SVG icon the same name as the PNG icon, if the PNG icons are still
in use in the PC client. The SVG icons will overwrite the PNG icons in the
web.

Internationalization
====================

The previous mechanism for internationalization used JSON files (typically named
:file:`messages.json`) to store labels available to the |elements| Web UI. These
files are no longer supported, see the Web UI Development book for details.

Build tool updates
==================

NPM replaced by yarn
--------------------

``npm`` was replaced by ``yarn`` due to build and performance issues. Yarn
accepts mostly the same arguments as npm and can be used as a drop-in
replacement. The node_modules which yarn produces are equivalent to those
created by npm.

node_modules dependency management
----------------------------------

The base dependencies used by all web enabled packages, e.g. webpack, babel,
etc, are now retrieved from the node_modules in the instance directory. These
are installed and updated by the new command ``webmake devupdate``. See
:ref:`web_ui_make_build_process` for further information.

Webpack config
--------------

Before this update, each CDB package contained a
:file:`webpack.common.config.js` which was referenced by the
:file:`webpack.config.js` files in the web app bundles. Across the packages,
these files werde almost identical, which led to the following change. There
is only one :file:`webpack.common.config.js` contained in ``cs.web``. This
file can be referenced by a :file:`webpack.config.js` file using

  .. code:: js

    const configModule = require(process.env.WEBPACK_CONFIG_COMMON);

The environment variable :envvar:`WEBPACK_CONFIG_COMMON` is set by webmake to
point to the ``cs.web`` config.

An example configuration can be found in the directory
:file:`templates/app/base_impl/js/` in ``cs.web``,
called :file:`webpack.config.js.template`.

apps.json
---------

This file is now a list of relative paths to the apps. There are no IDs
or componentNameSpaces defined anymore. The namespace of an app is defined
in a file called :file:`namespace.json` next to the :file:`webpack.config.js`
inside an app directory.

You can use ``webmake create`` to create a new app and check out how the layout
of the app is meant to be structured.

New version of React-Router for Frontend Routing
================================================

The 3rd party library ``react-router`` gets updated from version 3.x to 4.x. There are some
breaking changes in the new version, therefore the frontend routing using ``react-router``
must be migrated.

For instance, the usage of ``Router`` component can be changed from

.. code-block:: javascript

        // in cs.web 15.2.0
        import {Router, Route, IndexRoute, browserHistory} from 'cs-web-components-externals';

        const MyRouter = (
            <Router history={browserHistory}>
                <Route path={basePath} component={FrameComponent}>
                    <IndexRoute component={PageContent}/>
                    <Route path="**" component={NoRouteError}/>
                </Route>
                <Route path="**" component={NoRouteError}/>
            </Router>
       );

to

.. code-block:: javascript

        // in cs.web 15.2.1
        import {ReactRouter, browserHistory} from 'cs-web-components-externals';

        const MyRouter = (
            <FrameComponent>
                <ReactRouter.Router history={browserHistory}>
                    <ReactRouter.Switch>
                        <ReactRouter.Route path={basePath} component={PageContent} />
                        <ReactRouter.Route component={NoRouteError} />
                    </ReactRouter.Switch>
                </ReactRouter.Router>
            </FrameComponent>
       );

The ``location`` prop passed by ``Router`` component now has no ``query`` object anymore. The usage
should be changed from

    .. code-block:: javascript

        // in cs.web 15.2.0
        const searchText = this.props.location.query.searchtext;

to

    .. code-block:: javascript

        // in cs.web 15.2.1
        import {parseQuery} from 'cs-web-components-base';

        ...
        const searchText = parseQuery(this.props.location).searchtext;

For more details please look at the standard components using routing in ``cs-web-components-base``, or
read the official migration guide
`Migrating from v2/v3 to v4 <https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/migrating.md>`_.

Licensing Change
================

Due to a mistake in the license feature allocation, users of the dashboard must
install new license files.
