
Examples
########

Since your web application contains an operation scope and two
operation handlers by default, the simplest case to execute an
operation in your page is to simply render an operation trigger,
e.g. a button that will call startOperation in its ``onClick``-handler.

Simply Triggering an Operation
==============================

.. code-block:: none

   import ImmutablePropTypes from 'cs-web-components-externals';
   import React from 'react';
   import {Alert} from 'react-bootstrap';
   import {WithOperationTrigger} from 'cs-web-components-base';

   const OperationButton = WithOperationTrigger(
      () => {
          const operation = props.operations.get(0);
          if (operation === undefined) {
             return (<Alert>Operation undefined.</Alert>);
          }
          return (
              <Button onClick={() => props.startOperation(
                                  operation,
                                  {object: props.contextObject})}>
                  {"Edit object"}
              </Button>
          );
      }
   );

   OperationButton.propTypes = {
      contextObject: React.PropTypes.object,
      operations: ImmutablePropTypes.map
   }

The button-component defined above may be instantiated with an operation,
e.g., provided by
:ref:`cs-web-components-base-components.WithOperations.__module__`
and a ``contextObject``, on which the operation is executed.

.. code-block:: none

   class MyComponent extends React.Component {
       constructor(props) {
          super(props);
          this.OperationButton = WithOperations(
             OperationButton,
             {operationNames: ['CDB_Modify']}
          );
       }

       render() {
           return (
               <this.OperationButton
                   contextObject={this.props.contextObject} />
           );
       }
   }
