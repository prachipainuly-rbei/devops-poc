.. _`web_ui_branding`:

Branding and Styling
####################

All styles are compiled into one global CSS stylesheet, by default, using
SCSS style definitions. Most style definitions in this sheet can be overridden
by application packages, which are listed in the package's ``apps.json``
file.

Overriding styles
-----------------

To override styles, copy the file ``variables.scss`` from
``cs.web\templates\styles`` into your web application's root directory, ``src``.
Uncomment any variables you wish to override and set the values as desired.

To apply the customization, run ``webmake -I instance styles``. In a buildout
environment, run ``instance\bin\webmake styles``.

Customizing Fonts
-----------------

To inline custom fonts or vector icons in your web application you can specify
them as usual in a ``@font-face`` attribute in one of your ``.scss`` files.

  .. code-block:: none

    @font-face {
      font-family: 'cs.fontexample';
      src: url('fonts/fontexample.eot');
      src: url('fonts/fontexample.eot?#iefix') format('embedded-opentype'),
      url('fonts/fontexample.woff') format('woff'),
      url('fonts/fontexample.ttf') format('truetype'),
      url('fonts/fontexample.svg') format('svg');
    }

Make sure you import the ``.scss`` file into your web application entry e.g. ``/src/index.js``.

.. note::
  Your webpack.config has to define ``url-loader`` for all of the formats you want to inline.

Webpack will generate a ``<componentNameSpace>.css`` and ``<componentNameSpace>.css.map`` file.
You need to hook these files into the cs.web library registry. Afterwards, in your
``APPLICATIONS_LOADED_HOOK`` signal handler, add the new library, where you add the generated
files mentioned above.

  .. code-block:: python

    w3_lib = static.Library("cs-web-fonts-example", "0.0.1", build_path)
    w3_lib.add_file("<componentNameSpace>.css")
    w3_lib.add_file("<componentNameSpace>.css.map")
    static.Registry().add(w3_lib)

For your configurable UI you can include the new library into your ``.json`` files and use your
new fonts. Alternatively load them globally by adding the library into your connect
of the ``GLOBAL_CUSTOMIZATION_HOOK``.

.. code-block:: python

  @sig.connect(GLOBAL_CUSTOMIZATION_HOOK)
  def _get_page(request):
      request.app.include("cs-web-fonts-example", "0.0.1")

Image URLs
----------

If you want to include image files in your components and reference them using
URLs, then you cannot use URLs relative to your SCSS files. These URLs must
be resolvable using paths supplied by the server. The common way is to declare
an image file as an icon in the server configuration. Afterwards, you can
use the URL ``/resources/icons/byname/IDENTIFIER``, with ``IDENTIFIER`` being
the icon identifier you just configured in the icon definition.
