.. _`web_ui_technical`:

Web UI technical background
###########################

The technical foundation for the frontend (browser) of the |elements| Web UI
are the JavaScript frameworks React_ and Redux_. React is used to implement
the visual parts of the UI, while Redux provides a framework to store the
frontend application state, and to orchestrate the flow of data and events
through the application.

The backend (server) logic is implemented in Python using the
`Morepath <http://morepath.readthedocs.org>`_ framework.

Rendering an application
************************

When a |elements| URL is accessed through a web browser, a Morepath application
in the backend is triggered. This Morepath application is responsible for the
generation of the HTML page that is returned to the browser.

The HTML page in turn contains `<script>` tags for the JavaScript libraries to
be included in the page. For the description below, it is assumed that the library
:samp:`cs-web-components-base` is included.

Disable cache in development scenarios
**************************************
Due to performance goals every js and css file gets cached by the browser or
the web server's cache module. To avoid caching problems when delivering new
software releases, each js and css file contains a checksum as part of its
filename. These hash-extended filenames are only determined on server
startup. However, in development scenarios the hashed filenames are changing
every time the code changes. To avoid the need of restarting the server processes
on every code change you need to set the variable :envvar:`CADDOK_ELINK_DEBUG` located in
:file:`site.conf` to ``TRUE``. This forces the web server to look up the hashed filename
on every request. Setting this variable to TRUE is required in development
scenarios, but should never be activated in production mode, as it will
lead to decreased performance!

.. _`web_ui_frontend_registry`:

Frontend Registry
*****************

Due to the highly configurable and extendable nature of |elements|, the Web UI
has no complete information about the available components, and the data elements
these components may need. Therefore, the Web UI provides a registry, where the
libraries loaded into the browser register their content. A frontend application
is configured through the backend, and uses the registry to look up names from
the configuration at runtime. See :ref:`web_ui_dev_naming` for guidelines for
the names.

In each application, a Singleton registry object is created. This registry
basically is a simple key / value store, divided into two areas:

Component registry
==================

The component registry allows libraries to assign a name to React components.
Using these names, the backend can describe a frontend application as a tree
of components, and properties for these components.

Components are registered as follows, where the value of `componentNameSpace`
is inserted by the webpack configuration:

.. code-block:: javascript

   import { Registry } from 'cs-web-components-base';
   import MyComponent from './MyComponent.jsx';
   Registry.registerComponent(`${componentNameSpace}-MyComponent`, MyComponent);

Reducer registry
================

Redux_ holds the complete application state in a single ``store`` instance.
This store is subdivided into a set of named parts. For each part, there
exists a so-called "reducer function" (or simply "reducer"), that takes the
current state and an action object that describes a state change, and returns
a new state.

The Web UI provides several reducers, e.g. to manage the objects loaded through
the |restapi|. In addition, each library may have its own reducers for specific
components (e.g. a tree component needs to store the expanded state of its nodes).
Either a single reducer can be registered:

.. code-block:: javascript

   import { Registry } from 'cs-web-components-base';
   import { myReducer } from './reducers/reducers.js';
   Registry.registerReducer(`${componentNameSpace}-myReducer`, myReducer);

or an object with several reducers can be registered in one call:

.. code-block:: javascript

   import { Registry } from 'cs-web-components-base';
   import { myReducer1, myReducer2 } from './reducers/reducers.js';
   Registry.registerReducers({myReducer1, myReducer2});

At application startup, all registered reducers are collected from the registry,
and are combined to form the application store. The names under which the reducers
are registered form the keys of the Redux store.

Immutable objects
*****************

All objects in the store are Immutable_ objects. This allows the efficient
identification of changes, only shallow compares for object identity are needed.
The components work with the Immutable structures, a conversion (via .toJS) is
only done where absolutely necessary. Besides preventing easy change detection,
such a conversion leads to the construction of many JavaScript objects, which
can degrade performance.

Styling
*******

In order to define consistent styles and make the writing of css rules easier, the Sass_
language can be used. It allows the developers for example to use globally defined variables
and mixins to build a style sheet, or to write nested style rules avoiding annoying repeating
of prefixes or namespaces.

Each web application has two entry points:

- ``src/styles.scss`` for style definitions and
- ``src/variables.scss`` for variables that will be used globally in all .scss files of
  the application

When styles are modified, the command ``webmake styles`` must be used to compile the styles
defined by all web applications into a global css file, which will be created in your instance
folder. This .css file will be shipped by all web applications that extend BaseApp.

The compiler will include a special scss variable
``componentNameSpace`` in your application, which should be used to
namespace all styles defined for your application. This variable is defined
in the ``namespace.json`` entry for your web application (c.f. :ref:`web_ui_make_build_apps_json`).
It has the same value as the variable ``componentNameSpace``, defined in the
``webpack.config.js`` file of your web application. For applications created using
``webmake create`` (c.f. :ref:`web_ui_age_create`), this is equal to the python module name
of your application with dots replaced by dashes, i.e. if your application is defined in
``my.application``, the corresponding componentNameSpace is ``my-application``.

Usually each component will define its own styles in an own file. To do that, firstly create an
.scss file to write the style rules, for example:

.. code-block:: none

   /* my-component.scss */
   /* nested under a root class for a component */
   .#{$componentNameSpace}-my-component {
      .my-container {
          margin: 5px;
      }

      .my-label {
          padding-left: 10px;
      }
   }

Next your applications scss entry point ``styles.scss`` needs to include the newly created file.
If ``src/styles.scss`` does not exist, simply create the file. Append the following line to it:

.. code-block:: none

   @import "./my-component";

Now you need to recompile the global style file, by running ``webmake styles``.  The
``global-styles.css`` file in your instance folder should now contain the following
lines of code:

.. code-block:: css

   .my-application-my-component .my-container {
          margin: 5px;
   }

   .my-application-my-component .my-label {
          padding-left: 10px;
   }


3rd party JavaScript libraries
******************************

* `Bootstrap`_
* `Immutable`_
* `React`_
* `React-Bootstrap`_
* `React Router`_
* `Redux`_
* `React Redux`_
* `Redux Thunk`_
* `react-router-redux`_

Development toolchain
*********************

To build a JavaScript library from source, we use a set of tools that are based
on Node_ and npm_:

* npm_ together with :file:`package.json` files for the management of dependencies
  to 3rd party libraries.

* Babel_ to translate ES 2015 and :term:`JSX` to JavaScript that is understood
  by the browser

* webpack_ uses configuration files (named :file:`webpack.config.js`
  by default) to describe the content of a library, and the steps
  necessary to build it. The ``cs.web`` application package
  provides a :file:`webpack.common.config.js` in its root directory,
  which is extended by the web applications to implement their own
  :file:`webpack.config.js`.

.. _`Node`: https://nodejs.org/
.. _`npm`: https://www.npmjs.com/
.. _`webpack`: http://webpack.github.io/
.. _`Babel`: https://babeljs.io/
.. _`Sass`: http://sass-lang.com/

.. _`Bootstrap`: http://getbootstrap.com/
.. _`Immutable`: https://facebook.github.io/immutable-js/
.. _`React`: http://facebook.github.io/react/index.html
.. _`React-Bootstrap`: http://react-bootstrap.github.io/
.. _`React Router`: https://github.com/reactjs/react-router
.. _`Redux`: http://redux.js.org/
.. _`React Redux`: https://github.com/reactjs/react-redux
.. _`Redux Thunk`: https://github.com/gaearon/redux-thunk
.. _`react-router-redux`: https://github.com/reactjs/react-router-redux
