.. _`web_ui_dashboard`:

The Dashboard
#############

The |elements| Web UI provides a dashboard application, that allows users to
build their own customized starting page for |elements|. The dashboard application
itself implements the framework for displaying and customizing dashboards. The
widgets shown on the dashboard are for the most part distributed with specific
application packages. The dashboard application provides the mechanisms needed
to inject these widgets into the generic framework.

Dashboard:
   A specific configuration of dashboard layout and dashboard elements.

Widget:
   A blueprint for dashboard elements, implements the logic for displaying some
   content.

Dashboard Element:
   A widget instance that is rendered on a dashboard.

Design
******

The dashboard is a starting point for the |elements| products. It can be used to 
get an overview, execute minor tasks, and launch into workflows. 
Widgets should serve one or more of these three use cases, and do little else beyond that.

Overview:
    The user wants to quickly get relevant information from diverse contexts

Launch:
    The user wants to quickly jump to specific views, applications or objects

Execute:
    The user wants to carry out simple actions

A few design rules should be observed for widgets in order to maintain a homogeneous 
user experience and application character.

* Focus on a limited set of user stories and solve for them (see above)
* Provide concise information
* No horizontal scrolling
* Avoid menus, modals, toolbars


Configuration
*************
.. _`HELPID_csweb_dashboard_widget`:

The configuration for dashboard widgets consists of the following attributes:

* :guilabel:`ID`: The unique ID for the widget.
* :guilabel:`Name`: A name that is shown to the user of the dashboard.
* :guilabel:`Description`: A short description of the widget.
* :guilabel:`React Component`: The React component implementating the component.
  This attribute is looked up in the :ref:`web_ui_frontend_registry`.
* :guilabel:`Library`, :guilabel:`Version`: An optional JavaScript library that
  contains the widget implementation.

Implementation
**************

Widget implementations are React components. They receive the data to be rendered
as React properties, and use the API provided by the `cs-web-dashboard` library.
For details, see the API reference and the widget template given below.

API reference
=============

- :ref:`cs-web-dashboard-DashboardItem.DashboardItem`
- :ref:`cs-web-dashboard-actions.__module__`

A template for widget implementations
=====================================

.. code-block:: none

   import React from 'react';
   import {connect, ImmutablePropTypes} from 'cs-web-components-externals';
   import Dashboard from 'cs-web-dashboard';

   /*
    * A template for a dashboard widget. Use this as a blueprint for implementing
    * new dashboard widgets.
    */
   class TemplateWidget extends React.Component {
       constructor(props) {
           super(props);
           this.onConfigure = this.onConfigure.bind(this);
       }

       onConfigure() {
           // Show configuration UI, must call `setSettings` to store changed
           // configuration data.
       }

       render() {
           return (
               <Dashboard.DashboardItem
                       item={this.props.item}
                       title='Insert title here'
                       configCallback={this.onConfigure}>
                   <YourContentHere />
               </Dashboard.DashboardItem>
           );
       }
   }
   TemplateWidget.propTypes = {
       item: ImmutablePropTypes.map.isRequired,
       columnWidth: React.PropTypes.oneOf(['small', 'medium']).isRequired,
       setSettings: React.PropTypes.func.isRequired
   };

   const actions = {
       setSettings: Dashboard.setSettings
   };
   export default connect(undefined, actions)(TemplateWidget);
