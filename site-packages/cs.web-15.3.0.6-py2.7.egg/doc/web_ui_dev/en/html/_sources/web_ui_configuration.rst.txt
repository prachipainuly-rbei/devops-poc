.. _`web_ui_configuration`:

Configuring Web Applications
############################

Different applications using the Web UI will use many of the same components.
Therefore, configuration in this context refers to a means of describing the
components and their relationship, that make up an application. Developers
should be able to accomplish that without writing additional JavaScript or
:term:`JSX` code.

Additionally, when no suitable component for a use case exists, it must be
possible to implement that component, and make it available to the configuration
mechanism. There should be a way to replace parts of a configuration with custom
code, and the other way around, without the need to completely rewrite the
application.

Basic configuration framework
*****************************

The Morepath application implemented in `cs.web.components.base.main` can be
used to create web applications that are implemented completely in JavaScript /
:term:`JSX`. To that end, the name of the top level component is given to the
frontend initialization code, and that component is rendered. A consequence of
this approach is that each change to the application must be done in code.

For applications where the need to customize the application's structure can be
anticipated, `cs.web.components.configurable_ui` implements an alternative
solution.

.. automodule:: cs.web.components.configurable_ui

.. autoclass:: cs.web.components.configurable_ui.ConfigurableUIModel
   :members:
   :member-order: bysource

.. autoclass:: cs.web.components.configurable_ui.ConfigurableUIApp
   :members:
   :member-order: bysource

Providing setup data from the backend
=====================================
For configured applications, there exist two ways to insert additional data
into the application setup data object, which is described in
:ref:`web_ui_app_impl_tut_backend_setup_data`:

1. By connecting to a `cdb.sig` signal, this method is suitable if th data is
   needed for each instance of the configured application.

   .. code-block:: python

      @sig.connect(<model class>, ConfigurableUIModel, "application_setup")
      def update_app_setup(model, request, app_setup):
          # ...

   where :samp:`{model class}` is a subclass of
   `cs.web.components.configurable_ui.ConfigurableUIModel`. The parameters of
   the connected function are:

   * ``model``: The morepath model that represents the UI application in the
     backend, this will be an instance of :samp:`{model class}`.

   * ``request``: The morepath request that triggered the application.

   * ``app_setup``: A dictionary, whose content will be used for the static JSON
     object mentioned above. The dictionary must be modified in-place, the
     return value of the function will be discarded. All setup functions are
     passed the same dictionary instance, so that the called functions may merge
     their individual setup deep into the possibly nested structure.

2. By adding setup functions to component configuration files (see
   `Configuration files for components`_). The setup functions have the same
   parameters and semantics as described above. Using this method allows to
   specify additional data only for certain configurations.

.. note::

   Object pages and class pages provide additional signals, see below.

In addition to adding information to the ``app_setup`` dictionary, the setup
functions can specify additional JavaScript libraries to be loaded, by calling
`cs.web.components.configurable_ui.ConfigurableUIModel.add_library`.

Application Page
****************

The most simple configured page is a so-called application page. There is no backend code
required to render the page, only for specifying the URL and the configuration
to use. See `Application page configuration`_ for a description of the
configuration.

.. autoclass:: cs.web.components.configurable_ui.SinglePageModel
   :members:
   :member-order: bysource

Generic Page
************

The module `cs.web.components.generic_ui` provides generic "object detail" and
"class" applications for all REST visible classes. The actual HTML representations
are not hardcoded, but are read from configuration files.

.. autoclass:: cs.web.components.generic_ui.GenericUIApp
   :members:
   :member-order: bysource

.. autofunction:: cs.web.components.generic_ui.select_view

Object Page
***********

.. autoclass:: cs.web.components.generic_ui.detail_view.DetailViewModel
   :members:
   :member-order: bysource

In addition to the methods described in `Providing setup data from the backend`_,
object pages provide a `cdb.sig` hook to add setup data on a class basis. This
is useful for cases where some data is only needed for some of the classes that
use a common configuration. Usage is as follows:

.. code-block:: python

   from cs.web.components.generic_ui.detail_view import DETAIL_VIEW_SETUP
   @sig.connect(<cdb.object.Object subclass>, DETAIL_VIEW_SETUP)
   def _app_setup(obj, request, app_setup):
       # ...

where ``obj`` is an instance of the class used in the connect call. Otherwise,
the behaviour corresponds to the one outlined in `Providing setup data from the backend`_.

Class Page
**********

.. autoclass:: cs.web.components.generic_ui.class_view.ClassViewModel
   :members:
   :member-order: bysource

Like object pages, class pages can add setup data with an additional hook. The
difference here is that a class name is supplied instead of an object.

.. code-block:: python

   from cs.web.components.generic_ui.class_view import CLASS_VIEW_SETUP
   @sig.connect(<cdb.object.Object subclass>, CLASS_VIEW_SETUP)
   def _app_setup(clsname, request, app_setup):
       # ...

Configuration
*************

The configuration area can be accessed using the navigation tree by selecting
:menuselection:`Administration/Configuration --> Configuration --> User interface --> Web UI`

.. sidebar:: Component specifications

   This section uses the term "component specification" in several places. A
   component specification must have one of the following forms:

   * An entry :guilabel:`File`, that specifies the name
     of a component configuration file (see `Configuration files for
     components`_). You can concatenate variable parts and constant parts using
     ``+``. Constant parts have to be quoted. An entry usually looks like this::

     $CADDOK_MODULE + "/configurations/default-detail.json"

     ``$CADDOK_MODULE`` is replaced with the installation path of the module
     the configuration entry belongs to. You can use
     ``$CADDOK_MODULE:<module_id>`` to address a module explicitly. The
     calculated path is shown in the field :guilabel:`File (calculated)` after
     you have left any field the path depends on.

   * An entry :guilabel:`React Component`, that directly specifies the name of a React
     component that can be found in the :ref:`web_ui_frontend_registry`.

.. _`HELPID_csweb_page_frame`:
.. _`csweb_page_frame`:

Page frame configuration
========================

The page frame renders navigation bars, side bars and so on, i.e.
components that are not part of the actual page content. Normally, all pages
will use the same page frame, but there may be special cases where, e.g. no
sidebar should be shown.

The frame configuration can be accessed using the navigation tree by selecting
:menuselection:`Administration/Configuration --> Configuration --> User interface --> Web UI --> Advanced
--> Page Frames`.

A frame configuration has these attributes:

* :guilabel:`ID`: Identifier for the page frame, referenced from the page configurations.
* A component specification

.. _`HELPID_csweb_page_config_app`:
.. _`csweb_page_config_app`:

Application page configuration
==============================

The configuration for application pages can be accessed using the navigation tree by selecting
:menuselection:`Administration/Configuration --> Configuration --> User interface --> Web UI --> Pages
--> Special Pages`.

The configuration has these attributes:

* :guilabel:`ID`: The name given by the `Application Page`_ to identify the
  configuration.
* :guilabel:`Page Frame`: A reference to a `Page frame configuration`_
* A component specification

.. _`HELPID_csweb_page_config_detail`:
.. _`csweb_page_config_detail`:

Object page configuration
=========================

The configuration for an `Object Page`_ can be accessed using the navigation tree by selecting
:menuselection:`Administration/Configuration --> Configuration --> User interface --> Web UI --> Pages
--> Detail Pages`.
The algorithm that is used to select the relevant entry to use
for a concrete object is defined in the function
`cs.web.components.generic_ui.select_view`_.

The configuration has these attributes:

* :guilabel:`ID`: The id of this page
* :guilabel:`View Name`: A view name, that can be used to explicitly address a
  specific entry by name
* :guilabel:`Classname`: The |elements| class that the entry applies to. If
  you use ``*`` the view is available for all classes
* :guilabel:`Page Frame`: A reference to a `Page frame configuration`_
* :guilabel:`Priority`: A numeric value, that is used as a tie-breaker if more than one
  entry is applicable. The entry with the highest priority value is selected.
* :guilabel:`Label ID` / :guilabel:`Label`: The human readable name of the view.
* A component specification

The dialog register :guilabel:`Role assignement` is used to specify which role
should use a specific view. This feature can be used to display different views
for members of different roles.

.. _`HELPID_csweb_page_config_class`:
.. _`csweb_page_config_class`:

Class page configuration
========================

The configuration for a `Class Page`_ can be accessed using the navigation tree by selecting
:menuselection:`Administration/Configuration --> Configuration --> User interface --> Web UI --> Pages
--> Overview Pages`.
The entry format is the same as described above in section
`Object page configuration`_ except for the fact that you specify a :ref:`UI Name
<csweb_ui_name>` instead of a :guilabel:`Classname`.

.. _`HELPID_csweb_ui_name`:
.. _`csweb_ui_name`:

GUI Names
=========

The GUI Name configuration allows you to assign GUI names to classes that are not
a root class (and therefore are not addressable with a REST name). The GUI names
are then used to look up the correct class page configuration. The
configuration can be accessed using the navigation tree by selecting
:menuselection:`Administration/Configuration --> Configuration --> User interface --> Web UI --> Advanced
--> GUI Names`.

Configuration files for components
**********************************

Component configuration files are located in the :file:`configurations`
subdirectory. The content of a component configuration file is a JSON object,
with the following keys:

* ``configuration``: `Component configuration`_ for the root
  component of the application (Required).

* ``libraries``: Array of `Library configuration`_ entries (Optional).

* ``setupFunctions``: Array of fully qualified Python names for setup functions
  (optional).

* ``pluginContexts``: Array of plugin IDs (see :ref:`web_ui_plugins`) that are
  used on the page (optional).

Component configuration
=======================

* ``name``: Name for the component, the implementation of the component is
  looked up in the :ref:`web_ui_frontend_registry`.
* ``properties``: React properties for the configured component.
* ``outlet``: The name of a configured outlet, see `Outlets`_ for details.
  Currently, this is only valid in `Object Page`_ configurations.
* ``children``: List of configurations for child components, rendered as
  normal children.
* ``components``: Map with named configurations, the resulting React elements
  become props of the configured component.
* ``componentClasses``: Like components, but React classes instead of
  elements are passed as props.

The entries under the ``children``, ``components`` and ``componentClasses``
keys are recursively treated as component configurations.

Library configuration
=====================

Each library configuration is a JSON array with two elements:

* ``library name``: the name under which the library has been registered
* ``library version``: the version of the library to use

The effect of listing libraries in the configuration file is to add these
libraries as <script> tags to the generated HTML. Entries for libraries must be
given, if some components used in the component configuration are not included
by default.

Outlets
*******

An outlet defines a place in the component tree, where one or more child components
may be inserted according to the `Outlet configuration`_. When |elements| parses
a configuration file, all occurences of `outlet` are replaced with the result of
interpreting the configuration. This works recursively: it is possible to have
an outlet in a configuration that was inserted by an outlet in the first place.

.. note::

   Currently, outlets can only be used in `Object Page`_ configurations.

.. _`HELPID_csweb_outlet_configuration`:

Outlet configuration
====================

Outlet description
------------------

An outlet description specifies a name that can be used as an outlet.

* :guilabel:`Name`: The name of the outlet, this is referenced from the
  configuration files.
* :guilabel:`Description`: A description text detailing the intended usage of
  this outlet.

Outlet definition
-----------------

An outlet definition serves as an entry point to evaluate an outlet in the context
of a specific class. When an outlet definition is searched, the class hierarchy
is respected.

* :guilabel:`Name`: The name of the outlet.
* :guilabel:`Class Name`: Applicable class name, `*` can be used as fallback.

Outlet position
---------------

An outlet definition includes one or more outlet positions. Each outlet position
defines one child component. The position numbers specify the ordering of the
children. An outlet position is associated with role ids, and is taken into account
only if the current user has one of these roles. It is possible to define more
than one outlet position with the same position number. In this case, the one
with the highest priority is used.

* :guilabel:`Name`: The name of the outlet.
* :guilabel:`Class Name`: The class name.
* :guilabel:`Position`: Position number for ordering.
* :guilabel:`Priority`: Relative priority between entries with the same position. 
* :guilabel:`Label ID`: A label for the position.
* :guilabel:`Icon ID`: An icon for the position.
* :guilabel:`Properties (JSON)`: A string in JSON format, that provides properties
  to the React component that results from this position.
* :guilabel:`Child Name`: Reference to an `Outlet child`_.
* :guilabel:`Setup Class`: The fully qualified Python name of a class that
  inherits from `OutletPositionCallbackBase`. This can be used to create or adapt
  the configuration dynamically. See also `Outlet generators`_.

:guilabel:`Label ID` and :guilabel:`Icon ID`, if set, overwrite the settings
from the child. :guilabel:`Properties (JSON)` is merged with the properties
defined for the child, with the values provided here taking precedence. 

.. autoclass:: cs.web.components.outlet_config.OutletPositionCallbackBase
   :members:
   :member-order: bysource

Outlet child
------------

An outlet child provides the configuration for a React component that should be
rendered as an outlet position.

* :guilabel:`Name`: The name of the child, referenced from outlet positions.
* :guilabel:`Label ID`: A label for the child.
* :guilabel:`Icon ID`: An icon for the child.
* :guilabel:`Properties (JSON)`: A string in JSON format, that provides properties
  to the React component that results from this child's configuration.
* :guilabel:`File` / :guilabel:`React Component`: A component specification. 

Outlet generators
=================

There are some standard generator functions that can be used with the outlet
configuration.

.. autoclass:: cs.web.components.outlet_generators.OutletPositionRelationshipsCallback

.. _`HELPID_csweb_display_contexts`:

Display Contexts
****************

To render an object using a specific dialog configured in |elements|, a display
context can be used. The configuration for a display context associates a display
context name and a classname with a dialog. To utilize a display context, you use
a :ref:`cs-web-components-base-components.DisplayContextLoader.__default__`
as parent to one or more React components.

Typically, the children of a `DisplayContextLoader` will display the data not in
the same way as described in :ref:`web_ui_forms`, but in some form suitable to
the context.

Display contexts do not rely on operations, but instead map the given object's
attributes to the dialog configuration. Therefore, no user exits are executed.
However, it is possible to attach a :ref:`dialog_hook` to the dialog configuration,
and provide computed values in this way.
