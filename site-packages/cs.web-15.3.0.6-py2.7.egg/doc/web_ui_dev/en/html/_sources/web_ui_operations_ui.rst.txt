
Integrating Operation Handling into User Interfaces
***************************************************

In order to integrate operation handling into custom user interfaces,
two aspects need to be adressed:

- Firstly, the available operations for an object or a class need to
  be retrieved from the server.
- Secondly, these operations need to be executed, possibly involving
  user interaction, collecting data, as well as updating the pages to
  display results of operations.

These different aspects of operation execution may be handled
separately from each other, so that implementors may use the provided
APIs in a flexible way.

Retrieving operation information from the server
================================================

The server provides a REST API to retrieve operation information
objects, which can be used as an input to the operation handling API.
Operation information may be adressed in three different ways:

- By name, e.g. ``CDB_Create``, ``CDB_Modify``,...
- By operation contexts, i.e. a set of operations that may defined in
  the backend
- All operations given a class

The lowest level of retrieving operations are the Redux Actions that
query operations and operation contexts from the server. Though it is
possible to fetch operations by invoking the REST API directly, using
the provided Redux Actions minimizes the number of requests sent, if
operations are fetched multiple times, due to them being required in
multiple places in the interface.

The two methods provided by the interface are:

- :ref:`cs-web-components-base-actions.operations.fetchOperationContext`
- :ref:`cs-web-components-base-actions.operations.fetchOperationInfo`

These will insert the requested operations into the reducer
``operationsById`` and the requested operation context objects into
``operationContextById``. Assuming the Redux State is bound to
variable ``state``, you may retrieve the operation info objects by
accessing the Redux State:

.. code-block:: javascript

   function mapStateToProps(state, ownProps) {
     const myOperation = state.operationsById.getIn([
       ownProps.myClass,
       'operations',
       ownProps.myOpName,
     ]);

     return {myOperation};
   }

As an alternative to these interfaces, Web UI also provides a higher
order component --
:ref:`cs-web-components-base-components.WithOperations.__module__`
-- that may be used to supply the wrapped component with
a set of operations in its props. This set is always restricted to an
object class, either determined by naming the type, or calculated from
the set of objects provided to the HOC. For most use cases, using
``WithOperations`` should be sufficient.


.. _`operations_frontend_execution`:


Executing operations
====================

In order to execute operations from the server, there are multiple
ways to execute an operation.

**FormWithOperations**: The simplest way is by embedding the
:ref:`cs-web-components-base-form.containers.FormWithOperations.FormWithOperations`,
component, which does not require manually fetching the
operations. This component may simply be embedded into a page, where
it may be used to execute operations using the classic |elements|
masks.

**Custom Handling**: If a developer wants more control over the way
the user may start, submit and cancel operations or customize the way in
which data required for the operation is collected, OperationScope-based
operation execution may be used. This mechanism basically consists of
three components:

- :ref:`cs-web-components-base-form.containers.OperationTrigger.__module__`
- :ref:`cs-web-components-base-form.containers.OperationHandler.__module__`
- :ref:`cs-web-components-base-form.containers.OperationScope.__module__`

An
:ref:`cs-web-components-base-form.containers.OperationTrigger.__module__`
initiates an operation by dispatching a
:ref:`cs-web-components-base-operations.actions.operations.runOperation`.
E.g. the application bars in the Web UI implement an ``OperationTrigger``
that displays the available operations for the pages entities and starts
the execution of the selected operation.

An
:ref:`cs-web-components-base-form.containers.OperationHandler.__module__`
is responsible for executing the operation: It may
collect data, either by displaying a configured mask or rendering a
frontend-based form, execute the operation, and finally update the
page accordingly (if custom update handling is required).

In order for ``OperationTrigger`` and ``OperationHandler`` to
communicate with each other, an ``OperationScope`` is required.  This
component is above both trigger and handler in the component
hierarchy.  A handler then registers itself in the scope, and the
trigger uses the scope to determine the correct handler to be invoked
for the scope.

Handlers and Operation Information objects both define a
:guilabel:`Presentation ID`, that is used to identify the correct
handler for an operation. E.g., the id ``modal`` is used to execute an
operation using a modal dialog.

``OperationScopes`` may be nested, in that case, the trigger will
search upwards in the hierarchy until a matching handler is found.

Each web application is automatically rendered with two operation
handlers. Firstly, one that handles those operations that are based
on E-Link applications, e.g. the ``share``-operation, by redirecting
to the appropriate E-Link page. Secondly, there is a default operation
handler that handles all form-based operations by rendering the form
in a modal dialog.
If you do not define an operation scope with custom
operation handlers in your page, these two handlers will handle the
execution of your operations nonetheless.


Starting operation execution
============================

To start the execution of an operation a component needs to dispatch a
``runOperation`` action. It is not recommended to dispatch this action
directly but either use one of the provided components such as
``TableOperationToolbar`` and ``ContentOperationToolbar`` or to
implement a custom OperationTrigger.


Handling Operation Results
==========================

Operation Results may be handled in different ways. If the
OperationHandlers ``submitOperation`` method is executed, the server
will respond with a response object that may either contain a
``ui_link`` field, or an ``object`` field.

The ``ui_link`` field usually means, that the result of the operation
can be displayed by navigating the browser to the URL value of the
field, while the ``object`` field may, e.g., contain a modified or
created object.

By default ``OperationHandler`` will handle these results as follows:

- ``ui_link`` will result in the provided URL to be navigated in the
  browser tab in which the operation was submitted
- an ``object`` will result in an update of the store, which in turn
  will update connected components in the page.

Custom behaviour may be implemented by ``OperationTrigger`` and
``OperationHandler`` components by calling ``setSubmitHandler`` and
providing a callback that should be executed.


Handling of ``CDB_Delete``
==========================

Due to technical reasons, the operation ``CDB_Delete`` should usually
be invoked using ``navigation-id='delete'``. For one reason the delete
operation has no associated form, while default operation handlers are
based on a configured form from the backend.
The other reason is the handling of deleting the context object of detail
pages. Since detail pages usually rely on the context object, the detail
page is not valid after deletion, and the default ``delete`` Handler
handles this case.


Navigation-based Operations
===========================

Operations like ``CDB_ShareObject``, which should navigate directly to
a new tab but don't expect any input parameters, should be configured
with ``navigation-id='navigate-new-tab'``. Note, that in order to
avoid popup-blockers, the OperationTrigger for these Operations should
only be invoked from the browser's event handling thread (e.g., by
pressing a button).

Operations without user interaction
===================================

If an operation should always be run without any user interation, you
should configure the operation with ``navigation-id='no-form'``.
