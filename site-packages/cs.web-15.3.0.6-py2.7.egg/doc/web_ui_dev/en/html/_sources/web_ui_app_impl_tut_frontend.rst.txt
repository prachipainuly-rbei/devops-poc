.. _`web_ui_app_impl_tut_frontend`:

Frontend-specific tasks
=======================

.. _`web_ui_app_impl_tut_frontend_components`:

Reusable Components
-------------------

In order for an application bundle to provide React components, these
need to be:

- registered in the Registry singleton object defined in
  ``cs-web-components-base``
- marked for export by the application bundle

This is usually done in the ``index.js`` of the application. The template
files generated by ``webmake`` provide an example ``HelloWorld``
component.

For the directory structure, refer to :ref:`web_ui_app_impl_tut_layout`. The
file ``./components/HelloWorld.jsx`` implements the component
``HelloWorld`` while ``./main.jsx`` registers the component using the
applications component namespace.

.. code-block:: javascript
   :linenos:

   import { Registry } from 'cs-web-components-base';
   import { prefixNS } from './helpers';
   import HelloWorld from './components/HelloWorld'

   Registry.registerComponent(prefixNS('MainComponent'), HelloWorld);

   module.exports = [
     HelloWorld
   ]

In line 5 the component is registered, using the helper function
prefixNS. This is necessary to use the component in a configured
application.

The utility ``webpack`` which is used to create an application bundle
from sources, only includes components that are used inside or
exported from the bundle. Since reusable components may not
necessarily be used in the application bundle, they should always be
listed in the module.exports. This is achieved in lines 7-9.

This will also result in the component being importable as:

.. code-block:: javascript
   :linenos:

   import { HelloWorld } from 'my-bundle-name';

Components provided by |elements| are also exported by the Registry in
:ref:`cs-web-components-base-toc`. E.g., in order to use
:ref:`cs-web-components-base-components.navigation.Favorites.Favorites`
in your application, a simple import statement is all that is needed:

.. code-block:: javascript
   :linenos:

   import { FavouriteView } from 'cs-web-components-base';

   function Link(props) {
       return (<FavouriteView />);
   }


Application State with Redux
----------------------------

Managing Application State with Redux requires two parts:

- Actions that can be triggered to initiate the modification of
  application state.
- A reducer function, which is responsible for dispatching these and
  actions, and modifying the application state accordingly.

In order for a reducer to be invoked, it needs to be registered using
the instances Registry.

.. code-block:: javascript

   import { Registry } from 'cs-web-components-base';
   import { prefixNS } from './helpers';
   import reducer from './reducers/reducers';

   Registry.registerReducer(prefixNS('reducer'), reducer);

For details on how to implement reducers and action creators see
`redux.js.org <http://redux.js.org>`_ . The default template installed by
``webmake create`` also installs an example in
``js/src/actions/actions.js`` and ``js/src/reducers/reducers.js``


.. _`web_ui_app_impl_tut_frontend_setup_data`:

Accessing setup data
--------------------

To access the setup data described in :ref:`web_ui_app_impl_tut_backend_setup_data`,
use the `getAppSetup` function provided by `cs-web-components-base`. It returns
the setup data as an Immutable object.

.. code-block:: javascript

   import { getAppSetup } from 'cs-web-components-base';

   const basePath = getAppSetup().getIn(['appSettings', 'basePath']);


.. _`web_ui_app_impl_tut_frontend_doc`:

Documenting Components
----------------------

Documentation for |elements| Web UI components is done using JSDoc and
a specialized template that creates Restructured Text from JSDoc
comments.

A basic example for a component with documentation in the style of Web
UI's component documentation is:

.. code-block:: none
   :linenos:

   import React, { Component, PropTypes } from 'react';
   import { FavouriteView } from 'cs-web-components-base';

   /**
    * A component that greets someone.
    *
    * React Properties
    * ----------------
    *
    * +-------------------+--------------+--------------+-------------------------------------------+
    * | Property          | Type         | Default      | Use                                       |
    * +===================+==============+==============+===========================================+
    * | title             | string       | \-           | Name of the person that should be greeted |
    * +-------------------+--------------+--------------+-------------------------------------------+
    *
    * Automation Properties
    * ---------------------
    *
    * The component can be retrieved by a generated ``data-ce-id`` of
    * the form ``"hello-" + greetee``.
    *
    */
   export default class HelloComponent extends Component {
      render() {
        return (<div data-ce-id={"hello-" + greetee}>
	          Hello {greetee}
                </div>);
      }
   }

   HelloComponent.propTypes = {
      greetee: PropTypes.string
   };


Suppose this is the content of ``js/src/components/HelloComponent.jsx`` in
module ``xy.web.components``: In order to generate documentation for this
component in docset ``doc/web_ui/en`` issue the command:

.. code-block:: bash

   snapp -d <path_to_application> doc doc/web_ui/en

This will create a file in ``doc/web_ui/en/src/_js/``, which is
automatically included in the javascript API index. Note that jsdoc is
also invoked by ``snapp doc``.

To reference the component in your documentation use the generated
reference:

.. code-block:: rst

   :ref:`xy-web-components-components.HelloComponent.__default__`
