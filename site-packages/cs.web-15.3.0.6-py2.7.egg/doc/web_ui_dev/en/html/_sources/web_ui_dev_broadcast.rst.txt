.. _`web_ui_dev_broadcast`:

*CONCEPT ONLY, WIP*

Broadcast
*********

Requirements
============

* One global data object

  * separation of data object into "namespaces"

* Values overwritable inside the hierarchy
* independent of shouldComponentUpdate()
* rerendering on update of relevant data object keys
* implicit propagation to children using React context

Architecture
============

Example Hierarchy
-----------------

.. code-block:: none

    <App> /* context = Immutable.Map() */
        <Container> /* context["namespace"]["key"] = "value" */
            // ...
            <Component> /* context["namespace"]["key"] = "othervalue" */
                <Child /> /* context["namespace"]["key"] === "othervalue" */
            </Component>
        </Container>
    </App>

Provider
--------

* creates / overrides data objects
* "Listener" at the same time
* **NO** shouldComponentUpdate. Check in willReceiveProps and Listener
* overrides "register callback" for children to be notified of listeners

Listener
--------

* Mapping namespace and keys (in data object) -> props
* register callback is stored in react context
* initial values retrieved by calling register callback
* unregister on unmount
* local state for updates / rerendering

Technical Details
=================

* Immutable Map as data structure

  * Nested Maps using keypaths

* NO HoCs
* Update merging using Immutable equality

  * setState and rerending only on relevant changes
  * Example:

.. code-block:: javascript

    nextState = currentState.merge(parentState.merge(overrides));
    if(nextState !== currentState) {
        setState({...});

* empty "root data object" starting at the root of the hierarchy
