
Testing cs.web Web Applications
###############################

.. Can be moved if the chapter at the end is written. Is referenced from
.. javascript

.. _`testing_selenium_modal`:


Testing with Selenium
=====================

Frontend Tests can be implemented using the Selenium Framework for
Browser Automation (c.f. http://www.seleniumhq.org/). ``cs.web``
provides several utilities to ease this task.

If testing of an application is already planned upon creation of the
application, ``webmake create`` can be invoked with the parameter
``--templates tests``, which will create a template in
``tests/test_main.py``


.. _`testing_selenium_properties`:

Identifying ``cs.web`` components using Selenium
------------------------------------------------

In order to run tests based on Browser-Automation with the Selenium
framework, it is necessary to identify components in the rendered DOM
and to identify the state they are in (e.g., a collapsible can either
be collapsed or expanded) in order to interact with them.

The UI components provided by ``cs.web`` provide the attributes
``data-ce-id`` and ``data-ce-state``, which can be used to query the
DOM.

When subclassing ``cs.web.automation.WebTest`` it is easy to
interact with elements using these attributes.

.. code-block:: python

  class WebTest(...):
      def get_ce_element(self, elements_id, parent=None):
          return CeElement(...)

  class CeElement(...):
      def get_ce_state(self):
          return ...

The following code opens the sidebar and waits for the animation to
finish:

.. code-block:: python

   sidebar_element = web_test.get_ce_element('ApplicationSidebar')
   if sidebar_element.get_ce_state() == 'collapsed':
       burger_element = web_test.get_ce_element('Burger')
       burger_element.click()


.. Accessing modal dialogs
.. =======================

.. **TODO**

.. .. code-block:: python

..  class WebTest(...):
..      def get_modal(self):
..          return CeElement(...)
