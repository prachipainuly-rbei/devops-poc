
Building web applications
=========================

As explained in section :ref:`web_ui_technical`, application bundles
and their dependencies are transformed into bundles using webpack,
while dependency management is done using yarn, the npm replacement.

How these utilities are integrated with ``webmake`` is explained in
section :ref:`web_ui_make_build_process`. Web applications are usually
defined inside Python packages in a cdb application package (c.f.
:ref:`web_ui_app_impl_tut_layout`). These can be either specified
manually, or read from ``apps.json``
(c.f. :ref:`web_ui_make_build_apps_json`).


.. _`web_ui_make_build_process`:

The build process
-----------------

While web applications are implemented in ES6, these sources must be
bundled and transpiled to be served to the browser. This is achieved
by the utilities ``yarn`` (for dependency management) and ``webpack``
(for transpilation and bundling). Additionally, a global stylesheet is
generated from all SCSS style definitions.

These commands are integrated into ``webmake`` as follows:

- the command ``webmake devupdate`` copies the template file
  :file:`package-base.json` from ``cs.web`` as ``package.json`` into the
  instance directory and runs ``yarn install`` inside it.
- the command ``webmake build <pkg-name>`` builds package
  ``<pkg-name>``, e.g., ``cs.web``, i.e., it runs ``yarn install`` to
  install missing dependencies, and ``webpack`` to create an
  application bundle.
- the command ``webmake yarn <pkg-name> <command>`` runs an arbitrary
  ``yarn`` command.
- the command ``webmake webpack <pkg-name>`` runs ``webpack`` on the
  web applications in package ``<pkg-name>``. Usually, during
  development you simply invoke ``webpack``, and only call ``build`` if
  dependencies have changed.
- the command ``webmake styles`` compiles the global stylesheet
  ``global-styles.css`` into the instance directory.

Additional commands exist to clean files generated during the build
process:

- the command ``webmake cache-clean`` cleans up the cache of
  ``only-if-changed`` (see below).
- the command ``webmake clean`` cleans up the cache of
  ``only-if-changed``, the ``node_modules`` folders created by
  ``yarn``, as well as the ``bundle`` files created by ``webpack``.


The ``webpack`` command allows the path of the app as an optional
parameter. If provided, the command will be carried out for this
app in its respective directory. If it is omitted,
the command will be run for all web
application bundles specified in ``apps.json``
(c.f. :ref:`web_ui_make_build_apps_json`).

Standard web application bundles shipped by |contact| GmbH use
the npm ``only-if-changed`` package, which suppresses ``webpack``, if the
timestamp of all source files is not newer than a timestamp cached by
the package during the last call of ``webpack``. Note that this does only
consider changes to the file's timestamp. If, e.g., the build
configuration is changed, the build cache needs to be invalidated
manually by invoking ``webmake cache-clean``.


.. _`web_ui_make_build_apps_json`:

The ``apps.json`` File
----------------------

The commands explained above usually either work on a single web
application bundle or on all bundles defined inside an application. In
order to find these bundles a file ``apps.json`` is created on the top
level of the application package. This file contains a list of paths to the
javascript bundle roots, relative to application package
root.

E.g., suppose you have an application in the folder ``my.application``
and the Javascript roots (the folder containing your
``webpack.config.js`` and ``package.json``) of your web application
bundles in the folders ``my.application/my/application/user_app/js`` and
``my.application/my/application/news_app/js``, then you should have an
``my.application/apps.json`` file, containing

.. code-block:: json

   [
       "my/application/user_app/js",
       "my/application/news_app/js"
   ]

Then you may build the web bundles in your application by issuing

.. code-block:: bash

   $> webmake build my.application
   ...
   $> webmake styles

To build only one specific bundle, e.g. ``user_app`` issue

.. code-block:: bash

   $> webmake webpack my.application my/application/user_app/js

Note that this file is necessary for integration with setuptools and
snapp.
   

.. _`web_ui_make_build_setuptools`:

Integration with setuptools and snapp
-------------------------------------

*setuptools:* The ``webmake`` commands ``build`` and ``clean`` are
integrated into setuptools. The |elements| setuptools extension in
``cdb.comparch.pkgtools.setup`` searches for an ``apps.json`` in the
current working directory (which should be the package directory
during buildout process). When an ``apps.json`` file exists,
setuptools will assume that web-specific tasks need to be carried out
during development and deployment. It will

- extend the setuptools commands ``bdist_egg`` and ``develop`` to
  invoke the ``build`` command of ``webmake``
  (c.f. ``cdb.comparch.pkgtools.apply_npm_wrappers``).
- include web-specific files which would not be included in the
  default data_files (c.f. ``cdb.comparch.pkgtools.add_web_files``).

``bdist_egg`` will result in a production build (using ``webpack
-p``), while ``develop`` will result in a development build. Since
this change in configuration is not detected by ``only-if-changed``,
the cache needs to be cleared for this to work. While ``bdist_egg``
cleans the cache before invoking ``webpack``, this needs to be done
manually by invoking ``webmake cache-clean <pkg-name>``.
