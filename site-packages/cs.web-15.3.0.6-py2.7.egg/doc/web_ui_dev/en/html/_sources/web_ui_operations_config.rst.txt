
.. _`HELPID_cs_operations_webui`:
.. _`operations_webui_activation`:

Web UI Operation Config
***********************
Some components, e.g.
:ref:`cs-web-components-base-form.containers.FormWithOperations.FormWithOperations`,
use an API that allows them to
run kernel operations in a way similar to the |win.client|. Because of
some :ref:`restrictions <operations_webui_restrictions>` you have to activate
the functions for the use with the Web UI. This configuration only applies
to this kind of operations - it does not restrict the usage of other
(REST)-APIs that also use the kernel operations to implement their
behaviour. The configuration resides in the register :guilabel:`Web UI` of
the standard operation configuration.

The register has these members:

* :guilabel:`Available with Web UI`: If you want to use the operation you have to
  set this checkbox. Otherwise the behaviour is the same as if the configuration
  does not exist at all. Uncheck the box if you want to deactivate the operation
  temporarily. If you do not plan to reactivate the operation you should
  delete the configuration object instead.
* :guilabel:`Essential/Frequently used`: A hint for the implementation of the
  UI. Operations that have been marked this way might be displayed more prominently,
  e.g. with an extra button in a title bar.
* :guilabel:`Prefer classic UI with hybrid client`: A hint that the
  |win.client| should handle the execution of the operation if possible.
* :guilabel:`Presentation ID`: The ID of a component that is able to render the
  form of the form based operation. See section :ref:`operations_presentation_ids`.
* :guilabel:`Mask name`: Allows you to set a dialog for the
  operation. If the field is empty the dialog configured in the basic
  operation configuration is used. This allows you to provide
  optimized forms for displaying in a web context.


.. _`operations_presentation_ids`:

Presentation IDs
================

This field defines a default way of how the operation should present
configured forms to the user. For legacy reasons, it also controls how
results of the operation should be handled. Though for most use cases
the value ``modal`` should be appropriate, you may want to learn about
the possible options. Sensible default values for this field are:

- ``modal``: if the operation displays a configured form to the user,
  it will be displayed in a modal dialog, disabling interaction with
  the rest of the user interface.
- ``navigate-new-tab``: the operation's result will be displayed in a
  new tab.
- ``no-form``: the display of a form will be supressed, even if one is
  configured for the operation. The operation will behave as though
  the user has pushed the form's submit button. Note that this option
  may interfere with certain features like execution of wizard logic.
- ``delete``: Special case for ``CDB_Delete``: the display of a form
  will be supressed, instead the user will be queried if he wants to
  delete the objects in question. If the user submits the dialog, the
  operation will be executed.

Note that usually the ``no-form`` option will usually not be
necessary, since the operation execution will skip the ``Show Dialog``
stage, if the operations form contains no registers.

You may enter different values into the field, if your application
provides special operation handlers (see
:ref:`operations_frontend_execution`), which you want your operations
to use. Note, that if a presentation id is not set in the current
scope, it will behave as if the ``modal`` option has been set.
