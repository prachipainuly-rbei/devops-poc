.. _`web_ui_age_jsdoc`:

Generating documentation
========================


API Documentation is written by attaching JSDoc doclets to the
Javascript entities to be documented. This documentation is
transformed to reStructured Text -- the format used to write
documentation in |elements| -- and can then be integrated into the
docset.


Using webmake to generate ``.rst``
----------------------------------

In order to include your Javascript API documentation in a |elements|
doclet, you need to transform doclets into reStructured Text
files. ``webmake`` provides the command ``jsdoc`` to invoke ``jsdoc``
with the appropriate parameters.

This command will search for all components in the provided bundle
sources, and -- for each one having a jsdoc string attached --
generate a file that may be included in the provided docset.

.. code-block:: bash

   webmake jsdoc cdbpackage docset [packages [packages ...]]

Parameters required for the jsdoc command are:

- ``cdbpackage``: Name of cdbpackage in which to look for
  webapps. Ignored if packages are specified
- ``docset``: A relative path to a docset in which to generate
  documentation, e.g. ``doc/mydocset/en``.

Optional parameters are:

- ``packages``: A list of packages for which to create
  documentation. If non are provided, all packages listed in
  ``apps.json`` are used.

For example:

.. code-block:: bash

   webmake jsdoc cs.web doc/web_ui_dev/en cs/web/components/base/js

generates the documentation for bundle :ref:`cs-web-components-base-toc` in
``doc/web_ui_dev_en/_jsapi``. This way, e.g., documentation for
ApplicationFrame can be included in docset ``web_ui_dev`` by including
``_jsapi/ApplicationFrame``.

*Cleaning up:* In order to clean up generated reStructured Text files
 the command:

.. code-block:: bash

   webmake jsdoc-clean <pkg-name> <docset>

may be used.


Mapping JS entities to ``.rst`` files
-------------------------------------

The template to generate reStructuredText from jsdoc Doclets
supports the following Javascript entities:

- *Package*: For each package, a folder is generated. Optional
  documentation is taken from the packages ``package.json``.
- *Modules*: Javascript modules correspond to .js/.jsx files. By
  default no file is generated. If you want to generate documentation
  for a module, you may add a jsdoc comment, and put an ``@module``
  declaration inside the comment.  Given a module ``Module`` the
  generated reference will be ``<bundle>-<path_to_file>.__module__``
- *Default exports*: The reference for the default export of a module
  is ``<bundle>-<path_to_file>.Module.__default__.rst``
- *Classes*: Documentation for classes is generated in their
  respective files.  The filename for a class ``Class``, defined in a
  module ``Module`` will be ``<bundle>-<path_to_file>.Class``, if the
  class is a named export of the module. If a
  module documentation is generated, the class will be listed there.
- *Functions*: Functions are not defined as top-level doclets, so no
  file will be generated for these. Such a doclet will be generated in
  the surrounding top-level doclets documentation file

``<bundle>`` is the name of the javascript bundle, usually with ``-``
as separators, while ``<path_to_file>`` is the path to the file, with
dots as separators. The documentation will be generated in
``<docset_path>/_js/<bundle_name>``. ``<docset_path>/_js/toctree.rst``
contains the index of generated files, and should be included in your
documentation at an appropriate location. Besides this automatically
generated index, documentation should only be referenced by reference.

Another generated file -
``<docset_path>/_js/<bundle_name>/mapping.json`` - contains a mapping
from top-level file references to generated rst-files.

For details on documenting Javascript APIs, see
:ref:`web_ui_app_impl_tut_frontend_doc`.


Integration with ``snapp doc``
------------------------------

Analogous to the setuptools integration of ``webpack``
(c.f. :ref:`web_ui_make_build_setuptools`) the ``jsdoc`` process is
integrated into ``snapp doc``. This command is extended to check for
the presence of a ``jsdoc`` parameter to the |elements| application's
``setup.py``. As an example for a setup-call extended for ``jsdoc`` we
present the ``setup.py`` file for ``cs.web``:

.. code-block:: python

   pkgtools.setup(
      name="cs.web",
      version="15.2.0",
      install_requires=['cs.platform',
                        'cs.base'],
      docsets=[
          "doc/web_user/de (html,chm,pdf)",
          "doc/web_ui_dev/en (html)",
      ],
      ...
      jsdoc=[
          "doc/web_ui_dev/en"
      ],
      ...
   )

``snapp doc`` checks, for each docset it builds, if this docset is
specified in the list provided as argument to the jsdoc parameter of
the setup call. If it is in the list, a ``_jsapi`` folder will be
generated, containing the doclets as reStructured Text, when calling
``snapp doc``.
