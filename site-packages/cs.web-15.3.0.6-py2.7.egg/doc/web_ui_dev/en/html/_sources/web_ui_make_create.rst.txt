
.. _`web_ui_age_create`:

Creating an application template
================================

Creating an initial template can be achieved with:

.. code-block:: bash

   webmake [--verbose] [--dry-run] \
           create <package>
	   [--templates TEMPLATE [TEMPLATE ...]]

Parameters necessary for the *create* commands are:

- ``<package>``: The script requires a name, with which the app will
  be registered. The package needs to be a valid python package
  identifier. It should specify an (existing or non-existing) python
  package that could be located inside a cdb module, but must be
  located inside a cdb package.

Optional parameters are:

- ``--templates``: a list of additional templates to install. See also
  :ref:`web_ui_age_templates`.

At first the path of the web application will be created, based on the
package identifier provided and already installed |elements|
application packages.

E.g. if the package provided is ``cs.web.components.foo``, the
location of the package ``cs.web`` will be determined. Inside a python
package ``cs.web.components.foo`` will be created, containing a
directory structure as detailed in :ref:`web_ui_app_impl_tut_layout`.

In order to deploy this as a webapp, the backend module
``<package>/main.py`` needs to be added to an applications
``default.conf``.


.. _`web_ui_age_templates`:

Specifying Templates
--------------------

The application configuration that is created depends upon the
templates that are specified by the call to ``webmake``.

The default template to be installed is ``base_impl``. Different
templates can be used during creation by providing the parameter
``--templates``, which accepts a list of templates to be
installed. Application templates are used to create the basic
application data, feature templates extend this by different
features. Available templates are:

Application Templates:

- ``base_impl``: Creates a skeleton for writing a custom
  application. See :ref:`web_ui_app_impl_tut_frontend` for more
  information on writing an application based on custom components.
- ``base_conf``: Creates a skeleton for configuring an
  application. See :ref:`web_ui_configuration` for more information on
  configuring applications.

Feature Templates:

- ``selenium``: Extends the skeleton created by ``base_impl`` for
  writing automated UI tests.


.. .. _`web_ui_age_custom_templates`:

.. Custom Templates
.. ----------------
