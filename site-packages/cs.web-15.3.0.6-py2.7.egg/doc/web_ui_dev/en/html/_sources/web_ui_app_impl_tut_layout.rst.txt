.. _`web_ui_app_impl_tut_layout`:

Application Layout
==================

The typical layout of a |elements| web application, as is also created
by the ``cs.web.make`` script is as follows:

::

 <package>
 |
 +-- js                          Frontend files
 |   |
 |   +-- build                   Deployable files generated by webpack
 |   |   |
 |   |   +-- <app_name>.js       Bundled code of the application
 |   |   |
 |   |   +-- <app_name>.js.map   Codemap to unbundled code
 |   |
 |   +-- src                     Javascript/JSX source files
 |   |   |
 |   |   +-- actions             .js files for Redux actions go into this folder
 |   |   |   |
 |   |   |   +-- ...
 |   |   |
 |   |   +-- components          Folder for components defined in this application
 |   |   |   |
 |   |   |   +-- ...
 |   |   |
 |   |   +-- containers
 |   |   |   |
 |   |   |   +-- ...
 |   |   |
 |   |   +-- reducers            .js files for Redux reducers go into this folder
 |   |   |   |
 |   |   |   +-- ...
 |   |   |
 |   |   +-- helpers.js          File with helper functions
 |   |   |
 |   |   +-- index.js            .jsx file containing the main component of the app
 |   |   |
 |   |   +-- i18n.js             Helper functions for i18n
 |   |
 |   +-- [package.json]          Optional packages, required by the application
 |   |
 |   +-- webpack.config.js       Webpack configuration template
 |
 +-- tests                       Python based tests (e.g., nose/selenium)
 |   |                           created via selenium template
 |   +-- test_*.py
 |
 +-- __init__.py
 |
 +-- main.py                     Contains a Morepath app and views for the app

The application package must reside in a subfolder of an |elements|
application module.

The basis for the application is a python package, which must, at
least, contain setup code for the application, and optionally setup
code for, e.g., morepath and i18n.

Javascript files go into subfolder ``js``, which contains the ``src``
folder as well as configuration files and internationalization
data. The utility ``webpack`` is used to bundle these resources into
one or more ``.js``-files. These files are then registered as a
library, allowing the components defined in the files to be referenced
by other applications (see :ref:`web_ui_app_impl_tut_backend_static`).

The file :file:`webpack.config.js` is used to configure
``webpack``. It extends the configuration in
:file:`webpack.common.config.js` from ``cs.web``.
When a web application is created with ``webmake``
the utility takes care of setting up the webpack configuration file.

The testing folder is created by template ``selenium``.
