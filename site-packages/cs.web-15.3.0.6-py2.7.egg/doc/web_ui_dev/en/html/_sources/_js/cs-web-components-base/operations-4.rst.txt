.. _`cs-web-components-base-operations.actions.operations.__module__`:

=============================
operations/actions/operations
=============================

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



This module provides the Redux action creators that are the interface for executing
operations, and sending changes to the form state. Usually you will dispatch the
:ref:`cs-web-components-base-operations.actions.operations.runOperation`
action by invoking the corresponding method from either your
:ref:`cs-web-components-base-form.containers.OperationTrigger.__module__` component
or your :ref:`cs-web-components-base-form.containers.OperationHandler.__module__`
component.

The other actions in this module control the communication between the saga running the
operation and the form that the user interacts with, as well as dialog hooks. You only
need to use those, if you are implementing your own
:ref:`cs-web-components-base-form.containers.OperationHandler.__module__` and do not
rely on the ConfiguredForm component.

These actions can be divided by the direction of the communication:

- Actions sent from the form to the saga, usually in response to user input.
- Actions sent from the saga to modify the form state, which usually results
  in updates to the displayed form.

.. warning::

   Besides :ref:`cs-web-components-base-operations.actions.operations.runOperation`
   the actions provided by this module are considered internal, and may be subject
   to change without prior note.


Contents
========

Functions
---------



.. _`cs-web-components-base-operations.actions.operations.addFiles`:

addFiles
~~~~~~~~

.. code-block:: javascript

      addFiles(instanceName: string, files: array)

**Takes:**

- *instanceName*: Handler for user interaction

- *files*: a list of file objects to be added to the current state.

Adds a list of files to the operation state. Dispatched by form.

.. _`cs-web-components-base-operations.actions.operations.cancelOperation`:

cancelOperation
~~~~~~~~~~~~~~~

.. code-block:: javascript

      cancelOperation(instanceName: string, force: bool)

**Takes:**

- *instanceName*: Handler for user interaction

- *force*: if true, the user won't be queried.

User requested to cancel the operation during form execution.
Dispatched by form, handled by saga.

By default this queries the user, if he wants to dispose of
changes he has made to the form. Use parameter ``force`` to
suppress this behaviour.

.. _`cs-web-components-base-operations.actions.operations.changeOperationValues`:

changeOperationValues
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      changeOperationValues(instanceName, values, unchecked)

**Takes:**

- *instanceName*: Handler for user interaction

- *values*: An Immutable.Map containing the attribute-value pairs for
   the form

- *unchecked*: This flag is set by the form if the values have been
   validated, for example when they are set by a catalogue.

Invoked by form when the user alters the value of one or more fields.
This will invoke dialog hooks configured for the changed fields.
Invoked by the form/operation-handler and handled by ``changeFormSaga``.

.. _`cs-web-components-base-operations.actions.operations.clearErrors`:

clearErrors
~~~~~~~~~~~

.. code-block:: javascript

      clearErrors(instanceName: string)

**Takes:**

- *instanceName*: Handler for user interaction

Operation State contains no errors. This is sent by
operations saga, and should remove outdated messages.

.. _`cs-web-components-base-operations.actions.operations.queryCancel`:

queryCancel
~~~~~~~~~~~

.. code-block:: javascript

      queryCancel(instanceName)

**Takes:**

- *instanceName*: Handler for user interaction

Ask the user if he wants to cancel, as this will cause data to be
lost. This action is issued by the saga and handled by the store.
The Form Component should respond with either ``queryCancelForce``
or ``queryCancelBack``.

.. _`cs-web-components-base-operations.actions.operations.queryCancelBack`:

queryCancelBack
~~~~~~~~~~~~~~~

.. code-block:: javascript

      queryCancelBack(instanceName: string)

**Takes:**

- *instanceName*: Handler for user interaction

User notifies operation cancellation to be cancelled, i.e.
the operation is continued. This action is sent by the form/
operation-handler and handled by the saga in response to
``queryCancel`` being set.

.. _`cs-web-components-base-operations.actions.operations.queryCancelForce`:

queryCancelForce
~~~~~~~~~~~~~~~~

.. code-block:: javascript

      queryCancelForce(instanceName)

**Takes:**

- *instanceName*: Handler for user interaction

User notifies operation to be cancelled even though values have
been changed. This action is sent by the form/operation-handler
and handled by the saga in response to ``queryCancel`` being set.

.. _`cs-web-components-base-operations.actions.operations.queryDismiss`:

queryDismiss
~~~~~~~~~~~~

.. code-block:: javascript

      queryDismiss(instanceName: string)

**Takes:**

- *instanceName*: Handler for user interaction

Dismiss a dialog from dialog_hook after a result has been
dispatched. This action is sent by ``queryUserSaga`` to form.

.. _`cs-web-components-base-operations.actions.operations.queryResultBack`:

queryResultBack
~~~~~~~~~~~~~~~


Return back to form from dialog_hook dialog. This is sent by
the form and handlded by ``queryUserSaga``.

.. _`cs-web-components-base-operations.actions.operations.queryResultCall`:

queryResultCall
~~~~~~~~~~~~~~~


Call back to server from dialog_hook dialog. This is sent by
the form and handlded by ``queryUserSaga``.

.. _`cs-web-components-base-operations.actions.operations.queryResultCancel`:

queryResultCancel
~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      queryResultCancel(instanceName: string)

**Takes:**

- *instanceName*: Handler for user interaction

Cancel operation-handler from dialog_hook dialog. This is sent
by the form and handled by ``queryUserSaga``.

.. _`cs-web-components-base-operations.actions.operations.queryResultSubmit`:

queryResultSubmit
~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      queryResultSubmit(instanceName: string, attribute: object)

**Takes:**

- *instanceName*: Handler for user interaction

- *attribute*: entries ``name`` and ``value`` specify an attribute
  to be updated by the dialog hook.

Submit operation from dialog_hook dialog. This is sent by
the form and handlded by ``queryUserSaga``.

.. _`cs-web-components-base-operations.actions.operations.queryUser`:

queryUser
~~~~~~~~~

.. code-block:: javascript

      queryUser(instanceName: string, dialog: FrontendDialog)

**Takes:**

- *instanceName*: Handler for user interaction

- *dialog*: The Dialog definition

Display a dialog from dialog_hook to the user. This
action is handled by the form. See also ``queryUserSaga``.

.. _`cs-web-components-base-operations.actions.operations.removeFiles`:

removeFiles
~~~~~~~~~~~

.. code-block:: javascript

      removeFiles(instanceName: string, files: array)

**Takes:**

- *instanceName*: Handler for user interaction

- *files*: a list of file objects to be removed from the current state.

Remove a list of files to the operation state. Dispatched by form.

.. _`cs-web-components-base-operations.actions.operations.runOperation`:

runOperation
~~~~~~~~~~~~


Execute the operation identified by operationInfo. This function takes two positional
paramaters:

- instanceName, which is usually filled in by an OperationTrigger component.
- parameters, an object detailing which operation to execute and how to execute it.

.. _`cs-web-components-base-operations.actions.operations.runOperation_parameters`:

Operation Parameters
....................

The ``parameters`` object itself, may contain the following fields if ``runOperation``
is called from OperationTrigger or OperationHandler:

+----------------------------+----------------+----------------------------------------------------+
| Name                       | Type           | Description                                        |
+============================+================+====================================================+
| contextObjects             | Immutable.List | A List of objects to operate on. Required for      |
|                            |                | operations that act on objects.                    |
+----------------------------+----------------+----------------------------------------------------+
| parameters                 | Immutable.Map  | These parameters are passed as query parameters    |
|                            |                | to the submit operation call. Wether the operation |
|                            |                | requires any of these depends on the operation     |
|                            |                | implementation.                                    |
+----------------------------+----------------+----------------------------------------------------+
| resultInNewTab             | boolean        | If set, the result will be opened in a new tab.    |
|                            |                | Should only be set, if the result is a URL.        |
+----------------------------+----------------+----------------------------------------------------+
| successActions             | array          | A list of actions to be dispatched if operation    |
|                            |                | is successfully executed.                          |
+----------------------------+----------------+----------------------------------------------------+
| failedActions              | array          | A list of actions to be dispatched if operation    |
|                            |                | execution fails.                                   |
+----------------------------+----------------+----------------------------------------------------+
| generalActions             | array          | A list of actions to be dispatched regardless of   |
|                            |                | wether the operation fails or completes            |
|                            |                | successfully.                                      |
+----------------------------+----------------+----------------------------------------------------+
| dialog                     | string         | Specify an alternate dialog to the one configured  |
|                            |                | in the operation's operation configuration.        |
+----------------------------+----------------+----------------------------------------------------+
| suppressHandler            | boolean        | Suppress OperationHandler execution, even though   |
|                            |                | a dialog is configured                             |
+----------------------------+----------------+----------------------------------------------------+
| forceHandler               | boolean        | Force OperationHandler execution, even though      |
|                            |                | no dialog is configured.                           |
+----------------------------+----------------+----------------------------------------------------+

If you're dispatching the operation directly, the following parameter needs also be provided:

+----------------------------+----------------+----------------------------------------------------+
| Name                       | Type           | Description                                        |
+============================+================+====================================================+
| operationInfo              | Immutable.Map  | An object describing the operation.                |
+----------------------------+----------------+----------------------------------------------------+

Operation Instances
...................

instanceName is used to identify this operation execution in various contexts,
such as form display and window handling (for tab navigation). This parameter
is usually set when runOperation is invoked by
:ref:`cs-web-components-base-form.containers.OperationTrigger.__module__`.

If you are planning on using this action without relying on the
:ref:`cs-web-components-base-form.containers.OperationHandler.__module__`.
component, you should ensure that instanceName gets a unique value. Furthermore
you need to take care of (de-)initializing a state for this instance, by calling
``initFormInstance`` and ``clearFormInstance``.

Operations on objects and types
...............................

If the operation is run on a set of objects (which is determined by the field
``activation_mode`` in ``operationInfo``), you should set the parameter
contextObjects to an Immutable.List containing the objects, the operation acts on.
Operations that operate on Classes, such as CDB_Search or
CDB_Create use the type that is part of the operationInfo object.

Additional Parameters
.....................

Some operations require additional arguments in addition to the objects they
operate on, e.g., CDB_Create may be triggered with the UUID of a template.
These additional arguments should be put into field parameters.

.. _`cs-web-components-base-operations.actions.operations.runOperation__handlingresults`:

Handling results
................

The results of running an operation can be handled by providing a list of actions
for each result type. These must be plain Redux Actions, as the operation saga
modifies the payload to include the operation result in the field action.payload.operation,
which will be identified as the ``operation field`` in the rest of the section.

In all three cases, the operation field contains the following values:

- **info**: identifies the operation that was executed

The following parameters allow to handle the three available result types:

- **successActions**: A list of actions that will be dispatched on successfull completion
  of an operation. The operation field will contain the field result, which contains
  the result of the operation, sent from the server
- **failedActions**: A list of actions that will be dispatched when the operation fails.
  The operation field error will contain the error that was returned by the server.
- **cancelActions**: A list of actions that will be dispatched when the operation is
  cancelled. No further information will be added to the operation field.
- **generalActions**: These actions will be run, in any case (wether the operation was
  submitted, failed, or cancelled).

Default Handlers are provided by module
:ref:`cs-web-components-base-operations.actions.handlers.__module__`.
For an example on how to implement your own custom handler, see
:ref:`cs-web-components-base-operations.sagas.handlers.dispatchResultHandler`.

Opening tabs
............

If the operation should display its result in a new tab, you need to set the field
``resultInNewTab``. This field may take on two possible values, depending on wether the
operation displays a form or not:

- ``OPEN_ON_SUBMIT``: If the call to submit will be the last user interaction.
- ``OPEN_ON_RUN``: If no form is displayed.

Display configured forms
........................

Displaying a form and interacting with the user is done by an OperationHandler. These
handlers are usually only invoked if a configured form is available, as indicated by the
operationInfo object. The operation will then be run with the default attribute values
defined in the operationInfo object.

If you want to for some reason override this default behaviour, the field
``suppressHandler`` -- if set -- will suppress the handler invocation, even though a
form is configured, while the field forceHandler will invoke a handler, even though no
form is configured. The latter allows the API user to invoke their own front-end based
form.

Overriding the operations default form
......................................

Usually, the operation saga will display the form configured for the operation to the user.
If an alternative configured form should be displayed to the user, the form name may be
passed to runOperation in field dialog.

Non-Blocking Paramater
......................

If set, the running operation instance will not block other OperationTriggers.
May be used for operations which do not modify data, such as CDB_ShowObject.

A typical example is the form component.

.. _`cs-web-components-base-operations.actions.operations.submitGeneralError`:

submitGeneralError
~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      submitGeneralError(instanceName: string, errors)

**Takes:**

- *instanceName*: Handler for user interaction

- *errors*: An Immutable.List containing error messages

A general error occured during operation execution. This
is sent by operations saga, and should be displayed to
the user by form.

.. _`cs-web-components-base-operations.actions.operations.submitOperation`:

submitOperation
~~~~~~~~~~~~~~~

.. code-block:: javascript

      submitOperation(instanceName: string)

**Takes:**

- *instanceName*: Handler for user interaction

User requested to submit the operation during form execution.
Dispatched by form, handled by saga.

.. _`cs-web-components-base-operations.actions.operations.submitValueError`:

submitValueError
~~~~~~~~~~~~~~~~

.. code-block:: javascript

      submitValueError(instanceName: string, fields: Immutable.List.<Immutable.Map>)

**Takes:**

- *instanceName*: Handler for user interaction

- *fields*: an Immutable.List containing Immutable.Map
  objects. Each map has a ``field`` and a ``type`` field, specifying the
  type of error that occured.

Operation State contains invalid values. This is sent by
operations saga, and should be displayed to the user by
form.

