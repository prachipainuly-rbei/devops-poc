.. _`cs-web-components-base-operations.sagas.handlers.__module__`:

=========================
operations/sagas/handlers
=========================

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========






Contents
========

Functions
---------



.. _`cs-web-components-base-operations.sagas.handlers.dispatchResultHandler`:

dispatchResultHandler
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      dispatchResultHandler(handler, action)

**Takes:**

- *handler*: The action creator to be dispatched.

- *action*: The action with which the handler saga was invoked.

Invoke a handler action from a handler saga.

This is useful, if you, e.g., want to invoke another handler from your own custom
handler saga.

**Example**:

.. code-block:: javascript

   import {ReduxSaga} from 'cs-web-components-externals';
   import Operations from '../operations';
   import {Registry} from '../registry.js';

   const {takeEvery} = ReduxSaga.effects;

   const CUSTOM_HANDLER_ACTION = "CUSTOM_HANDLER_ACTION";

   function *myCustomHandlerSaga(action) {
      const {dispatchResultHandler, Handlers} = Operations;
      if (resultNeedsSpecialHandling(action)) {
         // Your handler code here ...
      } else {
         // Invoke default handler
         yield call(
           dispatchResultHandler,
           Handlers.updateObjectStore,
           action
         );
      }
   }

   function *myCustomHandlerWatcher() {
      yield takeEvery(CUSTOM_HANDLER_ACTION, myCustomHandlerSaga);
   }

   Registry.registerSaga(myCustomHandlerWatcher);

The custom handler in the example above to handle a result in a
custom way, if ``resultNeedsSpecialHandling`` evaluates to true,
else it updates the object in the store.

