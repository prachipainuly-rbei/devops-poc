.. _`cs-web-components-base-form.containers.OperationHandler.__module__`:

================
OperationHandler
================

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



Operation Handlers are container components who can be used to allow the
user to control the execution of an operation. Usually they will present
a configured form to the user, and -- on user interaction -- send actions
to the saga running the operation.

In order to do that, the HOC
:ref:`cs-web-components-base-form.containers.OperationHandler.WithOperationHandler`
provides several functions and fields to the wrapped component to interact
with the saga.

Handler Names
-------------

The operation handler is identified by its handler name. This can either
be set for a whole class of operation handlers when creating the operation
handler component with
:ref:`cs-web-components-base-form.containers.OperationHandler.WithOperationHandler`
or specifically for one instance of a component, by passing the property
handlerName to the component. Note that this property must not change during
the handlers React component lifecycle, as the handler will be registered in
componentWillMount and unregistered again on componentDidUnmount.

Operation State
---------------

The current state of the operation will be passed in as property ``operationState``.
This ``Immutable.Map`` contains the following fields describing the current state of
the operation:

- **mode**: The mode the operation's execution is currently in. See
  :ref:`cs-web-components-base-form.constants.__module__`.
- **info**: The operation info object, describing the operation that is executed.
- **params**: Parameters with which the operation was initialized.
- **values**: The current values of the operation state.
- **registers**: The registers/fields of the operation.
- **unchecked**: A list of unchecked fields.
- **query**: Presubmit Dialog Hooks allow a dialog to be displayed to the user. If
  a dialog hook calls the set_dialog function, the dialog configuration will be
  passed to the operation handler in this field.
- **queryCancel**: Boolean that is set, if the user wants to cancel the operation,
  but values have changed preventing cancellation.
- **displayForm**: Boolean that is set if the form should be displayed.
- **submitDisabled**: Boolean that is set if the OperationHandler should disable
  submitting the operation.
- **pendingChecks**: an ``Immutable.Map`` containing the fields for which asynchonuous
  value checks are currently pending.

The following fields are provided to determine the current mode of the operation
handler:

- **isInstanceActive**: An operation has been started, though the operation state may
  not yet be initialized.
- **isInstanceRunning**: An operation has been started, and its operation state has
  been initialized.


Function Properties passed to the wrapped component
---------------------------------------------------

Basic interaction is achieved via the following functions:

**runOperation**: start the execution of an operation. For parametrization, see
:ref:`cs-web-components-base-operations.actions.operations.runOperation_parameters`.

.. code-block:: none

   runOperation(
     operation: Immutable.map,
     operationParameters: object,
     operationHandler = undefined: string,
   )

**onChangeValues**: If the user changes one or more values, call this function to update
the operation state. ``operationState.get('values')`` will yield the updated values.
See also: :ref:`cs-web-components-base-operations.actions.operations.changeOperationValues`

.. code-block:: none

   onChangeValues(
     values: Immutable.map,
     unchecked: boolean,
   )

**onSubmit**: This will enter presubmit state. Validity Checks and Dialog Hooks will be run,
and the operation will be submitted, or the operation state will be updated accordingly.

.. code-block:: none

   onSubmit()

For ways to cancel a running operation, the following functions are provided:

**onCancel**: Cancel the operation. If values have been changed, this will
result in ``operationState.get('queryCancel')`` to be set. The operation handler may
now either continue the operation or cancel it, by invoking ``queryCancelBack`` or
``queryCancelForce``.
To bypass checking for changed values, set parameter ``force`` to ``false``
See also :ref:`cs-web-components-base-operations.actions.operations.cancelOperation`

.. code-block:: none

   onCancel(force = false)

**queryCancelForce**: If ``queryCancel`` is set, this will cancel the operation.

.. code-block:: none

   queryCancelForce()

**queryCancelBack**: If ``queryCancel`` is set, this will continue the operation.

.. code-block:: none

   queryCancelBack()

**forceCancel**: Force cancellation of the operation, regardless of changed values.
This is a conveniance function for calling cancelOperation with parameter ``force``
set.

.. code-block:: none

   forceCancel()

If a presubmit hook displays a dialog to the user, the following functions should be
mapped to the buttons of the dialog if available:

**preSubmitDialogBackToDialog**: Update the operation's values according to
``attribute``, and return to the configured form.

.. code-block:: none

   preSubmitDialogBackToDialog(
     attribute: {
       name: string,
       value
     }
   )

**preSubmitDialogCallServer**: Update the operation's values according to
``attribute``, and invoke the dialog hooks again.

.. code-block:: none

   preSubmitDialogCallServer(
     attribute: {
       name: string,
       value
     }
   )

**preSubmitDialogSubmit**: Update the operation's values according to
``attribute``, and submit the operation. Note that you should not call
``onSubmit`` in the context of a dialog hook.

.. code-block:: none

   preSubmitDialogSubmit(
     attribute: {
       name: string,
       value
     }
   )

**preSubmitDialogCancel**: Cancel the operation. This will query the user for
loss of changed data. There is no way to override this. Note that calling
``onCancel`` or ``forceCancel`` will not work in the context of a dialog.

.. code-block:: none

   preSubmitDialogCancel()

The ``attribute`` value that three of these functions may provide is used
to update the values in the operation state. These are usually provided in the
dialog configuration and should be retrieved from the operation state by the
component managing the user interation.


Contents
========

Functions
---------



.. _`cs-web-components-base-form.containers.OperationHandler.WithOperationHandler`:

WithOperationHandler
~~~~~~~~~~~~~~~~~~~~


HOC for creating
:ref:`cs-web-components-base-form.containers.OperationHandler.__module__`
components. Wrapping a component with this HOC has two effects:

- The component is connected to the form_with_operations actions and reducers
  allowing the component to execute operations, display the operation state
  and interact with the saga executing the operation.
- it is registered as a provider using the provider-name provided as a property.
  OperationTrigger components may trigger an operation to be executed using this
  component.

Parameters:

- Component: The component to be wrapped
- defaultHandlerName: The default handler name, with
  which the component will be registered. Component Instances may override this,
  by passing in the property ``handlerName``.

