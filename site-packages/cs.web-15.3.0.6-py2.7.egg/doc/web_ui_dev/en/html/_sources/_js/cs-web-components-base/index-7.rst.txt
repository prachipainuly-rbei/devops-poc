.. _`cs-web-components-base-messages.index.__module__`:

========
Messages
========

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



This module provides the basic API to display messages to the user.
The module provides actions and components to display messages as notifications or
banners, and can be easily extended to provide custom methods of display.

In order to post a message to the user, use the ``Actions.post*`` action creators
described in :ref:`cs-web-components-base-messages.actions.__module__`.

Example: Displaying a message
-----------------------------

.. code-block:: none

   import {Messages, Button} from 'cs-web-base-components';
   import {connect} from 'cs-web-components-externals';
   import React from 'react';

   class Example extends React.Component {
     constructor(props) {
       super(props);
       this.displayBanner = this.displayBanner.bind(this);
     }

     displayBanner() {
       this.props.postMessage(
         {
           level: Messages.Level.INFO,
           title: "banner-message",
           message: "I'm a banner-message!",
           owner: this,
           global: true
         },
         Messages.createBanner({bannerContainerId: 'my-banner-container'}),
         Messages.createNotification({timeout: 5000})
       );
     }

     render() {
       return (
         <div>
           <Messages.BannerContainer id="my-banner-container" />
           <Button.TextButton label="Display Banner" onClick={this.displayBanner}>
         </div>
       );
     }
   }

   const ConnectedExample = connect(
     undefined,
     {postMessage: Messages.Actions.postMessage}
   )(Example);


Contents
========
Modules
-------

- :ref:`cs-web-components-base-messages.actions.__module__`

Classes
-------

- :ref:`cs-web-components-base-messages.banners.index.BannerContainer`

Functions
---------



.. _`cs-web-components-base-messages.banners.index.createBanner`:

createBanner
~~~~~~~~~~~~

.. code-block:: javascript

      createBanner(arguments: object): object

**Takes:**

- *arguments*: Spread Parameter: ``{bannerContainerId}``

**Returns:** a displayInfo object

Display message inside the banner container specified by ``bannerContainerId``

.. _`cs-web-components-base-messages.notifications.index.createNotification`:

createNotification
~~~~~~~~~~~~~~~~~~


Display a message as a notification in the top right corner of the viewport.
The first parameter is a spread argument, that may receive the ``timeout`` of
the notification.

.. _`cs-web-components-base-messages.notifications.index.removeNotification`:

removeNotification
~~~~~~~~~~~~~~~~~~


Remove the notification for the message identified by ``messageId``.

Constants
---------


.. _`cs-web-components-base-messages.index.Level`:

**Level**: The level of the message. Possible values are:

- ``EMPTY``
- ``PROGRESS``
- ``INFO``
- ``SUCCESS``
- ``WARNING``
- ``ERROR``

