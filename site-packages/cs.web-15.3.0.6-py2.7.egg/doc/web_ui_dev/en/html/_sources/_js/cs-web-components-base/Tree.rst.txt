.. _`cs-web-components-base-tree.Tree.__module__`:

=========
tree/Tree
=========

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



The Tree class is a highly customizable component to display tree structures.
It provides an interface to search for nodes in the tree, and to navigate
through the search result. Furthermore, keyboard navigation is provided
to navigate through the trees nodes.

Specifying the tree's structure
-------------------------------

Subclasses of Tree must at least set the :samp:`rootNode` attribute in the
component's state. The root node must be an :samp:`Immutable.Map` instance,
with the following entries:

- id: a unique ID for the node
- content: the actual content belonging to the node, the node renderer
  component must be able to render this
- expanded: bool, describes the current state of the node
- children: an :samp:`Immutable.List` instance with child nodes
- has_children: bool, describes whether the node has children. If this is set
  to :samp:`true`, but :samp:`children` is empty, :samp:`fetchNodeChildren`
  is called to retrieve the child nodes.

Deferred loading of children
----------------------------

If your tree implementation can be expanded dynamically, your subclass must
also implement the method :samp:`fetchNodeChildren`. This method will be
invoked, if a node indicates it has children that are not yet fetched (the nodes
has_children property is set to true, but the property children is an empty list)
(from the server). fetchNodeChildren must be a thenable that:

- fetches the children by application-specific means
- updates the tree node whose children have been fetched, by invoking
  ``super.updateTreeNode(...)`` which is a thenable that resolves after
  the tree has been updated.
- resolves after the tree has been updated.

.. code-block:: javascript

   attachChildren(node, children) {
     return node.set('children', Immutable.List(children));
   }

   fetchNodeChildren(node) {
     return runRestGet(node.get('child_url')).then(children => {
        const nodeWithChildren = this.attachChildren(node, children);
        return super.updateTreeNode(nodeWithChildren);
     });
   }

If your tree implementation does not know in advance, wether there are child
nodes to be fetched, you may initialize all nodes with has_children set to
true, and when you discover that no child nodes are available
for a given node fetchNodeChildren may set the has_children property to false,
instead of updating children.

Searching for nodes
-------------------

Two properties control, how the tree may be searched:

- **SearchAdapter** is a property that allows to enhance the
  mechanism by which the tree's structure is navigated during search.
- **matcher** controls how the search algorithm determines a match.

A matcher must be a function that contains the following signature:

.. code-block:: javascript

   (node, search) => Boolean

``node`` is the node for whom a match should be determined, while
``search`` is the string that is input into the searchwidget.

SearchAdapters are provided by module tree.SearchAdapter. Available are
SimpleSearchAdapter, which implements a basic top-down depth-first search
on all already loaded nodes and BackendSearchAdapter, which fetches children
using fetchNodeChildren.

Rendering the title
-------------------

The title is rendered as follows: If a TitleRenderer React.Component is
specified, this component will be rendered. It will be provided the tree's props
and state as props. If no TitleRenderer is specified the prop title will be used
as the title. The prop title can be overwritten by specifying a state-variable
title when subclassing the tree.

Customizing tree rendering
--------------------------

The property ``TreeRenderer`` allows to customize the way the tree component is
rendered. Rendering occurs through a series of HOCs terminated by a tree renderer
component. The renderer itself is responsible to render the tree structure provided
as ``rootNode`` property, while the nested HOCs may modify the tree's properties,
and enhance the tree's UI representation.

The default configuration is as follows:

.. code-block:: javascript

   TreeContainer.DefaultRenderer = compose(
     Tree.TreeRenderer,
     Tree.TreeFilter.ShowSearchResults,
     Tree.TreeContainer,
   );

In addition, the component ModalTreeContainer provides a simplified default renderer
for use in modal dialogs, which avoids the use of modal components.

Customizing node rendering
--------------------------

The tree component provides a module NodeRenderer, which provides a set of HOCs to
customize the trees ability to render nodes. Examples of using this API may be found
in StructureTree and RestTree, which use configurable default components provided by
NodeRenderer to extract labels and icons from the tree-nodes provided by a
domain-specific API to render their nodes.

React Properties
================

+-----------------------+-----------+---------+---------------------------------+
| Property              | Type      | Default | Use                             |
+=======================+===========+=========+=================================+
| className             | string    | \-      | Attach a custom classname to    |
|                       |           |         | the tree component.             |
+-----------------------+-----------+---------+---------------------------------+
| NodeRenderer          | string    | \-      | React component that will be    |
|                       |           |         | used to render the node content |
+-----------------------+-----------+---------+---------------------------------+
| hasFocus              | bool      | true    | If true, the tree should handle |
|                       |           |         | keybpard events for navigation  |
+-----------------------+-----------+---------+---------------------------------+
| TitleRenderer         | component | \-      |                                 |
+-----------------------+-----------+---------+---------------------------------+
| TreeRenderer          | component | \-      | Custom tree rendering           |
+-----------------------+-----------+---------+---------------------------------+
| onSelect              | func      | \-      | Callback on node selection      |
+-----------------------+-----------+---------+---------------------------------+
| title                 | string    | \-      |                                 |
+-----------------------+-----------+---------+---------------------------------+
| hideRoot              | bool      | false   | If true, root node is not       |
|                       |           |         | rendered                        |
+-----------------------+-----------+---------+---------------------------------+


