.. _`cs-web-components-base-tree.NodeRenderer.__module__`:

=================
tree/NodeRenderer
=================

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



Tree Renderer API. This allows to create custom tree renderers. The
high level functions provided in this module can be used to generate
custom tree renderers.

The concepts used here are Renderers, Enhancements and Extractors.

Renderers
---------

Renderers are either base renderers or enhancements. Base Renderers
are renderers, while enhancements are HOCs that return a renderer if
provided a renderer as parameter. Available components are:

Base Renderers:

- :ref:`cs-web-components-base-tree.NodeRenderer.NodeRenderer`: Renders a text
  string. Search results are highlighted.

Enhancements:

- :ref:`cs-web-components-base-tree.NodeRenderer.WithHoverLink`: Render a link
  to the right of the content, when mouse
  is hovered over over content.
- :ref:`cs-web-components-base-tree.NodeRenderer.WithLink`: Render a link
  to the right of the content.
- :ref:`cs-web-components-base-tree.NodeRenderer.WithIcons`: Render a set
  of icons to the left of content.

Renderers and enhancements are usually provided as HOCs that need to
be parametrized to obtain a renderer or enhancements.

Extractors
----------

An extractor is usually provided as argument to a generator. It extracts
the relevant information for rendering from a node.

An extractor may either be provided as an array of strings - then
it will be used as argument to the getIn function of the node to
extract the information required by the generator - or as a function.
This function will be applied to each node to extract the information
for the generator.

As an array an extractor looks like this:

.. code-block:: javascript

   const e = ['content', 'icon'];

The equivalent function is:

.. code-block:: javascript

   const e = node => node.getIn(['content', 'icon']);

Composing Renderers and Enhancements
------------------------------------

Node renderers may be created using the create function. This function
takes as argument a renderer and a list of enhancement, and returns the
renderer, by applying the provided enhancements to the renderer.

Suppose we want to render a node which has the following content field:

.. code-block:: none

   {
       label: <string>,
       icon_url: <string>,
       link: <string>
   }

In order to render a node for this structure with link and icon, the
following renderer component may be used:

.. code-block:: javascript

    const RestNodeRenderer =
        NodeRenderer.create(
            NodeRenderer.NodeRenderer(['content', 'label']),
            NodeRenderer.WithIcons(node =>
                [
                    {
                        url: node.getIn(['content', 'icon_url']),
                        title: node.getIn(['content', 'label'])
                    }
                ]
            ),
            NodeRenderer.WithHoverLink(['content', 'link'])
    );

Implementing custom renderers
-----------------------------

It is also possible to implement custom renderers. An elaborate example can be found in
cs.sharing: RecipientListTree provides a delete button for each node, which issues a REST
call to delete this node.

A custom renderer enhancement is a function that takes a NodeRenderer as a parameter and
returns a component that renders the provided NodeRenderer, usually along additional
components:

.. code-block:: javascript

  const MyNodeRendererEnhancement(props) => {
    return props => <NodeRenderer {...props} />
  }

This example is a no-op: It simply renders the provided node. Simple enhancements can be
realized easily. Suppose you want to render a folder or file-icon, depending on wether your
node has children:

.. code-block:: none

  const WithFsIcon(props) => {
    return props => (
      <span>
        {
          <Icon src={props.get('has_children') ?
                     "path/to/folder.svg" :
                     "path/to/file.png"}/>
        }
        <NodeRenderer {...props} />
      </span>
    );
  }

Note that this particular example may be easily achieved using the WithIcons enhancement.


Contents
========

Functions
---------



.. _`cs-web-components-base-tree.NodeRenderer.create`:

create
~~~~~~

.. code-block:: javascript

      create(renderer: ReactComponent, enhancements: array): ReactComponent

**Takes:**

- *renderer*: a base renderer, e.g.,
       :ref:`cs-web-components-base-tree.NodeRenderer.DefaultRenderer`

- *enhancements*: an array of HOCs

Create an enhanced renderer from a base renderer and a list of enhancements.

.. _`cs-web-components-base-tree.NodeRenderer.DefaultRenderer`:

DefaultRenderer
~~~~~~~~~~~~~~~

.. code-block:: javascript

      DefaultRenderer(props: object)


Simple default renderer that uses the nodes `content`
field as label.

.. _`cs-web-components-base-tree.NodeRenderer.generateExtractor`:

generateExtractor
~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      generateExtractor(fnOrArray): function


Input is a function or array - an extractor. If it is an array, it
returns a function that retrieves the value at that path from
a provided node. If it is a function the function itself is returned.
Used so either Paths for Immutable.Map.getIn or functions may be
passed to Renderer-Generators.

Use this to create your own API compliant Renderer-Generators.

.. _`cs-web-components-base-tree.NodeRenderer.NodeRenderer`:

NodeRenderer
~~~~~~~~~~~~

.. code-block:: javascript

      NodeRenderer(nodeToLabel): ReactComponent

**Takes:**

- *nodeToLabel*: extractor returning a string or component
                     used as label by the renderer.

HOC that creates a base renderer component. This simply displays the
extracted label.

.. _`cs-web-components-base-tree.NodeRenderer.WithHoverLink`:

WithHoverLink
~~~~~~~~~~~~~

.. code-block:: javascript

      WithHoverLink(nodeToLink): HOC

**Takes:**

- *nodeToLink*: should extract a string representing a
                    URL from the node.

This Generator enhances a given NodeRenderer with a link
symbol rendered to the right of the component. The link is
only visible when the mouse is over the component.

.. _`cs-web-components-base-tree.NodeRenderer.WithIcons`:

WithIcons
~~~~~~~~~

.. code-block:: javascript

      WithIcons(nodeToIcons): HOC

**Takes:**

- *nodeToIcons*: extractor that generates a list like the above

This generator enhances a given NodeRenderer with a list of
icons that will be rendered left to the component

The list generated by the provided exctractor should have the
form:

.. code-block: json

   [
     Immutable.fromJS({
       url: 'http://example.com/some_link_to_a_png',
       title: 'an optional text explaining the icon'
     }),
     ...
   ]

.. _`cs-web-components-base-tree.NodeRenderer.WithLink`:

WithLink
~~~~~~~~

.. code-block:: javascript

      WithLink(nodeToLink): HOC

**Takes:**

- *nodeToLink*: should extract a string representing a
                    URL from the node.

This Generator enhances a given NodeRenderer with a link
symbol rendered to the right of the component.

