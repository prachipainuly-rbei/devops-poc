.. _`cs-web-components-base-table.index.__module__`:

=====
Table
=====

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



The :ref:`cs-web-components-base-Table.index.__module__` module provides
several table components with different feature sets as well as an
API for defining custom table components.

This document explains the general interface to render tables, by
providing column definition and row data. For details on how to
configure custom table components see
:ref:`cs-web-components-base-table.Manager.__module__`.

Providing Column Information
----------------------------

**Column Definition:** The data layout is provided as an immutable list
of objects, each of which represents a column in the table. Possible
fields of a column object are (Required fields given italic):

- label: The label displayed in the table header for the column
- tooltip: The tooltip displayed in the table header for the column
- *id*: should be unique key used to identify the column in the DOM,
  and by various table features
- width: Sets a fixed width for this table column. Omit this field to
  have this column take the available space. Should be omitted for at least
  one column two allow the table to take all avaible space.
- contentRenderer: Allows to define a custom renderer component for this
  column.
- getFormattedValue: A function that gets the value and should return
  the user representation of the value.
- sortFunction: A function that compares to values of the column. The
  function will be called in the way `cmp(v1, v2)` where v1 and v2  are
  lists of two elements. The first element is the value to be compared. The
  second contains all entries of the row where the value resides.
- getLink: A function that will be called with the value, row and column
  as parameter and should return the url of the link.
- action: A function that will be called with the value, row and column of
  the focused cell. This function will be invoked, when the user presses
  ``Enter``.

An example:

.. code-block:: javascript

   const columns = Immutable.fromJS(
     [
       {
         id: 'active',
         label: 'Active',
         width: 80
       },
       {
         id: 'name',
         label: 'Name'
       }
     ]
   );

**Column Ordering:** The feature
:ref:`cs-web-components-base-table.column_orderer.index.__module__` enables a table
to be reordered. To give an initial column ordering, pass an immutable
ordered set specifying column id as property ``orderedColumns`` to the
table.

**Cell Rendering:** By default the data value that is provided to each cell
(c.f. :ref:`cs-web-components-base-Table.__module__.row_data`) is directly
rendered into the DOM.

If this behaviour is undesired, it is possible to specify a custom cell
renderer for each column definition, by specifying a React Component on the field
``contentRenderer``. As an example consider that a given column will contain a
boolean value:

.. code-block:: none

   const columns = Immutable.fromJS(
     [
       {
         id: 'is_visible',
         label: 'Visible',
         contentRenderer: props =>
           <span style={{opacity: props.value ? 1 : 0}}>
             <Glyphicon  glyph="flag" />
           </span>
       },
       ...
     ]
   );

The property object of the renderer contains the following fields:

- row: The row definition of the row currently rendered.
- column: The column definition of the column currently rendered.
- value: The entry in the row definition that is to be rendered in the current cell.

Note that this only applies to the default row rendering implementation and may vary
if custom row renderers are defined (c.f.
:ref:`cs-web-components-base-Table.__module__.row_data`).

**Column Actions:** A column definition may specify a special action by specifying
a function for the field ``action``. This function will be called with the currently
selected ``value``, ``row`` and ``column`` when the user presses ``Enter`` and a
cell is selected.

An example:

.. code-block:: javascript

   function columnAction(value, row, column) {
       alert(`Selected value: ${value}`);
   }

   const columns = Immutable.fromJS(
     [
       // ...
       {
         id: 'name',
         label: 'Name',
         action: columnAction
       }
       // ...
     ]
   );

If no column action is defined and the ``getLink`` property is set for the
focused column, the default behaviour is to navigate to the link returned
by ``getLink``.


.. _`cs-web-components-base-Table.__module__.row_data`:

Row Data
--------

A row definition is an immutable object that specifies an unique``id`` string,
as well as a list of ``columns``. Each column is an object,
which will be passed to the cell renderer specified for the column.
A simple example to display a list of javascript objects:

.. code-block:: javascript

   const raw_rows = [
     {
        is_visible: true,
        name: "name1"
     },
     {
        is_visible: false,
        name: "name2"
     },
     {
        is_visible: true,
        name: "name3"
     },
   ]

   const rows = Immutable.fromJS(raw_rows.map(value, index) =>
     {
       id: `${index}`,
       columns: [
         value.get('is_visible'),
         value.get('name')
       ]
     }
   );

If ``rowAction`` is passed to the table, this function will be invoked,
when an action is triggered and no column is selected.

**Custom Row Renderers:** Custom Row renderers may be specified for each
row individually to override the default row rendering behaviour. To
specify a custom row renderer, specify the React component which should
render the row in field Renderer. The renderer is passed the following
props:

- row: The row data

Configurable Table Features
---------------------------

While the features described above are available to all types of tables,
additional features may be configured for a table component, which
may extend the properties required for the table, as well the column
definitions and row data.

For info on which features are available in which preconfigured table
component, see :ref:`cs-web-components-base-Table.__module__.preconfigured`.
For a comprehensive list of available features, see
:ref:`cs-web-components-base-Table.__module__.features`.


Examples
--------

.. code-block:: none

     import React from 'react';
     import Immutable from 'immutable';
     import { Table } from 'cs-web-components-base';

     const columns = Immutable.fromJS([
                 {id: 'attr1', label: 'First', width: 100},
                 {id: 'attr2', label: 'Second', width: 100},
                 {id: 'attr3', label: 'Third'},
                 {id: 'attr4', label: 'Fourth'}
             ]);

     const orderedColumns = Immutable.OrderedSet(['attr1', 'attr3', 'attr4', 'attr2']);

     const rows = Immutable.List().withMutations(list => {
         const n = 100;
         for (let i = 1; i <= n; i++) {
             list.push(Immutable.Map({
                 id: `row${i}`,
                 columns: Immutable.List([
                     i,
                     Math.floor((Math.random() * n) + 1),
                     Math.floor((Math.random() * n) + 1),
                     Math.floor((Math.random() * n) + 1)
                 ])
             }))
         }
     });

     class MenuExample extends React.Component {
         render() {
             return (
                 <div onClick={()=>console.log('clicking')}>test menu</div>
             );
         }
     };

     const myMenu = {
         toolbarMenu: [MenuExample],
         settingPanels: [MenuExample]
     };

     const SimpleTable = Table.SimpleTable;

     const ManagedTable = Table.Manager();

     const SortedTable = Table.Manager({
         providers: [Table.sortable],
         columnActions: [Table.sortable]
     });

     const FilteredTable = Table.Manager({
         Table: Table.Fixed(Table.Table),
         providers: [Table.sortable, Table.filterable],
         columnActions: [Table.sortable],
         toolbarButtons: [Table.filterable, Table.SettingPanels],
         toolbarMenu: [myMenu],
         settingPanels: [myMenu, Table.columnHider]
     });

     const SelectTable = Table.Manager({
         providers: [Table.sortable, Table.filterable, Table.selectable],
         columnActions: [Table.sortable, Table.selectable],
         toolbarButtons: [Table.filterable]
     });
     const PagedTable = Table.Manager({
         providers: [Table.sortable, Table.filterable, Table.selectable, Table.pagination],
         columnActions: [Table.sortable, Table.filterable, Table.selectable, Table.pagination],
         toolbarButtons: [Table.sortable, Table.filterable, Table.selectable, Table.pagination],
         footerPanels: [Table.sortable, Table.filterable, Table.selectable, Table.pagination]
     });

     const GroupedTable = Table.Manager({
         providers: [Table.sortable, Table.filterable, Table.selectable, Table.groupable],
         columnActions: [Table.sortable, Table.filterable, Table.selectable,
                         Table.columnDragger],
         toolbarButtons: [Table.sortable, Table.filterable, Table.selectable],
         headerPanels: [Table.groupable],
         footerPanels: [Table.sortable, Table.filterable, Table.selectable]
     });

     const ResizableTable = Table.Manager({
          columnActions: [Table.columnResizer, Table.columnDragger, Table.columnOrderer]
     });

     export default class TableTest extends React.Component {
         constructor(props) {
             super(props);
             this.state = {
                 columns: columns
             };
             this.
         }

         render() {
             const stl = {height: '200px', marginBottom: '20px'};
             const stl2 = {height: '300px', marginBottom: '20px'};
             const columns = this.state.columns;
             const initSortColumns = Immutable.fromJS([
                 {id: 'attr2', desc:true}
             ]).toSet();
             return (
                 <div>
                     <div style={stl}>
                         <SimpleTable columns={columns} orderedColumns={orderedColumns} rows={rows}></SimpleTable>
                     </div>
                     <p>Manager</p>
                     <div style={stl}>
                         <ManagedTable columns={columns} orderedColumns={orderedColumns} rows={rows}></ManagedTable>
                     </div>
                     <p>Sort</p>
                     <div style={stl}>
                         <SortedTable columns={columns}
                                      orderedColumns={orderedColumns}
                                      initSortColumns={initSortColumns}
                                      rows={rows}></SortedTable>
                     </div>
                     <p>Filter</p>
                     <div style={stl}>
                         <FilteredTable columns={columns}
                                      orderedColumns={orderedColumns}
                                      initSortColumns={initSortColumns}
                                      initFilter="20"
                                      rows={rows}></FilteredTable>
                     </div>
                     <p>select</p>
                     <div style={stl}>
                         <SelectTable columns={columns}
                                      orderedColumns={orderedColumns}
                                      singleSelection={false}
                                      onSelectRows={(selected) => console.log(selected.toJS())}
                                      rows={rows}></SelectTable>
                     </div>
                     <p>pagination</p>
                     <div style={stl}>
                         <PagedTable columns={columns}
                                     orderedColumns={orderedColumns}
                                     rows={rows}
                                     initPageSizeOptions={Immutable.Set([10, 20])}
                         ></PagedTable>
                     </div>
                     <p>resizable</p>
                     <div style={stl}>
                         <ResizableTable columns={columns}
                                     orderedColumns={orderedColumns}
                                     rows={rows}
                         ></ResizableTable>
                     </div>
                     <p>groupable</p>
                     <div style={stl}>
                         <GroupedTable columns={columns}
                                     orderedColumns={orderedColumns}
                                     rows={rows}
                                     initGroupColumns={Immutable.OrderedSet(['attr2', 'attr3'])}
                         ></GroupedTable>
                     </div>
                 </div>
             );
         }
     };

Contents
========

.. _`cs-web-components-base-Table.__module__.preconfigured`:

Preconfigured Tables
--------------------

.. _`cs-web-components-base-Table.__module__.components`:

Components
----------

- :ref:`cs-web-components-base-table.Manager.__module__`
- :ref:`cs-web-components-base-table.Table.__module__`
- :ref:`cs-web-components-base-table.ToolbarMenu.ToolbarMenu`

.. _`cs-web-components-base-Table.__module__.features`:

Features
--------

- :ref:`cs-web-components-base-table.sortable.index.__module__`
- :ref:`cs-web-components-base-table.column_orderer.index.__module__`
- :ref:`cs-web-components-base-table.filterable.index.__module__`
- :ref:`cs-web-components-base-table.groupable.index.__module__`
- :ref:`cs-web-components-base-table.pagination.index.__module__`
- :ref:`cs-web-components-base-table.selectable.index.__module__`
- :ref:`cs-web-components-base-table.column_search.index.__module__`


Contents
========
Modules
-------

- :ref:`cs-web-components-base-table.column_aggregator.index.__module__`
- :ref:`cs-web-components-base-table.column_dragger.index.__module__`
- :ref:`cs-web-components-base-table.column_orderer.index.__module__`
- :ref:`cs-web-components-base-table.Scrolled.__module__`
- :ref:`cs-web-components-base-table.selectable.index.__module__`
- :ref:`cs-web-components-base-table.sortable.index.__module__`
- :ref:`cs-web-components-base-table.Table.__module__`

Functions
---------


