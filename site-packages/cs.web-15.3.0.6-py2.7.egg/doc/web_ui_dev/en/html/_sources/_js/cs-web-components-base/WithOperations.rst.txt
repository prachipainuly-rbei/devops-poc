.. _`cs-web-components-base-components.WithOperations.__module__`:

==============
WithOperations
==============

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



This module provides the ``WithOperations`` Higher Order Component. This HOC
provides the wrapped component with an operations property that
contains a set of operations, selected by WithOperations based on its parameters.

.. note::

   Operations must be Web-UI enabled, or they will be filtered out of the list,
   before passing it to the wrapped component. Operations which are not Web-UI
   enabled can be recognized by inspecting the payload of the fetch call.
   The field ``submitURL`` will be undefined for this operation.

Operations can be restricted by either giving an operation context name, or a
list of operation names (or both). The signature of WithOperations is as follows:

.. code-block:: none

   WithOperations(
     Component: Component,
     {
       contextType: String,
       operationContextName: String,
       operationNames: [String]
     }
   ):Component

The structure of the args-parameter is as follows:

- contextType: type of the object, if not specified the components
  contextObjects will be used to determine the object
- operationContextName: string
- operationNames: array

The parameters ``operationNames`` and ``operationContextName`` specify the method
of how to determine the set of operations provided to the wrapped component and
should be considered mutually exclusive.

Operations always belong to an object class. This class is either given directly
as the parameter ``contextType`` to ``WithOperations``, or -- if no ``contextType``
is specified -- the component will use the base class of the provided
``contextObjects`` as the class for which to request operations.

.. note::

   The context type of the objects or classes for which operations should be
   fetched must be available for this component to work. If you use objects
   without :ref:`cs-web-components-base-actions.object-actions.fetchObject`,
   you should use
   :ref:`cs-web-components-base-actions.object-actions.fetchType` to fetch
   relevant type information.

The set of operations provided to the wrapped component is determined either by
providing argument ``operationContextName`` or ``operationNames``. If an operation
context is specified, all operations listed in the context will be passed to the
wrapped component, if a list of operations is specified, these operations will be
passed.

React Properties passed to the wrapped component
------------------------------------------------

+------------------+------------------------+----------------------------------------------+
| Property         | Type                   |  Use                                         |
+==================+========================+==============================================+
| operations       | Immutable.List(opInfo) | The operations requested from the backend    |
+------------------+------------------------+----------------------------------------------+

React Properties of the wrapping component
------------------------------------------

+------------------+------------------+--------------+-----------------------------------------------+
| Property         | Type             | Default      | Use                                           |
+==================+==================+==============+===============================================+
| contextObject    | Immutable.Map    | \-           | For a single select operation on the provided |
|                  |                  |              | object.                                       |
+------------------+------------------+--------------+-----------------------------------------------+
| contextObjects   | Immutable.List(  | \-           | For a multi select operation on the selected  |
|                  |   contextObject) |              | objects.                                      |
+------------------+------------------+--------------+-----------------------------------------------+

Note that contextObject and contextObjects are mutually exclusive, and none should be provided if a
``contextType`` is specified.

Example
-------

.. code-block:: none

   const MyOperationList = WithOperations(
     props => {
       return (
         <ul>
           props.operations.map(opInfo => (<li>opInfo.get('label')</li>))
         </ul>
       );
     },
     ['CDB_ShowObject', 'CDB_Modify', 'CDB_Workflow']
   );


Contents
========

Functions
---------



.. _`cs-web-components-base-components.WithOperations.WithOperations`:

WithOperations
~~~~~~~~~~~~~~


Implementation of the ``WithOperations`` HOC.

