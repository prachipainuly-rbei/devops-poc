.. _`cs-web-components-base-fetch.__module__`:

=====
fetch
=====

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



Provide a set of wrapper functions to fetch data from the backend, or
send data to the backend. All functions return a Promise object, so callers
have a consistent way to attach follow-up actions to them.


Contents
========

Functions
---------



.. _`cs-web-components-base-fetch.deleteObject`:

deleteObject
~~~~~~~~~~~~

.. code-block:: javascript

      deleteObject(url: string): thenable

**Takes:**

- *url*: the URL to call

Issue a DELETE request for a resource identified by the URL.

.. _`cs-web-components-base-fetch.fetchAndCheck`:

fetchAndCheck
~~~~~~~~~~~~~

.. code-block:: javascript

      fetchAndCheck(url: string, init: object): thenable


Wrapper around the standard fetch API, that throws errors for all returned
status codes not in the 2xx range.
See https://github.com/github/fetch#handling-http-error-statuses
This is a low level function that has the same arguments as the standard (to
be ...) HTML5 fetch function.

.. _`cs-web-components-base-fetch.getJSON`:

getJSON
~~~~~~~

.. code-block:: javascript

      getJSON(url: string, params: Object): thenable

**Takes:**

- *url*: the URL to call. If needed, can already contain query parameters

- *params*: optional query parameters to append to the URL

Issue a GET request, and interpret the result as JSON.

.. _`cs-web-components-base-fetch.postForm`:

postForm
~~~~~~~~

.. code-block:: javascript

      postForm(url: string, formData: FormData): thenable

**Takes:**

- *url*: the URL to call

- *formData*: the request payload

Issue a POST request with the payload formatted as form data, and interpret
the result as JSON.

.. _`cs-web-components-base-fetch.postJSON`:

postJSON
~~~~~~~~

.. code-block:: javascript

      postJSON(url: string, data): thenable

**Takes:**

- *url*: the URL to call

- *data*: the request payload, will be formatted as JSON

Issue a POST request with JSON formatted request body, and interpret the
result as JSON, if a response body was received.

.. _`cs-web-components-base-fetch.putJSON`:

putJSON
~~~~~~~

.. code-block:: javascript

      putJSON(url: string, data: object): thenable

**Takes:**

- *url*: the URL to call

- *data*: the request payload, will be formatted as JSON

Issue a PUT request with JSON formatted request body, and interpret the
result as JSON.
For responses with HTTP 204, 205 the result is undefined as these response codes
must not have a payload.

