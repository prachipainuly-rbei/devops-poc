.. _`cs-web-components-base-actions.object-actions.__module__`:

==============
object-actions
==============

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



This module provides actions to manipulate the global object store.
Use this module's action creators to access objects via the REST API
from the frontend.

The reducers that store these objects are defined in
:ref:`cs-web-components-base-reducers.object-store.__module__`. See
this modules description on how the object-actions API handles
errors and pending requests.

All actions in the store will return thenable objects that will resolve
if the operation is completed, or be rejected, if the operation fails.


Contents
========

Functions
---------



.. _`cs-web-components-base-actions.object-actions.createObject`:

createObject
~~~~~~~~~~~~

.. code-block:: javascript

      createObject(collectionUrl: string, values: object, refetchRelships: array): ReduxAction


Sends a PUT request to create the provided object from the server.

.. _`cs-web-components-base-actions.object-actions.deleteObjectFromStore`:

deleteObjectFromStore
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      deleteObjectFromStore(url: string): ReduxAction


This action creator sends a DELETE request for the object
identified by ``url`` to the server, and -- if successfull --
removes the deleted object from the store.

.. _`cs-web-components-base-actions.object-actions.editObject`:

editObject
~~~~~~~~~~

.. code-block:: javascript

      editObject(obj: object, newValues: object): ReduxAction

**Takes:**

- *obj*: a REST API object to be modified

- *newValues*: an object specifying the
                            new values for this object

Sends a POST request to modify the given object to the server.

.. _`cs-web-components-base-actions.object-actions.ensureFileTargetsAvailable`:

ensureFileTargetsAvailable
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      ensureFileTargetsAvailable(objectId: string): ReduxAction


/**
Search for the object in the global store. If that object is not
part of the global store or the object does not contain the
key ``targets`` in the ``relship:files`` section `fetchObject` is
called.

See also
~~~~~~~~

- :ref:`cs-web-components-base-reducers.object-store.objectsById`

.. _`cs-web-components-base-actions.object-actions.fetchClassRelships`:

fetchClassRelships
~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      fetchClassRelships(classname: String, force: Boolean): ReduxAction

**Takes:**

- *classname*: The name of the class for which to get the data

- *force*: If true, reload if already stored

Fetch from the backend the relationship metadata for a given class

.. _`cs-web-components-base-actions.object-actions.fetchCollection`:

fetchCollection
~~~~~~~~~~~~~~~

.. code-block:: javascript

      fetchCollection(url: string, params: object): ReduxAction

**Takes:**

- *url*: url of the collection to fetch

- *params*: an object specifying additional query parameters

Fetch a collection of objects and store them in
:ref:`cs-web-components-base-reducers.object-store.objectsById`.

Parameter ``getter`` should only be used for special cases where the
collection data are accessible via another key as ``objects``.
E.g. in activitystream the result should be accessed by providing
``data => data.postings``.

See also
~~~~~~~~

- :ref:`cs-web-components-base-reducers.object-store.objectsById`

.. _`cs-web-components-base-actions.object-actions.fetchObject`:

fetchObject
~~~~~~~~~~~

.. code-block:: javascript

      fetchObject(url: string, viewname: string, withFiles: string): ReduxAction


Retrieve an object from the server and store it in the global store.
If fetching fails an error will be stored in
:ref:`cs-web-components-base-reducers.fetching.errorsById`
for the url used to fetch the object.

If an object is already in the store, a new fetchObject call will reload the
object from the server. The @type link for the object will be fetched when the
object is returned from the server.

See also
~~~~~~~~

- :ref:`cs-web-components-base-reducers.object-store.objectsById`

.. _`cs-web-components-base-actions.object-actions.fetchObjectWithRelships`:

fetchObjectWithRelships
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      fetchObjectWithRelships(url: string, viewname: string, relships: array): ReduxAction


This action creator fetches the object identified by the provided URL,
and -- if successfull -- the relations provided in array ``relships``.

See also
~~~~~~~~

- :ref:`cs-web-components-base-actions.object-actions.fetchRelship`
- :ref:`cs-web-components-base-actions.object-actions.fetchObject`

.. _`cs-web-components-base-actions.object-actions.fetchRelship`:

fetchRelship
~~~~~~~~~~~~

.. code-block:: javascript

      fetchRelship(url: string, viewname: string, params: object)

**Takes:**

- *url*: url of the relship to fetch

- *viewname*: the backend view to load

Fetch a relship defined on an object. The url parameter should be retrieved
from an object retrieved via REST API.

.. code-block:: javascript

   import { fetchRelship, connect } from 'cs-web-components-base';

   const ExampleComponent = props => {
     const object = props.objectsById.get(props.objectId);
     const objectUrl = object.getIn(['system:relships', 'relships', props.relshipId]);
     this.props.fetchRelship().then(() => {

     });
   };

   const mapStateToProps = state => {
     return {getObjectById: objectId => state.objectsById.get(objectId)};
   };

   connect(mapStateStateToProps, {fetchRelship})(ExampleComponent);

.. _`cs-web-components-base-actions.object-actions.fetchRelships`:

fetchRelships
~~~~~~~~~~~~~

.. code-block:: javascript

      fetchRelships(relships: array): ReduxAction


Fetch an array of relships. Each relship should be an object
specifying the parameters for
:ref:`cs-web-components-base-actions.object-actions.fetchRelship`

See also
~~~~~~~~

- :ref:`cs-web-components-base-actions.object-actions.fetchRelship`

.. _`cs-web-components-base-actions.object-actions.fetchType`:

fetchType
~~~~~~~~~

.. code-block:: javascript

      fetchType(url: string, force: boolean): ReduxAction

**Takes:**

- *url*: The url of the type to be ensured.

- *force*: reload an already loaded type if set

This action creator loads the type identified by ``url``. By
default the type will not be reloaded (as we assume this data
to be static), if the action is executed multiple times. To
reload an already loaded type, set ``force`` to ``true``.

Type URLs are usually obtained from an object's type field:

.. code-block:: javascript

  const object = state.objectById(some_url);
  fetchType(object.get('@type')).then(some_func);

See also
~~~~~~~~

- :ref:`cs-web-components-base-reducers.object-store.typesById`

.. _`cs-web-components-base-actions.object-actions.fetchTypes`:

fetchTypes
~~~~~~~~~~

.. code-block:: javascript

      fetchTypes(urls: array, force: boolean): ReduxAction

**Takes:**

- *urls*: an array of urls

- *force*: set true to reload

Fetch a list of types.

See also
~~~~~~~~

- :ref:`cs-web-components-base-actions.object-actions.fetchType`

