.. _`cs-web-components-base-operations.sagas.operations.__module__`:

===========================
operations/sagas/operations
===========================

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



This module implements the operation execution logic in the front end.

It's main entry point is runOperationSaga. The main steps are implemented as
sagas themselves:

1. ``startOperation``: Get Operation State and Form data from backend and
   initialize frontend state
2. ``execOperation``: Handle form interaction, exec presubmit and submit stage
3. Handle result data by dispatching actions for success, cancellation, and error.


Contents
========

Functions
---------



.. _`cs-web-components-base-operations.sagas.operations.execFormSaga`:

execFormSaga
~~~~~~~~~~~~


Display a form and wait for either submit or cancel. CHANGE_OPERATION_VALUES
events are handled in ``form.js:changeFormSaga``.

.. _`cs-web-components-base-operations.sagas.operations.execOperationSaga`:

execOperationSaga
~~~~~~~~~~~~~~~~~


Runs in a loop executing the frontend logic for the operation.
Each iteration, the saga

1. waits till the user submits or cancels the form. This may
   either cancel or continue the operation or reinitiate form interation
   (See ``getOperationValues`` saga).
2. executes the presubmit stage (containing form validation, dialog hooks and
   wizard logic) This may either cancel or continue the operation or reinitiate
   form interation (See ``execPresubmit`` saga).
3. finally submit the operation state to the backend for operation execution.
   This may either return to the form (when asynchronuous form checks are still
   pending), signal an error or return a result. (See ``execSubmit`` saga).

.. _`cs-web-components-base-operations.sagas.operations.execPresubmitSaga`:

execPresubmitSaga
~~~~~~~~~~~~~~~~~


Executes Presubmit Stage. Returns an object that is analyzed for
control flow. This may either return to form execution stage,
yield an error, cancel the operation, or cause execOperation to
continue with submit stage.

1. Check form for missing values for mandatory fields. If this fails
   the user is notified, and form execution continues.
2. Call presubmit hooks and evaluate results:

   - Dialog Hooks yield errors
   - Dialog Hooks query the user
   - Wizard Logic: Replace form data in state with return values
     from dialog hook.

3. Wizard Logic: Retrieve a new form from backend and replace
   form data in state.

.. _`cs-web-components-base-operations.sagas.operations.queryUserSaga`:

queryUserSaga
~~~~~~~~~~~~~


Display a FrontendDialog to the user, and wait for one of the possible result.

When running submitOperation, the Operations presubmit DialogHooks will be run.
If a dialog is configured, it will be displayed to the user by this saga by
invoking the queryUser action.

The dialog may update an arbitrary attribute value in the operation state,
and continue the operation.

The dialog component must dispatch one of the following actions to continue
operation execution:

- queryResultBack: Update attribute, go back to form
- queryResultCall: Update attribute, invoke dialog hooks again
- queryResultCancel: Cancel operation
- queryResultSubmit: Update attribute, submit operation

.. _`cs-web-components-base-operations.sagas.operations.runHybridOperation`:

runHybridOperation
~~~~~~~~~~~~~~~~~~


If targetUrl is set the operation will be run in
legacy mode, by navigating to the provided CDB-URL.

.. _`cs-web-components-base-operations.sagas.operations.runOperationSaga`:

runOperationSaga
~~~~~~~~~~~~~~~~


Top-level entry point for running operations.

This initializes and executes an operation, and
dispatches the provided result handlers.

See operations/actions/operations.js for a description
of the structure of payload.

.. _`cs-web-components-base-operations.sagas.operations.selectOperationAction`:

selectOperationAction
~~~~~~~~~~~~~~~~~~~~~


Higher Order Selector for Actions on Operation Instances.

This Higher Order Function takes an instanceName and creates a
selector that will select an action based on the provided
instanceName and actionType.

.. _`cs-web-components-base-operations.sagas.operations.startOperationSaga`:

startOperationSaga
~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      startOperationSaga(runOperation)

**Takes:**

- *runOperation*: payload.

Retrieve the initial operation_state and mask configuration from backend,
if available, and initializes the Redux operation-state.

.. _`cs-web-components-base-operations.sagas.operations.submitOperationSaga`:

submitOperationSaga
~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

      submitOperationSaga(payload, newState)

**Takes:**

- *payload*: the payload provided to runOperation.

- *newState*: the current operation state.

Submit a running operation.

