.. _`cs-web-components-base-helpers.__module__`:

=======
helpers
=======

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



Various helper functions.


Contents
========

Functions
---------



.. _`cs-web-components-base-helpers.compose`:

compose
~~~~~~~

.. code-block:: javascript

      compose(base: ReactComponent, hocs: array): ReactComponent

**Takes:**

- *base*: A component to which the HOCs are applied

- *hocs*: A list of HOCs which are applied to the
                      component

Create a component by applying a list of HOCs to a
provided base component.

Signature:

.. code-block:: javascript

   compose(
     base: ReactComponent,
     ...hocs: (ReactComponent => ReactComponent)
   ): ReactComponent

Usage Example:

.. code-block:: none

   const AsHeading =
     Component => props => <h1><Component ...props /></h1>;
   const MyComponent =
     props => props.title;
   const MyHeadingComponent = compose(
     MyComponent,
     AsHeading
   );

.. _`cs-web-components-base-helpers.contains`:

contains
~~~~~~~~

.. code-block:: javascript

      contains(container: Node, component: Node)

**Takes:**

- *container*: The node which may be containing ``component``.

- *component*: The node which may be contained by ``container``.

If container may be document, use this instead of ``Node.contains``
to ensure compatibility with Internet Explorer.

See also:
https://developer.mozilla.org/en-US/docs/Web/API/Document#Internet_Explorer_notes

.. _`cs-web-components-base-helpers.ensureLinkProtocol`:

ensureLinkProtocol
~~~~~~~~~~~~~~~~~~


For links that are stored in an attribute somewhere, relative paths don't make
much sense; these cases mean most of the time that the "http" part was forgotten.
This function checks the input parameter to see if it is either an absolute path,
or contains a protocol part. If not, "http" is prepended.

.. _`cs-web-components-base-helpers.getAppSetup`:

getAppSetup
~~~~~~~~~~~


Return application setup values(window.appSetup)
as an immutable object.

.. _`cs-web-components-base-helpers.getIcon`:

getIcon
~~~~~~~

.. code-block:: javascript

      getIcon(iconID: string, iconParams: object)

**Takes:**

- *iconID*: The icon ID from the backend

- *iconParams*: Optional variables used by the icon configuration

Return the URL to retrieve a configured icon by its ID from the backend. The
icon configuration may contain variables, in this case the suitable values
must be given also.

.. _`cs-web-components-base-helpers.getLocalPathForURL`:

getLocalPathForURL
~~~~~~~~~~~~~~~~~~


Helper function to calculate the route path for given URL.
If the possible path is found, it can be use for e.g. in-page
navigation(client side routing). Otherwise `undefined` will
be return.

.. _`cs-web-components-base-helpers.getObjectImage`:

getObjectImage
~~~~~~~~~~~~~~


Returns image file associated with object.

.. _`cs-web-components-base-helpers.getPlugin`:

getPlugin
~~~~~~~~~

.. code-block:: javascript

      getPlugin(context: string, predicate: callable, fallback: ReactComponent): ReactComponent

**Takes:**

- *context*: The plugin ID that is to be searched

- *predicate*: A callable to filter the entries

- *fallback*: Component to return if no match is found

**Returns:** the plugin component to use, or undefined

Return the first plugin component in the pluginConfiguration for ``context``
that is matched by predicate. Returns ``fallback`` if no match is found.
predicate must be a function: predicate(value, index, iterable) -> bool

Usage example::

   getPlugin('content-view', re => contentType.search(new RegExp(re, 'i')) !== -1);

.. _`cs-web-components-base-helpers.isCEDesktop`:

isCEDesktop
~~~~~~~~~~~


Return whether the current application is running in Contact Element Desktop.

.. _`cs-web-components-base-helpers.isSupportedImageType`:

isSupportedImageType
~~~~~~~~~~~~~~~~~~~~


Return whether the image content type is currently supported.

.. _`cs-web-components-base-helpers.isSupportedVideoType`:

isSupportedVideoType
~~~~~~~~~~~~~~~~~~~~


Return whether the media content type is currently supported.

.. _`cs-web-components-base-helpers.makeCancelable`:

makeCancelable
~~~~~~~~~~~~~~

.. code-block:: javascript

      makeCancelable(promise: Promise): object


Helper function to make a promise cancelable. For reasoning and usage see
https://github.com/facebook/react/issues/5465#issuecomment-157888325

NOTE: In a promise chain, make the LAST promise cancelable! Otherwise a promise
may resolve even when already cancelled (see E045116).

.. _`cs-web-components-base-helpers.makeSequence`:

makeSequence
~~~~~~~~~~~~

.. code-block:: javascript

      makeSequence(callables: array): thenable


Use promise chaining to issue the upload calls sequentially, see
http://www.html5rocks.com/en/tutorials/es6/promises/#toc-creating-sequences

Usage is like this:

.. code-block:: javascript

   const callables =
     someArray.map(item => () => doSomething(item, [other args]));
   const promise =
     makeSequence(callables).then(...);

.. _`cs-web-components-base-helpers.parseQuery`:

parseQuery
~~~~~~~~~~


Parse query parameters from search string of a location object

.. _`cs-web-components-base-helpers.prefixNS`:

prefixNS
~~~~~~~~

.. code-block:: javascript

      prefixNS(name: string): string


``componentNameSpace`` should be a constant defined in your
``webpack.config.js``. This function creates a namespaced name
based on this constant. You should use this for all components you register
in the :ref:`cs-web-components-base-registry.__module__`, as well as your
CSS classes.

.. _`cs-web-components-base-helpers.toDisplayFormat`:

toDisplayFormat
~~~~~~~~~~~~~~~


Helper function to personalize a value.

.. _`cs-web-components-base-helpers.updateQuery`:

updateQuery
~~~~~~~~~~~


update query parameters on a location object

Constants
---------


.. _`cs-web-components-base-helpers.Console`:

**Console**: Wrapper around environments console object

