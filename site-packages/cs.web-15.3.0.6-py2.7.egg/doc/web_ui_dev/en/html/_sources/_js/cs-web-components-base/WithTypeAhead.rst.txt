.. _`cs-web-components-base-formcontrols.WithTypeAhead.__module__`:

==========================
formcontrols/WithTypeAhead
==========================

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



This component enhances another
<:ref:`cs-web-components-base-formcontrols.TextInput.__default__`>-based
form control with ``type ahead`` feature. It will open a drop down list to show possible options
during typing. The extended component has following additional properties:

+-------------------------+--------------------+-------------+----------------------------------------------------+
| Property                | Type               | Default     | Use                                                |
+=========================+====================+=============+====================================================+
| onSelectAt              | func               | -           | A callback fired when an option from the drop down |
|                         |                    |             | is selected, the index of the option is passed in  |
+-------------------------+--------------------+-------------+----------------------------------------------------+
| onTAStepAt              | func               | -           | A callback fired when an option from the drop down |
|                         |                    |             | is navigated by pressing arrow keys, the index of  |
|                         |                    |             | the option is passed in                            |
+-------------------------+--------------------+-------------+----------------------------------------------------+
| onTACancel              | func               | -           | A callback fired when the user close the drop down |
|                         |                    |             | by pressing "Escape" key                           |
+-------------------------+--------------------+-------------+----------------------------------------------------+
| value                   | any                | -           | Data to be displayed                               |
+-------------------------+--------------------+-------------+----------------------------------------------------+
| matched                 | Immutable.List     | -           | A list of options, which match the typed data      |
+-------------------------+--------------------+-------------+----------------------------------------------------+
| hasMoreMatches          | bool               | -           | Indicates if list of matches was truncated         |
+-------------------------+--------------------+-------------+----------------------------------------------------+
| TypeAheadItemRenderer   | component          | -           | Renderer for the options in the drop down list     |
+-------------------------+--------------------+-------------+----------------------------------------------------+
| forceOpenMatchesOnFocus | bool               | -           | Dropdown opens when input receives focus.          |
+-------------------------+--------------------+-------------+----------------------------------------------------+

Example:

.. code-block:: none

    import React from 'react';
    import {FormControl} from 'cs-web-components-base';
    import Immutable from 'immutable';

    const testData = Immutable.List([
        'Bayern',
        'Berlin',
        'Brandenburg',
        'Bremen',
        'Sachsen',
        'Sachsen-Anhalt'
    ]);

    function filterTestData(value) {
        const lowered = value.toLowerCase();
        return testData.filter(item => lowered !== '' && item.toLowerCase().indexOf(lowered) == 0);
    }

    const TypeAheadText = FormControl.WithTypeAhead(FormControl.TextInput);

    // can be used in render() of some other component as: <StaticTypeAhead />
    class StaticTypeAhead extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                text: '',
                matches: Immutable.List()
            };
            this.onTextChange = this.onTextChange.bind(this);
            this.onSelectAt = this.onSelectAt.bind(this);
        }

        onTextChange(event) {
            const value = event.target.value;
            this.setState({
                text: value,
                matches: filterTestData(value)
            });
        }

        onSelectAt(idx) {
            const hit = this.state.matches.get(idx);
            this.setState({
                text: hit,
                matches: filterTestData(hit)
            });
        }

        render() {
            return (
                <div>
                    <label className="text-muted">type 'b' or 's'</label>
                    <TypeAheadText
                        value={this.state.text}
                        matched={this.state.matches}
                        onChange={this.onTextChange}
                        onSelectAt={this.onSelectAt}/>
                </div>
            );
        }
    };


