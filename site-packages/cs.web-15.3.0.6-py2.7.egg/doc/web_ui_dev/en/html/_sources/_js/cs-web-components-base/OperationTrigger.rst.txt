.. _`cs-web-components-base-form.containers.OperationTrigger.__module__`:

================
OperationTrigger
================

.. contents:: Local Navigation
   :local:
   :depth: 2

Description
===========



This module provides the HOC
:ref:`cs-web-components-base-form.containers.OperationTrigger.WithOperationTrigger`
to implement operation Wrapping a component with an OperationTrigger provides a
``runOperation`` callback.

Handler Names
-------------

While operations may specify a default handler they should be invoked with by
setting an appropriate value for field ``presentation_id`` of the operation
configuration (see `operations_presentation_ids`) specialized applications
want to customize the way in which operations are handled. When creating an
operation trigger component with the ``WithOperationTrigger`` HOC, a handler
name may be passed as the second parameter to have instances of this component
use the operation handler identified by this name.

Note that this parameter may in turn be overriden by passing a handlerName
property to a specific instance of the operation trigger component.

So the way a handler name is determined is as follows:

1. ``<MyOperationTrigger handlerName={'foo1'} />``
2. ``const MyOperationTrigger = WithOperationTrigger(MyComponent, 'foo2')``
3. ``operationInfo.get('presentation_id')``

Running Operations
------------------

The wrapped component may invoke an operation fetched with WithOperations by
calling runOperation, passed as property.

.. code-block:: none

   runOperation(operation, operationParameters)

This callback will trigger an operation in the surrounding operation scope.
``runOperation`` receives an operation information object as
provided to frontend components by the
:ref:`cs-web-components-base-components.WithOperations.__module__` HOC, as well
as an object that specifies the parameters to the operation.

Given an operation ``opInfo``, the operation may be called like

.. code-block:: none

   class MyComponent extends React.Component {
      doRunOp() {
          const {runOperation, opInfo, contextObject} = this.props
          runOperation(opInfo, {objects: Immutable.List([contextObject, ...])});
      }

      render() {
          // Render the component
      }
   }

   export default WithOperationTrigger(MyComponent);

For a comprehensive list of possible parameters, see
:ref:`cs-web-components-base-operations.actions.operations.runOperation_parameters`.

Properties passed to the wrapping Component (this component) are:

+----------------------------+----------------+---------+---------------------------------------------------+
| Name                       | Type           | Default | Description                                       |
+============================+================+=========+===================================================+
| handlerName                | string         | \-      | Override the handlerName provided by the          |
|                            |                |         | operation. Optional.                              |
+----------------------------+----------------+---------+---------------------------------------------------+
| defaultOperationParameters | object         | \-      | defaultOperationParameters are merged into the    |
|                            |                |         | parameters provided to startOperation. Optional.  |
+----------------------------+----------------+---------+---------------------------------------------------+

Properties passed to the wrapped component are:

+----------------------------+----------------+---------------------------------------------------+
| Name                       | Type           | Description                                       |
+============================+================+===================================================+
| runOperation               | func           | Start the provided operation in the               |
|                            |                | surrounding scope.                                |
+----------------------------+----------------+---------------------------------------------------+


Contents
========

Functions
---------



.. _`cs-web-components-base-form.containers.OperationTrigger.WithOperationTrigger`:

WithOperationTrigger
~~~~~~~~~~~~~~~~~~~~


The Higher-Order Component WithOperationTrigger should be used to
connect your component to the frontend-based operation state, which
stores data relevant to the operation execution and determines the way
user interaction (retrieving data required for the operation) is run.

The WithOperationTrigger HOC wraps a component and passes a wrapped
``runOperation`` function to it, which has the following interface:

.. code-block:: javascript

 runOperation(
     operation: Immutable.Map,
     {
         contextObjects: Immutable.List,
         parameters: Immutable.Map,
         resultInNewTab: Boolean,
         successActions: [ReduxActions...],
         failedActions: [ReduxActions...],
         cancelActions: [ReduxActions...],
         generalActions: [ReduxActions...],
         suppressHandler: Boolean,
         forceHandler: Boolean,
         nonBlocking: Boolean,
         dialog: String
     }
 )

For a detailed description of all parameters see the action runOperation

