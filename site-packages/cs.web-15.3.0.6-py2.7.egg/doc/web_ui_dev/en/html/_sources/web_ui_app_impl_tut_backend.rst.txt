.. _`web_ui_app_impl_tut_backend`:

Backend-specific tasks
======================

The basic tasks for implementing the backend of an |elements| web
application are the registration of static components (JavaScript
libraries, etc. -- see :ref:`web_ui_app_impl_tut_backend_static`) and,
if the application should provide a navigatable frontend, the
implementation of the application backend code (see
:ref:`web_ui_app_impl_tut_backend_app`).

Another task that involves backend code is internationalization, but,
since this task requires also frontend action, internationalization is
explained in its own section, :ref:`web_ui_app_impl_tut_i18n`.

.. _`web_ui_app_impl_tut_backend_static`:

Registering Libraries
---------------------

A set of JavaScript bundles that consists of common functionality,
e.g. a web application, is registered in the system as a library.

This setup code is usually created by ``webmake create``
(see :ref:`web_ui_app_impl_tut_age`), but may be modified in
advanced scenarios.

.. code-block:: python

   from cdb import rte
   from cdb import sig
   from cs.platform.web import static

   @sig.connect(rte.APPLICATIONS_LOADED_HOOK)
   def _register_libraries():
       lib = static.Library("my-app",
                            "0.0.1",
                            os.path.join(os.path.dirname(__file__), "js", "build"))
       lib.add_file('my-app.js')
       lib.add_file('my-app.js.map')
       static.Registry().add(lib)

A library is created with the application name as library identifier,
the current version of the library and the base path to the bundles of
the library. Bundle files are then added by specifying the path
relative to the base directory, specified during library creation. To
make the library available, it needs to be added to the library
registry.

.. _`web_ui_app_impl_tut_backend_app`:

Mounting a *Morepath*-Application
---------------------------------

While a library definition as defined in
:ref:`web_ui_app_impl_tut_backend_static` is sufficient for an
application to provide components for other applications to use, an
application may also provide a frontend, which can be reached by a
given path. This requires a frontend path to be registered in
|elements|.

The backend implementation of |elements| frontend applications is usually
based on the *Morepath* Web Framework (see
https://morepath.readthedocs.io/en/latest/), and a basic understanding
of how *Morepath* applications work is required to develop the backend
of an |elements| web application.

.. code-block:: python

   from cs.web.components.base.main import BaseApp, BaseModel


   class App(BaseApp):
     pass


   @Root.mount(app=App, path='/foo')
   def _mount_app():
     return App()

|elements| frontend applications should be derived from the
``BaseApp`` class, using the ``BaseModel`` class, resulting in an
application definition as above.

At a minimum, the following views need to be implemented:

- ``base_path``: The base path of the app. This is usually equal to
  the path on which the *Morepath* application has been mounted.
- ``app_component``: Returns the name of the base component that is
  displayed when the application is loaded.

So -- in addition to the above -- a basic frontend application also has the
following definitions:

.. code-block:: python

   App.view(model=BaseModel, name="app_component", internal=True)
   def _setup(self, request):
     request.app.include("my-app", "0.0.1")
     return "my-app-MainComponent"


   App.view(model=BaseModel, name="base_path", internal=True)
   def get_base_path(self, request):
     return request.path

Note that the call to ``request.app.include`` is necessary to include
the library registered in
:ref:`web_ui_app_impl_tut_backend_static`. In this way JavaScript
libraries provided and required by this application are served to the
user.

The ``app_component`` view specifies the main component of the
application. For further details see
:ref:`web_ui_app_impl_tut_frontend_components`:


.. _`web_ui_app_impl_tut_backend_setup_data`:

Providing setup data from the backend
-------------------------------------

In most cases, the frontend application needs configuration or setup data from
the backend, e.g. values extracted from the |elements| data dictionary. This
data will be inserted into the HTML page generated through the backend in the
form of a static JSON encoded object. `cs.web.components.base.main.BaseApp`
fills the keys ``appSettings``, ``formats`` and ``links`` in this object, and
`cs.web.components.configurable_ui.ConfigurableUIApp` adds the key
``applicationConfiguration`` and ``pluginConfiguration``, these keys should
not be replaced by other applications.

An application can extend the setup data by providing specific data under
its own namespace. The setup data is a python dict object, with an additional
method `merge_in`:

.. code-block:: python

   from cs.web.components.base.main import BaseApp


   class MyApp(BaseApp):
       def update_app_setup(self, app_setup, model, request):
           super(App, self).update_app_setup(app_setup, model, request)
           app_setup.merge_in(["links", "my-app"], {
               "someLink": "/some/link"
           })


.. note::

   Don't forget the super() call. Otherwise the standard setup data will be
   missing.


An application can also provide setup data globally, so that all front end
applications can access them:

.. code-block:: python

    from cs.web.components.base.main import BaseApp, GLOBAL_APPSETUP_HOOK

    @sig.connect(GLOBAL_APPSETUP_HOOK)
    def update_app_setup_globally(app_setup, request):
        app_setup.merge_in(["links", "always-available"], {
            "someLink": "/some/link"
        })


mpq to query Morepath configuration
-----------------------------------

To quickly find out where a piece of configuration is configured, you
can use the ``mpq`` script. You can use it like this:

.. code-block:: console

  $ bin/mpq view name=edit

or:

.. code-block:: console

  $ bin/mpq path model=cs.example.model.MyModel

See also the `usage`_ section in the Morepath documentation.

.. _usage: http://morepath.readthedocs.io/en/latest/config_query.html#usage
