.. _`web_ui_app_impl_tut_i18n`:

Internationalization
====================

Internationalization is based on labels configured in |elements|. The labels
that can be used by the Web UI must have labels ids that consist of three parts,
separated by ``.``. The parts are:

* The constant ``web``, as a marker that the label should be made available to
  the frontend.

* A domain id, that serves as a namespace to separate labels for different
  applications.

* The actual label id used by the frontend.

Using localized strings
-----------------------

.. rubric:: i18n helpers

The following code can be used to create i18n helpers, that contain the domain
for the current JavaScript library as default. The method described in
:ref:`web_ui_age_create` generates this code into a file named :file:`i18n.js`.

.. code-block:: none

   import {i18ndb} from 'cs-web-components-base';

   export const Format = i18ndb.makeFormat('my-domain');
   export const formatStr = i18ndb.makeFormatStr('my-domain');

.. rubric:: Using the i18n helpers

The following example renders the same label twice, once by getting the string
to render, and once through a React component. The React component has an optional
property ``domainId``, that can be set to access labels from other domains.

.. code-block:: none

   import {Format, formatStr} from './i18n.js';

   function MyComponent(props) {
       return (
           <div>
               <span>{formatStr('hello_world')}<span>
               <Format messageId='hello_world' />
           </div>);
   }

.. rubric:: Localized strings without helpers

To access localized string from other domains, the function ``formatString``
allows to supply the domain as a parameter:

.. code-block:: none

   import {i18ndb} from 'cs-web-components-base';

   function MyComponent(props) {
       return <div>{i18ndb.formatString('label-id', 'other-domain')}</div>);
   }
