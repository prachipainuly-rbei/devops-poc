
.. _`operations_webui_restrictions`:

Restrictions running operations with WEB UI
*******************************************

There are some differences compared to the behaviour of the |win.client| if
you are running an operation using the Web UI.

Operations running in a relationship context
============================================
Some components, e.g. the ``RelationshipTable``, allow you to run an operation
within a relationship context. If you create a new object in a relationship
context with a separate link class the creation dialog for the link class will
currently not be displayed during the action.
If it is not possible to create a link object without such a dialog -
e.g. if there are mandatory fields - the creation of the link will fail.


User exit call times
====================

- User exits with the mode ``post_mask`` are not executed.

- There are no user exit calls if a dialog item changes its value
  (mode ``dialogitem_change``). These calls have been replaced by
  :ref:`Dialog Hooks <operations_dialog_hooks>`.

At this time there is no plan to reactivate these User Exit modes.


User Exits results with UI impact
=================================

At this time context adaptor functions that should lead to
additional user interaction have not the expected effect if used with
the Web UI. Some examples are

- :py:func:`ctx.show_message` that should display a message box

- :py:func:`ctx.next_mask` that sets a follow up dialog

- :py:func:`ctx.start_selection` that displays a selection catalog

User Exits that trigger file actions
====================================

Functions that trigger an up- or download will not have the expected result.
Examples are

- :py:func:`redirect_file`
- :py:func:`set_export_files`
- :py:func:`set_external_filename`
- :py:func:`set_mail_body`
- :py:func:`set_mail_recipients`
- :py:func:`set_mail_subject`

Formular manipulation by User Exits
===================================
Some function have no effect at this time, e.g.

- :py:func:`set_focus`

- :py:func:`enable_ok`

- :py:func:`disable_cancel`

- :py:func:`set_active_register`

- :py:func:`set_button_label`

Follow up operations
====================
Operations started by calling :py:func:`set_followUpOperation` will not be
executed.

.. _`web_ui_forms`:

Web UI Forms
============
Not all configuration details of the legacy mask configuration are applied to
the Web UI Forms.

Catalogs
--------
If the field the catalog belongs to is not readonly the catalog provides a simple
type ahead mechanism. This mechanism uses the input to search for possible values
that starts with the actual user input. Entries that match the initial search
conditions of the catalog are listed first. If the maximum number of type ahead
proposals is not reached with this search conditions all conditions that are
not marked as mandatory for the query dialog will be removed to find more
proposals.

At this time structure catalogs are not available. The creation or modification
of objects within the catalog is not possible. Catalogs that check their values
are not supported. Catalog proposals are not implemented.

Itemtypes
---------
Fields of type ``eLinkControl`` are ignored. You have to place the
content of the eLink control somewhere else on the detail page.

Fields of type ``Button (client)``, ``Generator`` and ``Spacer``
are also ignored.

Items that deal with files (``FileOpenBrowser``, ``FileSaveBrowser`` and
``DirectoryBrowser``) are ignored.


Field content
-------------

The configuration of wether a field can only contain upper or lower characters
is ignored.
The checkbox :guilabel:`Use monospaced font` is also ignored. The personal settings
that define the alignment of the field content are ignored.

Layout
------

The field label is always displayed above the field. The configured color of a
field is ignored. Each form column has the same size - the :guilabel:`Resize mode`
of a field is ignored.

All registers are displayed one below the other.
