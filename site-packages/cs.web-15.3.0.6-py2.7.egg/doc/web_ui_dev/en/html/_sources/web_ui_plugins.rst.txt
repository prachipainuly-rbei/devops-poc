.. _`web_ui_plugins`:

Frontend Plugins
################

Sometimes there is the need to extend the frontend behaviour with plugins that
can be added dynamically. An example might be a component that shows several
objects of different types, where each type in turn should be rendered using a
special React component. Frontend plugins provide a mechanism for developers to
add new types, and components to display them, by implementing and configuring
new plugins. See :ref:`cs-web-components-plugins-toc` for concrete use cases.

There are two kinds of components involved: plugin components, which render
specific objects, and plugin containers, that provide the environment for the
plugin components. Plugin containers have the following responsibilities:

* They specify the contract that plugin components have to implement. This contract
  consists of the React properties that the container provides to the plugin
  components.
* They implement the selection strategy to find the correct plugin component for
  the data to be rendered, using the configuration for a specific plugin ID. The
  helper function :ref:`getPlugin <cs-web-components-base-helpers.getPlugin>` is
  provided as a general mechanism to do this.
* At render time, they render the concrete plugin component instances according
  to the data and the configuration, and provide them with their data, as defined
  by the contract.

Plugin components are normal react components, where the only requirement is that
they fulfill the contract of the plugin container.

Plugin configuration
********************

The configuration of plugins can be accessed is located in the subsection :guilabel:`Plugins`
of the Web UI configuration.

.. _`HELPID_csweb_plugin`:
.. _`csweb_config_plugin`:

Plugin
======

A plugin aggregates :ref:`plugin configurations <csweb_config_plugin_config>`
that fulfill the same purpose. The configuration has this attributes:

* :guilabel:`ID`: The plugin id. This ID is e.g. referenced by the function
  `cs.web.components.plugin_config.Csweb_plugin.get_plugin_config`.
* :guilabel:`Fully qual. Python name`: The name of a class derived from
  `cs.web.components.plugin_config.WebUIPluginCallbackBase`. Have a look at the
  documentation of this class to see, how the configuration depends on this class.
* :guilabel:`Description`: Informal text to describe the plugin
* :guilabel:`Module`: The module this plugin configuration belongs to.

.. _`HELPID_csweb_plugin_config`:
.. _`csweb_config_plugin_config`:

Plugin configuration
====================

A plugin configuration contains the data of a specific plugin. The configuration
has these attributes:

* :guilabel:`Plugin-ID`: References the :ref:`Plugin <csweb_config_plugin>` the
  configuration belongs to.
* :guilabel:`Discriminator`: A text the frontend uses to decide if this plugin
  is suitable for the concrete situation. The format and interpretation depends
  on the plugin.
* :guilabel:`React-Component`: The component that is used to render the plugin
* :guilabel:`Setup`: Python Callable that has to be called to ensure that the
  plugin will work.
* :guilabel:`Priority`: If more than one plugin configuration can be used to
  fulfill the purpose the plugin with the highest priority is chosen.
* :guilabel:`Module`: The module this plugin configuration belongs to.

If the JavaScript code that loads the plugin depends on further libraries you have
to add these libraries in the register :guilabel:`Libraries`.

cs.web.components.plugin_config
*******************************

Code dealing with frontend plugin configuration can be found in the module
`cs.web.components.plugin_config`.

.. automodule:: cs.web.components.plugin_config

.. autoclass:: Csweb_plugin
    :members:

.. autoclass:: WebUIPluginCallbackBase
    :members:
