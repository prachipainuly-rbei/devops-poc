.. _`web_ui_app_impl_tut_age`:

Building And Deployment
=======================

|elements| provides a script/module -- ``webmake`` -- to support the
different recurring tasks during development and deployment of web
applications. The tool provides, on the one hand, integration of the
different utilities involved in the process of web application
development, e.g., yarn and webpack. On the other hand it is integrated
into the Python setuptools used by the |elements| component
architecture for handling applications.

Using ``webmake`` as a link, web applications are completely
integrated into the standard development and deployment procedures
used to develop applications based on |elements|.

``webmake`` can be used either as a utility that is called from the
command line, or as a library of Python functions. How these functions
are integrated into the setuptools extensions of the component
architecture is described in depth in section
:ref:`web_ui_make_build_setuptools`. Developers usually use the
routines of ``webmake`` by using its command line interface.

The different tasks that are supported by the script are given as a
command, which is preceded by a set of general options, and followed
by command-specific arguments.

General options are:

- ``--verbose``: The script generates verbose output. Useful for
  debugging purposes.
- ``--dry-run``: The script will not execute any actions that modify
  the filesystem or database. Note that combined with ``--verbose``
  this will still produce output. Combined, the two options can be
  used to explore if an invocation of the script will yield the
  expected results, without actually modifying the configuration of
  the instance/packages used.

General options are followed by a command, which may be one of the
following:

- ``create``: Create a web application package based on a
  template. See :ref:`web_ui_age_create`
- ``jsdoc``, ``jsdoc-clean``: Create and clean up API documentation for web
  components. See :ref:`web_ui_age_jsdoc`.
- ``devupdate``: Prepare the dependency location node_modules in the instance
  directory
- ``build``, ``yarn``, ``webpack``, ``clean``, ``cache-clean``: Prepare, build
  and clean up web applications.
- ``licensereport`` generates a license report of dependencies.
- ``styles``: compile overridable styles into the global stylesheet

.. note::

   Command examples follow POSIX utility conventions, see
   http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html#tag_12_01

.. toctree::
   :maxdepth: 2

   web_ui_make_create
   web_ui_make_doc
   web_ui_make_build
