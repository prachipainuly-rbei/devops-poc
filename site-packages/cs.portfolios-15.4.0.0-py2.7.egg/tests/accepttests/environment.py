#!/usr/bin/env python
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbHfor behave
# All rights reserved.
# http://www.contact.de/
#
import cdbwrapc

from cdb import util, sqlapi
from cdb.objects import org
from cdb.validationkit import generateUser

__docformat__ = "restructuredtext en"
__revision__ = "$Id: environment.py 135778 2016-01-12 11:42:43Z wen $"


class EventListener(util.DBEventListener):
    __listener = None

    def __init__(self):
        super(EventListener, self).__init__()
        self.__events = []

    def notify(self, relation, event):
        self.__events.append(
            (event.m_event,
             relation,
             event.m_keys.items()))

    def rollback(self):
        def generateWhere(keys):
            where = ""
            for key, value in keys:
                where += "%s='%s' AND " % (key, value)
            return where[:-5]
        try:
            self.doUnregister()
            self.__events.reverse()
            for t, relation, keys in self.__events:
                if t == util.kRecordInserted:
                    sqlapi.SQLdelete("FROM %s where %s" % (relation,
                                     generateWhere(keys)))
        finally:
            self.clear()
            self.doRegister()

    def clear(self):
        self.__events = []

    @classmethod
    def getListener(cls):
        if not EventListener.__listener:
            EventListener.__listener = EventListener()
        return EventListener.__listener


def before_scenario(context, scenario):
    listener = EventListener.getListener()
    listener.doRegister()


def after_scenario(context, scenario):
    listener = EventListener.getListener()
    listener.rollback()
    listener.doUnregister()


def before_all(context):
    # Create a new User to use for testing and login as this one
    users = org.User.KeywordQuery(personalnummer="behave_test")
    if len(users) > 0:
        context.user = users[0]
    else:
        context.user = generateUser("behave_test")

    # Log him in
    assert cdbwrapc.set_user(context.user.personalnummer),\
        "The User couldn't be logged in"


def after_all(context):
    # Delete the created user
    if hasattr(context, "user"):
        context.user.Delete()
