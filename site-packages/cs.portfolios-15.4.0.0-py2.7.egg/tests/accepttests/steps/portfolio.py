#!/usr/bin/env python
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#


from cdb.validationkit import run_with_added_roles, operation, given, \
    when, then

from cs.portfolios import Portfolio
from cs.portfolios import PortfolioCategory
from cs.portfolios import PortfolioFolder


# ------------------------------------------------------------
# Scenario Outline: Create a plain portfolio
# -----------------------------------------------------------

@when("^Portfolio manager creates a portfolio$")
@run_with_added_roles(["Portfolio: Manager"])
def step(context):
    context.po_len = len(Portfolio.Query())
    context.po_obj = operation("CDB_Create", Portfolio,
                               user_input={"name_de": "Testplan", "name_en": "Testplan"})


@then("^a new portfolio is created$")
def step(context):
    assert context.po_len < len(Portfolio.Query()), \
        "There was no new portfolio created."


# -------------------------------------------------------------
# Scenario Outline: Create  a portfolio with categories
# -------------------------------------------------------------

@given("^a portfolio exists$")
@run_with_added_roles(["Portfolio: Manager"])
def step(context):
    context.po_len = len(Portfolio.Query())
    context.po_obj = operation("CDB_Create", Portfolio,
                               user_input={"name_de": "Testplan", "name_en": "Testplan"})


@when("^Portfolio manager creates (?P<number>\d+) categories$")
@run_with_added_roles(["Portfolio: Manager"])
def step(context, number):
    context.pocateg_len = len(PortfolioCategory.Query())
    for each in range(int(number)):
        preset = {"portfolio_object_id": context.po_obj.cdb_object_id}
        user_input = {"name_de": "Testcateg%d" % each,
                      "name_en": "Testcateg%d" % each,
                      "ebene": each}
        operation("CDB_Create", PortfolioCategory, user_input=user_input, preset=preset)


@then("^(?P<number>\d+) categories are created$")
def step(context, number):
    new_count = context.pocateg_len + int(number)
    assert new_count == len(PortfolioCategory.Query()), \
        "context: %sNumber %s len: %s" % (context.pocateg_len, number, len(PortfolioCategory.Query()))


# ------------------------------------------------------------
#     Scenario: Create a portfolio with categories and sub-folders
# ------------------------------------------------------------

@given("^(?P<cat_number>\d+) categories of different stages exists$")
@run_with_added_roles(["Portfolio: Manager"])
def step(context, cat_number):
    context.po_folder_len = len(PortfolioFolder.Query())
    context.pocategs = []
    for each in range(int(cat_number)):
        preset = {"portfolio_object_id": context.po_obj.cdb_object_id}
        user_input = {"name_de": "Testcateg" + str(each),
                      "name_en": "Testcateg" + str(each),
                      "ebene": each + 1}
        context.pocategs.append(operation("CDB_Create", PortfolioCategory,
                                          user_input=user_input, preset=preset))


@when("^Portfolio manager creates (?P<folder_number>\d+) folder with different categories$")
@run_with_added_roles(["Portfolio: Manager"])
def step(context, folder_number):
    parent_folder = None
    context.po_folder = []
    for each in range(int(folder_number)):
        preset = {"portfolio_object_id": context.po_obj.cdb_object_id,
                  "category_object_id": context.pocategs[each].cdb_object_id}
        if parent_folder is not None:
            preset["parent_object_id"] = parent_folder.cdb_object_id
        user_input = {"name_de": "Test %s" % each,
                      "name_en": "Test %s" % each}
        parent_folder = operation("CDB_Create", PortfolioFolder, user_input, preset)
        context.po_folder.append(parent_folder)


@then("^there should be (?P<cat_number>\d+) folder created$")
def step(context, cat_number):
    real = len(PortfolioFolder.Query()) - context.po_folder_len
    result = (int(cat_number) + context.po_folder_len == len(PortfolioFolder.Query()))
    assert result, \
        "The number of created folder is %d and diverges from the expected one %d" % (cat_number, real)


# ------------------------------------------------------------
#     Scenario: Create a portfolio with categories and try to create
#                      a Top-Level-Folder without Category of stage 1
# ------------------------------------------------------------

@when("^Portfolio manager creates a folder with a category of stage 2$")
@run_with_added_roles(["Portfolio: Manager"])
def step(context):
    preset = {"portfolio_object_id": context.po_obj.cdb_object_id,
              "category_object_id": context.pocategs[1].cdb_object_id}

    user_input = {"name_de": "Test 0",
                  "name_en": "Test 0"}

    try:
        parent_folder = operation("CDB_Create", PortfolioFolder, user_input, preset)
        context.po_folder.append(parent_folder)
    except RuntimeError:
        context.error = True


@then("^there should occur an error$")
def step(context):
    assert context.error, "There should have occured an error because of restrictions"


# ------------------------------------------------------------
#     Scenario: Create Create a portfolio with categories and try to create a Folder with
#               a category of stage 1 but with a parent folder
# ------------------------------------------------------------

@given("^a Top-Level-Folder exists$")
@run_with_added_roles(["Portfolio: Manager"])
def step(context):
    context.po_folder = []
    preset = {"portfolio_object_id": context.po_obj.cdb_object_id,
              "category_object_id": context.pocategs[0].cdb_object_id}

    user_input = {"name_de": "Test %s" % 0,
                  "name_en": "Test %s" % 0}

    parent_folder = operation("CDB_Create", PortfolioFolder, user_input, preset)
    context.po_folder.append(parent_folder)


@when("^Portfolio manager creates a folder with a category of stage 1 and a parent folder$")
@run_with_added_roles(["Portfolio: Manager"])
def step(context):
    preset = {"portfolio_object_id": context.po_obj.cdb_object_id,
              "category_object_id": context.pocategs[0].cdb_object_id,
              "parent_object_id": context.po_folder[0].cdb_object_id}

    user_input = {"name_de": "Test %s" % 0,
                  "name_en": "Test %s" % 0}

    try:
        parent_folder = operation("CDB_Create", PortfolioFolder, user_input, preset)
        context.po_folder.append(parent_folder)
    except RuntimeError:
        context.error = True
