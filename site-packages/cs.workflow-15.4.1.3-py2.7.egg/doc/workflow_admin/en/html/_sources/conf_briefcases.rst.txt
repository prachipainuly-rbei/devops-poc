.. _`briefcases`:

Mappen
######

Dieses Kapitel enthält technische Voraussetzungen in Bezug auf die Nutzung von
:term:`Mappen <Mappe>`.

Mappeninhalte
=============

Eine :term:`Mappe` kann Objekte unterschiedlicher Klassen enthalten. Ein Objekt
muss alle folgenden Bedingungen erfüllen, um als :term:`Mappeninhalt`
verwendbar zu sein:

- Es muss das Attribut ``cdb_object_id`` besitzen.
- Es muss eine |cdbpy|-Klasse aufweisen.

Zusätzlich kann ihre |cdbpy|-Klasse
von der Klasse ``cs.workflow.briefcases.BriefcaseContent`` abgeleitet werden,
um einige vordefinierte Event Handler (z.B. für die Objektoperation
:guilabel:`Workflow/Neu`) zu verwenden.

Im Standard sind schon einige Klassen (z.B. :guilabel:`Dokumente`) für die
Verwendung als :term:`Mappeninhalt` vorkonfiguriert.

Sie können in Ihrer Umgebung weitere Klassen für die Verwendung als
:term:`Mappeninhalt` freigeben, indem Sie die oben genannten Bedingungen
erfüllen.

Beziehungen
-----------

:term:`Mappen <Mappe>` referenzieren immer einen :term:`Workflow`. Lokale
:term:`Mappen <Mappe>` sind darüber hinaus noch mit beliebig vielen
:term:`Aufgaben <Aufgabe>` innerhalb ihres :term:`Workflows <Workflow>`
verknüpft.

Die Zuordnung eines Objekts zu einer :term:`Mappe` erfolgt über die
Plattformklasse :envvar:`cdbfolder_content` und hat somit keinen direkten Bezug
zum :term:`Workflow`.

Wollen Sie eine Beziehung zwischen Objekten einer Klasse und ihren verknüpften
:term:`Workflows <Workflow>` konfigurieren, können Sie dies auf Basis der
Klasse :envvar:`cdbwf_process_content` tun, die für Sie die
:term:`Mappeninhalte <Mappeninhalt>` pro :term:`Workflow` redundant vorhält.

Diese Klasse kann auch als |cdbpy|-Referenz verwenden werden. Die entsprechende
|cdbpy|-Klasse ist :envvar:`cs.workflow.briefcases.BriefcaseReference`.

.. _`briefcase_permissions`:

Automatische Rechtevergabe
==========================

Mit :term:`Workflows <Workflow>` besteht die Möglichkeit, die
Bearbeitungsrechte der :term:`Mappeninhalte <Mappeninhalt>` automatisch an die
Verantwortlichen von laufenden :term:`Aufgaben <Aufgabe>` zu vergeben. Weitere
Informationen hierzu finden Sie im
:ref:`Anwenderhandbuch <wf_user:workflow_user>`.

Die automatische Rechtevergabe basiert auf einem
:ref:`Beziehungsrechteprofil <admin:aclandgroups-relationshipaccessprofile-def>`
und ist im Standard auf einige vorbestimmte Typen eingeschränkt (z.B. Artikel,
Dokumente, usw.). Sie können in Ihrer Umgebung die automatische Rechtevergabe
auf weitere Typen erweitern. Dafür legen Sie eine
:ref:`Beziehung <admin:cdb-relations>` zwischen der Klasse ``cdbwf_briefcase``
(als *Referer*) und ihrer Zielklasse (als *Reference*) an.

Verwenden Sie dabei die folgenden Parameter:

Referer
    ``cdbwf_briefcase``
Verknüpfungsklasse
    ``cdbfolder_content``
Reference
    Ihre Zielklasse
Keymap (Referer)
    ``cdb_object_id=cdb_folder_id``
Keymap (Reference)
    ``cdb_object_id=cdb_content_id``
Beziehungsrechteprofil
    ``cdbwf_assign_rights``

Bei der Vergabe der Rechte sollten Sie darauf achten, dass der erwartete Effekt
je nach :term:`Bearbeitungsmodus` auch eintritt. :term:`Inhalte <Mappeninhalt>`
von |io_info| :term:`Mappen <Mappe>` sollten Verantwortliche ansehen, aber
nicht ändern dürfen (solange die Änderungsrechte nicht über einen anderen Weg
gewährt werden), :term:`Inhalte <Mappeninhalt>` von |io_edit|
:term:`Mappen <Mappe>` sowohl sehen als auch ändern. Die Standardkonfiguration
für Dokumente vergibt beispielsweise diese Berechtigungen:

+---------------------------+---------------------------------------+
| :term:`Bearbeitungsmodus` | Berechtigung                          |
+===========================+=======================================+
| |io_info|                 | `read` und `read_file`                |
+---------------------------+---------------------------------------+
| |io_edit|                 | `read`, `read_file`, `save`,          |
|                           | `accept`, `lock` und `unlock`         |
+---------------------------+---------------------------------------+

.. hint::

   Sie können die Rechtevergabe anpassen, um weitere Rechte zu vergeben.
   Kontaktieren Sie dafür Ihren Systemadministrator.

.. _`briefcase_contents_access`:

Berechtigungen auf Mappeninhalten
---------------------------------

Damit ein Anwender Objekte in :term:`Mappen <Mappe>` nutzen darf, muss er - je
nach :term:`Bearbeitungsmodus` - das Recht ``cdbwf_obj_info`` bzw.
``cdbwf_obj_edit`` auf der :term:`Mappe` besitzen. Dies soll verhindern, dass
durch einen :term:`Workflow` Rechte erschlichen werden, die dem einrichtenden
Benutzer vorher überhaupt nicht gewährt wurden.

Die Rechte ``cdbwf_obj_info`` und ``cdbwf_obj_edit`` sind von Rechten auf den
der :term:`Mappe` zugeordneten Objekten abgeleitet (über das
:ref:`Beziehungsrechteprofil <admin:aclandgroups-relationshipaccessprofile-def>`
``cdbwf_assign_rights``) und werden immer geprüft, wenn

- ein Objekt zum Inhalt einer :term:`Mappe` hinzugefügt wird,
- der :term:`Bearbeitungsmodus` einer :term:`Mappe` geändert wird,
- eine :term:`Mappe` zu weiteren :term:`Aufgaben <Aufgabe>` hinzugefügt wird
  oder
- ein :term:`Workflow` oder eine :term:`Aufgabe` gestartet wird.

Im Auslieferungszustand sind diese Rechte z.B. für Dokumente so eingeschränkt,
dass durch die Zuordnung keine Weitergabe von Berechtigungen möglich ist, die
der Zuordnende nicht selbst besitzt.

Für bestimmte Objekte kann es gewünscht sein, diese niemals (oder nur durch
bestimmte Anwenderkreise) in :term:`Workflows <Workflow>` oder
:term:`Mappen <Mappe>`, die Schreibrechte gewähren, zu nutzen. Ein Grund könnte
z.B. die Gefahr der Freigabe der Objekte im |cs.cp| sein. In diesem Fall
empfiehlt sich eine entsprechende Einschränkung der als :term:`Mappeninhalt`
nutzbaren Objekte.

Fehlende "Attachments"-Mappe in Workflow-Vorlagen ergänzen
==========================================================

Falls an einer :term:`Workflow`-Vorlage keine "Attachments"-:term:`Mappe`
hinterlegt wurde, wird sie nach einem Update nicht automatisch eingefügt. Mit
dem folgenden |cdbpy|-Code kann die :term:`Mappe` ergänzt werden, falls sie
noch nicht existiert (im Codebeispiel für alle :term:`Workflow`-Vorlagen):

.. code-block:: python

    from cs.workflow.processes import Process

    for process in Process.KeywordQuery(is_template="1"):
        process.make_attachments_briefcase()
