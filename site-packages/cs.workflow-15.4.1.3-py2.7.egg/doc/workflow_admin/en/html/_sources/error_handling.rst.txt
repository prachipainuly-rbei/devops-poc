.. _`error_handling`:

Fehlerbehandlung
################

Um zu beurteilen, ob das Fehlschlagen einzelner :term:`Aufgaben <Aufgabe>`
erwartungskonform ist oder nicht, sollten Sie zunächst mit der Funktionsweise
von :term:`Aufgaben <Aufgabe>` und :term:`Constraints <Constraint>` vertraut
sein. Lesen Sie dazu bitte das :ref:`wf_user:workflow_user`.

Darüber hinaus können natürlich auch tatsächliche Fehler auftreten, deren
Ursache und Behandlung in diesem Kapitel behandelt werden.

Fehler während der Abarbeitung eines :term:`Workflows <Workflow>` oder einer
:term:`Aufgabe` resultieren immer in einer Änderung des :term:`Workflow`-Status
in |wf30|. In einigen Fällen wird auch der Status der :term:`Aufgabe` in
|task35| geändert.

Im Umfeld von |cs.workflow| empfiehlt sich bei unerwarteten Fehlern folgendes
Vorgehen:

1. Analyse
2. Behebung
3. Wiederholung

Nicht in jedem Fall sind alle Schritte tatsächlich notwendig.

Analyse
=======

Ist ein :term:`Workflow` aus ungeklärter Ursache abgebrochen worden, sollten
zunächst die letzten Einträge im :term:`Protokoll` des
:term:`Workflows <Workflow>` analysiert werden. In den meisten Fällen findet
sich hier der Grund für den Abbruch im Klartext.

Unerwartete Fehler können auch einen "Traceback" ins :term:`Protokoll`
schreiben, d.h. die Fehlermeldung aus |cdbpy| inklusive der letzten
Aufrufstellen. Die Analyse von Tracebacks setzt eine gewisse Kenntnis von
|cdbpy| voraus.

Weitere Informationsquellen sind die Serverlogs des
:term:`Workflow-Dienstes <Workflow-Dienst>` und seiner Queue.

Behebung
========

Die Fehlerbehebung hängt unmittelbar mit der logischen Ursache zusammen. Einige
Fehler erfordern keine administrative Behebung, andere dagegen schon. In diesem
Abschnitt finden Sie beispielhaft einige Fehlerklassen.

Unerwarteter Abbruch von Systemaufgaben
---------------------------------------

Während der Status einiger interaktiver :term:`Aufgaben <Aufgabe>` von ihren
Verantwortlichen explizit in |task30| geändert werden kann, kann dies bei der
Abarbeitung von :term:`Systemaufgaben <Systemaufgabe>` aus den
unterschiedlichsten Gründen ebenfalls passieren.

Ein Beispiel: Eine :term:`Systemaufgabe` "Statusänderung" soll den Status ihrer
:term:`Mappeninhalte <Mappeninhalt>` in `200` ändern.

.. rubric:: Beispiel *Vorbedingungen nicht hergestellt*

Befindet sich in unserem Beispiel ein Objekt im :term:`Mappeninhalt`, für
welches kein Statusübergang vom seinem aktuellen Status zu `200` definiert ist,
wird die :term:`Aufgabe` fehlschlagen.

Wurde vom Verantwortlichen einer Vorgängeraufgabe erwartet, den nötigen Zustand
für die Statusänderung herzustellen, liegt der Fehler also bei ihm und es gibt
keine Notwendigkeit für adminstratives Eingreifen.

.. rubric:: Beispiel *Fehlerhaftes Workflow-Design*

Um einen Fehler im Entwurf des :term:`Workflows <Workflow>` handelt es sich
beispielsweise, wenn

- die Voraussetzung für die Statusänderung automatisch hergestellt werden
  hätten sollen oder
- im Fehlerfall einfach keine Statusänderung versucht werden soll.

Solche Fehler müssen durch Anpassung der Vorlage gelöst werden. Basiert der
:term:`Workflow` nicht auf einer Vorlage, muss einer der
:term:`Workflow`-Verantwortlichen die Korrektur des
:term:`Workflows <Workflow>` in einer Kopie vornehmen.

.. rubric:: Beispiel *Fehler in der Aufgabenlogik*

Liegt der Fehler in der Logik der :term:`Aufgabe` selbst, muss er durch einen
Entwickler behoben werden. Dies ist in der Regel daran erkennbar, dass das
:term:`Protokoll` einen |cdbpy|-Traceback enthält.

Konfigurationsfehler
--------------------

Ist eine :term:`Aufgabe` nicht korrekt konfiguriert, kann sie ebenfalls
fehlschlagen. Benötigte Attribute oder :term:`Parameter` könnten z.B. nicht
gesetzt sein. Diese Regeln werden schon direkt bei Änderung des
:term:`Workflow`-Status in |wf10| geprüft, um solche Fälle frühzeitig zu
erkennen. Einige dieser Vorbedingungen können aber noch nach Start des
:term:`Workflows <Workflow>` geändert werden.

Konfigurationsfehler haben ihre Ursache im Entwurf des
:term:`Workflows <Workflow>` und müssen durch einen
:term:`Workflow`-Verantwortlichen gelöst werden.

Systemfehler
------------

Unerwartete Fehler können z.B. durch Customizing oder Programmierfehler
verursacht werden. In diesem Fall ist eine weitere Analyse dieser Bausteine
erforderlich.

Wiederholung
============

Sind die Ergebnisse des fehlgeschlagenen :term:`Workflows <Workflow>` nicht
ausreichend, kann eine korrigierte Version des :term:`Workflows <Workflow>`
gestartet werden. Basierte der Original-:term:`Workflow` auf einer Vorlage,
sollte die Vorlage korrigiert und anschließend neu instanziiert werden.

Sind für die Wiederholung Teile des Original-:term:`Workflows <Workflow>` (die
bspw. bereits erfolgreich abgearbeitet wurden) nicht mehr relevant, können
diese einfach vor dem Start der Kopie des :term:`Workflows <Workflow>` entfernt
werden.

.. Wiederholbarkeit von Workflows (komplett oder ab einer top-level Aufgabe) sollten wenigstens konfigurativ aktiviert werden können
