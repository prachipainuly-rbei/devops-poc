.. _`systemtasks`:

Systemaufgaben
##############

Bitte beachten Sie, dass :term:`Systemaufgaben <Systemaufgabe>` durch den
:term:`Workflow-Dienst` ausgeführt werden.

Systemaufgaben konfigurieren
============================

Im Auslieferungszustand sind einige
:term:`Systemaufgabendefinitionen <Systemaufgabendefinition>` vorkonfiguriert.
Sie können Ihre Umgebung um weitere Definitionen erweitern. Die notwendigen
Schritte dafür werden im :ref:`systask_example` erläutert.

Definition einer Systemaufgabe anlegen
--------------------------------------

Zuerst müssen Sie eine neue :term:`Systemaufgabendefinition` anlegen. Den
Zugang dazu finden Sie im Navigationsmenü unter |nav_catalog|
:menuselection:`Prozesse -> Systemaufgabendefinitionen`.

In der Neuanlagemaske können Sie die folgenden Felder eintragen:

:guilabel:`Identifikator`
    Eine eindeutige Bezeichnung
:guilabel:`Name (de)`
    Deutscher Name
:guilabel:`Name (en)`
    Englischer Name
:guilabel:`Vollqualifizierter Python-Name`
    Der Name eines aufrufbaren |cdbpy|-Objekts (typischerweise eine Funktion),
    welches die Logik der :term:`Systemaufgabe` implementiert.

Systemaufgaben implementieren
-----------------------------

Zunächst können Sie die |cdbpy|-Funktion für die neue
:term:`Systemaufgabendefinition` schreiben. Diese muss unter dem eingetragenen
Python-Namen aufrufbar sein.

Das System ruft für jede aktive :term:`Systemaufgabe` dieser Definition die
Funktion mit den folgenden Parametern auf:

:guilabel:`task`
    Die :term:`Systemaufgabe` als ``cdb.objects.Object``.
:guilabel:`content`
    Ein |cdbpy|-Dictionary, das die :term:`Mappeninhalte <Mappeninhalt>`
    enthält. Die Schlüssel sind die möglichen :term:`Bearbeitungsmodus`
    ("info", "edit") eines Objekts. Die Werte sind Listen mit den Objekten der
    jeweiligen Inhalte.
:guilabel:`**kwargs`
    Die restlichen Parameter entsprechen den in der Definition konfigurierten
    :term:`Parameter` (siehe :ref:`system_task_parameters`).

Fehlerbehandlung
----------------

Implementierungen von :term:`Systemaufgaben <Systemaufgabe>` sollten alle
möglichen Fehler abfangen und in eine für den Benutzer lesbare Meldung
umwandeln.

Soll die :term:`Systemaufgabe` nach dem Fehler abgebrochen werden, kann an
Stelle des ursprünglichen Fehlers ein Objekt der Klasse
``cs.workflow.systemtasks.TaskCancelledException`` geworfen werden. Der Fehler
wird dann vom System protokolliert.

Um den gesamten :term:`Workflow` abzubrechen, kann die Klasse
``cs.workflow.systemtasks.ProcessAbortedException`` verwendet werden.

.. _`import_systaskdef_image`:

Darstellung im Workflow Designer anpassen
-----------------------------------------

Mit der Operation :guilabel:`Bild importieren` im Kontextmenü einer
:term:`Systemaufgabendefinition` können Sie die Darstellung von
:term:`Systemaufgaben <Systemaufgabe>` dieser Definition im
:term:`Workflow Designer` bestimmen.

.. _`system_task_parameters`:

Definition von Parametern
-------------------------

Für jede :term:`Systemaufgabendefinition` kann eine Liste an erforderlichen
:term:`Parameter` angegeben werden. Jeder dieser :term:`Parameter` muss für die
Abarbeitung der :term:`Systemaufgabe` existieren, ansonsten reagiert diese
direkt mit einer Statusänderung in |task30|.

.. note::

    Um :term:`Parameter` im :term:`Workflow Designer` anzeigen und editieren zu
    können, braucht dieser ein passendes Plugin. Kontaktieren Sie dafür bitte
    Ihren Systemadministrator.

.. _`system_task_status_change_conf`:

Konfiguration für mitgelieferte Systemaufgabe "Statusänderung"
--------------------------------------------------------------

Die mitgelieferte :term:`Systemaufgabe` "Statusänderung" kann Objekte je nach
Konfiguration automatisch entsperren. Dazu muss die
:ref:`Einstellung <admin:cdb_settings>` `cs.workflow.status_change_unlock` für
den Klassennamen des Objekts (im "Bereich" der Einstellung) einen für den
`unlock` Parameter der Methode ``cdb.objects.Object.ChangeState`` gültigen Wert
enthalten. Dabei werden keine Oberklassen berücksichtigt, sondern nur die
exakten Klassennamen der Objekte.

Im Auslieferungszustand ist dies jeweils für die Klassen :guilabel:`document`,
:guilabel:`model` und :guilabel:`cdb_wsp` mit dem Wert :guilabel:`1`
(entsperren, wenn das Recht gewährt wird) definiert.

.. _`systask_example`:

Beispiel: Eigene Systemaufgabe erstellen
========================================

In diesem Beispiel erstellen wir eine eigene :term:`Systemaufgabe`, die
:term:`Mappeninhalte <Mappeninhalt>` kopiert und dabei die an ihr
konfigurierten :term:`Parameter` für die Vorbelegung der Kopieroperationen
verwendet.

.. note::

    Für das Beispiel nehmen wir an, dass der `namespace` des Systems `demo` ist
    und dass ein Kundenmodul namens `demo.plm` existiert.

Definition anlegen
------------------

Für unsere Variante der :term:`Systemaufgabe` Kopie werden wir die folgenden
Parameter wählen:

:guilabel:`Identifikator`
    demo_copy_objects
:guilabel:`Name (de)`
    Demo Objekte kopieren
:guilabel:`Name (en)`
    Copy Objects Demo
:guilabel:`Vollqualifizierter Python-Name`
    ``demo.plm.workflow.demo_copy_objects``

Anschließend können Sie noch
:ref:`ein Bild für die neue Definition importieren <import_systaskdef_image>`.

Funktion implementieren
-----------------------

Legen Sie die Datei :file:`workflow.py` im Kundenmodul `demo.plm` mit dem
folgenden Inhalt an:

.. code-block:: python

   # coding: utf-8
   "Example of a custom workflow system task"
   from cdb import constants
   from cdb import util
   from cdb.objects import operations
   from cs.workflow.systemtasks import TaskCancelledException

   def demo_copy_objects(task, content, **kwargs):
       """
       Copy all objects in content["info"] (using kwargs to preset the copy
       operation) and put them in the "edit" briefcase.

       Only allows for exactly one "edit" briefcase.
       """
       if len(task.EditBriefcases) != 1:
           msg = util.get_label(
               "cdbwf_only_one_out_briefcase") % task.GetDescription()
           raise TaskCancelledException(msg)
       briefcase = task.EditBriefcases[0]

       for obj in content["info"]:
           copyobj = operations.operation(constants.kOperationCopy,
                                          obj,
                                          operations.form_input(obj, **kwargs))

           # unlock new object
           try:
               cd = obj.GetClassDef()
               if constants.kOperationUnlock in [
                   oi.get_opname() for oi in cd.getOperationInfos()
               ]:
                   operations.operation(constants.kOperationUnlock, copyobj)
           except RuntimeError:
               task.addProtocol(
                   "cannot unlock object %s" % obj.GetDescription(),
                   msgtype=protocols.MSGINFO)

           operations.operation(constants.kOperationNew,
                                FolderContent,
                                cdb_folder_id=briefcase.cdb_object_id,
                                cdb_content_id=copyobj.cdb_object_id)

Test
----

Melden Sie sich erneut am System an. Im :term:`Workflow Designer` steht Ihnen
nun die neue :term:`Systemaufgabe` bei der Anlage von
:term:`Aufgaben <Aufgabe>` zur Verfügung.

.. note::

    Die :term:`Parameter` für diese :term:`Systemaufgabe` können Sie zunächst
    nur über das Datenblatt der :term:`Systemaufgabe` festlegen. Weitere
    Informationen finden Sie unter :ref:`system_task_parameters`.
