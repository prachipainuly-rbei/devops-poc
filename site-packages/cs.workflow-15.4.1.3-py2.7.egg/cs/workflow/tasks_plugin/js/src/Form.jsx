/* -*- mode: javascript; coding: utf-8 -*-
 * $Id: Form.jsx 182658 2018-08-22 11:58:52Z cso $
 *
 * Copyright (c) 1990 - 2018 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 */

/* eslint-disable new-cap */
import React from 'react';
import Immutable from 'immutable';
import * as helpers from './helpers';
import {Registry} from 'cs-web-components-base';
import {connect, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';

const Icon = Registry.findComponent('cs-web-components-base-Icon');

const EDIT_ICON = '/resources/icons/byname/cdbwf_form_edit';
const INFO_ICON = '/resources/icons/byname/cdbwf_form_info';

const RELSHIP_PROPTYPE = ImmutablePropTypes.contains({
    mode: PropTypes.oneOf(['info', 'edit']).isRequired,
    relshipName: PropTypes.string,
    references: ImmutablePropTypes.list.isRequired,
    mappedName: PropTypes.string.isRequired
});

function _FormWrapper({relship, task, form}) {
    // this file is loaded before TaskForms component is registered
    const TaskForms = Registry.findComponent('cs-workflow-forms-TaskForms');

    if (!form) {
        return null;
    }

    return (
        <TaskForms
            key={form.get(helpers.ATTR_ID)}
            ID={form.get(helpers.ATTR_ID)}
            task_object_id={task.get('cdb_object_id')}
            forms={Immutable.List([relship.get('form_object_id')])}
            mode={helpers.getMode(relship)}
        />
    );
}

_FormWrapper.propTypes = {
    relship: RELSHIP_PROPTYPE.isRequired,
    task: ImmutablePropTypes.map,
    form: ImmutablePropTypes.map
};

function mapStateToProps(state, ownProps) {
    const {relship} = ownProps;
    const formID = relship.getIn(['references', 0]);

    return {
        form: formID && state.objectsById.get(formID)
    };
}

const FormWrapper = connect(mapStateToProps)(_FormWrapper);

function FormLabel(relship) {
    const iconSrc = relship.get('mode') === 'edit' ? EDIT_ICON : INFO_ICON;

    return (
        <span>
            <Icon
                src={iconSrc}
                size='sm'
            />
            <span className={helpers.prefixNS('form-name')}>
                {relship.get('mappedName')}
            </span>
        </span>
    );
}

FormWrapper.getLabel = (relship) => (
    relship ? FormLabel(relship) : null
);

FormWrapper.propTypes = {
    task: ImmutablePropTypes.map.isRequired,
    relship: RELSHIP_PROPTYPE.isRequired
};

export default FormWrapper;
