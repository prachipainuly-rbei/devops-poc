# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

"""
Module cs.workflow.designer.pages
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: pages.py 184764 2018-10-08 06:11:10Z cso $"

import json
import collections

from cdb import elink
from cdb import util
from cdb.objects.operations import operation
from cdb.objects.operations import form_input

from cs.workflow.forms import Form
from cs.workflow.processes import Process
from cs.workflow.tasks import Task
from cs.workflow.tasks import SystemTask
from cs.workflow.briefcases import Briefcase
from cs.workflow.briefcases import BriefcaseLink
from cs.workflow.briefcases import IOType
from cs.workflow.constraints import Constraint
from cs.workflow.schemacomponents import SchemaComponent
from cs.workflow.designer import json_data
from cs.workflow.designer import nanoroute
from cs.workflow.designer import router
from cs.workflow.designer import wfinterface

# load parameter extensions for standard system task types
from cs.workflow.designer import parameter_extension  # @UnusedImport


class DesignerPage(elink.Template):
    __template__ = "index.html"

    def render(self, context, cdb_process_id=""):
        app_url = self.application.getURLPaths()["approot"]
        from cs.activitystream import PostingTools
        return {
            "app_url": "{}app/{}".format(app_url, cdb_process_id),
            "template_url": "{}templates/".format(app_url),
            "resposible_roles_url": "{}get_roles".format(app_url),
            "responsible_catalog_url": "{}responsibles".format(app_url),
            "form_template_catalog_url": "{}form_templates".format(app_url),
            "operation_catalog_url": "{}operations".format(app_url),
            "constraints_catalog_url": "{}constraints".format(app_url),
            "project_catalog_url": "{}projects".format(app_url),
            "cdb_process_id": cdb_process_id,
            "postingtools": PostingTools,
            "extension_resources": router.handle_request(
                self,
                ["extension_resources"]
            )["resources"],
            "task_title_placeholder": util.get_label(
                "cdbwf_task_title_placeholder"
            ),
        }


class DataProviderBase(elink.VirtualPathTemplate):
    __text__ = "${result}"

    def _render(self, req):
        self.content_type("application/json")
        super(DataProviderBase, self)._render(req)

    def make_link(self, path=None):
        if path is None:
            path = []
        if isinstance(path, basestring):
            path = path.split("/")
        paths = map(unicode, path + [""])
        return "{}process/{}".format(
            self.application.getURLPaths()["approot"],
            "/".join(paths)
        )

    def get_form_data(self, keyname, default=None):
        form_data = getattr(self.request, 'form_data', {}).copy()
        result = form_data.get(keyname, default)
        if isinstance(result, basestring):
            result = self._convert_to_unicode(result)
        elif isinstance(result, collections.Iterable):
            result = [self._convert_to_unicode(url) for url in result]
        return result

    def _convert_to_unicode(self, bs):
        # Ensure that the text parameters are converted to unicode objects.
        if isinstance(bs, str):
            charset = getattr(self.request, "charset", None)
            if not charset:
                charset = elink.ELINK_ENCODING

            # use of decode is intentional, do not modify
            return bs.decode(charset)
        else:
            return bs


class AppData(DataProviderBase):

    def render(self, context, **varkw):
        vpath = self.get_path_segments(cleanup=True)
        cdb_process_id = vpath[0] if len(vpath) else ""
        result = json_data.get_app_data(self, cdb_process_id)
        return {"result": json.dumps(result)}


class ProcessData(DataProviderBase):

    def render(self, context, **varkw):
        vpath = self.get_path_segments(cleanup=True)
        result = None
        try:
            result = router.handle_request(self, vpath)
        except Exception, e:
            result = unicode(e)
        return {"result": result}


class TemplateProvider(elink.VirtualPathTemplate):

    def _render(self, req):
        # Let the template files be registered somewhere using router.
        # Then the template for "parameter" block of system tasks can be
        # customized.
        segs = self.get_path_segments(cleanup=True)
        self.__template__ = segs[0]
        # force using "templates" segment to avoid conflict with json handler
        # maybe redundant
        segs = ["templates"] + segs
        self._router_handled = router.handle_request(self, segs)
        # if the handler returns also the template file location, take it
        if isinstance(self._router_handled, tuple):
            # add the path to template loader
            self.application.addEngineCustomTemplatePath(
                self._router_handled[0])
            self.__template__ = self._router_handled[1]
            self._router_handled = self._router_handled[2]
        if self._router_handled is None:
            self._router_handled = {}
        super(TemplateProvider, self)._render(req)

    def render(self, context):
        return self._router_handled


def _get_attr_label(cls, attr):
    clsdef = cls._getClassDef()
    return unicode(clsdef.getAttributeDefinition(attr).getLabel())


# =======================
# handle template request
# =======================
@router.resource("templates/main.obvt")
def render_main(page):
    return {
        "label_title": _get_attr_label(Process, "title"),
        "label_project": _get_attr_label(Process, "cdb_project_id"),
    }


@router.resource("templates/sidebar.obvt")
def render_sidebar(page):
    return {
        'activities_label': util.get_label('cdbblog_maskreg_activities'),
        'briefcases_label': util.get_label('cdbwf_briefcases'),
    }


@router.resource("templates/actions.obvt")
def render_actions(page):
    labels = util.Labels()
    return {
        "label_save_as_template": labels["cdbwf_ahwf_04"],
        "label_start": labels["cdbwf_start_workflow"],
        "label_onhold": labels["cdbwf_onhold_workflow"],
        "label_cancel": labels["cdbwf_cancel_workflow"],
        "label_dismiss": labels["cdbwf_dismiss_workflow"],
        "label_add_completion": labels["cdbwf_add_process_completion"],
        "label_zoom_in": labels["cdbwf_zoom_in"],
        "label_zoom_out": labels["cdbwf_zoom_out"],
        "label_zoom_all": labels["cdbwf_zoom_all"],
        "label_add_task": labels["cdbwf_add_task"],
    }


@router.resource("templates/new_task.obvt")
def render_new_task(page):
    return {
        "default_title": util.Labels().get("cdbwf_task", "Task"),
    }


@router.resource("templates/new_task_menu.obvt")
def render_new_task_menu(page):
    return wfinterface.get_possible_task_types()


@router.resource("templates/task_fields.obvt")
def render_task_fields(self):
    return {
        "deadline_label": _get_attr_label(Task, "deadline"),
        "status_label": _get_attr_label(Task, "joined_status_name"),
        "finish_option_label": _get_attr_label(Task, "finish_option"),
        "max_duration_label": _get_attr_label(Task, "max_duration"),
    }


@router.resource("templates/systemtask_fields.obvt")
def render_systemtask_fields(self):
    return {
        "uses_global_maps_label": _get_attr_label(
            SystemTask,
            "uses_global_maps",
        ),
    }


@router.resource("templates/constraints.obvt")
def render_constraints(self):
    return {
        "icon": Constraint.GetClassIcon(),
        "label": unicode(Constraint._getClassDef().getDesignation()),
    }


@router.resource("templates/constraint.obvt")
def render_constraint(self):
    return {
        "label_briefcase":
        util.Labels().get("cdbwf_briefcase", "Briefcase"),
        "label_invert": _get_attr_label(Constraint, "invert_rule"),
    }


@router.resource("templates/forms.obvt")
def render_forms(self):
    return {
        "icon": Form.GetClassIcon(),
        "label": unicode(Form._getClassDef().getTitle()),
    }


@router.resource("templates/briefcase_links.obvt")
def render_briefcase_links(self):
    return {
        "icon": Briefcase.GetClassIcon(),
        "label": unicode(BriefcaseLink._getClassDef().getDesignation()),
    }


@router.resource("templates/briefcase_link.obvt")
def render_briefcase_link(self):
    labels = util.Labels()
    return {
        "edit_mode_label": labels.get("cdbwf_briefcase_link_edit", "Edit"),
        "info_mode_label": labels.get("cdbwf_briefcase_link_info", "Info"),
    }


@router.resource("templates/parallel.obvt")
def render_parallel(self):
    return {
        "constraint_icon": Constraint.GetClassIcon(),
    }


@router.resource("templates/task.obvt")
def render_task(self):
    finish_option_label = _get_attr_label(Task, "finish_option")
    uses_global_maps_label = _get_attr_label(SystemTask, "uses_global_maps")
    return {
        "constraint_icon": Constraint.GetClassIcon(),
        "briefcase_icon": Briefcase.GetClassIcon(),
        "finish_option_label": finish_option_label,
        "uses_global_maps_label": uses_global_maps_label,
    }


@router.resource("templates/global_briefcases.obvt")
def render_global_briefcases(self):
    labels = util.Labels()
    return {
        "label": labels.get("cdbwf_global_briefcases", "Global briefcases"),
    }


@router.resource("templates/global_briefcase.obvt")
def render_global_briefcase(self):
    labels = util.Labels()
    return {
        "edit_mode_label": labels.get("cdbwf_briefcase_link_edit", "Edit"),
        "info_mode_label": labels.get("cdbwf_briefcase_link_info", "Info"),
    }


@router.resource("templates/local_briefcases.obvt")
def render_local_briefcases(self):
    labels = util.Labels()
    return {
        "label": labels.get("cdbwf_local_briefcases", "Local briefcases"),
    }


@router.resource("templates/new_briefcase_content.obvt")
def render_new_briefcase_content(self):
    labels = util.Labels()
    return {
        "label_placeholder": labels.get(
            "cdbwf_drag_and_drop_here",
            "Drag&Drop a CDB object here",
        ),
    }


@router.resource("templates/description.obvt")
def render_description(self):
    labels = util.Labels()
    return {
        "label_description": _get_attr_label(Process, "description"),
        "label_ok": labels["ok"],
        "label_cancel": labels["button_cancel"],
    }


@router.resource("templates/briefcase_link_meanings.obvt")
def render_briefcase_link_meanings(self):
    return {
        "label_meaning": _get_attr_label(BriefcaseLink, "iotype"),
        "meanings": IOType,
    }


@router.resource("templates/parameters.obvt")
def render_parameters(self):
    from cs.workflow.tasks import FilterParameter
    labels = util.Labels()
    return {
        "default_label": unicode(
            FilterParameter._getClassDef().getDesignation()
        ),
        "label_more": labels["cdbwf_more"],
    }


@router.json(":cdb_process_id/allowed_operations")
def allowed_operations(page, cdb_process_id):
    positions = ["before", "after", "parallel"]
    result = []
    process = Process.ByKeys(cdb_process_id)
    if process:
        selection = page.get_form_data("selection", [])
        if not isinstance(selection, list):
            selection = [selection]
        result = process.AllowedOperationsForSelection(selection)
    return {k: k in result for k in positions}


@router.json(":cdb_process_id/create_task")
def create_task(page, cdb_process_id):
    data = nanoroute.posted_json(page.request)
    ttype = data.get("ttype")
    if ttype is None:
        return []
    process = Process.ByKeys(cdb_process_id)
    if not process:
        return []
    selection = data.get('selection', [])
    where = data.get("where")
    title = data.get("title", "")
    textension = data.get("extension", "")
    tdef = data.get("task_definition", None)
    defargs = {}
    if tdef:
        defargs["task_definition_id"] = tdef
    if textension:
        defargs["cdb_extension_class"] = textension
    if selection:
        process.AppendTaskToSelection(
            where,
            selection,
            ttype,
            title,
            **defargs
        )
    elif where == "completion":
        # add task into completion group
        process.ProcessCompletion.CreateTask(ttype, title, **defargs)
    else:
        process.CreateTask(ttype, title, **defargs)
    return [json_data.get_component_data(page, process)]


@router.json(":cdb_process_id/remove_task")
def remove_task(page, cdb_process_id):
    data = nanoroute.posted_json(page.request)
    process = Process.ByKeys(cdb_process_id)
    if not process:
        return []
    task_id = data
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    if not task:
        return []

    task.DeleteTask()
    return [json_data.get_component_data(page, process)]


@router.json(":cdb_process_id/modify")
def modify_process(page, cdb_process_id):
    process = Process.ByKeys(cdb_process_id)
    if not process:
        return None
    attr = page.get_form_data("attribute", None)
    value = page.get_form_data("value", None)
    result = {}
    if attr and attr in process:
        process.ModifyProcess(**dict([(attr, value)]))
        result[attr] = process[attr]
    return result


@router.json(":cdb_process_id/save_as_template")
def save_as_template(page, cdb_process_id):
    process = Process.ByKeys(cdb_process_id)
    if not process:
        return None
    template = process.SaveAsTemplate()
    base_uri = page.application.getURLPaths()["base_uri"]
    return {"url": page.application.get_designer_url(template, base_uri)}


@router.json(":cdb_process_id/start")
def start_process(page, cdb_process_id):
    process = Process.ByKeys(cdb_process_id)
    if process:
        try:
            process.ActivateProcess()
        except RuntimeError, e:
            # Should be an ue.Exception, but is a RuntimeError
            return {"message": "%s" % unicode(e)}
    return {"success": 1}


@router.json(":cdb_process_id/hold")
def hold_process(page, cdb_process_id):
    process = Process.ByKeys(cdb_process_id)
    if process:
        try:
            process.OnHoldProcess()
        except Exception as e:
            return {"message": "%s" % unicode(e)}
    return {"success": 1}


@router.json(":cdb_process_id/cancel")
def cancel_process(page, cdb_process_id):
    process = Process.ByKeys(cdb_process_id)
    if process:
        try:
            process.CancelProcess()
        except RuntimeError, e:
            return {"message": "%s" % unicode(e)}
    return {"success": 1}


@router.json(":cdb_process_id/dismiss")
def dismiss_process(page, cdb_process_id):
    process = Process.ByKeys(cdb_process_id)
    if process:
        try:
            process.DismissProcess()
        except RuntimeError, e:
            return {"message": "%s" % unicode(e)}
    return {"success": 1}


@router.json(":cdb_process_id/tasks/:task_id/modify")
def modify_task(page, cdb_process_id, task_id):
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    if not task:
        return None
    attr = page.get_form_data("attribute", None)
    value = page.get_form_data("value", None)
    result = {}
    if attr and attr in task:
        task.ModifyTask(**dict([(attr, value)]))
        result[attr] = task[attr] if task[attr] != None else ""
    if "deadline" in result:
        result["deadline"] = json_data._get_deadline(task)
    return result


@router.json(":cdb_process_id/tasks/:task_id/get_responsible")
def get_responsible(page, cdb_process_id, task_id):
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    if not task:
        return None
    return json_data.get_responsible_info(page, task)


@router.json(":cdb_process_id/tasks/:task_id/add_form")
def add_form(page, cdb_process_id, task_id):
    form_template_id = page.get_form_data("form_template_id", "")
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    operation(
        "cdbwf_add_task_form",
        task,
        form_input(task, form_template_id=form_template_id)
    )
    return {
        "task_local_briefcases": json_data.get_briefcase_links(page, task),
        "sidebar_local_briefcases": json_data.get_local_briefcases(
            page,
            task.Process
        ),
    }


@router.json(":cdb_process_id/tasks/:task_id/set_responsible")
def set_responsible(page, cdb_process_id, task_id):
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    if not task:
        return None
    subject_id = page.get_form_data("subject_id", "")
    subject_type = page.get_form_data("subject_type", "")
    task.ModifyTask(subject_id=subject_id, subject_type=subject_type)
    return json_data.get_responsible_info(page, task)


@router.json(":cdb_process_id/create_global_briefcase")
def create_global_briefcase(page, cdb_process_id):
    process = Process.ByKeys(cdb_process_id)
    data = nanoroute.posted_json(page.request)
    briefcase = process.CreateBriefcase(data['name'])
    briefcase.SetGlobalMeaning(data['meaning'])
    return json_data.get_global_briefcases(page, process)


@router.json(":cdb_process_id/global_briefcases/:briefcase_id/modify")
@router.json(":cdb_process_id/local_briefcases/:briefcase_id/modify")
def modify_briefcase(page, cdb_process_id, briefcase_id):
    briefcase = Briefcase.ByKeys(
        cdb_process_id=cdb_process_id,
        briefcase_id=briefcase_id
    )
    attr = page.get_form_data("attribute", None)
    value = page.get_form_data("value", None)
    result = {}
    if attr and briefcase.has_key(attr):
        briefcase.ModifyBriefcase(**dict([(attr, value)]))
        result[attr] = briefcase[attr]
    return result


@router.json(":cdb_process_id/global_briefcases/:briefcase_id/setmeaning")
def set_global_briefcase_meaning(page, cdb_process_id, briefcase_id):
    briefcase = Briefcase.ByKeys(
        cdb_process_id=cdb_process_id,
        briefcase_id=briefcase_id
    )
    value = page.get_form_data("value", None)

    try:
        link = briefcase.SetGlobalMeaning(value)
    except util.ErrorMessage:
        raise util.ErrorMessage("cdbwf_operation_allowed")

    return {
        "iotype": link.iotype,
        "meaning": IOType(link.iotype).name,
        "icon": link.GetObjectIcon(),
    }


@router.json(":cdb_process_id/global_briefcases/:briefcase_id/delete")
def delete_global_briefcase(page, cdb_process_id, briefcase_id):
    briefcase = Briefcase.ByKeys(
        cdb_process_id=cdb_process_id,
        briefcase_id=briefcase_id
    )
    for blink in briefcase.Links:
        blink.DeleteBriefcaseLink()

    briefcase.DeleteBriefcase()
    process = Process.ByKeys(cdb_process_id)
    return json_data.get_global_briefcases(page, process)


@router.json(":cdb_process_id/create_local_briefcase")
def create_local_briefcase(page, cdb_process_id):
    process = Process.ByKeys(cdb_process_id)
    data = nanoroute.posted_json(page.request)
    process.CreateBriefcase(data['name'])
    return json_data.get_local_briefcases(page, process)


@router.json(":cdb_process_id/local_briefcases/:briefcase_id/delete")
def delete_local_briefcase(page, cdb_process_id, briefcase_id):
    briefcase = Briefcase.ByKeys(
        cdb_process_id=cdb_process_id,
        briefcase_id=briefcase_id
    )
    briefcase.DeleteBriefcase()
    process = Process.ByKeys(cdb_process_id)
    return json_data.get_local_briefcases(page, process)


def add_contents_to_briefcase(page, briefcase):
    def add_links(url):
        if url.startswith("cdb://"):
            briefcase.AddObjectFromCmsg(url)
        else:
            briefcase.AddObjectFromLink(url)

    cmsgs = page.get_form_data("cmsgs[]", "")

    if isinstance(cmsgs, basestring):
        # single link
        add_links(cmsgs)
    else:
        # multiple links
        for cmsg in cmsgs:
            add_links(cmsg)


@router.json(":cdb_process_id/global_briefcases/:briefcase_id/add_content")
def add_content_to_global_briefcase(page, cdb_process_id, briefcase_id):
    process = Process.ByKeys(cdb_process_id)
    # for global briefcase we need return the link for iotype and icon
    bcl = process.BriefcaseLinks.KeywordQuery(briefcase_id=briefcase_id)[0]
    add_contents_to_briefcase(page, bcl.Briefcase)
    return json_data.get_global_briefcase(page, bcl)


@router.json(":cdb_process_id/global_briefcases/:briefcase_id/delete_content")
def delete_global_briefcase_content(page, cdb_process_id, briefcase_id):
    process = Process.ByKeys(cdb_process_id)
    # for global briefcase we need return the link for iotype and icon
    bcl = process.BriefcaseLinks.KeywordQuery(briefcase_id=briefcase_id)[0]
    briefcase = bcl.Briefcase
    content_object_id = page.get_form_data("content_object_id", "")
    briefcase.RemoveObject(content_object_id)
    return json_data.get_global_briefcase(page, bcl)


@router.json(":cdb_process_id/local_briefcases/:briefcase_id/add_content")
def add_content_to_local_briefcase(page, cdb_process_id, briefcase_id):
    briefcase = Briefcase.ByKeys(
        cdb_process_id=cdb_process_id,
        briefcase_id=briefcase_id
    )
    add_contents_to_briefcase(page, briefcase)
    return json_data.get_local_briefcase(page, briefcase)


@router.json(":cdb_process_id/local_briefcases/:briefcase_id/delete_content")
def delete_local_briefcase_content(page, cdb_process_id, briefcase_id):
    briefcase = Briefcase.ByKeys(
        cdb_process_id=cdb_process_id,
        briefcase_id=briefcase_id
    )
    content_object_id = page.get_form_data("content_object_id", "")
    briefcase.RemoveObject(content_object_id)
    return json_data.get_local_briefcase(page, briefcase)


@router.json(":cdb_process_id/tasks/:task_id/add_constraint")
def add_constraint(page, cdb_process_id, task_id):
    component = SchemaComponent.ByKeys(
        cdb_process_id=cdb_process_id,
        task_id=task_id
    )
    if not component:
        return None
    rule_name = page.get_form_data("constraint", "")
    if not rule_name:
        return None
    component.AddConstraint(rule_name)
    # Constraint can be added: can also be modified
    return json_data.get_constraints(page, component, readonly=False)


@router.json(":cdb_process_id/tasks/:task_id/constraints/"
             ":constraint_object_id/modify")
def modify_constraint(page, cdb_process_id, task_id, constraint_object_id):
    constraint = Constraint.ByKeys(constraint_object_id)
    if not constraint:
        return None
    attr = page.get_form_data("attribute", None)
    value = page.get_form_data("value", None)
    if attr and constraint.has_key(attr):
        constraint.ModifyConstraint(**dict([(attr, value)]))
    return json_data.get_constraint_data(page, constraint, readonly=False)


@router.json(":cdb_process_id/tasks/:task_id/constraints/"
             ":constraint_object_id/delete")
def delete_constraint(page, cdb_process_id, task_id, constraint_object_id):
    constraint = Constraint.ByKeys(constraint_object_id)
    if constraint:
        constraint.DeleteConstraint()
    task = SchemaComponent.ByKeys(
        cdb_process_id=cdb_process_id,
        task_id=task_id
    )
    # Constraint can be deleted: can also be modified
    return json_data.get_constraints(page, task, readonly=False)


@router.json(":cdb_process_id/tasks/:task_id/link_briefcase")
def link_briefcase(page, cdb_process_id, task_id):
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    if not task:
        return None
    briefcase_id = page.get_form_data("briefcase_id", "")
    if not briefcase_id:
        return None
    briefcase = Briefcase.ByKeys(
        cdb_process_id=cdb_process_id,
        briefcase_id=briefcase_id
    )
    briefcase.SetTaskMeaning(IOType(0).name, task, False)
    return json_data.get_briefcase_links(page, task)


@router.json(":cdb_process_id/tasks/:task_id/briefcaselinks/"
             ":briefcase_id/delete")
def delete_briefcase_link(page, cdb_process_id, task_id, briefcase_id):
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    if not task:
        return None
    briefcase = Briefcase.ByKeys(
        cdb_process_id=cdb_process_id,
        briefcase_id=briefcase_id
    )
    briefcase.RemoveTaskMeaning(task)
    return json_data.get_briefcase_links(page, task)


@router.json(":cdb_process_id/tasks/:task_id/briefcaselinks/"
             ":briefcase_id/modify")
def modify_briefcase_link(page, cdb_process_id, task_id, briefcase_id):
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    attr = page.get_form_data("attribute", None)
    briefcase = Briefcase.ByKeys(
        cdb_process_id=cdb_process_id,
        briefcase_id=briefcase_id
    )
    if not task or not attr or not briefcase:
        return None
    value = page.get_form_data("value", None)
    brlink = briefcase.ChangeTaskMeaning(task, **dict([(attr, value)]))
    return json_data.get_briefcase_link(page, brlink)


@router.json(":cdb_process_id/tasks/:task_id/modify_parameter")
def modify_parameter(page, cdb_process_id, task_id):
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    if not task:
        return None
    defid = task.Definition.name
    # looks handler up
    handler = router.handle_request(page, ["parameter_extensions", defid])
    if handler is not None and "setter" in handler:
        handler["setter"](page, task)
    return json_data.get_parameters(page, task, readonly=False)


@router.json(":cdb_process_id/tasks/:task_id/delete_parameter")
def delete_parameter(page, cdb_process_id, task_id):
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    if not task:
        return None
    defid = task.Definition.name
    handler = router.handle_request(page, ["parameter_extensions", defid])
    if handler is not None and "deleter" in handler:
        handler["deleter"](page, task)
    else:
        for parameter in task.AllParameters:
            parameter.DeleteParameter()
    return json_data.get_parameters(page, task, readonly=False)


@router.json(":cdb_process_id/set_project")
def set_project(page, cdb_process_id):
    process = Process.ByKeys(cdb_process_id)
    if not process:
        return None
    pcs_installed = wfinterface._is_pcs_enabled()
    if not pcs_installed:
        return None
    cdb_project_id = page.get_form_data("cdb_project_id", None)
    if cdb_project_id is None:
        return None
    process.ModifyProcess(cdb_project_id=cdb_project_id)
    return json_data.get_project_data(page, process)


@router.json(":cdb_process_id/tasks/:task_id/modify_extension")
def modify_extension(page, cdb_process_id, task_id):
    task = Task.ByKeys(cdb_process_id=cdb_process_id, task_id=task_id)
    if not task:
        return None
    extension_object = task.getExtensionObject()
    extension_name = extension_object.getDesignerExtensionName()
    handler = router.handle_request(page, ["task_extension", extension_name])
    if handler is not None and "setter" in handler:
        task.ModifyTask(**handler["setter"](page, extension_object))
    return json_data.get_task_extension(page, task, readonly=False)
