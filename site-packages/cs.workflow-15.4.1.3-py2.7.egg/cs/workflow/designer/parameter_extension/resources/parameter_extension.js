(function($, obviel) {
    var templates = cs_workflow_designer_templateUrl;

    obviel.view({
        iface: 'cs-workflow-parameter-generate-info',
        obvtUrl: templates + 'parameter_generate_info.obvt',
        render: function() {
            var self = this;
            if (self.obj.readonly) {
                return;
            }
            // catalog
            $(this.el).find('.parameter-action').off('click').on(
                'click',
                function() {
                    $(this).trigger('openResponsibleCatalog');
            })
            .off('responsibleSelected')
            .on('responsibleSelected', function(ev, data) {
                if (data.result.length && data.result[0].subject_id) {
                    $(self.el).trigger(
                            'parameterChanged',
                            {subject_id: data.result[0].subject_id.text,
                             subject_type: data.result[0].subject_type.text});
                }
            });
        },
        remove: function() {
            $(this.el).trigger('removeParameter', null);
        }
    });

    obviel.view({
        iface: 'cs-workflow-parameter-status-change',
        obvtUrl: templates + 'parameter_status_change.obvt',
        render: function() {
            var self = this;
            if (self.obj.readonly) {
                return;
            }
            // editable field
            this.el.find('.parameter-text').editable(
                function(value, settings) {
                        return value;
                }, {placeholder: '-',
                    onblur: 'submit',
                    callback: function(value, settings) {
                        self.el.trigger(
                            'parameterChanged',
                            {target_state: value,
                             cdb_object_id: self.obj.cdb_object_id,
                             rule_name: self.obj.rule_name});
                    }
                });
            // catalog
            this.el.find('.rule-action').off('click').on(
                'click',
                function() {
                    $(this).trigger('openObjectFilterCatalog');
            })
            .off('objectFilterSelected')
            .on('objectFilterSelected', function(ev, data) {
                if (data.result.length && data.result[0].name) {
                    self.el.trigger(
                            'parameterChanged',
                            {target_state: self.obj.target_state,
                             cdb_object_id: self.obj.cdb_object_id,
                             rule_name: data.result[0].name.text});
                }
            });
        },
        remove: function() {
            var data = {cdb_object_id: this.obj.cdb_object_id};
            this.el.trigger('removeParameter', data);
        },
        checkFilter: function(el) {
            if (this.obj.rule_name) {
                el.addClass('has-filter');
                el.attr('title', this.obj.target_state + ' (' + this.obj.rule_name + ')');
            }
        },
        checkStyle: function(el) {
            if (!this.obj.cdb_object_id) {
                el.addClass('new-parameter');
            }
        }
    });

    obviel.view({
        iface: 'cs-workflow-parameter-run-operation',
        obvtUrl: templates + 'parameter_run_operation.obvt',
        render: function() {
            var self = this;
            if (self.obj.readonly) {
                return;
            }
            // catalog
            $(this.el).find('.parameter-action').off('click').on(
                'click',
                function() {
                    $(this).trigger('openOperationCatalog');
            })
            .off('operationSelected')
            .on('operationSelected', function(ev, data) {
                if (data.result.length && data.result[0].name) {
                    $(self.el).trigger(
                            'parameterChanged',
                            {operation_name: data.result[0].name.text});
                }
            });
        },
        remove: function() {
            $(this.el).trigger('removeParameter', null);
        }
    });

}(jQuery, obviel));
