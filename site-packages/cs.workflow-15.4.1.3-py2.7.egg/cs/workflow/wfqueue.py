#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
Module wfqueue

This is the documentation for the wfqueue module.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: wfqueue.py 171886 2018-01-18 11:18:14Z cso $"

import sys
import os

from cdb import i18n
from cdb import misc
from cdb import mq
from cdb import ddl
from cdb import rte
from cdb import ue
from cdb.objects import org

from cdb.plattools import killableprocess

from cs.workflow import processes
from cs.workflow import tasks

__all__ = ['WFQueue',
           'SystemTaskJob',
           'wfqueue']


class WFQueue(mq.Queue):
    def _get_language(self, argv):
        try:
            pos = argv.index("--language")
        except ValueError:
            return "en"

        del argv[pos]
        result = argv[pos]

        if result not in i18n.getActiveGUILanguages():
            raise ValueError("no active GUI language: '{}'".format(result))

        return result

    def _get_svcuser(self, argv):
        svcpersno = None

        try:
            pos = argv.index("--svcuser")
            del argv[pos]
            svcpersno = argv[pos]
            svcuser = org.User.ByKeys(svcpersno)

            if not svcuser:
                raise ValueError("service user does not exist")

            del argv[pos]

        except ValueError:
            raise ue.Exception("cdbwf_no_svcuser_available", svcpersno)

        return svcpersno

    def cli(self, argv):
        self.svcuser = self._get_svcuser(argv)
        self.language = self._get_language(argv)
        misc.log(
            1,
            "WFServer starting with svcuser '{}', language '{}'".format(
                self.svcuser, self.language))
        super(WFQueue, self).cli(argv)


class SystemTaskJob(mq.Job):
    def fail(self, exception):
        misc.log_traceback("wfqueue")
        task = tasks.Task.ByKeys(cdb_process_id=self.cdb_process_id,
                                 task_id=self.task_id)
        task.cancel_task(unicode(exception))
        if task.Parent:
            task.Parent.propagate_cancel(task)

        super(SystemTaskJob, self).fail(1, unicode(exception))

    def run(self):
        filename = __file__.decode(sys.getfilesystemencoding())
        dirname = os.path.dirname(os.path.abspath(filename))

        process = processes.Process.ByKeys(cdb_process_id=self.cdb_process_id)

        if process:
            user = org.User.ByKeys(process.started_by)
            if user:
                args = [
                    rte.runtime_tool("powerscript"),
                    "--user=%s" % user.login,
                    "--systemuser=%s" % self.queue.svcuser,
                    "--language=%s" % self.queue.language,
                    os.path.join(dirname, "task_external_process.py"),
                    self.cdb_process_id,
                    self.task_id]
                try:
                    killableprocess.check_call(args)
                except Exception, exc:
                    self.fail(exc)
            else:
                self.fail(ue.Exception("cdbwf_no_user_available"))
        self.done()


wfqueue = WFQueue(
    "wfqueue",
    SystemTaskJob,
    fieldlist=[
        ddl.Char(
            "cdb_process_id",
            processes.Process.cdb_process_id.length),  # @UndefinedVariable
        ddl.Char(
            "task_id",
            tasks.SystemTask.task_id.length)])  # @UndefinedVariable


def initialize_tool():
    rte.environ["CADDOK_TOOL"] = "wfqueue"
    rte.exec_config_script(
        os.path.join(
            rte.environ["CADDOK_BASE"],
            "etc",
            "{}.conf".format(rte.environ["CADDOK_TOOL"])))
    misc.cdblog_exit("")
    misc.cdblog_init(rte.environ["CADDOK_TOOL"], "", "")


if __name__ == "__main__":
    initialize_tool()
    sys.exit(wfqueue.cli(sys.argv))
