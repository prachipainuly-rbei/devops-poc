# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

"""
REST backend for cs.workflow.forms, mounted @ /internal/cs-workflow-forms
"""

__revision__ = "$Id: rest_app.py 183859 2018-09-14 06:22:48Z cso $"
__docformat__ = "restructuredtext en"

import webob

from cs.platform.web import JsonAPI
from cs.platform.web.rest.support import rest_key
from cs.platform.web.root import Internal
from cs.workflow.forms import transform_data
from cs.workflow.tasks import Task
from cs.workflow.webforms.main import MOUNTEDPATH


class TaskFormsModel(object):
    def __init__(self, task_object_id):
        self.task = self._get_task(task_object_id)
        self.indexed_forms = self._get_indexed_forms()

    def _get_task(self, task_object_id):
        for task in Task.KeywordQuery(cdb_object_id=task_object_id):
            if task.CheckAccess("read"):
                return task

        raise webob.exc.HTTPNotFound

    def _get_indexed_forms(self):
        """
        index task's form objects by iotype and form_object_id
        """
        return {
            "edit": {f.cdb_object_id: f for f in self.task.EditForms},
            "info": {f.cdb_object_id: f for f in self.task.InfoForms},
        }

    def _read_data(self, form):
        dialog_name = form.Masks[0].name
        form_rest_key = rest_key(form)
        return {
            "cdb_object_id": form.cdb_object_id,
            "system:navigation_id": form_rest_key,
            "system:classname": "cdbwf_form",
            "name": form.joined_template_name,
            "dialog_name": dialog_name,
            "data": transform_data(form.preset_data(), include_prefix=True),
        }

    def getFormsData(self, forms):
        """
        return forms indexed by mode (info/edit)

        if parameter forms is given, only include forms matching the contained
        cdb_object_ids
        """
        result = {
            "info": [self._read_data(f)
                     for f in self.indexed_forms["info"].values()],
            "edit": [self._read_data(f)
                     for f in self.indexed_forms["edit"].values()]
        }
        if forms:
            result = {
                "info": [f for f in result["info"]
                         if f["cdb_object_id"] in forms],
                "edit": [f for f in result["edit"]
                         if f["cdb_object_id"] in forms],
            }
        return result


class App(JsonAPI):
    pass


@Internal.mount(app=App, path=MOUNTEDPATH)
def _mount_app():
    return App()


@App.path(path="{task_object_id}", model=TaskFormsModel)
def _get_model(task_object_id):
    return TaskFormsModel(task_object_id)


@App.json(model=TaskFormsModel)
def get_forms_data(model, request):
    forms = request.params.getall("forms")
    if forms:
        forms = set(forms)
    return model.getFormsData(forms)
