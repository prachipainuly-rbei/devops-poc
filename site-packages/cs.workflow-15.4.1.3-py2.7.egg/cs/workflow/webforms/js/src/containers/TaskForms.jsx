import React from 'react';
import Immutable from 'immutable';
import {Component} from 'react';
import {
    Throbber, Form, WithOperations, WithOperationHandler, fetchType
} from 'cs-web-components-base';
import {connect, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {
    loadFormsActionCreator, submitFormsActionCreator
} from '../actions/actions';
import {prefixNS} from '../helpers';
import FormTabs from '../components/FormTabs';
import SingleForm from '../components/SingleForm';
import ObjectMissing from '../components/ObjectMissing';

/*
 * Renders forms of a given task (cdb_object_id)
 * Fetches two sets of mask names (edit, info)
 * Hides tab bar if only one mask found
 * Form App renders task.EditForms as tabs, then task.InfoForms as tabs
 */

const FORM_TYPE = '/api/v1/class/cdbwf_form';
const HANDLER = 'editor';

const SingleFormWrapper = WithOperations(
    WithOperationHandler(SingleForm, HANDLER), {
        contextType: 'cdbwf_form',
        operationNames: ['cdbwf_submit_form']
    }
);

class SingleFormWithOperations extends React.Component {
    render() {
        const {contextObjects, edit} = this.props;
        // correct dialog URL is injected in SingleForm
        return (
            <SingleFormWrapper contextObjects={contextObjects}
                         edit={edit}
                         key={`wrapped-${contextObjects.get(0).get('cdb_object_id')}`}
                         name={contextObjects.get(0).get('name')} />
        );
    }
}

SingleFormWithOperations.propTypes = {
    contextObjects: ImmutablePropTypes.listOf(ImmutablePropTypes.map).isRequired,
    edit: PropTypes.bool.isRequired
};

const NForms = ({edit_forms, info_forms}) => (
    <FormTabs>
        {edit_forms.map((form) => (
            <SingleFormWithOperations
                contextObjects={Immutable.List([form])}
                key={`formop-${form.get('cdb_object_id')}`}
                name={form.get('name')}
                edit={true} />
        )).concat(
            info_forms.map((form) => (
                <SingleFormWithOperations
                    contextObjects={Immutable.List([form])}
                    key={`formop-${form.get('cdb_object_id')}`}
                    name={form.get('name')}
                    edit={false} />
            ))
        )}
    </FormTabs>
);

NForms.propTypes = {
    edit_forms: ImmutablePropTypes.list.isRequired,
    info_forms: ImmutablePropTypes.list.isRequired
};

class TaskForms extends Component {
    constructor(...args) {
        super(...args);
        this.state = {forms: null};
        this.loadForms = this.loadForms.bind(this);
        this.submitForms = this.submitForms.bind(this);
    }

    loadForms(props) {
        const {load_forms, ID, task_object_id, forms} = props;
        load_forms(ID, task_object_id, forms);
    }

    submitForms() {
        const {submit_forms, task_object_id} = this.props;
        submit_forms(task_object_id);
    }

    componentDidMount() {
        this.loadForms(this.props);
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.loadedForms !== nextProps.loadedForms) {
            this.setState({forms: nextProps.loadedForms});
            // to fill up typesById for OpInfoWrapper
            nextProps.fetchType(FORM_TYPE);
        }
        if (this.props.task_object_id !== nextProps.task_object_id) {
            this.setState({forms: null});
            this.loadForms(nextProps);
        }
    }

    render() {
        const {forms} = this.state;

        if (forms) {
            const edit_forms = Immutable.Set(forms.get('edit').map(f => f.get('cdb_object_id')));
            const info_forms = Immutable.Set(forms.get('info').map(f => f.get('cdb_object_id')))
                .subtract(edit_forms);

            switch (edit_forms.size + info_forms.size) {
                case 0: {
                    return (<ObjectMissing />);
                }
                case 1: {
                    // exactly one form: no need for tabs
                    return (
                        <Form.OperationTrigger handlerName={HANDLER}>
                            <SingleFormWithOperations
                                contextObjects={
                                    Immutable.List(
                                        [forms.getIn([edit_forms.size ? 'edit' : 'info', 0])]
                                    )
                                }
                                edit={Boolean(edit_forms.size)} />
                        </Form.OperationTrigger>
                    );
                }
                default: {
                    // more than one form: use tabs
                    return (
                        <Form.OperationTrigger handlerName={HANDLER}>
                            <NForms
                                edit_forms={forms.get('edit').filter(
                                    f => edit_forms.includes(f.get('cdb_object_id'))
                                )}
                                info_forms={forms.get('info').filter(
                                    f => info_forms.includes(f.get('cdb_object_id'))
                                )} />
                        </Form.OperationTrigger>
                    );
                }
            }
        } else {
            return (
                <Throbber />
            );
        }
    }
}

TaskForms.propTypes = {
    ID: PropTypes.string.isRequired,
    task_object_id: PropTypes.string.isRequired,
    forms: ImmutablePropTypes.list,
    loadedForms: ImmutablePropTypes.map,
    load_forms: PropTypes.func.isRequired,
    submit_forms: PropTypes.func.isRequired,
    fetchType: PropTypes.func.isRequired
};

function mapStateToProps(state, props) {
    const localState = state[prefixNS('reducer')];
    return {
        loadedForms: localState.getIn(['forms', props.ID])
    };
}

function mapDispatchToProps(dispatch, props) {
    const {ID, task_object_id, forms} = props;
    return {
        load_forms: (ID, task_object_id, forms) => {
            dispatch(loadFormsActionCreator(ID, task_object_id, forms));
        },
        submit_forms: () => { dispatch(submitFormsActionCreator(ID, task_object_id, forms)) },
        fetchType: type => { dispatch(fetchType(type)) }
    };
}

export default connect(mapStateToProps, mapDispatchToProps)(TaskForms);
