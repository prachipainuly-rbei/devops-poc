import React from 'react';
import Immutable from 'immutable';
import {Form} from 'cs-web-components-base';
import {connect, ImmutablePropTypes, PropTypes} from 'cs-web-components-externals';
import {prefixNS} from '../helpers';

class SingleForm extends React.Component {
    constructor(...args) {
        super(...args);
        this.runOperation = this.runOperation.bind(this);
        this.customOnCancel = this.customOnCancel.bind(this);
    }

    runOperation(props) {
        const {isOperationRunning, runOperation, operations, form} = props;

        if (runOperation && !isOperationRunning) {
            runOperation(operations.get(0), {
                contextObjects: Immutable.List([form]),
                dialog: form.get('dialog_name'),
                successActions: [],
                nonBlocking: true
            });
        }
    }

    customOnCancel() {
        this.props.forceCancel();
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.operations !== nextProps.operations) {
            this.runOperation(nextProps);
        }
    }

    render() {
        const {form, edit} = this.props;
        return (
            <div className={
                edit ? prefixNS('data__editable') : prefixNS('data__readonly')
            }>
                <Form.ConfiguredForm
                    {...this.props}
                    onCancel={this.customOnCancel}
                    key={`form-${form.get('cdb_object_id')}`}
                    readOnly={!edit} />
            </div>
        );
    }
}

SingleForm.propTypes = {
    form: ImmutablePropTypes.map.isRequired,
    name: PropTypes.string.isRequired,
    edit: PropTypes.bool,
    // injected by outer OperationHandler (edit only)
    contextObjects: ImmutablePropTypes.listOf(ImmutablePropTypes.map).isRequired,
    runOperation: PropTypes.func,
    onSubmit: PropTypes.func,
    onCancel: PropTypes.func,
    forceCancel: PropTypes.func,
    // injected by wrapper WithOperations (edit only)
    operations: ImmutablePropTypes.list
};

function mapStateToProps(state, ownProps) {
    return {
        // automatically map to form for less redundancy
        form: ownProps.contextObjects.get(0)
    };
}

export default connect(mapStateToProps)(SingleForm);
