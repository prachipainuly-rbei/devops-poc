#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_designer_urls.py 172253 2018-01-24 12:16:25Z cso $"

import unittest

from cdb import CADDOK
from cdb import testcase

from cs.workflow.designer import urls
from cs.workflow.processes import Process
from cs.workflow.tasks import FilterParameter


def setUpModule():
    testcase.run_level_setup()


class URLTestCase(testcase.RollbackTestCase):
    def test_quote(self):
        self.assertEqual(
            urls.quote("https://test?param=value&param2={'a b c'}"),
            "https%3A//test?param=value%26param2=%7B%27a%20b%20c%27%7D")
        self.assertEqual(
            urls.quote('/test?param=value&param2={"a b": "c"}'),
            "/test?param=value%26param2=%7B%22a%20b%22%3A%20%22c%22%7D")

        with self.assertRaises(TypeError):
            urls.quote(None)

        with self.assertRaises(AttributeError):
            urls.quote(1)

    def test_get_protocol_url(self):
        for pid in ["PID", None, 1]:
            self.assertEqual(
                urls.get_protocol_url(pid),
                "/info/process_protocol/?search_attrs=%7B%22"
                "cdbwf_protocol.cdb_process_id%22%3A%22{}%22%7D".format(pid))

    def test_get_object_url(self):
        for obj in [None, 1, "TEST"]:
            with self.assertRaises(AttributeError):
                urls.get_object_url(obj)

        # non-persistent object (e.g. missing primary key)
        self.assertEqual(urls.get_object_url(Process()),
                         "{}/info/workflow/None".format(CADDOK.WWWSERVICE_URL))

        # REST API-activated object
        process = Process.Create(cdb_process_id="TEST")
        self.assertEqual(urls.get_object_url(process),
                         "{}/info/workflow/TEST".format(CADDOK.WWWSERVICE_URL))

        # non-REST API-activated object
        param = FilterParameter.Create(cdb_process_id="TEST")
        self.assertEqual(urls.get_object_url(param), None)
        # TODO as soon as mock is usable again, assert that cdb.misc.log_error
        # is called once with msg below
        msg = ("Cannot resolve object URL for cdbwf_filter_parameter '{}'. "
               "Class or operation not activated for cs.web?".format(
                   param.cdb_object_id))


if __name__ == "__main__":
    unittest.main()
