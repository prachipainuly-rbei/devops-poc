# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: webforms.py 183859 2018-09-14 06:22:48Z cso $"

from collections import defaultdict

from cdb.validationkit import given
from cdb.validationkit import when
from cdb.validationkit import then

from cs.workflow import forms
from steps.workflow_designer import waitForAjax
from steps.workflow_designer import waitForElement

_WEBFORMS_ADDRESS = "cs-workflow-forms/{}"


@when(u"^the user has opened the task's forms app$")
def userOpensFormsApp(context):
    url = context.server_url + _WEBFORMS_ADDRESS.format(
        context.wftask.cdb_object_id)
    context.webdriver.get(url)
    waitForAjax(context.webdriver)


@given(u"^the user adds an (?P<mode>info|edit) form to the (?P<task>.+)$")
def userAddsForm(context, mode, task):
    if task == "task":
        task_obj = context.wftask
    else:
        task_obj = getattr(context, task)

    dialog = "webforms_test_{}".format(mode)

    template = forms.FormTemplate.Create(
        mask_name=dialog, name_de=dialog, name_en=dialog, status=20)
    form = forms.Form.InitializeForm(task_obj, template)

    if not getattr(context, "forms", None):
        context.forms = defaultdict(list)

    context.forms[mode].append(form)

    if mode == "info":
        for link in task_obj.BriefcaseLinks:
            if link.Briefcase.name == "{} 1".format(template.name):
                link.Update(iotype=0)


@then(ur"^(?P<amount>\d+) (?P<mode>info|edit) form tabs are rendered$")
def formTabsRendered(context, amount, mode):
    task_forms = context.webdriver.find_elements_by_class_name(
        "cs-workflow-forms-tabs__{}".format(mode))

    assert len(task_forms) == int(amount), (
        "found {} {} forms, expected {}".format(len(task_forms), mode, amount)
    )


@then(u"^the missing object component is rendered$")
def missingObjectComponentRendered(context):
    obj = context.webdriver.find_elements_by_class_name(
        "cs-workflow-forms-object_missing")

    assert obj, "missing object component not rendered"


@then(u"^the rendered form is (?P<editable>editable|not editable)$")
def renderedFormIs(context, editable):
    if editable == "editable":
        wrapper_class = "cs-workflow-forms-data__editable"
        inverted_class = "cs-workflow-forms-data__readonly"
    elif editable == "not editable":
        wrapper_class = "cs-workflow-forms-data__readonly"
        inverted_class = "cs-workflow-forms-data__editable"

    wrapper = context.webdriver.find_elements_by_class_name(wrapper_class)
    inverted = context.webdriver.find_elements_by_class_name(inverted_class)

    assert len(wrapper) >= 1, (
        "expected >= 1 element of class '{}', found {}".format(
            wrapper_class, len(wrapper)))
    assert not inverted, (
        "expected 0 elements of class '{}', found {}".format(
            wrapper_class, len(wrapper)))


@when(u"^the user fills out a value$")
def userFillsOut(context):
    fill_out = waitForElement(
        context.webdriver,
        byCSS=".cs-workflow-forms-data__editable input:not([readonly])")
    context.filled_out = fill_out.get_attribute("name")
    context.original_form_value = fill_out.get_attribute("value")
    context.original_form_data = context.forms["edit"][0].read_data()
    fill_out.send_keys("123")


@when(u"^the user (?P<action>submits|cancels) the form input$")
def userActionOnFormInput(context, action):
    if action == "submits":
        data_ce_id = "type-0"
    elif action == "cancels":
        data_ce_id = "type-1"

    button = waitForElement(
        context.webdriver, byCSS="button[data-ce-id='{}']".format(data_ce_id))
    button.click()
    waitForAjax(context.webdriver)


@then(u"^the form (?P<condition>is|is not) saved$")
def formIsSaved(context, condition):
    filled_out_attr = context.filled_out.split(".", 1)[-1]

    if condition == "is":
        expected_ui_data = "123"
        expected_backend_data = "123"
    elif condition == "is not":
        expected_ui_data = context.original_form_value
        expected_backend_data = context.original_form_data.get(
            filled_out_attr, None)

    filled_out = waitForElement(
        context.webdriver,
        byCSS=".cs-workflow-forms-data__editable input[name='{}']".format(
            context.filled_out))
    ui_data = filled_out.get_attribute("value")

    assert ui_data == expected_ui_data, (
        "expected frontend data '{}', found '{}'".format(
            expected_ui_data, ui_data))

    backend_data = context.forms["edit"][0].read_data().get(
        filled_out_attr, None)

    assert backend_data == expected_backend_data, (
        "expected backend data '{}', found '{}'".format(
            expected_backend_data, backend_data))
