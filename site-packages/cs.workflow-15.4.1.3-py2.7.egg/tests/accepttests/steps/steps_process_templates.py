#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
Module steps_process_templates

Behave steps for creating, editing or deleting process templates.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: steps_process_templates.py 125425 2015-05-22 14:05:18Z yzh $"

from cdb.validationkit import run_with_added_roles
from cdb.validationkit import given, when, then

from cs.workflow.processes import Process
from cdb.platform.olc import StateDefinition
from steps import common  # @UnresolvedImport


# =============================================================================
# Create process templates
# =============================================================================

# -- GIVEN --------------------------------------------------------------------

@given("^a process template was created by (?P<role>.*?)$")
def step(context, role):  # @DuplicatedSignature
    @run_with_added_roles(role.split(","))
    def create(context):
        context.wfprocess_template = common.generateProcessOP(is_template="1", status=0)
        context.wfprocess_len = len(Process.Query())
        context.role = role
    create(context)


@given("^the process template is in status (?P<status>.*?)$")
def step(context, status):
    @run_with_added_roles(context.role.split(","))
    def create(context):
        context.wfprocess_template.status = StateDefinition.ByKeys(
            objektart=context.wfprocess_template.cdb_objektart,
            statusbez_en=status
        ).statusnummer
    create(context)


@given("^a task for this process was created by (?P<role>.*?)$")
def step(context, role):  # @DuplicatedSignature
    @run_with_added_roles(role.split(","))
    def create(context):
        context.wftask = common.generateTask(context.wfprocess_template)
    create(context)


# -- WHEN ---------------------------------------------------------------------

@when("^(?P<role>.*?) tries to change the process template$")
def step(context, role):
    @run_with_added_roles(role.split(","))
    def create(context, role):
        context.old_process_title = context.wfprocess_template.title
        context.new_process_title = "qqq"
        context.old_task_title = context.wftask.title
        context.new_task_title = "www"
        assert context.old_process_title != context.new_process_title
        assert context.old_task_title != context.new_task_title
        try:
            context.wfprocess_template.ModifyProcess(title=context.new_process_title)
            context.wftask.ModifyTask(title=context.new_task_title)
        except Exception:
            pass
    create(context, role)


# -- THEN ---------------------------------------------------------------------

@then("^the change is (?P<saved>.*?)$")
def step(context, saved):
    context.wfprocess_template.Reload()
    if saved == "saved":
        assert context.wfprocess_template.title == context.new_process_title and context.wftask.title == context.new_task_title
    elif saved == "not saved":
        assert context.wfprocess_template.title == context.old_process_title and context.wftask.title == context.old_task_title
    else:
        assert False
