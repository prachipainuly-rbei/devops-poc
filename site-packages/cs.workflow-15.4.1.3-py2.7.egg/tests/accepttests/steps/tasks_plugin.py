# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__revision__ = "$Id: "
__docformat__ = "restructuredtext en"

from datetime import date
from cdb.util import SkipAccessCheck
from cdb.validationkit import given
from cdb.validationkit import run_with_added_roles
from cdb.validationkit import then
from cdb.validationkit import when
from cs.workflow import briefcases
from cs.workflow.processes import Process
from cs.workflow.tasks import ApprovalTask
from cs.workflow.tasks import ExaminationTask
from cs.workflow.tasks import ExecutionTask
from cs.workflow.systemtasks import InfoMessage
from steps.common import generateBriefcase
from steps.common import genereateBriefcaseLink
from steps.webforms import userAddsForm

CONTENT_OBJECT_ID = "99504583-76e1-11de-a2d5-986f0c508d59"  # caddok


def assertEqual(result, expected):
    assert result == expected, "result '{}', expected '{}'".format(
        result,
        expected
    )


@given(r'^tasks testdata exists$')
def createTasksTestdata(context):
    context.workflow = Process.Create(
        cdb_process_id="TEST-1",
        title="Test-Workflow",
        status=10,
        cdb_status_txt="Execution",
        cdb_objektart="cdbwf_process",
        is_template=0,
        subject_id=context.user.personalnummer,
        subject_type="Person",
    )
    context.approval_task = ApprovalTask.Create(
        cdb_process_id=context.workflow.cdb_process_id,
        task_id="TEST-APPROVAL",
        title="Test Genehmigung",
        description="App\nroval",
        status=10,
        cdb_status_txt="Execution",
        cdb_objektart="cdbwf_task",
        subject_id=context.user.personalnummer,
        subject_type="Person",
        reserved_by="",
        deadline=date(2018, 9, 1),
    )
    context.examination_task = ExaminationTask.Create(
        cdb_process_id=context.workflow.cdb_process_id,
        task_id="TEST-EXAMINATION",
        title="Test Pr√ºfung",
        description="Exam\nination",
        status=10,
        cdb_status_txt="Execution",
        cdb_objektart="cdbwf_task",
        subject_id=context.user.personalnummer,
        subject_type="Person",
        reserved_by="",
        deadline=date(2018, 9, 2),
    )
    context.execution_task = ExecutionTask.Create(
        cdb_process_id=context.workflow.cdb_process_id,
        task_id="TEST-EXECUTION",
        title="Test Erledigung",
        description="Exe\ncution",
        status=10,
        cdb_status_txt="Execution",
        cdb_objektart="cdbwf_task",
        subject_id=context.user.personalnummer,
        subject_type="Person",
        reserved_by="",
        deadline=date(2018, 9, 3),
    )
    context.info_message = InfoMessage.Create(
        cdb_process_id=context.workflow.cdb_process_id,
        task_id=context.execution_task.task_id,
        title="Test Information",
        description="Info\nrmation",
        is_active=1,
        subject_id=context.user.personalnummer,
        subject_type="Person",
    )


@given(r'^the (?P<task>.+) has an (?P<mode>info|edit) form$')
@run_with_added_roles(["Administrator"])
def createForm(context, task, mode):
    userAddsForm(context, mode, task)


@given(r'^the (?P<task>.+) has a non-emtpy (?P<mode>info|edit) briefcase$')
def createBriefcase(context, task, mode):
    with SkipAccessCheck():
        briefcase = generateBriefcase(
            context.workflow,
            name="Test Briefcase ({})".format(mode),
        )
        iotype = briefcases.IOType[mode].value

        genereateBriefcaseLink(
            context.workflow,
            getattr(context, task),
            briefcase,
            iotype=iotype,
            extends_rights=1,
        )

        briefcase.AddObject(CONTENT_OBJECT_ID)


@when(r'^user opens the Task Manager$')
def openTaskManager(context):
    context.webdriver.openTaskManager()


@when(r"^user clicks the (?P<task>.+)'s proceed cell$")
def clickProceedCell(context, task):
    context.selected_task = getattr(context, task)
    context.webdriver.Proceed.GetProceedCell(
        context.selected_task,
        click=True
    )
    context.webdriver.waitForAsyncActions()


@when(r'^user changes the (?P<task>.+)\'s status to "(?P<status>.+)" with '
      'comment "(?P<comment>.*)"$')
def userChangesStatus(context, task, status, comment):
    kwargs = {}

    if comment:
        kwargs["comment"] = comment

    context.webdriver.Proceed.Proceed(
        getattr(context, task),
        status,
        **kwargs
    )


@when(r'^user selects the (?P<task>.+)$')
def selectTask(context, task):
    context.selected_task = getattr(context, task)
    context.webdriver.Table.GetRow(
        context.selected_task,
        deleted=False,
        click=True,
    )
    context.webdriver.waitForAsyncActions()


@then(r'^(?P<amount>\d+) tasks are shown$')
def countTasks(context, amount):
    amount = int(amount)
    rows = context.webdriver.GetElement(multi=True, byCSS="tbody tr")
    assertEqual(len(rows), amount)


@then('^the (?P<task>.+)\'s deadline is "(?P<deadline>.+)"$')
def assertDeadline(context, task, deadline):
    task = getattr(context, task)
    selector = 'tr[data-row-id="{}"] .cs-taskmanager-web-date'.format(
        task.cdb_object_id
    )
    deadline_cell = context.webdriver.GetElement(byCSS=selector)
    assertEqual(deadline_cell.text, deadline)


@then('^the statuses (?P<statuses>.+) are shown$')
def assertTargetStatuses(context, statuses):
    statuses = [x.strip(' "') for x in statuses.split(",")]
    targets = context.webdriver.Proceed.GetTargetStatuses(
        context.selected_task
    )
    assertEqual([t.text for t in targets], statuses)


@then(r'^the context contains (?P<amount>\d+) objects$')
def countContextObjects(context, amount):
    amount = int(amount)
    context_objects = context.webdriver.Detail.GetContextObjects()
    assertEqual(len(context_objects), amount)


@then(r'^(?P<amount>\d+) forms are shown$')
def countForms(context, amount):
    amount = int(amount)
    context_objects = context.webdriver.GetElement(
        multi=True,
        byCSS=".cs-workflow-forms-data__readonly, "
              ".cs-workflow-forms-data__editable",
    )
    assertEqual(len(context_objects), amount)


@then(r'^(?P<amount>\d+) relationship objects are shown$')
def countRelshipObjects(context, amount):
    amount = int(amount)
    context_objects = context.webdriver.GetElement(
        multi=True,
        byClass="cs-taskmanager-web-referenced-object",
    )
    assertEqual(len(context_objects), amount)


@then(r'^the text is "(?P<text>.*)"$')
def assertText(context, text):
    text_node = context.webdriver.Detail.GetLongText()
    assertEqual(text_node.text, text.replace(r"\n", "\n"))
