#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
Module steps_components

Behave steps for creating, editing or deleting
process components (briefcases, constraints, usw.).
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: steps_components.py 153403 2017-02-09 14:38:08Z js $"

# Some imports
import os

from cdb import CADDOK
from cdb import auth
from cdb import constants

from cdb.objects import cdb_file
from cdb.platform import FolderContent

from cdb.validationkit import run_with_added_roles
from cdb.validationkit import when
from cdb.validationkit import then
from cdb.validationkit import operation

from cs.workflow import briefcases

from steps import common  # @UnresolvedImport

TMPFILE = u"cs_workflow_steps_tmp_file"


# ===============================================================================
# Briefcases
# ===============================================================================

# -- WHEN ----------------------------------------------------------------------

@when("^the briefcase meaning is edited$")
@run_with_added_roles(["cdbwf: Process Administrator"])
def step(context):  # @DuplicatedSignature
    context.old_iotype = context.wfbriefcaselink.iotype

    if context.old_iotype == briefcases.IOType.info.value:  # @UndefinedVariable
        new_iotype = briefcases.IOType.edit.value  # @UndefinedVariable
    else:
        new_iotype = briefcases.IOType.info.value  # @UndefinedVariable

    try:
        common.operation(constants.kOperationModify,  # @UndefinedVariable
                         context.wfbriefcaselink,
                         preset={"iotype": new_iotype})
    except Exception as _ex:
        pass


@when("^some content is added to some briefcase$")
@run_with_added_roles(["cdbwf: Process Administrator"])
def step(context):  # @DuplicatedSignature
    briefcase = context.wfprocess.AttachmentsBriefcase

    # HACK: we need an object, to which we can add a file
    # (process should be in state 'new')
    dummy = common.generateProcessOP(title="DUMMY")

    # Create file
    filepath = os.path.join(CADDOK.TMPDIR, TMPFILE)
    open(filepath, 'a').close()

    file_obj = cdb_file.CDB_File.NewFromFile(dummy.cdb_object_id,
                                             filepath,
                                             primary=False)
    context.briefcase_content_id = file_obj.cdb_object_id

    try:
        operation(constants.kOperationNew,  # @UndefinedVariable
                  FolderContent,
                  preset={"cdb_folder_id": briefcase.cdb_object_id,
                          "cdb_content_id": file_obj.cdb_object_id})
    except Exception as _ex:
        pass


@when("^the (?P<obj>constraint) of a (?P<status>running|not running) task is edited$")
@run_with_added_roles(["cdbwf: Process Administrator"])
def step(context, obj, status):  # @DuplicatedSignature
    field = context.edit_obj.GetFieldByName(context.edit_attr)
    preset = {context.edit_attr: common.get_random_value(field.type)}

    context.old_value = getattr(context.edit_obj, context.edit_attr)

    try:
        common.operation(constants.kOperationModify,  # @UndefinedVariable
                         context.edit_obj,
                         preset=preset)
    except Exception as _ex:
        pass


@when("^the briefcase content is deleted$")
def step(context):  # @DuplicatedSignature
    context.deleted = True
    try:
        operation(constants.kOperationDelete,  # @UndefinedVariable
                  context.briefcase_link,
                  preset={})
    except Exception:
        context.deleted = False


@when("^some briefcase content is added$")
def step(context):  # @DuplicatedSignature
    briefcase = context.wfprocess.AttachmentsBriefcase

    # Create file
    filepath = os.path.join(CADDOK.TMPDIR, TMPFILE)
    open(filepath, 'a').close()

    # This is a hack: we need some object, to which we can hang a file
    from cdb.objects.org import Person
    me = Person.ByKeys(personalnummer=auth.persno)

    file_obj = cdb_file.CDB_File.NewFromFile(me.cdb_object_id,
                                             filepath,
                                             primary=False)

    context.added = True
    try:
        context.briefcase_link = operation(constants.kOperationNew,  # @UndefinedVariable
                                           FolderContent,
                                           preset={"cdb_folder_id": briefcase.cdb_object_id,
                                                   "cdb_content_id": file_obj.cdb_object_id})

        context.briefcase_content = file_obj
    except Exception:
        context.added = False


# -- THEN ----------------------------------------------------------------------

@then("^a global info briefcase is (?P<creation>(?:not )?generated)$")
def step(context, creation):  # @DuplicatedSignature
    if creation == "generated":
        assert len(briefcases.Briefcase.Query()) - context.wfbriefcase_len == 1, \
            "No briefcase has been created"
        assert len(briefcases.BriefcaseLink.Query("task_id='' AND iotype=0")) - \
            context.wfglobal_info_briefcase_link_len == 1, \
            "No global info briefcase link has been created"
    elif creation == "not generated":
        assert len(briefcases.Briefcase.Query()) - context.wfbriefcase_len == 0, \
            "A briefcase has been created"
        assert len(briefcases.BriefcaseLink.Query("task_id='' AND iotype=0")) - \
            context.wfglobal_info_briefcase_link_len == 0, \
            "A global info briefcase link has been created"


@then("^the briefcase meaning is (?P<outcome>modified|not modified)$")
def step(context, outcome):  # @DuplicatedSignature
    modified = context.old_iotype != context.wfbriefcaselink.iotype

    if outcome == "modified":
        assert modified
    else:
        assert not modified


@then("^the content is (?P<outcome>added|not added)$")
def step(context, outcome):  # @DuplicatedSignature
    briefcase = context.wfprocess.AttachmentsBriefcase

    added = context.briefcase_content_id in briefcase.FolderContents.cdb_content_id

    if outcome == "added":
        assert added
    else:
        assert not added


@then("^the (?P<obj>constraint) is (?P<outcome>modified|not modified)$")
def step(context, obj, outcome):  # @DuplicatedSignature
    modified = getattr(context.edit_obj, context.edit_attr) != context.old_value

    if outcome == "modified":
        assert modified
    else:
        assert not modified


@then("^the briefcase content is "
      "(?P<outcome>deleted|not deleted|added|not added)$")
def step(context, outcome):  # @DuplicatedSignature
    if outcome == "deleted":
        assert context.deleted
    elif outcome == "not deleted":
        assert not context.deleted
    elif outcome == "added":
        assert context.added
    elif outcome == "not added":
        assert not context.added


@then("^the content object is "
      "(?P<outcome>deleted|not deleted)$")
def step(context, outcome):  # @DuplicatedSignature
    if outcome == "deleted":
        assert context.obj_deleted
    elif outcome == "not deleted":
        assert not context.obj_deleted


@run_with_added_roles(["Administrator"])
@when("^an Administrator tries to delete the content object$")
def step(context):  # @DuplicatedSignature
    context.obj_deleted = True
    try:
        operation(constants.kOperationDelete,  # @UndefinedVariable
                  context.briefcase_content,
                  preset={})
    except Exception:
        context.obj_deleted = False
