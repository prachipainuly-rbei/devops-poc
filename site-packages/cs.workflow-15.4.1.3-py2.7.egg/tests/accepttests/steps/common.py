# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__revision__ = "$Id: "
__docformat__ = "restructuredtext en"

import datetime
import random

from cdb import auth
from cdb import sqlapi
from cdb import cdbuuid
from cdb.objects import Rule
from cdb.objects import Predicate
from cdb.validationkit import operation

from cs.workflow import briefcases
from cs.workflow import processes
from cs.workflow import systemtasks
from cs.workflow import tasks
from cs.workflow import taskgroups


def getObligatoryForProcess():
    return {
        "cdb_process_id": processes.Process.new_process_id(),
        "title": "Test",
        "is_template": "0",
        "subject_id": auth.persno,
        "subject_type": "Person",
        "cdb_objektart": "cdbwf_process",
        "status": 0,
    }


def getObligatoryForParallelTaskGroup(process):
    return {
        "cdb_process_id": process.cdb_process_id,
        "task_id": taskgroups.ParallelTaskGroup.new_aggregate_number(),
        "title": "parallel Taskgroup",
        "position": 10,
        "status": 0,
        "subject_id": auth.persno,
        "subject_type": "Person",
        "cdb_classname": "cdbwf_aggregate_parallel",
    }


def getObligatoryForSequentialTaskGroup(process):
    return {
        "cdb_process_id": process.cdb_process_id,
        "task_id": taskgroups.SequentialTaskGroup.new_aggregate_number(),
        "title": "sequential Taskgroup",
        "position": 10,
        "status": 0,
        "subject_id": auth.persno,
        "subject_type": "Person",
        "cdb_classname": "cdbwf_aggregate_sequential",
    }


def getObligatoryForExecutionTask(process):
    return {
        "cdb_process_id": process.cdb_process_id,
        "task_id": tasks.Task.new_task_id(),
        "parent_id": "",
        "title": "execution task",
        "position": 10,
        "status": 0,
        "subject_id": auth.persno,
        "subject_type": "Person",
        "cdb_classname": "cdbwf_task_execution",
        "cdb_objektart": "cdbwf_task"
    }


def getObligatoryForExaminationTask(process):
    return {
        "cdb_process_id": process.cdb_process_id,
        "task_id": tasks.Task.new_task_id(),
        "parent_id": "",
        "title": "examination task",
        "position": 10,
        "status": 0,
        "subject_id": auth.persno,
        "subject_type": "Person",
        "cdb_classname": "cdbwf_task_examination",
        "cdb_objektart": "cdbwf_task"
    }


def getObligatoryForApprovalTask(process):
    return {
        "cdb_process_id": process.cdb_process_id,
        "task_id": tasks.Task.new_task_id(),
        "parent_id": "",
        "title": "approval task",
        "position": 10,
        "status": 0,
        "subject_id": auth.persno,
        "subject_type": "Person",
        "cdb_classname": "cdbwf_task_approval",
        "cdb_objektart": "cdbwf_task"
    }


def getObligatoryForCopyTask(process):
    task_definition = systemtasks.SystemTaskDefinition.ByKeys(name="Kopie")

    return {
        "cdb_process_id": process.cdb_process_id,
        "task_id": tasks.Task.new_task_id(),
        "parent_id": "",
        "title": "copy task",
        "position": 10,
        "status": 0,
        "subject_id": "caddok",
        "subject_type": "Person",
        "cdb_classname": "cdbwf_system_task",
        "cdb_objektart": "cdbwf_task",
        "task_definition_id": task_definition.cdb_object_id
    }


def getObligatoryForBriefcase(process):
    return {
        "cdb_process_id": process.cdb_process_id,
        "briefcase_id": briefcases.Briefcase.new_briefcase_id(),
        "name": "BEHAVE TEST BRIEFCASE"
    }


def getObligatoryForBriefcaseLink(process, task, briefcase):
    return {
        "cdb_process_id": process.cdb_process_id,
        "task_id": task.task_id,
        "briefcase_id": briefcase.briefcase_id,
        "extends_rights": 0,
        "iotype": briefcases.IOType.info.value,  # @UndefinedVariable
    }


def getObligatoryForConstraint(process, task, rule=False):
    return {
        "cdb_process_id": process.cdb_process_id,
        "task_id": task.task_id,
        "briefcase_id": "",
        "rule_name": get_task_true_object_rule().name if rule else get_false_object_rule().name,
        "invert_rule": 0
    }


def generateProcessOP(**kwArgs):
    attrs = getObligatoryForProcess()
    attrs.update(**kwArgs)
    return operation("CDB_Create", processes.Process, preset=attrs)


def generateTask(process, **kwArgs):
    attrs = getObligatoryForExecutionTask(process)
    attrs.update(**kwArgs)
    return tasks.Task.Create(**attrs)


def generateBriefcase(process, **kwargs):
    attrs = getObligatoryForBriefcase(process)
    attrs.update(**kwargs)
    return operation("CDB_Create", briefcases.Briefcase, preset=attrs)


def genereateBriefcaseLink(process, task, briefcase, **kwargs):
    attrs = getObligatoryForBriefcaseLink(process, task, briefcase)
    attrs.update(**kwargs)
    return operation("CDB_Create", briefcases.BriefcaseLink, preset=attrs)


def get_random_value(sqltype):
    if sqltype == sqlapi.SQL_CHAR:
        return cdbuuid.create_uuid()
    elif sqltype == sqlapi.SQL_DATE:
        # year >= 1900 is required
        ordinal = random.randint(datetime.datetime(1900, 1, 1).toordinal(),
                                 datetime.datetime.max.toordinal())
        return datetime.datetime.fromordinal(ordinal)
    else:
        return random.randint(0, 10000)


def get_false_object_rule():
    rule = Rule.ByKeys('False')
    if rule:
        rule.Reload()  # rolled back rules stay in cache
    if not rule:
        rule = Rule.Create(name='False')

    return rule


def get_task_true_object_rule():
    rule = Rule.ByKeys('Task True')
    if not rule:
        rule = Rule.Create(name='Task True')

        Predicate.Create(name='Task True',
                         fqpyname='cs.workflow.schemacomponents.SchemaComponent',
                         predicate_name='Task True')

    return rule
