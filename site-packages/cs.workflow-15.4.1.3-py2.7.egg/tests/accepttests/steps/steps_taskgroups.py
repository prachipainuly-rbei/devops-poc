#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
Module steps_taskgroups

Behave steps for creating, editing or deleting task groups.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: steps_taskgroups.py 125425 2015-05-22 14:05:18Z yzh $"


from cdb.validationkit import run_with_added_roles
from cdb.validationkit import when
from cdb.validationkit import then
from cdb.validationkit import operation
from cdb.validationkit import log

from steps.common import getObligatoryForParallelTaskGroup  # @UnresolvedImport
from steps.common import getObligatoryForSequentialTaskGroup  # @UnresolvedImport

from cs.workflow.taskgroups import ProcessCompletionTaskGroup
from cs.workflow.taskgroups import ParallelTaskGroup
from cs.workflow.taskgroups import SequentialTaskGroup


# -- WHEN ---------------------------------------------------------------------

@when("^(?P<role>.*?) creates a new parallel task group$")
def step(context, role):  # @DuplicatedSignature
    @run_with_added_roles(role.split(","))
    def create(context):
        try:
            context.paralleltaskgroup_len = len(ParallelTaskGroup.Query())
            operation("CDB_Create",
                      ParallelTaskGroup,
                      preset=getObligatoryForParallelTaskGroup(context.wfprocess),
                      interactive=False)  # this can't be interactive, otherwise the user exit allow_new_task will fail
        except Exception, e:
            log("Error creating the parallel task group, details: %s" % e)
    return create(context)


@when("^(?P<role>.*?) creates a new sequential task group$")  # noqa
def step(context, role):  # @DuplicatedSignature
    @run_with_added_roles(role.split(","))
    def create(context):
        try:
            context.sequentialtaskgroup_len = len(SequentialTaskGroup.Query())
            operation("CDB_Create",
                      SequentialTaskGroup,
                      preset=getObligatoryForSequentialTaskGroup(context.wfprocess),
                      interactive=False)  # this can't be interactive, otherwise the user exit allow_new_task will fail
        except Exception, e:
            log("Error creating the sequential task group, details: %s" % e)
    return create(context)


# -- THEN ---------------------------------------------------------------------

@then("^a process completion task group is (?P<creation>(?:not )?generated)$")
def step(context, creation):  # @DuplicatedSignature
    if creation == "generated":
        assert len(ProcessCompletionTaskGroup.Query()) - \
            context.wfprocess_completion_task_group_len == 1, \
            "No process completion task group has been created"
    elif creation == "not generated":
        assert len(ProcessCompletionTaskGroup.Query()) - \
            context.wfprocess_completion_task_group_len == 0, \
            "A process completion task group has been created"


@then("^a new parallel task group is (?P<creation>(?:not )?generated)$")
def step(context, creation):  # @DuplicatedSignature
    if creation == "generated":
        assert len(ParallelTaskGroup.Query()) - context.paralleltaskgroup_len == 1, \
            "No parallel task group has been created"
    elif creation == "not generated":
        assert len(ParallelTaskGroup.Query()) - context.paralleltaskgroup_len == 0, \
            "A parallel task group has been created"


@then("^a new sequential task group is (?P<creation>(?:not )?generated)$")  # noqa
def step(context, creation):  # @DuplicatedSignature
    if creation == "generated":
        assert len(SequentialTaskGroup.Query()) - context.sequentialtaskgroup_len == 1,\
            "No sequential task group has been created"
    elif creation == "not generated":
        assert len(SequentialTaskGroup.Query()) - context.sequentialtaskgroup_len == 0,\
            "A sequential task group has been created"
