#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_misc.py 168113 2017-11-09 10:24:37Z cso $"

import unittest
from datetime import datetime

from cdb import CADDOK
from cdb import constants
from cdb import rte
from cdb import testcase
from cdb.objects.cdb_file import CDB_File

from cs.workflow import misc
from cs.workflow.processes import Process
from cs.workflow.systemtasks import InfoMessage
from cs.workflow.tasks import ExecutionTask


def set_env(key, value):
    if value is None:
        if rte.environ.has_key(key):
            del rte.environ[key]
    else:
        rte.environ[key] = value


class MiscellaneousTestCase(testcase.RollbackTestCase):
    def test_get_pydate_format(self):
        for input_format, expected in [
            ("YYYY", "%Y"),
            ("MM", "%m"),
            ("DD", "%d"),
            ("hh", "%H"),
            ("mm", "%M"),
            ("ss", "%S"),
            ("hh mm:ss_DD.MM/YYYY", "%H %M:%S_%d.%m/%Y"),
            ("a-ok", "a-ok"),
            ("", ""),
            ("DD.MM.YYYY", "%d.%m.%Y"),
            ("DD.MM.YYYY hh:mm:ss", "%d.%m.%Y %H:%M:%S"),
        ]:
            self.assertEqual(misc._get_pydate_format(input_format), expected)

        for input_format in [1, None]:
            with self.assertRaises(TypeError):
                misc._get_pydate_format(input_format)

    def test_calc_deadline(self):
        wf = Process.Create(cdb_process_id="TEST",
                            start_date=datetime(2017, 1, 1))
        misc.calc_deadline(wf)
        self.assertEqual(wf.deadline, None)

        wf.Update(max_duration=0)
        misc.calc_deadline(wf)
        self.assertEqual(wf.deadline, None)

        wf.Update(max_duration=-1)
        misc.calc_deadline(wf)
        self.assertEqual(wf.deadline, datetime(2016, 12, 31))

        wf.Update(max_duration=31)
        misc.calc_deadline(wf)
        self.assertEqual(wf.deadline, datetime(2017, 2, 1))

    def test_get_state_text(self):
        # cache is language-agnostic; first olc/status fills cache
        for olc, status, lang, expected in [
            ("cdbwf_aggregate", 0, "de", "Neu"),
            ("cdbwf_aggregate", 0, "en", "Neu"),
            ("cdbwf_process_template", 20, "en", "Released"),
            ("cdbwf_process_template", 20, "de", "Released"),
            (None, None, "zh", ""),
        ]:
            self.assertEqual(misc.get_state_text(olc, status, lang), expected)

        with self.assertRaises(KeyError):
            misc.get_state_text("cdbwf_process_template", 0, "d")

    def test_is_converted_file(self):
        original = CDB_File.Create(cdbf_object_id="BO")

        fobj = CDB_File.Create(cdbf_object_id="BO")  # cdbf_derived_from None
        self.assertEqual(misc.is_converted_file(fobj), False)

        fobj = CDB_File.Create(cdbf_object_id="BO2",
                               cdbf_derived_from=original.cdb_object_id)
        self.assertEqual(misc.is_converted_file(fobj), False)

        fobj = CDB_File.Create(cdbf_object_id="BO",
                               cdbf_derived_from=original.cdb_object_id)
        self.assertEqual(misc.is_converted_file(fobj), True)

    def test_is_auxiliary_file(self):
        fobj = CDB_File.Create(cdbf_object_id="BO")  # cdb_belongsto None
        self.assertEqual(misc.is_auxiliary_file(fobj), False)

        fobj = CDB_File.Create(cdbf_object_id="BO", cdb_belongsto="a")
        self.assertEqual(misc.is_auxiliary_file(fobj), True)

    def test_is_installed(self):
        self.assertEqual(misc.is_installed("cs.workflow"), True)
        self.assertEqual(misc.is_installed("not.existing"), False)

    def test_get_object_class_by_name(self):
        self.assertEqual(misc.get_object_class_by_name(0), None)
        self.assertEqual(misc.get_object_class_by_name(None), None)
        self.assertEqual(misc.get_object_class_by_name("not_existing"), None)
        self.assertNotEqual(misc.get_object_class_by_name("cdbwf_task"), None)

    def test_notification_enabled(self):
        for value, expected in [
            (None, True),
            ("", False),
            ("True", False),
        ]:
            set_env("CADDOK_STOP_EMAIL_NOTIFICATION", value)
            self.assertEqual(misc.notification_enabled(), expected)

    def test_get_base_url(self):
        for value, expected in [
            ("", ""),
            ("http://www.example.org", "http://www.example.org"),
            (None, ""),
            ("test", "test"),
        ]:
            set_env(constants.kEnvWWWServiceURL, value)
            misc.get_base_url.cache_clear()

            self.assertEqual(misc.get_base_url(), expected)

    def test_prefer_web_urls(self):
        for value, expected in [
            ("", True),
            ("true", True),
            (None, True),
            ("True", False),
        ]:
            set_env("CADDOK_PREFER_LEGACY_URLS", value)
            misc.prefer_web_urls.cache_clear()

            print("PREF {}: {}".format(value, misc.prefer_web_urls()))
            self.assertEqual(misc.prefer_web_urls(), expected)

    def test_get_taskmanager_url(self):
        vals = {
            "cdb_process_id": "TEST",
            "task_id": "TEST",
            "cdb_object_id": "oid",
        }
        set_env(constants.kEnvWWWServiceURL, "base")
        misc.get_base_url.cache_clear()

        for cls, cdb_url in [
            (ExecutionTask, "cdb:///byname/classname/cdbwf_task_execution"
                            "/cs_tasks/interactive?"
                            "cdbwf_task.task_id=TEST&"
                            "cdbwf_task.cdb_process_id=TEST"),
            (InfoMessage, "cdb:///byname/classname/cdbwf_info_message"
                          "/cs_tasks/interactive?"
                          "cdbwf_info_message.cdb_object_id=oid"),
        ]:
            task = cls.Create(**vals)

            for prefer_web, expected in [
                (False, "base/tasks/oid"),
                (True, cdb_url),
            ]:
                set_env("CADDOK_PREFER_LEGACY_URLS", str(prefer_web))
                misc.prefer_web_urls.cache_clear()
                misc.get_taskmanager_url.cache_clear()
                self.assertEqual(misc.get_taskmanager_url(task), expected)


if __name__ == "__main__":
    unittest.main()
