#!/usr/bin/env powerscript
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module test_forms

This is the documentation for the test_forms module.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_forms.py 176417 2018-04-23 15:02:20Z cso $"

import datetime
import unittest

from cdb import auth
from cdb import ElementsError
from cdb import testcase
from cdb import util
from cdb.constants import kOperationCopy
from cdb.objects.cdb_file import CDB_File
from cdb.objects.operations import operation
from cdb.platform.gui import Mask
from cdb.platform.gui import MaskAttribute

from cs.workflow import forms
from cs.workflow.briefcases import Briefcase
from cs.workflow.briefcases import FolderContent
from cs.workflow.processes import Process
from cs.workflow.tasks import ExecutionTask


class DummyContext(object):
    __dialog__ = "dialog"

    def __init__(self, dialog=None, **kwargs):
        for k, v in kwargs.iteritems():
            setattr(self, k, v)

        self.dialog = None if dialog is None else DummyContext(**dialog)

    def __iter__(self):
        for k, v in vars(self).iteritems():
            if k != self.__dialog__:
                yield k, v

    def __getitem__(self, key):
        return getattr(self, key)

    def get_attribute_names(self):
        return [k for k in vars(self).keys() if k != self.__dialog__]

    def set(self, key, value):
        setattr(self.dialog, key, value)

    @classmethod
    def FromKeywords(cls, dialog=None, **kwargs):
        return cls(dialog, **kwargs)


class UtilityTestCase(testcase.RollbackTestCase):
    def test_transform_key(self):
        self.assertEqual(forms.transform_key("a"), "a")
        self.assertEqual(forms.transform_key(".a"), "a")
        self.assertEqual(forms.transform_key("a.a"), "a")
        self.assertEqual(
            forms.transform_key("cdb::argument.a"), "cdb::argument.a")

    def test_transform_key_prefix(self):
        self.assertEqual(forms.transform_key("a", include_prefix=True), ".a")
        self.assertEqual(forms.transform_key(".a", include_prefix=True), ".a")
        self.assertEqual(
            forms.transform_key("a.a", include_prefix=True), "a.a")
        self.assertEqual(
            forms.transform_key("cdb::argument.a", include_prefix=True),
            "cdb::argument.a")

    def test_transform_data(self):
        self.assertEqual(forms.transform_data({
            ".a": "A",
            "cdbwf_form.b": "B",
            "c": "C",
            "cdb::argument.op_ctx_object_id": "O",
            "cdb::argument.op_ctx_classname": "P",
            "cdb_object_id": "X",
            "classname": "Y",
        }), {
            "a": "A",
            "b": "B",
            "c": "C",
            "cdb::argument.op_ctx_object_id": "O",
            "cdb::argument.op_ctx_classname": "P",
            "cdb_object_id": "X",
            "classname": "Y",
        })


class FormTemplateTestCase(testcase.RollbackTestCase):
    def test_references(self):
        m = Mask.ByKeys("mask_alignment", "public")
        t = forms.FormTemplate.Create(mask_name="mask_alignment")
        f = forms.Form.Create(
            form_template_id=t.cdb_object_id, cdb_process_id="", task_id="")
        self.assertEqual(t.Masks, [m])
        self.assertEqual(t.Forms, [f])


class FormBaseTestCase(testcase.RollbackTestCase):
    def _create_data(self):
        self.process = Process.Create(cdb_process_id="TEST",
                                      subject_id=auth.persno,
                                      subject_type="Person",
                                      cdb_objektart="cdbwf_process",
                                      status=10)
        self.task = ExecutionTask.Create(
            cdb_process_id="TEST",
            task_id="test",
            status=0,
            cdb_objektart="cdbwf_task")
        self.template = forms.FormTemplate.Create(
            mask_name="mask_alignment", name_de="testform")

    def _create_preset_data(self):
        self._create_data()
        self.form = forms.Form.InitializeForm(self.task, self.template)
        self.task.Reload()
        self.f2 = forms.Form.Create(
            form_template_id="A",
            cdb_process_id=self.task.cdb_process_id,
            task_id="C")
        self.t2 = forms.FormTemplate.Create(
            cdb_cdate=datetime.datetime(2017, 7, 18, 10, 57, 11),
            mask_name="mask_mask")

        self.briefcase = Briefcase.ByContent(self.form)[0]

        # non-forms are applied in-order, t2 "wins"
        for i, obj in enumerate([self.template, self.t2, self.f2]):
            FolderContent.Create(
                cdb_folder_id=self.briefcase.cdb_object_id,
                cdb_content_id=obj.cdb_object_id,
                position=i)

        # prior data is kept
        self.form.write_data({"cdb_cpersno": "kept"})

    def _assert_preset_data(self):
        self.assertEqual(self.form.read_data(), {
            u'cdb_cdate': '2017-07-18T10:57:11',
            u'mapped_cpersno': u'',
            u'joined_status_name_en': u'',
            u'cdb_cpersno': u'kept',
            u'joined_status_name': u'',
            u'joined_status_name_de': u'',
            u'mask_name': u'mask_mask',
            u'mapped_mpersno': u'',
            u'name': u'',
            u'name_de': u'testform',
            u'cdb_object_id': self.t2.cdb_object_id,
        })


class FormTestCase(FormBaseTestCase):
    def test_references(self):
        self._create_data()
        self.form = forms.Form.Create(
            cdb_process_id=self.process.cdb_process_id,
            task_id=self.task.task_id,
            form_template_id=self.template.cdb_object_id,
        )
        self.assertEqual(self.form.Template, self.template)
        self.assertEqual([(m.name, m.role_id) for m in self.form.Masks],
                         [(m.name, m.role_id) for m in Mask.ByName(
                             "mask_alignment")])
        self.assertEqual(self.form.Process, self.process)
        self.assertEqual(self.form.Task, self.task)

    def test_data_none(self):
        f = forms.Form.Create(
            form_template_id="", cdb_process_id="", task_id="")
        self.assertEqual(f.Data, "")

    def test_data_ok(self):
        contents = '{"abc": 1}'
        f = forms.Form.Create(
            form_template_id="", cdb_process_id="", task_id="")
        f.SetText("cdbwf_form_contents_txt", contents)
        self.assertEqual(f.Data, contents)

    def test_write_non_dict_data(self):
        f = forms.Form.Create(
            form_template_id="", cdb_process_id="", task_id="")

        for bad_data in ["not a dict", None, -1]:
            with self.assertRaises(ValueError):
                f.write_data(bad_data)

    def test_write_non_serializable_dict_data(self):
        f = forms.Form.Create(
            form_template_id="", cdb_process_id="", task_id="")

        with self.assertRaises(TypeError):
            f.write_data({"not json serializable": self})

    def test_write_and_read_data_ok(self):
        f = forms.Form.Create(
            form_template_id="", cdb_process_id="", task_id="")
        json_data = {
            "TESTING": 123,
            "okee": "dokee",
            "cdb::argument.cdb_object_id": "x",
        }
        expected = {
            "TESTING": 123,
            "okee": "dokee",
            "cdb::argument.cdb_object_id": "x",
        }
        f.write_data(json_data)
        self.assertEqual(f.read_data(), expected)

    def test_preset_data_form_only(self):
        # form's own data is preset by cdbwf_submit_form only
        f = forms.Form.Create(
            form_template_id="A", cdb_process_id="B", task_id="C")
        f.preset_data()
        self.assertEqual(f.read_data(), {})

    def test_preset_data_multiple_objs(self):
        self._create_preset_data()
        self.form.preset_data()
        self._assert_preset_data()

    def test_get_empty_mandatory_fields_explicit(self):
        m = Mask.ByName("mask_alignment")[0]
        MaskAttribute.Create(
            name=m.name,
            role_id=m.role_id,
            attribut="cdb::argument.classname",
            mussfeld=1)
        self.assertEqual(
            set(a.attribut for a in m.MandatoryAttributes()),
            set(["rebuild_mask_index", "cdb::argument.classname"]))
        t = forms.FormTemplate.Create(mask_name="mask_alignment")
        f = forms.Form.Create(
            form_template_id=t.cdb_object_id, cdb_process_id="", task_id="")
        self.assertEqual(
            set(f.get_empty_mandatory_fields()),
            set(["rebuild_mask_index", "cdb::argument.classname"]))

    def test_get_empty_mandatory_fields_from_dd_context(self):
        # cdb_file_suffix mandatories: ft_name, ft_suffix
        t = forms.FormTemplate.Create(mask_name="cdb_file_suffix")
        f = forms.Form.Create(
            form_template_id=t.cdb_object_id, cdb_process_id="", task_id="")
        self.assertEqual(f.get_empty_mandatory_fields(), [])

    def test_get_form_counter(self):
        self._create_data()
        for i in range(1, 4):
            task = ExecutionTask.Create(cdb_process_id="TEST",
                                        task_id="test{}".format(i))
            form = forms.Form.InitializeForm(task, self.template)
            self.assertEqual(form._get_form_counter(), i + 1)

    def test_InitializeForm(self):
        self._create_data()
        self.form = forms.Form.InitializeForm(self.task, self.template)
        self.assertEqual(self.form.Task, self.task)
        self.assertEqual(self.form.Template, self.template)
        self.assertEqual(len(self.task.EditBriefcases), 1)
        self.assertEqual(self.task.EditBriefcases[0].name,
                         "{} 1".format(self.form.joined_template_name))
        self.assertEqual(self.task.EditContent, [self.form])
        self.task_two = ExecutionTask.Create(cdb_process_id="TEST",
                                             task_id="test2")
        self.form_two = forms.Form.InitializeForm(self.task_two, self.template)
        self.assertEqual(self.task_two.EditBriefcases[0].name,
                         "{} 2".format(self.form.joined_template_name))


class TaskFormTestCase(FormBaseTestCase):
    def test_references(self):
        self._create_data()
        self.form = forms.Form.InitializeForm(self.task, self.template)
        self.assertEqual(self.task.InfoForms, [])
        self.assertEqual(self.task.EditForms, [self.form])
        self.task.BriefcaseLinks.Update(iotype=0)
        self.task.Reload()
        self.assertEqual(self.task.InfoForms, [self.form])
        self.assertEqual(self.task.EditForms, [])

    def test_check_form_data_ok(self):
        self._create_data()
        self.form = forms.Form.InitializeForm(self.task, self.template)
        self.form.write_data({"rebuild_mask_index": 0})
        self.assertEqual(self.task.check_form_data(), None)

    def test_check_form_data_fail(self):
        self._create_data()
        self.form = forms.Form.InitializeForm(self.task, self.template)

        with self.assertRaises(util.ErrorMessage):
            self.task.check_form_data()

    def test_check_form_data_on_op_close_task(self):
        self._create_data()
        self.form = forms.Form.InitializeForm(self.task, self.template)

        with self.assertRaises(ElementsError):
            self.task.ChangeState(self.task.COMPLETED.status, check_access=0)

    def test_preset_data(self):
        self._create_preset_data()
        self.task.preset_data()
        self._assert_preset_data()

    def test_preset_data_on_ready_post(self):
        self._create_preset_data()
        self.task.ChangeState(self.task.EXECUTION, check_access=0)
        self.assertEqual(self.task.status, self.task.EXECUTION.status)
        self._assert_preset_data()

    def test_on_cdbwf_add_task_form_now(self):
        self._create_data()

        self.assertEqual(len(self.template.Forms), 0)
        self.task.on_cdbwf_add_task_form_now(DummyContext.FromKeywords(
            {"form_template_id": self.template.cdb_object_id}))
        self.template.Reload()
        self.assertEqual(len(self.template.Forms), 1)

        for ctx in [
            DummyContext.FromKeywords({"form_template_id": "?"}),
            DummyContext.FromKeywords(None),
        ]:
            with self.assertRaises(util.ErrorMessage):
                self.task.on_cdbwf_add_task_form_now(ctx)

    def test_on_cdbwf_submit_form_pre_mask(self):
        self._create_data()
        self.form = forms.Form.InitializeForm(self.task, self.template)

        self.assertEqual(self.form.read_data(), {})

        sibling = CDB_File.Create(cdbf_object_id="TEST")
        FolderContent.Create(
            cdb_folder_id=self.task.EditBriefcases[0].cdb_object_id,
            cdb_content_id=sibling.cdb_object_id)

        ctx = DummyContext.FromKeywords(
            {},
            **{"cdb::argument.form_object_id": self.form.cdb_object_id})
        self.form.on_cdbwf_submit_form_pre_mask(ctx)

        expected = {
            'cdb_classname': u'cdb_file',
            'cdb_object_id': sibling.cdb_object_id,
            'cdbf_hidden': 0,
            'cdbf_object_id': u'TEST',
            'mapped_cdb_lock_name': u'',
            'mapped_cpersno_name': u'',
            'mapped_mpersno_name': u'',
        }

        self.assertEqual(dict(ctx.dialog), expected)
        self.assertEqual(self.form.read_data(), expected)

    def test_on_cdbwf_submit_form_now(self):
        self._create_data()
        self.form = forms.Form.InitializeForm(self.task, self.template)

        self.assertEqual(self.form.read_data(), {})
        self.form.on_cdbwf_submit_form_now(DummyContext.FromKeywords(
            {},
            **{"cdb::argument.form_object_id": self.form.cdb_object_id}))
        self.assertEqual(self.form.read_data(), {})
        self.form.on_cdbwf_submit_form_now(DummyContext.FromKeywords(
            {"test": "OK"},
            **{"cdb::argument.form_object_id": self.form.cdb_object_id}))
        self.assertEqual(self.form.read_data(), {"test": "OK"})


class TestFormReferenceOnCopy(FormBaseTestCase):
    """
    E044793: When copying a process, briefcase content references to forms have
    to be updated to point at the form copy
    """
    def _setup_template(self):
        self._create_data()
        self.form = forms.Form.InitializeForm(self.task, self.template)
        self.assertEqual(len(self.process.AllContent), 1)
        self.assertEqual(self.process.AllContent[0].cdb_object_id,
                         self.form.cdb_object_id)
        self.assertEqual(self.process.AllContent[0].cdb_process_id,
                         self.process.cdb_process_id)

    def _assert_form_refs_updated(self, copy):
        # caching issue when using AllContent
        content = forms.Form.KeywordQuery(
            cdb_object_id=FolderContent.KeywordQuery(
                cdb_folder_id=copy.AllBriefcases.cdb_object_id).cdb_content_id)

        self.assertEqual(len(content), 1)
        self.assertNotEqual(content[0].cdb_object_id, self.form.cdb_object_id)
        self.assertEqual(content[0].cdb_process_id, copy.cdb_process_id)

    def test_copy_process(self):
        self._setup_template()
        copy = operation(kOperationCopy, self.process)
        self._assert_form_refs_updated(copy)

    def _low_level_copy(self):
        copy = self.process.Copy(cdb_process_id="COPY")
        for briefcase in self.process.AllBriefcases:
            briefcase.Copy(cdb_process_id=copy.cdb_process_id)
        self.form.Copy(cdb_process_id=copy.cdb_process_id)
        return copy

    def _relship_copy(self, copy, relship_name):
        ctx = DummyContext(relationship_name=relship_name,
                           cdbtemplate=self.process,
                           object=copy)
        copy.deep_copy_briefcases(ctx)

    def test_copy_briefcases_first(self):
        self._setup_template()
        copy = self._low_level_copy()
        self._relship_copy(copy, "cdbwf_process2briefcase")
        self._relship_copy(copy, "cdbwf_process2forms")
        self._assert_form_refs_updated(copy)

    def test_copy_forms_first(self):
        self._setup_template()
        copy = self._low_level_copy()
        self._relship_copy(copy, "cdbwf_process2forms")
        self._relship_copy(copy, "cdbwf_process2briefcase")
        self._assert_form_refs_updated(copy)


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
