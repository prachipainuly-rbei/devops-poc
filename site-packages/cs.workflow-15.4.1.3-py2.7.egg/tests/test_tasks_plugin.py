# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_tasks_plugin.py 184233 2018-09-20 14:24:16Z cso $"

import unittest

from cdb import auth
from cdb import testcase

from cs.workflow import briefcases
from cs.workflow import task_external_process
from cs.workflow.forms import Form
from cs.workflow.forms import FormTemplate
from cs.workflow.processes import Process
from cs.workflow.tasks import ApprovalTask
from cs.workflow.tasks import ExaminationTask
from cs.workflow.tasks import ExecutionTask
from cs.workflow.tasks import FilterParameter
from cs.workflow.tasks import SystemTask
from cs.workflow.systemtasks import InfoMessage

PROCEED_ATTRS = {"comment": {"mandatory": True, "label": "Kommentar"}}


def _refs(value_list):
    """
    replace lists of objects with lists of cdb_object_id for comparison
    """
    for vals in value_list:
        if "references" in vals.keys():
            vals["references"] = [x.cdb_object_id for x in vals["references"]]
    return value_list


class TasksPluginBaseTestCase(testcase.RollbackTestCase):
    __classes__ = None  # to be defined by subclasses

    def _process(self, vals=None):
        pvals = {
            "cdb_process_id": Process.new_process_id(),
            "is_template": 0,
            "status": 10,
            "started_by": auth.persno,
            "subject_id": auth.persno,
            "subject_type": "Person",
            "cdb_objektart": "cdbwf_process",
        }

        if vals:
            pvals.update(vals)

        self.process = Process.Create(**pvals)

    def _tasks(self, vals=None):
        vals = vals or {}
        vals["cdb_process_id"] = self.process.cdb_process_id

        for cls in self.__classes__:
            yield self._task(cls, vals)

    def _task(self, cls, vals):
        raise RuntimeError("to be defined by subclass")

    def _briefcase(self, task_id, mode, vals, content):
        vals = vals or {}
        vals.update({
            "cdb_process_id": self.process.cdb_process_id,
            "briefcase_id": briefcases.Briefcase.new_briefcase_id(),
            "name": "{} {}".format("local" if task_id else "global", mode),
        })
        briefcase = briefcases.Briefcase.Create(**vals)
        briefcases.BriefcaseLink.Create(
            cdb_process_id=self.process.cdb_process_id,
            task_id=task_id or "",
            briefcase_id=vals["briefcase_id"],
            iotype=briefcases.IOType[mode].value,
            extends_rights=1,
        )

        if content:
            briefcases.FolderContent.Create(
                cdb_folder_id=briefcase.cdb_object_id,
                cdb_content_id=content.cdb_object_id,
            )

        return briefcase

    def _resolve(self, briefcase, info, content=None):
        return {
            "relshipName": ("CsTasksInfoBriefcases" if info
                            else "CsTasksEditBriefcases"),
            "mappedName": briefcase.GetDescription(),
            "mode": "info" if info else "edit",
            "references": [c.cdb_object_id for c in content] if content else[],
        }


class TestInteractiveTasks(TasksPluginBaseTestCase):
    __classes__ = [ApprovalTask, ExaminationTask, ExecutionTask]
    __proceed_targets__ = {
        "cdbwf_task_approval": [
            {'data': {
                "attributes": PROCEED_ATTRS,
                'status': 20,
                'color': u'#ADC902',
                'priority': 10,
                'label': u'Abgeschlossen',
                "icon_url": "/resources/icons/byname/cdbwf_status?status=20",
            }},
            {'data': {
                "attributes": PROCEED_ATTRS,
                'status': 30,
                'color': u'#D00000',
                'priority': 20,
                'label': u'Abgelehnt',
                "icon_url": "/resources/icons/byname/cdbwf_status?status=30",
            }},
        ],
        "cdbwf_task_examination": [
            {'data': {
                "attributes": PROCEED_ATTRS,
                'status': 20,
                'color': u'#ADC902',
                'priority': 10,
                'label': u'Abgeschlossen',
                "icon_url": "/resources/icons/byname/cdbwf_status?status=20",
            }},
            {'data': {
                "attributes": PROCEED_ATTRS,
                'status': 30,
                'color': u'#D00000',
                'priority': 20,
                'label': u'Abgelehnt',
                "icon_url": "/resources/icons/byname/cdbwf_status?status=30",
            }},
        ],
        "cdbwf_task_execution": [
            {'data': {
                "attributes": {},
                'status': 20,
                'color': u'#ADC902',
                'priority': 10,
                'label': u'Abgeschlossen',
                "icon_url": "/resources/icons/byname/cdbwf_status?status=20",
            }},
        ],
    }

    def _task(self, cls, vals):
        vals["task_id"] = cls.new_task_id()
        return cls.Create(**vals)

    def _proceed(self, task, targets=False):
        return {
            "current": {
                "data": {
                    "attributes": {},
                    "status": 10L,
                    "color": u"#FCB900",
                    "label": u"Umsetzung",
                    "icon_url": "/resources/icons/byname/cdbwf_status?status=10",
                },
            },
            "targets": self.__proceed_targets__.get(
                task.cdb_classname, []) if targets else [],
        }

    def test_csTasksDelegate_get_default_ok(self):
        self._process()

        for task in self._tasks():
            self.assertEqual(
                task.csTasksDelegate_get_default(),
                (auth.persno, "Person", auth.name))

    def test_csTasksDelegate_get_default_invalid_user(self):
        self._process({"started_by": "Graf Zahl"})

        for task in self._tasks():
            self.assertEqual(task.csTasksDelegate_get_default(), ("", "", ""))

    def test_csTasksDelegate_get_default_no_user(self):
        self._process({"started_by": None})

        for task in self._tasks():
            self.assertEqual(task.csTasksDelegate_get_default(), ("", "", ""))

    def test_CsTasksInfoBriefcases_none(self):
        self._process()

        for task in self._tasks():
            self.assertEqual(task.CsTasksInfoBriefcases, [])
            self.assertEqual(task.CsTasksEditBriefcases, [])

    def test_CsTasksInfoBriefcases_no_rights_extension(self):
        self._process()

        global_i = self._briefcase(None, "info", None, None)
        global_i.Links[0].Update(extends_rights=0)

        global_e = self._briefcase(None, "edit", None, None)
        global_e.Links[0].Update(extends_rights=0)

        for task in self._tasks():
            local_i = self._briefcase(task.task_id, "info", None, None)
            local_i.Links[0].Update(extends_rights=0)
            local_e = self._briefcase(task.task_id, "edit", None, None)
            local_e.Links[0].Update(extends_rights=0)

            self.assertEqual(task.CsTasksInfoBriefcases, [
                self._resolve(global_i, True), self._resolve(local_i, True)])
            self.assertEqual(task.CsTasksEditBriefcases, [
                self._resolve(global_e, False), self._resolve(local_e, False)])

    def test_CsTasksBriefcases_empty(self):
        self._process()
        global_i = self._briefcase(None, "info", None, None)
        global_e = self._briefcase(None, "edit", None, None)

        for task in self._tasks():
            local_i = self._briefcase(task.task_id, "info", None, None)
            local_e = self._briefcase(task.task_id, "edit", None, None)

            self.assertEqual(task.CsTasksInfoBriefcases, [
                self._resolve(global_i, True), self._resolve(local_i, True)])

            self.assertEqual(task.CsTasksEditBriefcases, [
                self._resolve(global_e, False), self._resolve(local_e, False)])

    def test_CsTasksBriefcases_filled(self):
        self._process()

        g_i_content = Process.Create(cdb_process_id=Process.new_process_id(),
                                     title="global info content")
        g_e_content = Process.Create(cdb_process_id=Process.new_process_id(),
                                     title="global edit content")
        l_i_content = Process.Create(cdb_process_id=Process.new_process_id(),
                                     title="local info content")
        l_e_content = Process.Create(cdb_process_id=Process.new_process_id(),
                                     title="local edit content")

        global_i = self._briefcase(None, "info", None, g_i_content)
        global_e = self._briefcase(None, "edit", None, g_e_content)

        for task in self._tasks():
            local_i = self._briefcase(task.task_id, "info", None, l_i_content)
            local_e = self._briefcase(task.task_id, "edit", None, l_e_content)

            self.assertEqual(_refs(task.CsTasksInfoBriefcases), [
                self._resolve(global_i, True, [g_i_content]),
                self._resolve(local_i, True, [l_i_content])])

            self.assertEqual(_refs(task.CsTasksEditBriefcases), [
                self._resolve(global_e, False, [g_e_content]),
                self._resolve(local_e, False, [l_e_content])])

    def _form(self, task, mode):
        if not getattr(self, "form_template", None):
            self.form_template = {
                "info": FormTemplate.Create(
                    mask_name="mask_alignment",
                    name_en="info",
                    name_de="info"),
                "edit": FormTemplate.Create(
                    mask_name="mask_mask",
                    name_en="edit",
                    name_de="edit"),
            }
        form = Form.InitializeForm(task, self.form_template[mode])

        for b in briefcases.Briefcase.ByContent(form):
            b.Links.Update(iotype=int(mode == "edit"))

        return form

    def test_resolveForm(self):
        modes = [("info", "edit"), ("edit", "info")]
        self._process()
        task = [t for t in self._tasks()][0]  # skip other task classes

        for mode, inverse in modes:
            form = self._form(task, mode)
            self.assertEqual(task._resolveForm(form, mode), {
                "relshipName": "CsTasks{}Forms".format(mode.capitalize()),
                "mappedName": form.GetDescription(),
                "mode": mode,
                "form_object_id": form.cdb_object_id,
                "references": [form],
            })
            # _resolveForm does not validate mode
            self.assertEqual(task._resolveForm(form, inverse), {
                "relshipName": "CsTasks{}Forms".format(
                    inverse.capitalize()),
                "mappedName": form.GetDescription(),
                "mode": inverse,
                "form_object_id": form.cdb_object_id,
                "references": [form],
            })

    def test_resolveForms_info(self):
        mode = "info"
        inverse = "edit"
        self._process()
        task = [t for t in self._tasks()][0]  # skip other task classes
        form = self._form(task, mode)

        self.assertEqual(
            task._resolveForms(mode, task),
            set([form.cdb_object_id]))
        self.assertEqual(
            task._resolveForms(inverse, task),
            set())

    def test_resolveForms_edit(self):
        mode = "edit"
        inverse = "info"
        self._process()
        task = [t for t in self._tasks()][0]  # skip other task classes
        form = self._form(task, mode)

        self.assertEqual(
            task._resolveForms(mode, task),
            set([form.cdb_object_id]))
        self.assertEqual(
            task._resolveForms(inverse, task),
            set())

    def test_CsTasksInfoForms(self):
        mode = "info"
        self._process()
        task = [t for t in self._tasks()][0]  # skip other task classes
        form = self._form(task, mode)
        edit_form = self._form(task, "edit")
        # also link edit_form as info
        form_briefcases = briefcases.Briefcase.ByContent(form)
        self.assertEqual(len(form_briefcases), 1)
        briefcases.FolderContent.Create(
            cdb_folder_id=form_briefcases[0].cdb_object_id,
            cdb_content_id=edit_form.cdb_object_id,
        )
        self.assertEqual(len(task.InfoForms), 2)
        self.assertEqual(len(task.EditForms), 1)
        self.assertEqual(len(task.CsTasksInfoForms), 1)
        self.assertEqual(len(task.CsTasksEditForms), 1)

    def test_CsTasksEditForms(self):
        mode = "edit"
        self._process()
        task = [t for t in self._tasks()][0]  # skip other task classes
        form = self._form(task, mode)
        info_form = self._form(task, "info")
        # also link info_form as edit
        form_briefcases = briefcases.Briefcase.ByContent(form)
        self.assertEqual(len(form_briefcases), 1)
        briefcases.FolderContent.Create(
            cdb_folder_id=form_briefcases[0].cdb_object_id,
            cdb_content_id=info_form.cdb_object_id,
        )
        self.assertEqual(len(task.InfoForms), 1)
        self.assertEqual(len(task.EditForms), 2)
        self.assertEqual(len(task.CsTasksInfoForms), 0)
        self.assertEqual(len(task.CsTasksEditForms), 2)

    def test_getProceedAttributes(self):
        self._process()

        for task in self._tasks({"status": 10}):
            self.assertEqual(task.getProceedAttributes(0), {})
            self.assertEqual(task.getProceedAttributes(10), {})

            if task.requiresComment():
                expected = PROCEED_ATTRS
            else:
                expected = {}

            self.assertEqual(task.getProceedAttributes(20), expected)
            self.assertEqual(task.getProceedAttributes(30), expected)

    def test_getCsTasksProceedData(self):
        self._process()

        for task in self._tasks({"status": 10}):
            self.assertEqual(task.getCsTasksProceedData(), self._proceed(task))
            self.assertEqual(task.getCsTasksProceedData(targets=True),
                             self._proceed(task, True))


class TestInfoMessage(TasksPluginBaseTestCase):
    __classes__ = [InfoMessage]

    def _task(self, cls, vals):
        vals.update({
            "task_id": SystemTask.new_task_id(),
            "task_definition_id": "7f87cf00-f838-11e2-b1b5-082e5f0d3665",
            "status": 10,
        })
        systask = SystemTask.Create(**vals)
        for n, v in [("subject_id", auth.persno), ("subject_type", "Person")]:
            FilterParameter.Create(
                cdb_process_id=systask.cdb_process_id,
                task_id=systask.task_id,
                rule_name="",
                name=n,
                value=v)

        task_external_process.run(systask.cdb_process_id, systask.task_id)
        return cls.KeywordQuery(
            cdb_process_id=systask.cdb_process_id,
            task_id=systask.task_id)[0]

    def _proceed(self, task, targets=False):
        return {
            "current": {
                "data": {
                    "attributes": {},
                    "status": 0,
                    "color": "",
                    "label": "Ungelesen",
                    "icon_url": "/resources/icons/byname/cdbwf_info_message_obj?is_active=1",
                },
            },
            "targets": [{
                "data": {
                    "attributes": {},
                    "color": "#00FF00",
                    "label": "Gelesen",
                    "status": 999,
                    "icon_url": "/resources/icons/byname/cdbwf_info_message_obj?is_active=0",
                },
            }] if targets else [],
        }

    def test_csTasksDelegate_get_default_ok(self):
        self._process()

        for task in self._tasks():
            self.assertEqual(
                task.csTasksDelegate_get_default(),
                (auth.persno, "Person", auth.name))

    def test_csTasksDelegate_get_default_invalid_user(self):
        self._process({"started_by": "Graf Zahl"})

        for task in self._tasks():
            self.assertEqual(task.csTasksDelegate_get_default(), ("", "", ""))

    def test_csTasksDelegate_get_default_no_user(self):
        self._process({"started_by": None})

        for task in self._tasks():
            self.assertEqual(task.csTasksDelegate_get_default(), ("", "", ""))

    def test_CsTasksInfoBriefcases_none(self):
        self._process()

        for task in self._tasks():
            self.assertEqual(task.CsTasksInfoBriefcases, [])
            self.assertEqual(task.CsTasksEditBriefcases, [])

    def test_CsTasksInfoBriefcases_no_rights(self):
        self._process()

        global_i = self._briefcase(None, "info", None, None)
        global_i.Links[0].Update(extends_rights=0)

        global_e = self._briefcase(None, "edit", None, None)
        global_e.Links[0].Update(extends_rights=0)

        for task in self._tasks():
            local_i = self._briefcase(task.task_id, "info", None, None)
            local_i.Links[0].Update(extends_rights=0)
            local_e = self._briefcase(task.task_id, "edit", None, None)
            local_e.Links[0].Update(extends_rights=0)

            self.assertEqual(task.CsTasksInfoBriefcases, [
                self._resolve(global_i, True), self._resolve(local_i, True)])
            self.assertEqual(task.CsTasksEditBriefcases, [
                self._resolve(global_e, False), self._resolve(local_e, False)])

    def test_CsTasksBriefcases_empty(self):
        self._process()
        global_i = self._briefcase(None, "info", None, None)
        global_e = self._briefcase(None, "edit", None, None)

        for task in self._tasks():
            local_i = self._briefcase(task.task_id, "info", None, None)
            local_e = self._briefcase(task.task_id, "edit", None, None)

            self.assertEqual(task.CsTasksInfoBriefcases, [
                self._resolve(global_i, True), self._resolve(local_i, True)])

            self.assertEqual(task.CsTasksEditBriefcases, [
                self._resolve(global_e, False), self._resolve(local_e, False)])

    def test_CsTasksBriefcases_filled(self):
        self._process()

        g_i_content = Process.Create(cdb_process_id=Process.new_process_id(),
                                     title="global info content")
        g_e_content = Process.Create(cdb_process_id=Process.new_process_id(),
                                     title="global edit content")
        l_i_content = Process.Create(cdb_process_id=Process.new_process_id(),
                                     title="local info content")
        l_e_content = Process.Create(cdb_process_id=Process.new_process_id(),
                                     title="local edit content")

        global_i = self._briefcase(None, "info", None, g_i_content)
        global_e = self._briefcase(None, "edit", None, g_e_content)

        self.maxDiff = None
        for task in self._tasks():
            local_i = self._briefcase(task.task_id, "info", None, l_i_content)
            local_e = self._briefcase(task.task_id, "edit", None, l_e_content)

            self.assertEqual(_refs(task.CsTasksInfoBriefcases), [
                self._resolve(global_i, True, [g_i_content]),
                self._resolve(local_i, True, [l_i_content])])

            self.assertEqual(_refs(task.CsTasksEditBriefcases), [
                self._resolve(global_e, False, [g_e_content]),
                self._resolve(local_e, False, [l_e_content])])

    def test_getProceedAttributes(self):
        self._process()

        for task in self._tasks({"status": 10}):
            self.assertEqual(task.getProceedAttributes(0), {})
            self.assertEqual(task.getProceedAttributes(999), {})

    def test_getCsTasksProceedData(self):
        self._process()

        for task in self._tasks({"status": 10}):
            self.assertEqual(task.getCsTasksProceedData(), self._proceed(task))
            self.assertEqual(task.getCsTasksProceedData(targets=True),
                             self._proceed(task, True))


if __name__ == "__main__":
    unittest.main()
