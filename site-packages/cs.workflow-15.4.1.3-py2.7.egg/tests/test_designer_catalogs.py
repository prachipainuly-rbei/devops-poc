#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 2018 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_designer_catalogs.py 177730 2018-05-28 11:49:04Z cso $"

import unittest

from cdb import sig
from cdb import testcase

from cs.workflow.designer import catalogs


def setUpModule():
    testcase.run_level_setup()


class CustomizableConditionTestCase(testcase.RollbackTestCase):
    __catalog__ = catalogs.OperationCatalog
    __default__ = ["DEFAULT"]

    def _get_catalog(self):
        catalog = self.__catalog__()
        catalog.__default_conditions__ = self.__default__
        return catalog

    def _disconnect_all(self):
        for slot in sig.find_slots(catalogs.CATALOG_CONDITION):
            sig.disconnect(slot)

    def setUp(self):
        super(CustomizableConditionTestCase, self).setUp()
        self._disconnect_all()
        self.catalog = self._get_catalog()

    def tearDown(self):
        super(CustomizableConditionTestCase, self).tearDown()
        self._disconnect_all()

    def test_default_condition(self):
        self.assertEqual(self.catalog.__catalog_rules_conditions__,
                         self.__default__)

    def test_custom_condition(self):
        def invalid_custom(fqpyname):
            return "neither list nor set"

        def custom_one(fqpyname):
            return ["CUSTOM ONE"]

        def custom_two(fqpyname):
            if fqpyname == "{}.{}".format(self.__catalog__.__module__,
                                          self.__catalog__.__name__):
                return ["CUSTOM 2"]
            return ["UNUSED"]

        sig.connect(catalogs.CATALOG_CONDITION)(invalid_custom)
        sig.connect(catalogs.CATALOG_CONDITION)(custom_two)
        sig.connect(catalogs.CATALOG_CONDITION)(custom_one)

        self.assertEqual(self.catalog.__catalog_rules_conditions__,
                         set(["CUSTOM ONE", "CUSTOM 2"]))


if __name__ == "__main__":
    unittest.main()
