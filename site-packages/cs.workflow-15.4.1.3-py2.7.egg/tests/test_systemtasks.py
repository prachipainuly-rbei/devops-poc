#!/usr/bin/env powerscript
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module test_systemtasks

This is the documentation for the test_systemtasks module.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_systemtasks.py 173145 2018-02-09 07:02:43Z cso $"

import unittest

from cdb import auth
from cdb import CADDOK
from cdb import testcase
from cdb.objects.org import User
from cdb.platform.mom.operations import OperationConfig

from cs.workflow import briefcases
from cs.workflow import forms
from cs.workflow import processes
from cs.workflow import systemtasks
from cs.workflow import tasks

COPY_OBJECTS = "91dd3340-ea12-11e2-8ad1-082e5f0d3665"
STATUS_CHANGE = "4daadbb0-e57a-11e2-9a44-082e5f0d3665"
GENERATE_INFO = "7f87cf00-f838-11e2-b1b5-082e5f0d3665"
ABORT_PROCESS = "a73d9cc0-ea12-11e2-baf4-082e5f0d3665"
RUN_OPERATION = "f16b8b40-706e-11e7-9aef-68f7284ff046"

try:
    from cs.workflowtest import cs_workflow_test_meta_operation
except ImportError:
    cs_workflow_test_meta_operation = None


def setUpModule():
    testcase.run_level_setup()


class DummyContext(object):
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)


class UtilityTestCase(testcase.RollbackTestCase):
    def test_get_status_change_unlock_param(self):
        for classname, expected in [
            ("document", 2),
            ("model", 2),
            ("cdb_wsp", 2),
            ("part", None),
        ]:
            self.assertEqual(
                systemtasks.get_status_change_unlock_param(classname),
                expected)

        with self.assertRaises(ValueError):
            systemtasks.get_status_change_unlock_param(None)

        with self.assertRaises(NotImplementedError):
            systemtasks.get_status_change_unlock_param(1)

    __op_name__ = "TEST_OPERATION"

    def test_get_operation_config(self):
        def _op_config(applicability, classname, delete=True):
            if delete:
                OperationConfig.KeywordQuery(name=self.__op_name__).Delete()
            OperationConfig.Create(name=self.__op_name__,
                                   applicability=applicability,
                                   classname=classname)

        def _test(expected):
            self.assertEqual(
                systemtasks.get_operation_config(self.__op_name__),
                expected)

        OperationConfig.KeywordQuery(name=self.__op_name__).Delete()
        _test((False, set(), set()))

        _op_config("Meta", "")
        _test((True, set(), set()))

        _op_config("Meta", "X")
        _test((True, set(), set()))

        _op_config("Class", "X")
        _test((False, set(["X"]), set()))

        _op_config("whatever", "X")
        _op_config("whatever", "cdbwf_form", delete=0)
        _test((False, set(), set(["X"])))

        _op_config("Meta", "Z")
        _op_config("Class", "X", delete=0)
        _op_config("whatever", "cdbwf_form", delete=0)
        _op_config("SingleObject", "Y", delete=0)
        _op_config("MultipleObjects", "", delete=0)
        _test((True, set(["X"]), set(["Y", ""])))

    def test_index_content_by_classname(self):
        for value in [None, 1]:
            with self.assertRaises(TypeError):
                systemtasks.index_content_by_classname(value)

        for value in ["test", [1], [None], ["test"]]:
            with self.assertRaises(AttributeError):
                systemtasks.index_content_by_classname(value)

        self.assertEqual(
            systemtasks.index_content_by_classname([]),
            (set(), {}))

        form = forms.Form.Create(
            cdb_process_id="", task_id="", form_template_id="1")
        wf_one = processes.Process.Create(cdb_process_id="TEST_ONE")
        wf_two = processes.Process.Create(cdb_process_id="TEST_TWO")

        self.assertEqual(
            systemtasks.index_content_by_classname([wf_one, form, wf_two]),
            (set(["cdbwf_form", "cdbwf_process"]), {
                "cdbwf_form": [form],
                "cdbwf_process": [wf_one, wf_two],
            }))


class SystemTaskBaseTest(testcase.RollbackTestCase):
    def _create_systask(self, definition):
        self.process = processes.Process.Create(
            cdb_process_id="TEST-SYSTASK",
            subject_id=auth.persno,
            subject_type="Person",
            status=0,
            cdb_objektart="cdbwf_process")
        self.task = tasks.SystemTask.Create(
            cdb_process_id=self.process.cdb_process_id,
            task_id="TEST1",
            task_definition_id=definition,
            position=10,
            parent_id="",
            subject_id=auth.persno,
            subject_type="Person",
            status=0,
            cdb_objektart="cdbwf_task",
            uses_global_maps=1)

        if definition == STATUS_CHANGE:
            tasks.FilterParameter.Create(
                cdb_process_id=self.task.cdb_process_id,
                task_id=self.task.task_id,
                name="target_state")

    def _create_briefcase(self, link_to, iotype):
        briefcase = briefcases.Briefcase.Create(**{
            "briefcase_id": briefcases.Briefcase.new_briefcase_id(),
            "cdb_process_id": link_to.cdb_process_id,
            "name": "Test",
        })
        briefcases.BriefcaseLink.Create(**{
            "briefcase_id": briefcase.briefcase_id,
            "cdb_process_id": link_to.cdb_process_id,
            "task_id": getattr(link_to, "task_id", ""),
            "iotype": briefcases.IOType[iotype].value,
            "extends_rights": 0,
        })
        return briefcase


class TaskPreconditionsTestCase(testcase.RollbackTestCase):
    def test_get_violated_process_start_preconditions_systask(self):
        systask = tasks.SystemTask(cdb_process_id="TEST", task_id="TEST")
        no_subject = systask.get_violated_process_start_preconditions()
        self.assertEqual(no_subject,
                         "Für die Systemaufgabe ': ' kann keine Definition "
                         "gefunden werden.")

        # make systask a "status_change" task
        systask.Update(
            subject_id="caddok",
            subject_type="Person",
            task_definition_id=STATUS_CHANGE)
        systask.Reload()
        errors = systask.get_violated_process_start_preconditions()
        self.assertEqual(errors,
                         'Die Aufgabe ": " enthält keine lokale Mappe und '
                         "greift nicht auf globale Mappen zu. / "
                         "Die Aufgabe ': ' braucht die folgenden fehlenden "
                         "Parameter: 'target_state'")

        tasks.FilterParameter.Create(cdb_process_id=systask.cdb_process_id,
                                     task_id=systask.task_id,
                                     name="target_state")
        systask.Update(uses_global_maps=1)
        systask.Reload()
        ok = systask.get_violated_process_start_preconditions()
        self.assertEqual(ok, "")

        # create persistent briefcases to make refs work
        local_briefcase = briefcases.Briefcase.Create(
            cdb_process_id=systask.cdb_process_id,
            task_id=systask.task_id,
            briefcase_id=99)
        link = briefcases.BriefcaseLink.Create(
            cdb_process_id=systask.cdb_process_id,
            task_id=systask.task_id,
            briefcase_id=local_briefcase.briefcase_id,
            iotype=0)
        systask.Update(uses_global_maps=0)
        systask.Reload()
        ok = systask.get_violated_process_start_preconditions()
        self.assertEqual(ok, "")


class StatusChangeTestCase(SystemTaskBaseTest):
    def test_status_change_no_int(self):
        for target in ["a", "", "1.0"]:
            with self.assertRaises(ValueError):
                systemtasks.status_change(None, None, target)

        with self.assertRaises(TypeError):
            systemtasks.status_change(None, None, None)

    def test_status_change_no_content(self):
        for content in [None, ""]:
            with self.assertRaises(TypeError):
                systemtasks.status_change(None, content, 1)

        for content in [{"info": []}, {"edit": []}]:
            with self.assertRaises(KeyError):
                systemtasks.status_change(None, content, 1)

    def test_status_change_ok(self):
        self._create_systask(STATUS_CHANGE)
        self.process.activate_process()
        self.task.Reload()
        self.assertEqual(self.task.status, 10)
        systemtasks.status_change(self.task, {
            "info": [self.task],
            "edit": [],
        }, 20)
        self.assertEqual(self.task.status, 20)

    def test_status_change_list(self):
        self._create_systask(STATUS_CHANGE)
        self.process.activate_process()
        self.task.Reload()
        self.assertEqual(self.task.status, 10)
        systemtasks.status_change(self.task, {
            "info": [self.task],
            "edit": [],
        }, [20, -1])
        self.assertEqual(self.task.status, 20)

    def test_status_change_error(self):
        self._create_systask(STATUS_CHANGE)
        self.assertEqual(self.task.status, 0)
        with self.assertRaises(systemtasks.TaskCancelledException):
            systemtasks.status_change(self.task, {
                "info": [self.task],
                "edit": [],
            }, [20, -1])


class CopyObjectsTestCase(SystemTaskBaseTest):
    def test_copy_objects_no_edit_briefcase(self):
        self._create_systask(COPY_OBJECTS)
        with self.assertRaises(systemtasks.TaskCancelledException):
            systemtasks.copy_objects(self.task, None)

    def test_copy_objects_no_info_content(self):
        self._create_systask(COPY_OBJECTS)
        self._create_briefcase(self.task, "edit")
        for content in [None, ""]:
            with self.assertRaises(TypeError):
                systemtasks.copy_objects(self.task, content)

        for content in [{"edit": []}]:
            with self.assertRaises(KeyError):
                systemtasks.copy_objects(self.task, content)

    def test_copy_objects(self):
        self._create_systask(COPY_OBJECTS)
        edit = self._create_briefcase(self.task, "edit")
        self.assertEqual(len(edit.Content), 0)
        systemtasks.copy_objects(self.task, {"info": [self.process]})
        self.assertEqual(len(edit.Content), 1)

    def test_copy_objects_and_unlock_copy(self):
        self.skipTest("to be implemented")


class CreateIndexTestCase(SystemTaskBaseTest):
    def test_create_new_index_no_edit_briefcase(self):
        self._create_systask(COPY_OBJECTS)
        with self.assertRaises(systemtasks.TaskCancelledException):
            systemtasks.create_new_index(self.task, None)

    def test_create_new_index_no_info_content(self):
        self._create_systask(COPY_OBJECTS)
        self._create_briefcase(self.task, "edit")
        for content in [None, ""]:
            with self.assertRaises(TypeError):
                systemtasks.create_new_index(self.task, content)

        for content in [{"edit": []}]:
            with self.assertRaises(KeyError):
                systemtasks.create_new_index(self.task, content)

    def test_create_new_index(self):
        self.skipTest("to be implemented")


class InfoMessageTestCase(SystemTaskBaseTest):
    def test_InfoMessage_references(self):
        self._create_systask(GENERATE_INFO)
        info = systemtasks.InfoMessage.Create(
            cdb_process_id=self.process.cdb_process_id,
            task_id=self.task.task_id)
        self.assertEqual(info.Process, self.process)
        self.assertEqual(info.Task, self.task)

    def test_InfoMessage_getNotificationTitle(self):
        self._create_systask(GENERATE_INFO)
        info = systemtasks.InfoMessage.Create(
            cdb_process_id=self.process.cdb_process_id,
            task_id=self.task.task_id)
        self.assertEqual(
            info.getNotificationTitle(None),
            "Benachrichtigung aus Workflow/Notification from Workflow: None")

    def test_InfoMessage_getNotificationTemplateName(self):
        self._create_systask(GENERATE_INFO)
        info = systemtasks.InfoMessage.Create(
            cdb_process_id=self.process.cdb_process_id,
            task_id=self.task.task_id)
        self.assertEqual(
            info.getNotificationTemplateName(None), "cdbwf_info_message.html")

    def test_InfoMessage_getNotificationReceiver_no_subject(self):
        self._create_systask(GENERATE_INFO)
        info = systemtasks.InfoMessage.Create(
            cdb_process_id=self.process.cdb_process_id,
            task_id=self.task.task_id)
        with self.assertRaises(AttributeError):
            info.getNotificationReceiver(None)

    def test_InfoMessage_getNotificationReceiver(self):
        self._create_systask(GENERATE_INFO)
        info = systemtasks.InfoMessage.Create(
            cdb_process_id=self.process.cdb_process_id,
            task_id=self.task.task_id,
            subject_id=auth.persno,
            subject_type="Person")
        user = User.ByKeys(auth.persno)
        user.Update(e_mail="")
        self.assertEqual(info.getNotificationReceiver(None), [{"to": []}])
        user.Update(e_mail="abc@def.org", name="username")
        self.assertEqual(
            info.getNotificationReceiver(None),
            [{"to": [("abc@def.org", "username")]}])

    def test_InfoMessage_setNotificationContext(self):
        self._create_systask(GENERATE_INFO)
        global_edit = self._create_briefcase(self.process, "edit")
        local_edit = self._create_briefcase(self.task, "edit")
        info = systemtasks.InfoMessage.Create(
            cdb_process_id=self.process.cdb_process_id,
            task_id=self.task.task_id)

        notification_ctx = DummyContext()
        info.setNotificationContext(notification_ctx)

        old = (
            "cdb:///byname/classname/cdbwf_info_message/cs_tasks/interactive?"
            "cdbwf_info_message.cdb_object_id={}".format(info.cdb_object_id))
        # new = "{}/tasks/{}".format(CADDOK.WWWSERVICE_URL, info.cdb_object_id)
        self.assertEqual(notification_ctx.task_manager_url, old)

        with self.assertRaises(AttributeError):
            notification_ctx.briefcases

        briefcases.FolderContent.Create(
            cdb_folder_id=global_edit.cdb_object_id,
            cdb_content_id=self.process.cdb_object_id)
        briefcases.FolderContent.Create(
            cdb_folder_id=local_edit.cdb_object_id,
            cdb_content_id=self.task.cdb_object_id)
        global_edit.Reload()

        info.setNotificationContext(notification_ctx)
        self.assertEqual(
            notification_ctx.briefcases, [local_edit, global_edit])

    def test_generate_info_message_no_subject(self):
        self._create_systask(GENERATE_INFO)
        for kwargs in [{"subject_id": "caddok"}, {"subject_type": "Person"}]:
            with self.assertRaises(KeyError):
                systemtasks.generate_info_message(self.task, None, **kwargs)

    def test_generate_info_message(self):
        self._create_systask(GENERATE_INFO)
        self.assertEqual(
            systemtasks.InfoMessage.KeywordQuery(
                cdb_process_id=self.process.cdb_process_id),
            [])
        systemtasks.generate_info_message(
            self.task, None, subject_id=auth.persno, subject_type="Person")
        self.assertEqual(
            len(systemtasks.InfoMessage.KeywordQuery(
                cdb_process_id=self.process.cdb_process_id,
                subject_id=auth.persno,
                subject_type="Person",
                is_active=1)),
            1)


class RunOperationTestCase(SystemTaskBaseTest):
    def test_get_form_data_none(self):
        for invalid_content in [None, 1, "test"]:
            with self.assertRaises(TypeError):
                systemtasks.get_form_data(invalid_content)

        with self.assertRaises(KeyError):
            systemtasks.get_form_data({"info": []})

        result = systemtasks.get_form_data({"info": [], "edit": []})
        self.assertEqual(result, {})

    def _create_form(self, vals, json_data):
        form = forms.Form.Create(**vals)
        form.write_data(json_data)
        form.Reload()
        self.assertEqual(form.read_data(), json_data)
        return form

    def test_get_form_data_edit_overwriting_info(self):
        info = self._create_form(
            {"cdb_process_id": "", "task_id": "", "form_template_id": "1"},
            {
                "info_val_1": "info_val_1",
                "info_val_2": "info_val_2",
                "cdb_object_id": "X",
            })
        edit = self._create_form(
            {"cdb_process_id": "", "task_id": "", "form_template_id": "2"},
            {
                "edit_val_1": "edit_val_1",
                "info_val_2": "edit_val_2",
                "classname": "X",
            })

        result = systemtasks.get_form_data({
            "info": [info],
            "edit": [edit],
        })
        self.assertEqual(result, {
            "classname": "X",
            "edit_val_1": "edit_val_1",
            "cdb_object_id": "X",
            "info_val_2": "edit_val_2",
            "info_val_1": "info_val_1",
        })

    def test_run_operation_obj(self):
        self._create_systask(RUN_OPERATION)
        form = self._create_form(
            {
                "cdb_process_id": self.process.cdb_process_id,
                "task_id": self.task.task_id,
                "form_template_id": "1"},
            {
                "title": "changed",
                "position": self.task.position,
            })

        systemtasks.run_operation(
            self.task, {"info": [], "edit": [form, self.task]}, "CDB_Modify")
        self.assertEqual(self.task.title, "changed")

    def test_run_operation_cls(self):
        self._create_systask(RUN_OPERATION)
        info = self._create_form(
            {
                "cdb_process_id": self.process.cdb_process_id,
                "task_id": self.task.task_id,
                "form_template_id": "1"},
            {
                "cdb_process_id": self.process.cdb_process_id,
                "position": 20.0,
                "task_definition_id": COPY_OBJECTS,
            })

        systemtasks.run_operation(
            self.task, {"info": [info], "edit": []}, "CDB_Create")
        self.assertEqual(len(self.process.AllTasks), 1)

        systemtasks.run_operation(
            self.task, {"info": [info], "edit": [self.task]}, "CDB_Create")
        self.assertEqual(set(self.process.AllTasks.task_definition_id),
                         set([RUN_OPERATION, COPY_OBJECTS]))

    @unittest.skipIf(not cs_workflow_test_meta_operation,
                     "Skipped because cs.workflowtest."
                     "cs_workflow_test_meta_operation is required")
    def test_run_operation_meta(self):
        self._create_systask(RUN_OPERATION)
        form = self._create_form(
            {
                "cdb_process_id": self.process.cdb_process_id,
                "task_id": self.task.task_id,
                "form_template_id": "1"},
            {
                "cdb_process_id": self.process.cdb_process_id,
                "task_id": "TEST_META_OP",
                "position": 20.0,
                "task_definition_id": COPY_OBJECTS,
            })
        self.assertEqual(len(self.process.AllTasks), 1)
        systemtasks.run_operation(
            self.task,
            {"info": [form], "edit": []},
            "cs_workflow_test_meta_operation")

        self.assertEqual(set(self.process.AllTasks.task_definition_id),
                         set([RUN_OPERATION, COPY_OBJECTS]))


class ConversionTestCase(SystemTaskBaseTest):
    def test_convert_files(self):
        self.skipTest("to be implemented")

    def test_convert_files_done(self):
        self.skipTest("to be implemented")

    def test_convert_files_failed(self):
        self.skipTest("to be implemented")


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
