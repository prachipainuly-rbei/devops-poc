#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# https://www.contact-software.com/

"""
Test Module test_psp_code

The generation of the WBS code is being tested
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_psp_code.py 184145 2018-09-19 10:20:16Z umu $"

import unittest
from cdb import testcase
# noinspection PyUnresolvedReferences
from cdb.constants import kOperationNew
from cdb.objects.operations import operation

from cs.pcs.projects import Project
from cs.pcs.projects.tasks import Task


# Tests
class TestPSPCode(testcase.RollbackTestCase):
    """Documentation for this test case"""

    psp_code = "ABC"
    number_of_tasks = 5

    def _setup_project(self):
        self.project = operation(kOperationNew,
                                 Project,
                                 cdb_project_id="#",
                                 project_name="project name",
                                 psp_code=self.psp_code)
        for i in range(0, self.number_of_tasks):
            current_task = self.create_task(i)
            setattr(self, "task_{}".format(i), current_task)

    def create_task(self, i):
        return operation(
            kOperationNew,
            Task,
            cdb_project_id=self.project.cdb_project_id,
            task_id="#",
            task_name="Task name {}".format(i),
            subject_id='caddok',
            subject_type='Person',
            parent_task=""
        )

    def delete_task(self, i):
        self.get_top_tasks()[i].Delete()

    def run_create_psp_code(self):
        return operation("cdbpcs_create_psp_code",
                         self.project)

    def make_status_change(self, pts=0, tts=0):
        self.project.status = pts
        for task in self.get_top_tasks():
            task.status = tts

    def get_top_tasks(self):
        return Task.KeywordQuery(cdb_project_id=self.project.cdb_project_id,
                                 order_by="task_id")

    def test_new_project(self):
        """
        WBS code of a project in status New with 5 tasks will be calculated
        """
        expected_codes = [
            "ABC.01",
            "ABC.02",
            "ABC.03",
            "ABC.04",
            "ABC.05",
        ]

        self._setup_project()
        self.run_create_psp_code()

        counter = 0
        for task in self.get_top_tasks():
            self.assertEqual(task.psp_code, expected_codes[counter])
            counter += 1

    def test_execution_project(self):
        """
       WBS code of a project in status Execution will be calculated
        """
        expected_codes = [
            "ABC.01",
            "ABC.02",
            "ABC.03",
            "ABC.04",
            "ABC.05",
        ]

        self._setup_project()
        self.make_status_change(50, 20)
        self.run_create_psp_code()

        counter = 0
        for task in self.get_top_tasks():
            self.assertEqual(task.psp_code, expected_codes[counter])
            counter += 1

    def test_edited_new_project(self):
        """
        WBS code of a project in status New will be recalculated after deleting and adding a task
        """
        expected_codes = [
            "ABC.01",
            "ABC.02",
            "ABC.03",
            "ABC.04",
            "ABC.05",
        ]

        self._setup_project()
        self.run_create_psp_code()
        # additional tasks
        self.create_task(6)
        self.delete_task(2)
        self.run_create_psp_code()

        counter = 0
        for task in self.get_top_tasks():
            self.assertEqual(task.psp_code, expected_codes[counter])
            counter += 1

    def test_edited_execution_project(self):
        """
        WBS code of a project in status Execution will be recalculated after deleting and adding a task
        """
        expected_codes = [
            "ABC.01",
            "ABC.02",
            "ABC.04",
            "ABC.05",
            "ABC.06",
        ]

        self._setup_project()
        self.run_create_psp_code()
        self.create_task(6)
        self.delete_task(2)
        self.make_status_change(50, 20)
        self.run_create_psp_code()

        counter = 0
        for task in self.get_top_tasks():
            self.assertEqual(task.psp_code, expected_codes[counter])
            counter += 1


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
