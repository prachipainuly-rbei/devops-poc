#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import run_with_project_roles, \
    operation, given, when, then, log
from common import generateProjectRole, generateProjectMember
from cs.pcs.projects import Role, PersonAssignment


# ------------------------------------------------------------
# Scenario Create New Project Role
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) creates a new project role$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def create(context):
        try:
            context.project_role_len = len(Role.Query())
            operation(
                "CDB_Create",
                Role,
                preset={"cdb_project_id": context.project.cdb_project_id,
                        "role_id": "Testrole"})
        except Exception, e:
            log("Error creating the project role, details: %s" % e)
    return create(context)


@then("^a new project role is (?P<creation>(?:not )?generated)$")
def step(context, creation):
    if creation == "generated":
        assert len(Role.Query()) - context.project_role_len == 1,\
            "No project role has been generated"
    elif creation == "not generated":
        assert len(Role.Query()) - context.project_role_len == 0,\
            "A project role has been generated"


# ------------------------------------------------------------
# Scenario Delete Project Role
#
# ------------------------------------------------------------
@given("^a project role exists$")
def step(context):
    context.project_role = generateProjectRole(context.project)
    context.project_role_len = len(Role.Query())


@when("^(?P<role>.*?) deletes this project role$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            context.project_role_len = len(Role.Query())
            operation("CDB_Delete", context.project_role)
        except Exception, e:
            log("Error deleting the project role, details: %s" % e)
    return delete(context)


@then("^the project role is (?P<status>(?:not )?copied|(?:not )?deleted)$")
def step(context, status):
    if status == "deleted":
        assert len(Role.Query()) - context.project_role_len == -1,\
            "The project role has not been deleted"
    elif status == "not deleted":
        assert len(Role.Query()) - context.project_role_len == 0,\
            "The project role has been deleted"


# ------------------------------------------------------------
# Scenario Allocate A Project Role To A Project Team Member
#
# ------------------------------------------------------------
@given("^a project member exists$")
def step(context):
    context.project_member = generateProjectMember(context.project, context.project_role)


@when("^(?P<role>.*?) allocates this project role to the project member$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def allocate(context):
        try:
            operation("CDB_Create",
                      PersonAssignment,
                      user_input={"subject_id": context.project_member.subject_id},
                      preset={"cdb_project_id": context.project.cdb_project_id,
                              "role_id": context.project_role.role_id})
        except Exception, e:
            log("Error allocating the project role to the project member, "
                "details: %s" % e)
    return allocate(context)


@then("^the project role is (?P<status>(?:not )?allocated) "
      "to the project member$")
def step(context, status):
    found = False
    referrers = PersonAssignment.KeywordQuery(
        cdb_project_id=context.project.cdb_project_id,
        subject_id=context.project_member.subject_id)
    for referrer in referrers:
        if Role.ByKeys(cdb_project_id=referrer.cdb_project_id,
                       role_id=referrer.role_id) == context.project_role:
            found = True
            break
    if status == "allocated":
        assert found, "The project role is not allocated to the project member"
    if status == "not allocated":
        assert not found, "The project role is allocated to the project member"


# ------------------------------------------------------------
# Scenario Delete Project Team Member Allocation Of A Project Role
#
# ------------------------------------------------------------
@given("^the project role is allocated to the project member$")
def step(context):
    context.otherproject_role = generateProjectRole(context.project,
                                                    presets_custom={"role_id": "second_role"})
    context.assignment = generateProjectMember(context.project,
                                               context.otherproject_role)
    context.assignment_len = len(PersonAssignment.Query())


@when("^(?P<role>.*?) deletes the allocation "
      "of the project role to the project member$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.assignment)
        except Exception, e:
            log("Error deleting the allocation of the project role to the "
                "project member, details: %s" % e)
    return delete(context)


@then("^the allocation of the project role to the project member "
      "is (?P<status>(?:not )?deleted)$")
def step(context, status):
    if status == "deleted":
        assert len(PersonAssignment.Query()) - context.assignment_len == -1, \
            "The allocation is not deleted"
    elif status == "not deleted":
        assert len(PersonAssignment.Query()) - context.assignment_len == 0, \
            "The allocation is deleted"
