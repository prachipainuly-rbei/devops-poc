# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# https://www.contact-software.com/

"""
Step definitions of the managing persons feature
"""

from behave import given
from behave import when
from behave import then
from behave import use_step_matcher

from common import generate_organization
from cdb import misc
from cdb import util
from cdb import ElementsError
from cdb.objects.org import Organization
from cdb.objects.org import User
from cdb.validationkit import run_with_roles
from cdb.validationkit import generateUser

__docformat__ = "restructuredtext en"
__revision__ = "$Id: managing_persons.py 176906 2018-05-07 11:27:03Z umu $"


use_step_matcher("re")


@given("an organization exists")
@run_with_roles(["public", "Administrator"])
def step_impl(context):
    """
    :type context: behave.runner.Context
    """
    context.organization_len = len(Organization.Query())
    user_input = {'is_resource': False,
                  'is_resource_browsable': False
                  }
    context.organization = generate_organization(user_input_custom=user_input)
    assert len(Organization.Query()) == context.organization_len + 1, (
        'Organization has not been created.'
    )
    context.organization_len = len(Organization.Query())


@when(
    "a user is created with capacity (?P<capacity>.*?) hours "
    "and (?P<resource>tagged|not tagged) as resource")
@run_with_roles(['Administrator', 'public'])
def step_impl(context, capacity, resource):
    """
    :type context: behave.runner.Context
    :type capacity: str
    :type resource: str
    """
    context.person_len = len(User.Query())
    presets = {
        'org_id': context.organization.org_id,
        'orgname': context.organization.name
    }
    user_input = {
        'visibility_flag': True,
        'is_resource': True if resource == 'tagged' else False,
        'capacity': capacity if capacity else 8,
        'mapped_calendar_profile': '*** mandatory stuff ***'
    }
    presets.update(user_input)
    try:
        context.person = generateUser(unicode(util.nextval("cs.pcs.person")),
                                      **presets)
    except ElementsError:
        misc.log_traceback("Error while creating an user may be expected\n")


@then("a new person is (?P<creation>(?:not )?generated)$")
def step_impl(context, creation):
    """
    :type context: behave.runner.Context
    :type creation: str
    """
    if creation == "generated":
        assert len(User.Query()) - context.person_len == 1, (
            "No new user was not generated")
    elif creation == "not generated":
        assert len(User.Query()) - context.person_len == 0, (
            "A new user was generated")
