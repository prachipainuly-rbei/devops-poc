#!/usr/bin/env powerscript
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact-software.com
#

import time
from common import doc_maincateg, doc_categ
from cdb import auth
from cdb import util
from cdb.validationkit import run_with_added_roles
from cdb.validationkit import run_with_project_roles
from cdb.validationkit import operation
from cdb.validationkit import given
from cdb.validationkit import when
from cdb.validationkit import then
from cdb.validationkit import log
from cdb.platform import PropertyValue
from cs.documents import Document


def create_document(**kwargs):
    """
    Creating a document using cdb.objects.Object.Create
    """
    args = {
        "z_categ1": doc_maincateg.categ_id,
        "z_categ2": doc_categ.categ_id,
        "cdb_classname": "document",
        "z_art": "doc_approve"
    }
    args.update(Document.MakeChangeControlAttributes())
    args.update(**kwargs)
    # The following line forces differences in the creation date (cdb_cdate)
    time.sleep(2)
    return Document.Create(**args)


@given("^the following documents exist$")
def step(context):
    context.documents = list()
    for row in context.table:
        context.document_id = row["z_nummer"]
        kwargs = dict()
        for heading in row.headings:
            kwargs[heading] = row[heading]
        kwargs["cdb_project_id"] = context.project.cdb_project_id
        context.documents.append(create_document(**kwargs))
    assert len(context.documents) > 0, "no document found"


@given("^the document is assigned to the project as time schedule$")
def step(context):
    context.project.Update(msp_z_nummer=context.document_id)


@when("^document with index (?P<index_obsolete>.*?) is set to obsolete$")
def step(context, index_obsolete):
    obsoletes = index_obsolete.split(",")
    for obsolete in obsoletes:
        doc = Document.ByKeys(context.document_id, obsolete)
        assert doc, "document with index {} cannot be set to obsolete".format(obsolete)
        doc.Update(cdb_obsolete=1)


@then("^document with index (?P<index_schedule>.*?) has to be used as time schedule$")
def step(context, index_schedule):
    property_value = util.get_prop("ixsm")
    log("Current value of property ixsm: {}".format(property_value))
    ts_doc = context.project.getLastPrimaryMSPDocument()
    if index_schedule == 'not found':
        assert not ts_doc, "A document was found unexpectedly ({z_nummer}-{z_index})".format(**ts_doc)
        return
    assert ts_doc, "No document found"
    assert ts_doc.z_index == index_schedule,\
        "The document has not been determined correctly (found {} instead of {}".format(ts_doc.z_index, index_schedule)


@given("the sort order is set to the change control attribute cdb_cdate")
def step(context):
    context.property = {
        "attr": "ixsm",
        "value": "cdb_cdate",
        "subject_type": "Person",
        "subject_id": auth.name
    }
    property_value = PropertyValue.ByKeys(context.property["attr"], "Person", auth.persno)
    if property_value:
        property_value.Update(value=context.property["attr"])
    else:
        PropertyValue.Create(**context.property)


@given("the sort order is set to an alternative attribute")
def step(context):
    context.property = {
        "attr": "ixsm",
        "value": "z_bemerkung",
        "subject_type": "Person",
        "subject_id": auth.name
    }
    property_value = PropertyValue.ByKeys(context.property["attr"], "Person", auth.persno)
    if property_value:
        property_value.Update(value=context.property["attr"])
    else:
        PropertyValue.Create(**context.property)
