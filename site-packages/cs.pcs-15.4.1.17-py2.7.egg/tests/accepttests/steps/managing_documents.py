#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#


from common import generateDocument
from cdb.validationkit import run_with_added_roles
from cdb.validationkit import run_with_project_roles
from cdb.validationkit import operation
from cdb.validationkit import given
from cdb.validationkit import when
from cdb.validationkit import then
from cdb.validationkit import log
from cs.documents import Document
from cs.pcs.projects_documents import TaskDocumentReference
from cs.pcs.projects.tasks import Task
from cs.pcs.checklists_documents import ChecklistDocumentReference
from cs.pcs.checklists_documents import CLItemDocumentReference
from cs.pcs.issues_documents import IssueDocumentReference
from cs.pcs.projects import Project
from cs.pcs.checklists import Checklist, ChecklistItem
from cs.pcs.issues import Issue


# ------------------------------------------------------------
# Scenario Allocate A Document To A Project
#
# ------------------------------------------------------------
@given("^a document exists$")
@run_with_added_roles(["Documentation"])
def step(context):
    context.document = generateDocument()
    context.doc_len = len(Document.Query())


@when("^(?P<role>.*?) allocates this document to the project$")
def step(context, role):
    @run_with_added_roles(role.split(","))
    def allocate(context):
        try:
            operation("CDB_Modify", context.document,
                      user_input={"cdb_project_id":
                                  context.project.cdb_project_id})
        except Exception, e:
            log("Error allocating to the project, details: %s"
                % str(e))
    return allocate(context)


@then("^the document is (?P<state>(?:not )?allocated) to the project$")
def step(context, state):
    res = Document.ByKeys(context.document.z_nummer, context.document.z_index)
    if state == "allocated":
        assert res.Project is not None,\
            "The Project isn't allocated"
        assert res.Project.cdb_project_id ==\
            context.project.cdb_project_id,\
            "There is another project allocated"
    elif state == "not allocated":
        if res is not None:
            assert res.Project is None, "There is a project allocated"
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Delete Project Allocation Of A Document
#
# ------------------------------------------------------------
@given("^the document is allocated to the project$")
@run_with_added_roles(["Documentation"])
def step(context):
    operation("CDB_Modify", context.document,
              user_input={"cdb_project_id":
                          context.project.cdb_project_id})


@when("^(?P<role>.*?) deletes the allocation of this document to the project$")
def step(context, role):
    @run_with_added_roles(role.split(","))
    def delete(context):
        try:
            operation("CDB_Modify", context.document,
                      user_input={"cdb_project_id": ""})
        except Exception, e:
            log("Error deleting the allocation of the document to the project,"
                " details: %s" % str(e))
    return delete(context)


@then("^the allocation of the document to the project is "
      "(?P<state>(?:not )?deleted)$")
def step(context, state):
    if state == "deleted":
        context.execute_steps(
            u"THEN the document is not allocated to the project")
    elif state == "not deleted":
        context.execute_steps(
            u"THEN the document is allocated to the project")
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Allocate A Document To A Task
#
# ------------------------------------------------------------

@when("^(?P<role>.*?) allocates this document to the task$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def allocate(context):
        try:
            operation("CDB_Create",
                      TaskDocumentReference,
                      user_input={
                          "z_nummer": context.document.z_nummer,
                          "z_index": context.document.z_index,
                          "task_id": context.task.task_id,
                          "cdb_project_id": context.task.cdb_project_id,
                          "rel_type": ""})
        except Exception, e:
            log("Error allocating the document to the task, details: %s"
                % str(e))
    return allocate(context)


@then("^the document is (?P<state>(?:not )?allocated) to the task$")
def step(context, state):
    task = Task.ByKeys(context.task.cdb_project_id, context.task.task_id)
    found = False
    for docRef in task.DocumentReferences:
        if context.document == docRef.Document:
            found = True
            break
    if state == "allocated":
        assert found, "The document is not allocated to the task"
    elif state == "not allocated":
        assert not found, "The document is allocated to the task"
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Delete Task Allocation Of A Document
#
# ------------------------------------------------------------
@given("^the document is allocated to the task$")
def step(context):
    context.taskRef = operation("CDB_Create", TaskDocumentReference,
                                context.task, preset={"z_nummer": context.document.z_nummer})


@when("^(?P<role>.*?) deletes the allocation of this document to the task$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.taskRef)
        except Exception, e:
            log("Error deleting the allocation of the document to the task, "
                "details: %s" % str(e))
    return delete(context)


@then("^the allocation of the document to the task is "
      "(?P<state>(?:not )?deleted)$")
def step(context, state):
    if state == "deleted":
        context.execute_steps(
            u"THEN the document is not allocated to the task")
    elif state == "not deleted":
        context.execute_steps(u"THEN the document is allocated to the task")
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Allocate A Document To A Check List
#
# ------------------------------------------------------------

@when("^(?P<role>.*?) allocates this document to the checklist$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def allocate(context):
        try:
            operation("CDB_Create",
                      ChecklistDocumentReference,
                      user_input={
                          "z_nummer": context.document.z_nummer,
                          "z_index": context.document.z_index,
                          "cdb_project_id": context.checklist.cdb_project_id,
                          "checklist_id": context.checklist.checklist_id})
        except Exception, e:
            log("Error allocating the document to the checklist, details: %s"
                % str(e))
    return allocate(context)


@then("^the document is (?P<state>(?:not )?allocated) to the checklist$")
def step(context, state):
    if state == "allocated":
        assert context.document in context.checklist.Documents, \
            "The document is not allocated to the checklist"
    elif state == "not allocated":
        assert context.document not in context.checklist.Documents, \
            "The document is allocated to the checklist"
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Delete Check List Allocation Of A Document
#
# ------------------------------------------------------------
@given("^the document is allocated to a check list$")
def step(context):
    context.docRef = operation("CDB_Create", ChecklistDocumentReference,
                               user_input={"z_nummer": context.document.z_nummer,
                                           "z_index": context.document.z_index,
                                           "cdb_project_id":
                                           context.checklist.cdb_project_id,
                                           "checklist_id": context.checklist.checklist_id})


@when(
    "^(?P<role>.*?) deletes the allocation of this document to the check list$"
)
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.docRef)
        except Exception, e:
            log("Error deleting the allocation of the document "
                "to the checklist, details: %s" % str(e))
    return delete(context)


@then("^the allocation of the document to the checklist is "
      "(?P<state>(?:not )?deleted)$")
def step(context, state):
    if state == "deleted":
        context.execute_steps(
            u"THEN the document is not allocated to the checklist"
        )
    elif state == "not deleted":
        context.execute_steps(
            u"THEN the document is allocated to the checklist"
        )
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Allocate A Document To A Checkpoint
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) allocates this document to the checkpoint$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def allocate(context):
        try:
            operation("CDB_Create",
                      CLItemDocumentReference,
                      user_input={
                          "z_nummer": context.document.z_nummer,
                          "z_index": context.document.z_index,
                      }, preset={
                          "cdb_project_id": context.checkpoint.cdb_project_id,
                          "checklist_id": context.checkpoint.checklist_id,
                          "cl_item_id": context.checkpoint.cl_item_id,
                      })
        except Exception, e:
            log("Error allocating the document to the checkpoint, details: %s"
                % str(e))
    return allocate(context)


@then("^the document is (?P<state>(?:not )?allocated) to the checkpoint")
def step(context, state):
    found = False
    for docRef in CLItemDocumentReference.KeywordQuery(
            cl_item_id=context.checkpoint.cl_item_id,
            checklist_id=context.checkpoint.checklist_id,
            cdb_project_id=context.checkpoint.cdb_project_id):
        if context.document == docRef.Document:
                found = True
                break
    if state == "allocated":
        assert found, "The document is not allocated to the checkpoint"
    elif state == "not allocated":
        assert not found, "The document is allocated to the checkpoint"
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Delete Checkpoint Allocation Of A Document
#
# ------------------------------------------------------------
@given("^the document is allocated to a checkpoint$")
def step(context):
    context.docRef = operation("CDB_Create", CLItemDocumentReference,
                               user_input={"z_nummer": context.document.z_nummer,
                                           "z_index": context.document.z_index},
                               preset={"cdb_project_id": context.checkpoint.cdb_project_id,
                                       "checklist_id": context.checkpoint.checklist_id,
                                       "cl_item_id": context.checkpoint.cl_item_id})


@when("^(?P<role>.*?) deletes the allocation of "
      "this document to the checkpoint$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.docRef)
        except Exception, e:
            log("Error deleting the allocation of the document "
                "to the checkpoint, details: %s" % str(e))
    return delete(context)


@then("^the allocation of the document to the checkpoint is "
      "(?P<state>(?:not )?deleted)$")
def step(context, state):
    if state == "deleted":
        context.execute_steps(
            u"THEN the document is not allocated to the checkpoint")
    elif state == "not deleted":
        context.execute_steps(
            u"THEN the document is allocated to the checkpoint")
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Allocate A Document To A Project Issue
#
# ------------------------------------------------------------

@when("^(?P<role>.*?) allocates this document to the project issue$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def allocate(context):
        try:
            operation("CDB_Create",
                      IssueDocumentReference,
                      user_input={
                          "z_nummer": context.document.z_nummer,
                          "z_index": context.document.z_index,
                          "cdb_project_id": context.project_issue.cdb_project_id,
                          "issue_id": context.project_issue.issue_id})
        except Exception, e:
            log("Error allocating the document to the project issue,"
                " details: %s" % str(e))
    return allocate(context)


@then("^the document is (?P<state>(?:not )?allocated) to the project issue$")
def step(context, state):
    found = False
    for docRef in context.project_issue.DocumentReferences:
        if docRef.Document == context.document:
            found = True
            break
    if state == "allocated":
        assert found, "The document is not allocated to the project issue"
    elif state == "not allocated":
        assert not found, "The document is allocated to the project issue"
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Delete Project Issue Allocation Of A Document
#
# ------------------------------------------------------------
@given("^the document is allocated to the project issue$")
def step(context):
    context.docRef = operation("CDB_Create", IssueDocumentReference,
                               user_input={"z_nummer": context.document.z_nummer,
                                           "z_index": context.document.z_index,
                                           "cdb_project_id": context.project_issue.cdb_project_id,
                                           "issue_id": context.project_issue.issue_id})


@when("^(?P<role>.*?) deletes the allocation "
      "of this document to the project issue$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.docRef)
        except Exception, e:
            log("Error deleting the allocation of the document "
                "to the project issue, details: %s" % str(e))
    return delete(context)


@then("^the allocation of the document to the project issue is "
      "(?P<state>(?:not )?deleted)$")
def step(context, state):
    if state == "deleted":
        context.execute_steps(
            u"THEN the document is not allocated to the project issue")
    elif state == "not deleted":
        context.execute_steps(
            u"THEN the document is allocated to the project issue")
    else:
        assert False, "Unknown state"


# ------------------------------------------------------------
# Scenario Delete Document with Project
#
# ------------------------------------------------------------
@then("^the project is (?P<state>(?:not )deleted)$")
def step(context, state):
    res = Project.ByKeys(context.project.cdb_project_id)
    if state == "deleted":
        assert res is None,\
            "The project isn't deleted"
    elif state == "not deleted":
        assert res is not None,\
            "The project is deleted"
    else:
        assert False, "Unknown state %s" % state


# ------------------------------------------------------------
# Scenario Delete Document with Task
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) deletes this document$")
def step(context, role):
    @run_with_added_roles(role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.document)
        except Exception, e:
            log("Error deleting the document, details: %s" % str(e))
    return delete(context)


@then("^the document is (?P<action>(?:not )?copied|(?:not )?deleted)$")
def step(context, action):
    res = Document.ByKeys(context.document.z_nummer, context.document.z_index)
    if action == "copied":
        assert len(Document.Query()) - context.doc_len == 1,\
            "Document not copied"
    elif action == "not copied":
        assert len(Document.Query()) - context.doc_len == 0,\
            "Document copied"
    elif action == "deleted":
        assert res is None, "The document isn't deleted"
    elif action == "not deleted":
        assert context.document == res, "The document is deleted"
    else:
        assert False, "Unknown state"


@then("^the task is (?P<state>(?:not )deleted)$")
def step(context, state):
    res = Task.ByKeys(
        cdb_project_id=context.task.cdb_project_id,
        task_id=context.task.task_id)
    if state == "deleted":
        assert res is None,\
            "The task isn't deleted"
    elif state == "not deleted":
        assert res is not None,\
            "The task is deleted"
    else:
        assert False, "Unknown state %s" % state


# ------------------------------------------------------------
# Scenario Delete Document with Checklist
#
# ------------------------------------------------------------
@then("^the checklist is (?P<state>(?:not )deleted)$")
def step(context, state):
    res = Checklist.ByKeys(
        cdb_project_id=context.checklist.cdb_project_id,
        checklist_id=context.checklist.checklist_id)
    if state == "deleted":
        assert res is None,\
            "The checklist isn't deleted"
    elif state == "not deleted":
        assert res is not None,\
            "The checklist is deleted"
    else:
        assert False, "Unknown state %s" % state


# ------------------------------------------------------------
# Scenario Delete Document with Checkpoint
#
# ------------------------------------------------------------
@then("^the checkpoint is (?P<state>(?:not )deleted)$")
def step(context, state):
    res = ChecklistItem.ByKeys(
        cdb_project_id=context.checkpoint.cdb_project_id,
        checklist_id=context.checkpoint.checklist_id,
        cl_item_id=context.checkpoint.cl_item_id)
    if state == "deleted":
        assert res is None,\
            "The checkpoint isn't deleted"
    elif state == "not deleted":
        assert res is not None,\
            "The checkpoint is deleted"
    else:
        assert False, "Unknown state %s" % state


# ------------------------------------------------------------
# Scenario Delete Document with Project Issue
#
# ------------------------------------------------------------
@then("^the project issue is (?P<state>(?:not )deleted)$")
def step(context, state):
    res = Issue.ByKeys(
        issue_id=context.project_issue.issue_id,
        cdb_project_id=context.project_issue.cdb_project_id)
    if state == "deleted":
        assert res is None,\
            "The project issue isn't deleted"
    elif state == "not deleted":
        assert res is not None,\
            "The project issue is deleted"
    else:
        assert False, "Unknown state %s" % state
