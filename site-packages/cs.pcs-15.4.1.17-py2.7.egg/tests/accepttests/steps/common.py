#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
import hashlib
from cdb import auth
from cdb import sqlapi
from cdb import cdbtime
from cdb import misc
from cdb import util
from cdb.objects import Object
from cdb.objects import org
from cdb.objects.pdd.Files import Sandbox
from cdb.transactions import Transaction
from cdb.typeconversion import to_user_repr_date_format
from cdb.typeconversion import to_python_rep
from cs.documents import Document
from cs.documents import DocumentCategory
from cs.pcs.checklists import Checklist
from cs.pcs.checklists import ChecklistItem
from cs.pcs.issues import Issue
from cs.pcs.projects import PersonAssignment
from cs.pcs.projects import Project
from cs.pcs.projects import ProjectCategory
from cs.pcs.projects import Role
from cs.pcs.projects.tasks import Task
from cs.pcs.projects.tasks import TaskRelation
from cs.pcs.projects_documents.folders import Docfolder_dynamic
from cs.pcs.projects_documents.folders import Folder2doc
from cs.calendar import CalendarProfile
from cdb.validationkit import given
from cdb.validationkit import log
from cdb.validationkit import operation
from cdb.validationkit import run_with_project_roles
from cdb.validationkit import run_with_roles
from cdb.validationkit import then
from cdb.validationkit import when
from datetime import datetime
from cdb.platform.olc import StateDefinition


__docformat__ = "restructuredtext en"
__revision__ = "$Id: common.py 183417 2018-09-06 05:44:39Z umu $"

DATE_FORMAT = "%Y-%m-%d"

doc_approve_maincategs = ("316", "144")
doc_approve_categ = "170"

doc_maincateg = list()

for doc_approve_maincateg in doc_approve_maincategs:
    doc_maincateg = DocumentCategory.ByKeys(doc_approve_maincateg)
    if doc_maincateg:
        break

doc_categ = DocumentCategory.ByKeys(doc_approve_categ)
project_category = ProjectCategory.Query()[0]
calendar_profile = CalendarProfile.Query()[0]


class OrganizationType(Object):
    __classname__ = 'cdb_org_type'
    __maps_to__ = 'cdb_org_type'


class Document(Document):
    def __eq__(self, other):
        if hasattr(other, "z_nummer") and hasattr(other, "z_index"):
            return (other.z_nummer == self.z_nummer and
                    other.z_index == self.z_index)
        else:
            return False


class Role(Role):
    def __eq__(self, other):
        attrs = self.KeyNames()
        for attr in attrs:
            if (not hasattr(other, attr) or getattr(other, attr) != getattr(self, attr)):
                return False
        return True


def getDate(dateStr):
    return '' if dateStr == '0000-00-00' else datetime.strptime(dateStr, DATE_FORMAT)


def generate_organization(presets_custom={}, user_input_custom={}):
    preset = {'org_id': 'cs.res.0',
              'org_type_name': '*** mandatory stuff ***',
              'org_type': OrganizationType.Query()[0].shorttext
              }
    preset.update(presets_custom)
    user_input = {'name': 'organization name',
                  'is_resource': True,
                  'is_resource_browsable': True
                  }
    user_input.update(user_input_custom)
    return operation('CDB_Create',
                     org.Organization,
                     user_input=user_input,
                     preset=preset)


def generateProject(presets_custom={}, user_input_custom={}):
    preset = {"category": project_category.name}
    preset.update(presets_custom)
    user_input = {"project_name": "project name", "template": 0}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Project,
                     user_input=user_input, preset=preset)


def generateDocument(presets_custom={}, user_input_custom={}):
    preset = {"z_categ1": doc_maincateg.categ_id,
              "z_categ2": doc_categ.categ_id}
    preset.update(presets_custom)
    user_input = {"titel": "Test"}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Document,
                     user_input=user_input,
                     preset=preset)


def generateProjectTask(project, presets_custom={}, user_input_custom={}):
    preset = {"cdb_project_id": project.cdb_project_id,
              "subject_id": "Projektmitglied",
              "subject_type": "PCS Role"}
    preset.update(presets_custom)
    user_input = {"task_name": "Task",
                  "start_time_fcast": "01.01.2014",
                  "end_time_fcast": "01.01.2014",
                  "automatic": 0}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Task,
                     user_input=user_input, preset=preset)


def generateTaskRel(successor, predecessor, reltype):
    args = {
        "pred_project_oid": predecessor.Project.cdb_object_id,
        "pred_task_oid": predecessor.cdb_object_id,
        "cdb_project_id2": predecessor.cdb_project_id,
        "task_id2": predecessor.task_id,
        "succ_project_oid": successor.Project.cdb_object_id,
        "cdb_project_id": successor.cdb_project_id,
        "succ_task_oid": successor.cdb_object_id,
        "task_id": successor.task_id,
        "rel_type": reltype
        }
    return operation("CDB_Create", TaskRelation, preset=args)


def generateChecklist(project, presets_custom={}, user_input_custom={}):
    preset = {"cdb_project_id": project.cdb_project_id,
              "subject_id": "Projektmitglied",
              "subject_type": "PCS Role"}
    preset.update(presets_custom)
    user_input = {"checklist_name": "Checklist"}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Checklist,
                     user_input=user_input,
                     preset=preset)


def generateCheckpoint(checklist, presets_custom={}, user_input_custom={}):
    preset = {"cdb_project_id": checklist.cdb_project_id,
              "checklist_id": checklist.checklist_id}
    preset.update(presets_custom)
    user_input = {"criterion": "Checkpoint",
                  "category": "Dokumentation",
                  "subject_id": "Projektleiter",
                  "subject_name": "Projektleiter",
                  "subject_type": "PCS Role"}
    user_input.update(user_input_custom)
    return operation("CDB_Create", ChecklistItem,
                     user_input=user_input,
                     preset=preset)


def generateProjectIssue(project, presets_custom={}, user_input_custom={}):
    preset = {"cdb_project_id": project.cdb_project_id,
              "subject_id": "Projektmitglied",
              "subject_type": "PCS Role"}
    preset.update(presets_custom)
    user_input = {"issue_name": "Test"}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Issue,
                     user_input=user_input,
                     preset=preset)


def generateProjectRole(project, presets_custom={}, user_input_custom={}):
    preset = {"cdb_project_id": project.cdb_project_id,
              "role_id": "Testrole"}
    preset.update(presets_custom)
    user_input = {}
    user_input.update(user_input_custom)
    return operation("CDB_Create", Role,
                     preset=preset, user_input=user_input)


def generateProjectMember(project, project_role, presets_custom={}, user_input_custom={}):
    preset = {"cdb_project_id": project.cdb_project_id,
              "role_id": project_role.role_id,
              "subject_id": "caddok",
              "subject_type": "Person"}
    preset.update(presets_custom)
    user_input = {}
    user_input.update(user_input_custom)
    return operation("CDB_Create", PersonAssignment,
                     preset=preset, user_input=user_input)


def generateProjectFolder(project, presets_custom={}, user_input_custom={}):
    user_input = {"name": "Dynamic Folder"}
    user_input.update(user_input_custom)
    preset = {"cdb_project_id": project.cdb_project_id}
    preset.update(presets_custom)
    return operation("CDB_Create", Docfolder_dynamic,
                     preset=preset, user_input=user_input)


def generateDocument2Folder(project_folder, document, project, presets_custom={}, user_input_custom={}):
    user_input = {"z_nummer": document.z_nummer,
                  "z_index": document.z_index}
    user_input.update(user_input_custom)
    preset = {"cdb_project_id": project.cdb_project_id,
              "folder_id": project_folder.folder_id}
    preset.update(presets_custom)
    return operation("CDB_Create", Folder2doc,
                     user_input=user_input,
                     preset=preset)


def test_to_user_repr_date_format(date_string):
    """
    Converts the given string, expected in tests date format, to a datetime object
    :param date_string: date string according to the tests date format
    :return: type: datetime.datetime
    """
    (y, m, d) = map(int, date_string.split('-'))
    return to_user_repr_date_format(datetime(y, m, d))


def test_to_python_rep(obj, attr, val):
    """
    Converts values to a vaöid python representation including tests date format yyyy-mm-dd
    :param obj:
    :param attr:
    :param val:
    :return:
    """
    attr_type = obj.__table_info__.column(attr).type()
    if attr_type == sqlapi.SQL_DATE:
        effective_date = getDate(val)
        if not effective_date:
            return effective_date
        val = test_to_user_repr_date_format(val)
    return to_python_rep(attr_type, val)


def getTestData(context):
    return "context: {}\n".format(getattr(context, "active_outline", "?"))


def checkFile(filename, f):
    should = hashlib.sha1(open(filename, "rb").read())
    sb = Sandbox()
    try:
        f = sb.checkout(f)[0]
        result = hashlib.sha1(open(f, "rb").read())
        return should.digest() == result.digest()
    finally:
        sb.close()
        sb.clear()


def getStatus(objektart, statename_en):
    status = StateDefinition.KeywordQuery(objektart=objektart,
                                         statusbez_en=statename_en)
    assert len(status) > 0, "no status found for %s/%s\n" % (

        objektart, statename_en)
    return status[0]


def assertStatus(obj, expected_status, err_msg):
    assert obj.status == expected_status.statusnummer, err_msg


def getContextObject(context, this_object):
    object_attr = this_object.lower().replace(" ", "_")
    obj = getattr(context, object_attr)
    obj.Reload()
    return obj


def remove_task_descriptions(tasks=list()):
    with Transaction():
        for task in tasks:
            sqlapi.SQL("DELETE FROM cdbpcs_task_txt WHERE "
                       "cdb_project_id = '{t.cdb_project_id}' AND "
                       "task_id = '{t.task_id}'".format(t=task))


@given("^the (?P<this_object>.*?)'s status is (?P<from_status>.*?)$")
def step(context, this_object, from_status):
    obj = getContextObject(context, this_object)
    state_from = getStatus(obj.cdb_objektart, from_status)
    obj.Update(
        status=state_from.statusnummer,
        cdb_status_txt=state_from.statusbezeich)
    obj.Reload()


@given("^a subproject exists$")
def step(context):
    assert context.project, "project is missing from context"

    @run_with_roles(["public"])
    def create_subproject(context):
        return generateProject(
            presets_custom={},
            user_input_custom={"parent_project": context.project.cdb_project_id})

    context.subproject = create_subproject(context)


@given("^a second project exists$")
def step(context):
    @run_with_roles(["public"])
    def create_proj():
        return generateProject()

    context.second_project = create_proj()


@when("^(?P<role>.*?) changes the status of the (?P<this_object>.*?) from "
      "(?P<from_status>.*?) to (?P<to_status>.*?)$")
def step(context, role, this_object, from_status, to_status):
    obj = getContextObject(context, this_object)

    @run_with_project_roles(context.project, role.split(","))
    def change_status(context):
        context.state_from = getStatus(obj.cdb_objektart, from_status)
        context.state_to = getStatus(obj.cdb_objektart, to_status)
        assert context.state_to and context.state_to.statusbez_de, (
            "state to {}".format(context.state_to))
        obj.Update(
            status=context.state_from.statusnummer,
            cdb_status_txt=context.state_from.statusbezeich)
        obj.Reload()
        try:
            operation("CDB_Workflow", obj, user_input={
                "zielstatus": context.state_to.statusbez_de})
        except Exception, e:
            log("Error changing the %s's status from %s to %s, details: %s\n"
                % (this_object, from_status, to_status, e))
            log(getTestData(context))

    return change_status(context)


@then("^the evaluator of the (?P<this_object>.*?) is (?P<expected_evaluator>.*?)$")
def step(context, this_object, expected_evaluator):
    obj = getContextObject(context, this_object)
    assert obj.evaluator == expected_evaluator, (
        "The evaluator of the object '%s' is %s\n...should be %s" % (
            obj.GetDescription(), obj.evaluator, expected_evaluator))


@then("^the status of the (?P<this_object>.*?) is (?P<expected_status>.*?)$")
def step(context, this_object, expected_status):
    obj = getContextObject(context, this_object)
    expected = getStatus(obj.cdb_objektart, expected_status)
    assertStatus(obj, expected, "The status of the %s is %s (expected %s)\n%s" % (
        this_object, obj.cdb_status_txt, expected_status, getTestData(context)))


@then("^the changed status of the (?P<this_object>.*?) is "
      "(?P<saved>(?:not )?saved)$")
def step(context, this_object, saved):
    obj = getContextObject(context, this_object)
    if saved == "saved":
        expected_status = context.state_to
        msg = "hasn't changed"
        expected_txt = context.state_to.statusbez_en
    elif saved == "not saved":
        expected_status = context.state_from
        msg = "has changed"
        expected_txt = context.state_from.statusbez_en
    assertStatus(obj, expected_status,
        "The status of the %s %s (expected '%s')\n%s" % (
            this_object, msg, expected_txt, getTestData(context)))


@then("^the (?P<this_object>.*?) is (?P<frozen>(?:not )?frozen)$")
def step(context, this_object, frozen):
    obj = getContextObject(context, this_object)
    if frozen == "not frozen":
        expected = 0
        inverted = "frozen"
    elif frozen == "frozen":
        expected = 1
        inverted = "not frozen"
    assert obj.cdbpcs_frozen == expected, "Object is %s: %s\n%s" % (
        inverted, obj.GetDescription(), getTestData(context))


@when("^(?P<role>.*?) tries to create a new (?P<task>(?:sub)?task)$")
def step(context, role, task):
    presets_custom = {}
    if task == "subtask":
        presets_custom = {"parent_task": context.task.task_id}

    @run_with_project_roles(context.project, role.split(","))
    def create_task(task, presets_custom):
        try:
            result = generateProjectTask(
                context.project,
                presets_custom=presets_custom)
            if task == "subtask":
                context.subtask = result
            else:
                context.task = result
        except RuntimeError, rte:
            misc.cdblogv(misc.kLogErr, 0, "caught Exception: %s" % rte)

    create_task(task, presets_custom)


@when("^(?P<role>.*?) tries to create a new (?P<cl>(?:task )?checklist)$")
def step(context, role, cl):
    presets_custom = {}
    if cl == "task checklist":
        presets_custom = {"task_id": context.task.task_id}

    @run_with_roles(["public"])
    @run_with_project_roles(context.project, role.split(","))
    def create_cl(presets_custom):
        try:
            context.checklist = generateChecklist(
                context.project,
                presets_custom=presets_custom)
        except RuntimeError, rte:
            misc.cdblogv(misc.kLogErr, 0, "caught Exception: %s" % rte)

    create_cl(presets_custom)


@when("^(?P<role>.*?) tries to create a new issue$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def create_issue():
        try:
            context.issue = generateProjectIssue(context.project)
        except RuntimeError, rte:
            misc.cdblogv(misc.kLogErr, 0, "caught Exception: %s" % rte)

    create_issue()


@when("^(?P<role>.*?) tries to copy the (?P<this_obj>.*) "
      "into the (?P<target_obj>.*)$")
def step(context, role, this_obj, target_obj):
    source = getContextObject(context, this_obj)
    target = getContextObject(context, target_obj)

    preset = {"cdb_project_id": target.cdb_project_id}
    if hasattr(target, "task_id"):
        attr = "task_id"
        if hasattr(source, "parent_task"):
            attr = "parent_task"
        preset[attr] = target.task_id

    @run_with_project_roles(context.project, role.split(","))
    def copy(source, target):
        try:
            return operation("CDB_Copy", source, preset=preset)
        except RuntimeError, rte:
            misc.cdblogv(misc.kLogErr, 0, "caught Exception: %s" % rte)
            return source

    context.copy = copy(source, target)


@given("^the task (?P<group>is(?: not)?) a task group$")
def step(context, group):
    if group == "is":
        context.task.Update(is_group=1)
    elif group == "is not":
        context.task.Update(is_group=0)
