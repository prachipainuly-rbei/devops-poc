#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import given
from cdb.validationkit import log
from cdb.validationkit import operation
from cdb.validationkit import run_with_project_roles
from cdb.validationkit import run_with_roles
from cdb.validationkit import then
from cdb.validationkit import when
from common import assertStatus
from common import generateProjectIssue
from common import getStatus
from cs.pcs.issues import Issue


# -------------------------------------------------------------
# Scenario Create New Project Issue
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) creates a new project issue$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def create(context):
        try:
            context.project_issue_len = len(Issue.Query())
            context.project_issue = operation(
                "CDB_Create",
                Issue,
                user_input={"issue_name": "Test"},
                preset={"cdb_project_id": context.project.cdb_project_id})
        except Exception, e:
            log("Error creating the project issue, details: %s" % e)
    return create(context)


@then("^a new project issue is (?P<status>(?:not )?generated)$")
def step(context, status):
    if status == "generated":
        assert len(Issue.Query()) - context.project_issue_len == 1, (
            "No project issue has been created")
    elif status == "not generated":
        assert len(Issue.Query()) - context.project_issue_len == 0, (
            "A project issue has been created")


# -------------------------------------------------------------
# Scenario Change Project Issue
#
# -------------------------------------------------------------
def getIssueAttributesToChange():
    return {"issue_name": "Changed"}


@given("^a project issue exists$")
def step(context):
    context.project_issue = generateProjectIssue(context.project)
    context.project_issue_len = len(Issue.Query())


@when("^(?P<role>.*?) changes this project issue$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def change(context):
        try:
            operation("CDB_Modify",
                      context.project_issue,
                      user_input=getIssueAttributesToChange())
        except Exception, e:
            log("Error changing the project issue, details: %s" % e)
    return change(context)


@then("^this changed project issue is (?P<status>(?:not )?saved)$")
def step(context, status):
    context.project_issue.Reload()
    s_attrs = set(getIssueAttributesToChange().items())
    if status == "saved":
        assert s_attrs.issubset(
            set(context.project_issue.items())
        ), "The attributes differ"
    elif status == "saved":
        assert not s_attrs.issubset(
            set(context.project_issue.items())
        ), "The attributes don't differ"


# -------------------------------------------------------------
# Scenario Copy Project Issue
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) copies this project issue$")
def step(context, role):
    @run_with_roles(["public"])
    @run_with_project_roles(context.project, role.split(","))
    def copy(context):
        try:
            operation("CDB_Copy", context.project_issue)
        except Exception, e:
            log("Error coping the project issue, details: %s" % e)
    return copy(context)


@then("^the project issue is (?P<status>(?:not )?copied|(?:not )?deleted)$")
def step(context, status):
    if status == "copied":
        assert len(Issue.Query()) - context.project_issue_len == 1, (
            "The project issue has not been copied")
    elif status == "not copied":
        assert len(Issue.Query()) - context.project_issue_len == 0, (
            "The project issue has been copied")
    elif status == "deleted":
        assert len(Issue.Query()) - context.project_issue_len == -1, (
            "The project issue has not been deleted")
    elif status == "not deleted":
        assert len(Issue.Query()) - context.project_issue_len == 0, (
            "The project issue has been deleted")


# -------------------------------------------------------------
# Scenario Delete Project Issue
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) deletes this project issue$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.project_issue)
        except Exception, e:
            log("Error deleting the project issue, details: %s" % e)
    return delete(context)


# -------------------------------------------------------------
# Scenario Change Status Of A Project Issue
#
# -------------------------------------------------------------
