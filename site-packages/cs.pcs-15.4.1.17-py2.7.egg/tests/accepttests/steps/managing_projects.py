#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import given
from cdb.validationkit import log
from cdb.validationkit import operation
from cdb.validationkit import run_with_roles
from cdb.validationkit import run_with_project_roles
from cdb.validationkit import then
from cdb.validationkit import when
from common import assertStatus
from common import getContextObject
from common import generateChecklist
from common import generateCheckpoint
from common import generateProject
from common import generateProjectIssue
from common import generateProjectTask
from common import test_to_python_rep
from common import getStatus
from common import project_category
from cs.pcs.projects import Project
from cs.pcs.projects.tasks import Task
from cdb import sqlapi


# ------------------------------------------------------------
# Scenario: Create New Project
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) creates a project$")
def step(context, role):
    @run_with_roles(role.split(","))
    def create(context):
        context.project_len = len(Project.Query())
        try:
            operation("CDB_Create", Project,
                      user_input={"project_name": "project name",
                                  "template": 0},
                      preset={"category": project_category.name})
        except Exception, e:
            log("Error creating the project, details: %s" % e)
    create(context)


@then("^a new project is (?P<creation>(?:not )?generated)$")
def step(context, creation):
    if creation == "generated":
        assert len(Project.Query()) - context.project_len == 1, (
            "No new project was generated")
    elif creation == "not generated":
        assert len(Project.Query()) - context.project_len == 0, (
            "A new project was generated")


# ------------------------------------------------------------
# Scenario Create New Project From A Template
#
# ------------------------------------------------------------
@given("^a project template exists$")
@run_with_roles(["Administrator", "public"])
def step(context):
    context.template = generateProject(user_input_custom={"template": 1})


@given("^the project template contains a checklist template$")
@run_with_roles(["Administrator", "public"])
def step(context):
    context.template_cl = generateChecklist(
        context.template, user_input_custom={"template": 1})


@when("^(?P<role>.*?) creates a new project from a template$")
def step(context, role):
    @run_with_roles(role.split(","))
    def create(context):
        try:
            context.project_len = len(Project.Query())
            context.project = operation("CDB_Copy", context.template,
                                        user_input={"template": 0})
        except Exception, e:
            log("Error creating the project, details: %s" % e)
    return create(context)


@then("^the generated project contains the defaults of the template$")
def step(context):
    assert containsAttributesFromTemplate(context.template,
        context.project), "The attributes differ"


@then("^the generated project contains a checklist template$")
def step(context):
    assert len(context.project.Checklists), (
        "generated project contains no checklist")
    assert context.project.Checklists[0].template == 1, (
        "generated project contains a non-template checklist")


def containsAttributesFromTemplate(template, project):
    attr_set = set(template.items())
    attr_set.remove(("template", 1))
    attr_set.remove(("cdb_project_id", template.cdb_project_id))
    attr_set.remove(("cdb_object_id", template.cdb_object_id))
    attr_set.remove(("cdb_mdate", template.cdb_mdate))
    attr_set.remove(("cdb_cdate", template.cdb_cdate))
    attr_set.remove(("cdb_adate", template.cdb_adate))
    attr_set.remove(("start_time_plan", template.start_time_plan))
    attr_set.remove(("end_time_plan", template.end_time_plan))
    tmp = attr_set.copy()
    for key, value in attr_set:
        if value == sqlapi.NULL:
            tmp.remove((key, value))
    attr_set = tmp
    return attr_set.issubset(set(project.items()))

# ------------------------------------------------------------
# Scenario Outline: Create New Project From A Template With Task Structure
#
# ------------------------------------------------------------


@given("^the project template contains a task structure$")
@run_with_roles(["Administrator", "public"])
def step(context):
    context.task_map = dict()
    for row in context.table:
        parent_id = context.task_map.get(row['parent_name'], '')
        task = generateProjectTask(context.template,
                                   user_input_custom={'task_name': row['task_name']},
                                   presets_custom={'parent_task': parent_id}
                                   )
        task.Update(position=row['position'])
        context.task_map[task.task_name] = task.task_id


@then("^positions of the generated tasks have been initialized$")
def step(context):
    for row in context.table:
        task_name = row['task_name']
        position = row['position']
        tasks = Task.KeywordQuery(
            cdb_project_id=context.project.cdb_project_id,
            task_name=task_name
        )
        assert len(tasks) == 1, 'Could not identify generated task {}'.format(task_name)
        task = tasks[0]
        assert task.position == int(position), (
            'Position of task {} has not been set properly (expected: {}, found: {}'.format(
                task_name,
                position,
                task.position
            )
        )


# ------------------------------------------------------------
# Scenario Change Project
#
# ------------------------------------------------------------
def getProjectAttributesToChange():
    return {"project_name": "Changed"}


@given("^a project exists$")
@run_with_roles(["public"])
def step(context):
    context.project = generateProject()
    context.project_len = len(Project.Query())


@when("^(?P<role>.*?) changes this project$")
@run_with_roles(["public"])
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def change(context):
        try:
            operation("CDB_Modify",
                      context.project,
                      user_input=getProjectAttributesToChange())
        except Exception, e:
            log("Error changing the project, details: %s" % e)
    return change(context)


@then("^the changed project is (?P<status>(?:not )?saved)$")
def step(context, status):
    context.project.Reload()
    s_attrs = set(getProjectAttributesToChange().items())
    if status == "saved":
        assert s_attrs.issubset(
            set(context.project.items())
        ), "The attributes differ"
    elif status == "not saved":
        assert not s_attrs.issubset(
            set(context.project.items())), "The attributes don't differ"


# ------------------------------------------------------------
# Scenario Copy Project
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) copies this project$")
def step(context, role):
    @run_with_roles(role.split(","))
    def copy(context):
        project = None
        try:
            project = operation("CDB_Copy", context.project)
        except Exception, e:
            log("Error copying the project, details: %s" % e)
        assert isinstance(project, Project), "Error copying the project."
    return copy(context)


@when("^(?P<role>.*?) copies the (?P<task>.*) with setting (?P<attr>.*) to (?P<val>.*)$")
def step(context, role, task, attr, val):

    t = getContextObject(context, task)

    @run_with_roles(role.split(","))
    def copy(context):
        project = None
        try:
            project = operation("CDB_Copy", t, user_input={attr: test_to_python_rep(t, attr, val)})
        except Exception, e:
            log("Error copying the project, details: %s" % e)
        assert isinstance(project, Project), "Error copying the project."
    return copy(context)


@then("^the project is (?P<status>(?:not )?copied|(?:not )?deleted)$")
def step(context, status):
    if status == "copied":
        assert len(Project.Query()) - context.project_len == 1, (
            "The project has not been copied")
    elif status == "not copied":
        assert len(Project.Query()) - context.project_len == 0, (
            "The project has been copied")
    elif status == "deleted":
        assert len(Project.Query()) - context.project_len == -1, (
            "The project has not been deleted")
    elif status == "not deleted":
        assert len(Project.Query()) - context.project_len == 0, (
            "The project has been deleted")


# ------------------------------------------------------------
# Scenario Delete Project
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) deletes this project$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.project)
        except Exception, e:
            log("Error deleting the project, details: %s" % e)
    return delete(context)


# ------------------------------------------------------------
# Scenario Change Status Of A Project
#
# ------------------------------------------------------------
@given("^the project contains tasks, issues, and checklists$")
def step(context):
    root_task = generateProjectTask(context.project)
    child_task = generateProjectTask(
        context.project, {"parent_task": root_task.task_id})
    generateProjectIssue(context.project)
    cl = generateChecklist(context.project)
    generateCheckpoint(cl)


@then("^(?P<item_cls>.*?) are (?P<status>(?:not )?frozen)$")
def step(context, item_cls, status):
    item_objs = getattr(context.project, item_cls, None)
    assert item_objs, "project has no %s" % item_cls
    if status == "frozen":
        not_frozen = [i for i in item_objs if i.cdbpcs_frozen != 1]
        assert not not_frozen, "%s %s are not frozen" % (
            len(not_frozen), item_cls)
    elif status == "not frozen":
        frozen = [i for i in item_objs if i.cdbpcs_frozen == 1]
        assert not frozen, "%s %s are frozen" % (len(frozen), item_cls)
