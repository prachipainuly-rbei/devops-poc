#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import run_with_project_roles, \
    operation, given, when, then, log
from common import generateProjectFolder, generateDocument2Folder
from cs.pcs.projects_documents.folders import Docfolder_dynamic, Folder2doc


# -------------------------------------------------------------
# Scenario Create New Project Folder
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) creates a new project folder$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def create(context):
        try:
            context.project_folder_len = len(Docfolder_dynamic.Query())
            operation("CDB_Create",
                      Docfolder_dynamic,
                      user_input={"name": "Dynamic Folder"},
                      preset={"cdb_project_id": context.project.cdb_project_id})
        except Exception, e:
            log("Error creating the project folder, details: %s" % e)
    return create(context)


@then("^a new project folder is (?P<creation>(?:not )?generated)$")
def step(context, creation):
    if creation == "generated":
        assert (len(Docfolder_dynamic.Query())
                - context.project_folder_len == 1),\
            "No project folder has been created"
    elif creation == "not generated":
        assert (len(Docfolder_dynamic.Query())
                - context.project_folder_len == 0),\
            "A project folder has been created"


# -------------------------------------------------------------
# Scenario Change Project Folder
#
# -------------------------------------------------------------

@given("^a project folder exists$")
def step(context):
    context.project_folder = generateProjectFolder(context.project)
    context.project_folder_len = len(Docfolder_dynamic.Query())


def getProjectFolderAttributesToChange():
    return {"name": "Changed"}


@when("^(?P<role>.*?) changes this project folder$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def change(context):
        try:
            operation("CDB_Modify",
                      context.project_folder,
                      user_input=getProjectFolderAttributesToChange())
        except Exception, e:
            log("Error changing the project folder, details: %s" % e)
    return change(context)


@then("^the changed project folder is (?P<status>(?:not )?saved)$")
def step(context, status):
    s_attrs = set(getProjectFolderAttributesToChange().items())
    if status == "saved":
        assert s_attrs.issubset(set(context.project_folder.items())),\
            "The attributes differ"
    elif status == "not saved":
        assert not s_attrs.issubset(set(context.project_folder.items())),\
            "The attributes don't differ"


# -------------------------------------------------------------
# Scenario Copy Project Folder
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) copies this project folder$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def copy(context):
        try:
            operation("CDB_Copy", context.project_folder)
        except Exception, e:
            log("Error coping the project folder, details: %s" % e)
    return copy(context)


@then("^the project folder is (?P<status>(?:not )?copied|(?:not )?deleted)$")
def step(context, status):
    if status == "copied":
        assert (len(Docfolder_dynamic.Query())
                - context.project_folder_len == 1),\
            "The project folder has not been copied"
    elif status == "not copied":
        assert (len(Docfolder_dynamic.Query())
                - context.project_folder_len == 0),\
            "The project folder has been copied"
    elif status == "deleted":
        assert (len(Docfolder_dynamic.Query())
                - context.project_folder_len == -1),\
            "The project folder has not been deleted"
    elif status == "not deleted":
        assert (len(Docfolder_dynamic.Query())
                - context.project_folder_len == 0),\
            "The project folder has been deleted"


# -------------------------------------------------------------
# Scenario Delete Project Folder
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) deletes this project folder$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.project_folder)
        except Exception, e:
            log("Error deleting the project folder, details: %s" % e)
    return delete(context)


# -------------------------------------------------------------
# Scenario Allocate A Document To A Project Folder
#
# -------------------------------------------------------------
@when("^(?P<role>.*?) allocates this document to the project folder$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def allocate(context):
        try:
            operation("CDB_Create",
                      Folder2doc,
                      user_input={"z_nummer": context.document.z_nummer,
                                  "z_index": context.document.z_index},
                      preset={"cdb_project_id": context.project.cdb_project_id,
                              "folder_id": context.project_folder.folder_id})
        except Exception, e:
            log("Error allocating the document to the project folder, "
                "details: %s" % e)
    return allocate(context)


@then("^the document is (?P<status>(?:not )?allocated) to the project folder")
def step(context, status):
    context.project_folder.Reload()
    if status == "allocated":
        assert context.document in context.project_folder.DocAssignments,\
            "The document has not been allocated to the project folder"
    elif status == "not allocated":
        assert context.document not in context.project_folder.DocAssignments,\
            "The document has been allocated to the project folder"


# -------------------------------------------------------------
# Scenario Delete Project Folder Allocation Of A Document
#
# -------------------------------------------------------------
@given("^it is allocated to the project folder$")
def step(context):
    context.doc_assignment = generateDocument2Folder(context.project_folder,
                                                     context.document, context.project)
    context.doc_assignment_len = len(Folder2doc.Query())


@when("^(?P<role>.*?) deletes this allocation "
      "of the document to the project folder")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.doc_assignment)
        except Exception, e:
            log("Error deleting the allocation of the document "
                "to the project folder, details: %s" % e)
    return delete(context)


@then("^the allocation of the document to the project folder is "
      "(?P<status>(?:not )?deleted)$")
def step(context, status):
    context.project_folder.Reload()
    if status == "deleted":
        assert context.document not in context.project_folder.DocAssignments,\
            "The allocation has not been deleted"
    elif status == "not deleted":
        assert context.document in context.project_folder.DocAssignments,\
            "The allocation has been deleted"
