#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import run_with_project_roles, \
    operation, given, when, then, generateUser, log, run_with_added_roles
from cdb.objects import org
from cs.pcs.projects import TeamMember


# ------------------------------------------------------------
# Background
#
# ------------------------------------------------------------
@given("^a person exists$")
@run_with_added_roles(["Administrator"])
def step(context):
    context.person = generateUser("project_team_blop")
    context.person_len = len(org.User.Query())


# ------------------------------------------------------------
# Scenario Allocate A Registered User To A Project Team
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) allocates this person to the project$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def allocate(context):
        try:
            operation(
                "CDB_Create",
                TeamMember,
                preset={"cdb_project_id": context.project.cdb_project_id},
                user_input={"cdb_person_id": context.person.personalnummer,
                            "mapped_cdb_person_id_name": context.person.name})
        except Exception, e:
            log("Error allocating the person to the project, details: %s" % e)
    return allocate(context)


@then("^this person is (?P<status>(?:not )?allocated) to the project$")
def step(context, status):
    context.project.Reload()
    found = False
    for teamMember in context.project.TeamMembers:
        if teamMember.Person.personalnummer == context.person.personalnummer:
            found = True
            break
    if status == "allocated":
        assert found, "The person isn't allocated to the project"
    elif status == "not allocated":
        assert not found, "The person is allocated to the project"


# ------------------------------------------------------------
# Scenario Delete Project Team Member
#
# ------------------------------------------------------------
@given("^the person is allocated to the project")
def step(context):
    context.allocation = operation("CDB_Create", TeamMember,
                                   preset={"cdb_project_id": context.project.cdb_project_id},
                                   user_input={"cdb_person_id": context.person.personalnummer,
                                               "mapped_cdb_person_id_name": context.person.name})
    return context.allocation


@when("^(?P<role>.*?) deletes the allocation of this person to the project$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.allocation)
        except Exception, e:
            log("Error deleting the allocation of the person to the project, "
                "details: %s" % e)
    return delete(context)


@then("^the allocation of the person to the project is "
      "(?P<status>(?:not )?deleted)$")
def step(context, status):
    context.project.Reload()
    found = False
    for teamMember in context.project.TeamMembers:
        if teamMember.Person == context.person:
            found = True
            break
    if status == "deleted":
        assert not found, "The person is allocated to the project"
    elif status == "not deleted":
        assert found, "The person isn't allocated to the project"
