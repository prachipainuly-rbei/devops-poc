#!/usr/bin/env python
# coding: utf-8
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
from cdb import CADDOK
from cdb.validationkit import given
from cdb.validationkit import log
from cdb.validationkit import operation
from cdb.validationkit import then
from cdb.validationkit import when
from cdb.validationkit import run_with_roles
from cdb.validationkit import run_with_project_roles
from common import generateChecklist
from common import generateCheckpoint
from common import generateProjectTask
from common import getContextObject


@given("^a (?P<task>.*?) checklist exists$")
def step(context, task):
    task_obj = getContextObject(context, task)

    name = "%s Checklist" % task.capitalize()

    setattr(context, "%s_checklist" % task, generateChecklist(
        task_obj.Project,
        presets_custom={"task_id": task_obj.task_id},
        user_input_custom={"checklist_name": name}))


@given("^a task group exists$")
def step(context):
    assert context.project, "project is missing from context"

    @run_with_project_roles(context.project, ["Projektleiter"])
    def create_task_group(context):
        task_group = generateProjectTask(
            context.project,
            presets_custom={},
            user_input_custom={"task_name": "Task Group"})
        task_group.Update(is_group=1)
        return task_group

    context.task_group = create_task_group(context)


@given("^a second checkpoint exists$")
def step(context):
    assert context.checklist, "checklist is missing in context"
    context.second_checkpoint = generateCheckpoint(
        context.checklist,
        presets_custom={},
        user_input_custom={})


def rate_cl_item(cl_item, reraise):
    rating = cl_item.RatingSchema.RatingValues[-1]
    try:
        operation("cdbpcs_clitem_rating",
                  cl_item,
                  preset={"rating_id": rating.rating_id,
                          "rating_value": rating["rating_value_%s" % CADDOK.ISOLANG]})
    except Exception, e:
        log("ERROR rating the checkpoint, details: %s" % e)
        if reraise:
            raise


@given("^the (?P<cl_item>.*?) is rated$")
def step(context, cl_item):
    @run_with_roles(["public"])
    @run_with_project_roles(context.project, ["Projektleiter"])
    def rate():
        rate_cl_item(getContextObject(context, cl_item), reraise=True)

    rate()


@when("^(?P<role>.*?) rates the (?P<cl_item>.*?)$")
def step(context, role, cl_item):
    @run_with_roles(["public"])
    @run_with_project_roles(context.project, role.split(","))
    def rate():
        rate_cl_item(getContextObject(context, cl_item), reraise=False)

    rate()


@then(u"^the (?P<cl_item>.*?) is (?P<rated>(?:not )?rated)$")
def step(context, cl_item, rated):
    checklist_item = getContextObject(context, cl_item)
    checklist_item.Reload()
    if rated == "rated":
        assert checklist_item.Rating, "the checkpoint has not been rated"
    else:
        assert not checklist_item.Rating, "the checkpoint has been rated"
