#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#


from cdb.validationkit import when, then, \
    run_with_project_roles


# -------------------------------------------------------------------------
# Scenario: A project member tries to handle the project
#
# -------------------------------------------------------------------------


@when(u"(?P<role>.*) tries to (?P<action>.*) the project")
def step(context, role, action):
    @run_with_project_roles(context.project, role.split(","))
    def check():
        return context.project.CheckAccess(action, "behave_test")
    context.right_granted = check()


@then("he's (?P<result>.*) the necessary permissions")
def step(context, result):
    assert(
        (result == "not granted" and not context.right_granted)
        or
        (result == "granted" and context.right_granted)
    )


# ------------------------------------------------------------
# Scenario: A project member tries to handle a task
#
# ------------------------------------------------------------


@when(u"(?P<role>.*) tries to (?P<action>.*) the task")
def step(context, role, action):
    @run_with_project_roles(context.project, role.split(","))
    def check():
        return context.task.CheckAccess(action, "behave_test")
    context.right_granted = check()


# ------------------------------------------------------------
# Scenario: A project member tries to handle a project role
#
# ------------------------------------------------------------


@when(u"(?P<role>.*) tries to (?P<action>.*) the specific project role")
def step(context, role, action):
    @run_with_project_roles(context.project, role.split(","))
    def check():
        return context.project_role.CheckAccess(action, "behave_test")
    context.right_granted = check()


# ------------------------------------------------------------
# Scenario: A project member tries to delete a checklist
#
# ------------------------------------------------------------


@when(u"(?P<role>.*) tries to (?P<action>.*) the checklist")
def step(context, role, action):
    @run_with_project_roles(context.project, role.split(","))
    def check():
        return context.checklist.CheckAccess(action, "behave_test")
    context.right_granted = check()


# ------------------------------------------------------------
# Scenario: A project member tries to delete a checkpoint
#
# ------------------------------------------------------------


@when(u"(?P<role>.*) tries to (?P<action>.*) the checkpoint")
def step(context, role, action):
    @run_with_project_roles(context.project, role.split(","))
    def check():
        return context.checkpoint.CheckAccess(action, "behave_test")
    context.right_granted = check()
