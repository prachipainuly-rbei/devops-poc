#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb.validationkit import run_with_project_roles
from cdb.validationkit import operation
from cdb.validationkit import given
from cdb.validationkit import when
from cdb.validationkit import then
from cdb.validationkit import log
from common import generateCheckpoint
from cs.pcs.checklists import ChecklistItem


# ------------------------------------------------------------
# Scenario Create New Checkpoint
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) creates a new checkpoint$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def create(context):
        context.checkpoint_len = len(ChecklistItem.Query())
        try:
            context.checkpoint = operation(
                "CDB_Create",
                ChecklistItem,
                user_input={"criterion": "Checkpoint",
                            "category": "Dokumentation",
                            "subject_id": "Projektmitglied",
                            "subject_name": "Projektmitglied"},
                preset={"cdb_project_id": context.checklist.cdb_project_id,
                        "checklist_id": context.checklist.checklist_id})
        except Exception, e:
            log("Error creating the checkpoint, details: %s" % e)
    return create(context)


@then("^a new checkpoint is (?P<creation>(?:not )?generated)$")
def step(context, creation):
    if creation == "generated":
        assert len(ChecklistItem.Query()) - context.checkpoint_len == 1,\
            "No checkpoint has been created"
    elif creation == "not generated":
        assert len(ChecklistItem.Query()) - context.checkpoint_len == 0,\
            "A checkpoint has been created"


# ------------------------------------------------------------
# Scenario Change Checkpoint
#
# ------------------------------------------------------------
def getCheckpointAttributesToChange():
    return {"criterion": "Changed"}


@given("^a checkpoint exists$")
def step(context):
    context.checkpoint = generateCheckpoint(context.checklist)
    context.checkpoint_len = len(ChecklistItem.Query())


@when("^(?P<role>.*?) changes this checkpoint$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def change(context):
        try:
            operation("CDB_Modify",
                      context.checkpoint,
                      user_input=getCheckpointAttributesToChange())
        except Exception, e:
            log("Error changing the checkpoint, details: %s" % e)
    return change(context)


@then("^this changed checkpoint is (?P<status>(?:not )?saved)$")
def step(context, status):
    context.checkpoint.Reload()
    s_attrs = set(getCheckpointAttributesToChange().items())
    if status == "saved":
        assert s_attrs.issubset(
            set(context.checkpoint.items())
        ), "The attributes differ"
    elif status == "not saved":
        assert not s_attrs.issubset(
            set(context.checkpoint.items())
        ), "The attributes don't differ"


# ------------------------------------------------------------
# Scenario Copy Checkpoint
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) copies this checkpoint$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def copy(context):
        try:
            operation("CDB_Copy", context.checkpoint)
        except Exception, e:
            log("Error coping the checkpoint, details: %s" % e)
    return copy(context)


@then("^the checkpoint is (?P<status>(?:not )?copied|(?:not )?deleted)$")
def step(context, status):
    if status == "copied":
        assert len(ChecklistItem.Query()) - context.checkpoint_len == 1,\
            "The checkpoint has not been copied"
    elif status == "not copied":
        assert len(ChecklistItem.Query()) - context.checkpoint_len == 0,\
            "The checkpoint has been copied"
    elif status == "deleted":
        assert len(ChecklistItem.Query()) - context.checkpoint_len == -1,\
            "The checkpoint has not been deleted"
    elif status == "not deleted":
        assert len(ChecklistItem.Query()) - context.checkpoint_len == 0,\
            "The checkpoint has been deleted"


# ------------------------------------------------------------
# Scenario Delete Checkpoint
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) deletes this checkpoint$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.checkpoint)
        except Exception, e:
            log("Error deleting the checkpoint, details: %s" % e)
    return delete(context)


# ------------------------------------------------------------
# Scenario Valuate A Checkpoint
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) valuates this checkpoint with$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def valuate(context):
        context.rating = context.table[0]["RATING"]
        try:
            operation("cdbpcs_clitem_rating",
                      context.checkpoint,
                      user_input={"rating": context.rating})
        except Exception, e:
            log("Error valuating the checkpoint, details: %s" % e)
    return valuate(context)


@then("^this checkpoint is (?P<status>(?:not )?valuated)$")
def step(context, status):
    context.checkpoint.Reload()
    from cs.pcs.checklists import RatingValue, ChecklistItem
    rv = RatingValue.ByKeys("RedGreenYellow", ChecklistItem._get_rating_id(context.rating))
    if status == "valuated":
        assert context.checkpoint.rating == rv.rating_value,\
            "The checkpoint has not been valuated"
    elif status == "not valuated":
        assert context.checkpoint.rating != context.rating,\
            "The checkpoint has been valuated"
