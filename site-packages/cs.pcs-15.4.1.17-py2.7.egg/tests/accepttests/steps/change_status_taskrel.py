#!/usr/bin/env python
# coding: utf-8
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
from cdb.validationkit import given
from cdb.validationkit import operation
from cdb.validationkit import run_with_project_roles
from common import generateProjectTask
from common import generateTaskRel
from common import getContextObject
from cs.pcs.projects.tasks import TaskRelation


def createRelatedTasks(context, rel, p_pred, p_succ):
    context.predecessor = generateProjectTask(
        context.project,
        presets_custom={"parent_task": p_pred.task_id if p_pred else ""},
        user_input_custom={"task_name": "Predecessor"})
    context.successor = generateProjectTask(
        context.project,
        presets_custom={"parent_task": p_succ.task_id if p_succ else ""},
        user_input_custom={"task_name": "Successor"})

    generateTaskRel(context.successor, context.predecessor, rel)


@given("^(?P<rel>.*?)-related tasks exist$")
def step(context, rel):
    createRelatedTasks(context, rel, None, None)


@given("^(?P<rel>.*?)-related tasks exist in (?P<parents>.*?)$")
def step(context, rel, parents):
    px = [x.strip() for x in parents.split(" and ")]
    if len(px) == 1:
        parent_pred = parent_succ = px[0]
    elif len(px) == 2:
        parent_pred, parent_succ = px

    createRelatedTasks(
        context,
        rel,
        getContextObject(context, parent_pred),
        getContextObject(context, parent_succ))


@given("^a subtask exists in (?P<parent>predecessor|successor)$")
def step(context, parent):
    parent_task = getContextObject(context, parent)
    setattr(context, "%s_subtask" % parent, generateProjectTask(
        parent_task.Project,
        presets_custom={"parent_task": parent_task.task_id},
        user_input_custom={"task_name": "%s Subtask" % parent.capitalize()}))


@given("^a second (?P<rel>.*?)-predecessor exists$")
def step(context, rel):
    context.second_predecessor = generateProjectTask(
        context.project,
        presets_custom={"parent_task": context.predecessor.parent_task},
        user_input_custom={"task_name": "2nd Predecessor"})

    generateTaskRel(context.successor, context.second_predecessor, rel)


@given("^default taskrel constraints are active$")
def step(context):
    from cs.pcs.projects.tasks import Task
    Task.__taskrel_constraints__ = {
        20: False,
        200: True,
        }


@given("^taskrel constraints are (?P<active>(?:not )?active)$")
def step(context, active):
    # warning: this is dangerous, since it may impact following tests if not
    # reset to default ("default taskrel constraints are active")
    from cs.pcs.projects.tasks import Task
    from cdb.platform.olc import Workflow
    status = Workflow.ByKeys("cdbpcs_task").StateDefinitions.statusnummer
    Task.__taskrel_constraints__ = {k: active == "active" for k in status}


@when("^(?P<role>.*) deletes the dependency between the tasks$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete_rel(pred, succ):
        for rel in TaskRelation.KeywordQuery(
            cdb_project_id=context.project.cdb_project_id,
            task_id=succ.task_id,
            cdb_project_id2=context.project.cdb_project_id,
            task_id2=pred.task_id
        ):
            operation("CDB_Delete", rel)

    delete_rel(
        getContextObject(context, "predecessor"),
        getContextObject(context, "successor"))
