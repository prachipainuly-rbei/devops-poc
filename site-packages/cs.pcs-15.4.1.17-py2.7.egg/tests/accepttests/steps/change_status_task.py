#!/usr/bin/env python
# coding: utf-8
#
# Copyright (C) 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
from cdb import misc
from cdb.validationkit import given
from cdb.validationkit import operation
from cdb.validationkit import run_with_project_roles
from common import generateProjectTask
from common import getContextObject
from common import getTestData


@given("^a (?P<subtask>(?:second )?subtask) exists$")
def step(context, subtask):
    assert context.task, "task is missing in context"
    new = generateProjectTask(
        context.task.Project,
        presets_custom={"parent_task": context.task.task_id},
        user_input_custom={"task_name": subtask})
    if subtask == "second subtask":
        context.second_subtask = new
    else:
        context.subtask = new


@given("^a second task exists$")
def step(context):
    assert context.task, "task is missing in context"
    context.second_task = generateProjectTask(
        context.task.Project,
        presets_custom={},
        user_input_custom={"task_name": "2nd Task"})


@given("^a subtask task exists$")
def step(context):
    assert context.subtask, "subtask is missing in context"
    context.subtask_task = generateProjectTask(
        context.subtask.Project,
        presets_custom={"parent_task": context.subtask.task_id},
        user_input_custom={"task_name": "Subtask"})


def task_contains(context, task, relship, expected):
    actual = len(getattr(task, relship))
    assert actual == int(expected), (
        "expected %s %s, found %s\n%s" % (
            expected, relship, actual, getTestData(context)))


@then("^the (?P<task>.*?) has exactly (?P<expected>[0-9]+) child tasks$")
def step_impl(context, task, expected):
    task_obj = getContextObject(context, task)
    task_contains(context, task_obj, "Subtasks", expected)


@then("^the (?P<task>.*?) has exactly (?P<expected>[0-9]+) checklists$")
def step_impl(context, task, expected):
    task_obj = getContextObject(context, task)
    task_contains(context, task_obj, "Checklists", expected)


@then("^the (?P<checklist>.*?) has exactly (?P<expected>[0-9]+) checkpoints$")
def step_impl(context, checklist, expected):
    c_obj = getContextObject(context, checklist)
    task_contains(context, c_obj, "ChecklistItems", expected)


@when("^(?P<role>.*?) makes the (?P<parent>.*?) the parent of the (?P<child>.*?)$")
def step_impl(context, role, parent, child):
    @run_with_project_roles(context.project, role.split(","))
    def move_task(child, parent_task):
        attr = "task_id"
        if hasattr(child, "parent_task"):
            attr = "parent_task"
        try:
            operation(
                "CDB_Modify",
                child,
                preset={
                    "cdb_project_id": parent_task.cdb_project_id,
                    attr: parent_task.task_id,
                    })
        except RuntimeError, rte:
            misc.cdblogv(misc.kLogErr, 0, "caught Exception: %s" % rte)

    move_task(
        getContextObject(context, child),
        getContextObject(context, parent))


@when("^(?P<role>.*?) deletes the (?P<task>(?:second )?(?:sub)?task)$")
def step(context, role, task):
    task_obj = getContextObject(context, task)

    @run_with_project_roles(context.project, role.split(","))
    def delete_task(task_obj):
        operation("CDB_Delete", task_obj)

    delete_task(task_obj)
