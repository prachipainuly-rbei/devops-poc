#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2012 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

from cdb import sqlapi
from cdb.validationkit import given
from cdb.validationkit import log
from cdb.validationkit import operation
from cdb.validationkit import run_with_project_roles
from cdb.validationkit import run_with_roles
from cdb.validationkit import then
from cdb.validationkit import when
from common import assertStatus
from common import generateChecklist
from common import getStatus
from cs.pcs.checklists import Checklist


# ------------------------------------------------------------
# Scenario Create New Checklist
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) creates a new checklist$")
def step(context, role):
    @run_with_roles(["public"])
    @run_with_project_roles(context.project, role.split(","))
    def create(context):
        try:
            context.checklist_len = len(Checklist.Query())
            context.checklist = operation(
                "CDB_Create",
                Checklist,
                user_input={
                    "checklist_name": "Checklist",
                    "subject_type": "PCS Role"},
                preset={
                    "subject_id": "Projektmitglied",
                    "cdb_project_id": context.project.cdb_project_id})
        except Exception, e:
            log("Error creating the checklist, details: %s" % e)
    return create(context)


@then("^a new checklist is (?P<creation>(?:not )?generated)$")
def step(context, creation):
    if creation == "generated":
        assert len(Checklist.Query()) - context.checklist_len == 1, (
            "No new checklist has been created")
    elif creation == "not generated":
        assert len(Checklist.Query()) - context.checklist_len == 0, (
            "A new checklist has been created")


# ------------------------------------------------------------
# Scenario Create New Checklist From A Template
#
# ------------------------------------------------------------
@given("^a checklist template exists$")
def step(context):
    @run_with_roles(["Administrator", "public"])
    @run_with_project_roles(context.project, ["Projektleiter"])
    def createtemplate(context):
        context.template = generateChecklist(
            context.project,
            user_input_custom={
                "subject_type": "PCS Role",
                "template": 1},
            presets_custom={"subject_id": "Projektmitglied"}
            )
        context.checklist_len = len(Checklist.Query())
    return createtemplate(context)


@when("^(?P<role>.*?) creates a new checklist from the template$")
def step(context, role):
    @run_with_roles(["public"])
    @run_with_project_roles(context.project, role.split(","))
    def create(context):
        try:
            context.checklist = operation(
                "CDB_Copy",
                context.template,
                user_input={"template": 0})
        except RuntimeError, e:
            log("Error creating the checklist, details: %s" % e)
    return create(context)


@then("^the attributes from the template are (?P<status>(?:not )?applied)")
def step(context, status):
    # TODO find a better way to check this...
    s_attrs = set(context.template.items())
    s_attrs.remove(("template", 1))
    s_attrs.remove(("checklist_id", context.template.checklist_id))
    s_attrs.remove(("cdb_object_id", context.template.cdb_object_id))
    s_attrs.remove(("type", context.template.type))
    s_attrs.remove(("cdb_mdate", context.template.cdb_mdate))
    s_attrs.remove(("cdb_cdate", context.template.cdb_cdate))
    tmp = s_attrs.copy()
    for key, value in s_attrs:
        if value in (sqlapi.NULL, None):
            tmp.remove((key, value))
    s_attrs = tmp
    if status == "applied":
        assert s_attrs.issubset(set(context.checklist.items())), (
            "The attributes differ")
    elif status == "not applied":
        if hasattr(context, "checklist"):
            assert not s_attrs.issubset(set(context.checklist.items())), (
                "The attributes don't differ")


# ------------------------------------------------------------
# Scenario Create New Checklist as Quality Gate
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) creates a new quality gate$")
def step(context, role):
    @run_with_roles(["public"])
    @run_with_project_roles(context.project, role.split(","))
    def create(context):
        context.checklist_len = len(Checklist.Query())
        try:
            context.checklist = operation(
                "CDB_Create",
                Checklist,
                user_input={
                    "subject_type": "PCS Role",
                    "checklist_name": "Checklist",
                    "type": "QualityGate"},
                preset={
                    "subject_id": "Projektmitglied",
                    "cdb_project_id": context.project.cdb_project_id})
        except Exception, e:
            log("Error creating the quality gate, details: %s" % e)
    return create(context)


@then("^a new quality gate is (?P<creation>(?:not )?generated)$")
def step(context, creation):
    context.execute_steps(u"THEN a new checklist is %s" % creation)
    if creation == "generated":
        assert context.checklist.type == "QualityGate", (
            "The checklist is not a quality gate")


# ------------------------------------------------------------
# Scenario Create New Checklist as Quality Gate From A Template
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) creates a new quality gate from the template$")
def step(context, role):
    @run_with_roles(["public"])
    @run_with_project_roles(context.project, role.split(","))
    def create(context):
        try:
            context.checklist = operation(
                "CDB_Copy",
                context.template,
                user_input={"template": 0,
                            "type": "QualityGate"})
        except Exception, e:
            log("Error creating the checklist, details: %s" % e)
    return create(context)


# ------------------------------------------------------------
# Scenario Change Checklist
#
# ------------------------------------------------------------
def getChecklistAttributesToChange():
    return {"division": "Changed"}


@given("^a checklist exists$")
def step(context):
    @run_with_roles(["public", "Administrator"])
    @run_with_project_roles(context.project, ["Projektleiter"])
    def createchecklist(context):
        context.checklist = generateChecklist(context.project)
        context.checklist_len = len(Checklist.Query())
    createchecklist(context)


@when("^(?P<role>.*?) changes this checklist$")
def step(context, role):
    @run_with_roles(["public"])
    @run_with_project_roles(context.project, role.split(","))
    def change(context):
        try:
            operation("CDB_Modify",
                      context.checklist,
                      user_input=getChecklistAttributesToChange())
        except Exception, e:
            log("Error changing the checklist, details: %s" % e)
    return change(context)


@then("^the changed checklist is (?P<status>(?:not )?saved)$")
def step(context, status):
    s_attrs = set(getChecklistAttributesToChange().items())
    if status == "saved":
        assert s_attrs.issubset(set(context.checklist.items())), (
            "The attributes differ")
    elif status == "not saved":
        assert not s_attrs.issubset(set(context.checklist.items())), (
            "The attributes don't differ")


# ------------------------------------------------------------
# Scenario Copy Checklist
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) copies this checklist$")
def step(context, role):
    @run_with_roles(["public"])
    @run_with_project_roles(context.project, role.split(","))
    def copy(context):
        try:
            operation("CDB_Copy", context.checklist)
        except Exception, e:
            log("Error coping the checklist, details: %s" % e)
    return copy(context)


@then("^the checklist is (?P<status>(?:not )?copied|(?:not )?deleted)$")
def step(context, status):
    if status == "copied":
        assert len(Checklist.Query()) - context.checklist_len == 1, (
            "The checklist has not been copied")
    elif status == "not copied":
        assert len(Checklist.Query()) - context.checklist_len == 0, (
            "The checklist has been copied")
    elif status == "deleted":
        assert len(Checklist.Query()) - context.checklist_len == -1, (
            "The checklist has not been deleted")
    elif status == "not deleted":
        assert len(Checklist.Query()) - context.checklist_len == 0, (
            "The checklist has been deleted")


# ------------------------------------------------------------
# Scenario Delete Checklist
#
# ------------------------------------------------------------
@when("^(?P<role>.*?) deletes this checklist$")
def step(context, role):
    @run_with_project_roles(context.project, role.split(","))
    def delete(context):
        try:
            operation("CDB_Delete", context.checklist)
        except Exception, e:
            log("Error deleting the checklist, details: %s" % e)
    return delete(context)


# ------------------------------------------------------------
# Scenario Change Status Of A Checklist
#
# ------------------------------------------------------------
