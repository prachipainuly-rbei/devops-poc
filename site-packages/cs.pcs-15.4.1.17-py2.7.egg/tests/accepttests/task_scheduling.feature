# coding: utf-8

# ule: Außerdem folgende Aktionen zu prüfen:
#      - Termin ändern/verschieben: Welche Folgeänderungen für constraints?

# Konzept noch offen:
#      - MSP kann am Anfang oder Ende eines Arbeitstages terminieren (8am, 5pm). Ersteres ist bei uns der Vortag. Anpassen oder nicht?
#      - manuelle Sammelaufgabe vs ausgeschaltete Bottom-Up-Berechnung
#      - Option für ASAP: zum Projektanfang oder zu heute springen einstellen wie in MSP?
#      - Sammeltask verschieben -> mit Kindern wie in früheren PO-Versionen?
#      - do we plan to support end-to-start scheduling on project level?
#      - MSP schedules using the start or end of a working day (e.g. 8am, 5pm), what about us?
#      - for statuses != NEW, shouldn't percent_complet always be > 0; e.g. be set to 1?
#      - strategy concerning denied access?
#      - specify attribute names (cs_pcs_sched_auto, cs_pcs_sched_constraint, cs_pcs_sched_constraint_date)

Feature: Task Scheduling

    tasks are scheduled automatically if all of the following criteria are met:
        * cs_pcs_sched_auto is 1
        * cs_pcs_sched_constraint/cs_pcs_sched_constraint_date is one of
            'ASAP'/None (as soon as possible)
            'ALAP'/None (as late as possible)
            'MSO'/<date> (must start on <date>)
            'MFO'/<date> (must finish on <date>)
            'SNET'/<date> (start no earlier than <date>)
            'SNLT'/<date> (start no later than <date>)
            'FNET'/<date> (finish no earlier than <date>)
            'FNLT'/<date> (finish no later than <date>)
        * percent_complet is 0
            the system makes sure this is always the case for tasks in status NEW
        * user is granted save access on those tasks

    IMPORTANT:
        * some scenarios rely on the assumption that conditions for automatic scheduling are checked
          at the very beginning of the rescheduling algorithm, e.g. before checking constraints and links
        * tasks are created using Object.Create instead of CDB_Create, because the latter would immediately
          trigger a complete rescheduling of the project (this may make tests prone to breaking)


Background:
    # Project (08/26-09/26)
    # └ Predecessor (09/07-09/09)
    # └ Successor (09/01-09/05)

    # workdays (X=project workday, P=predecessor, S=successor):
    # 26 27 28 29 30 31 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    #  X        X  X  X  X  X        X  X  X  X  X        X  X  X  X  X        X  X  X  X  X        X
    #                                      P  P  P
    #                    S  S        S

    # tasks are NOT yet linked despite their naming
    GIVEN a project exists
        AND the project is automatically rescheduled
        AND the project starts on 2016-08-26 and ends on 2016-09-26
        AND the project's duration is 22 days
        AND a task named "Predecessor" exists
        AND the predecessor starts on 2016-09-07 and ends on 2016-09-09
        AND a task named "Successor" exists
        AND the successor starts on 2016-09-01 and ends on 2016-09-05
        AND the predecessor's duration is 3 days
        AND the successor's duration is 3 days
        AND the successor is scheduled manually


Scenario Outline: Schedule /wo links
    # task scheduling depends only on project dates; successor is never rescheduled

    GIVEN the predecessor is scheduled <constraint>
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on <pred_start> and ends on <pred_end>
        AND the successor starts on 2016-09-01 and ends on 2016-09-05

    Examples:
    | constraint      | pred_start | pred_end   |
    | manually        | 2016-09-07 | 2016-09-09 | No changes
    | ASAP            | 2016-08-26 | 2016-08-30 | Starts when project starts
    | ALAP            | 2016-09-01 | 2016-09-05 | Ends when last task ends
    | MSO 2016-09-08  | 2016-09-08 | 2016-09-12 |
    | MFO 2016-09-12  | 2016-09-08 | 2016-09-12 |
    | SNLT 2016-09-05 | 2016-08-26 | 2016-08-30 | Starts when project starts
    | SNET 2016-09-04 | 2016-09-05 | 2016-09-07 |
    | FNLT 2016-09-12 | 2016-08-26 | 2016-08-30 | Starts when project starts
    | FNET 2016-09-12 | 2016-09-08 | 2016-09-12 |


Scenario Outline: Move the start of a non-automatically scheduled project
    Given the project is not automatically rescheduled
        And the project starts on <f_prj_start> and ends on <f_prj_end>
        And the project's duration is 22 days
        And the predecessor is not automatically rescheduled
        And the successor is not automatically rescheduled
    When the project start moves to <move_start>
    Then the project starts on <prj_start> and ends on <prj_end>
        And the predecessor starts on <pred_start> and ends on <pred_end>
        And  the successor starts on <succ_start> and ends on <succ_end>

    Examples:
    | f_prj_start | f_prj_end  | move_start | prj_start  | prj_end    | pred_start | pred_end   | succ_start | succ_end   |
    | 2016-08-26  | 2016-09-26 | 2016-10-26 | 2016-10-26 | 2016-11-24 | 2016-11-07 | 2016-11-09 | 2016-11-01 | 2016-11-03 |
    # Todo E042682
#    | 0000-00-00  | 0000-00-00 | 2016-10-26 | 2016-10-26 | 2016-11-24 | 2016-11-01 | 2016-11-04 | 2016-10-26 | 2016-10-28 |


Scenario: Schedule /wo links and non-automatically-updated project
    GIVEN the predecessor is scheduled ALAP
        AND the project is not automatically rescheduled
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-09-22 and ends on 2016-09-26
        AND the successor starts on 2016-09-01 and ends on 2016-09-05


Scenario Outline: Set Task to automatic
    Given a task exists
    Given the task is set to <precondition>
    When <role> sets the task to <automatic>
    Then the task is set to <result>

    Examples:
        | role            | precondition | automatic   | result      |
        | Projektleiter   | manual	     | activated   | activated   |
        | Projektmitglied | manual 		 | activated   | deactivated |
        | Projektleiter   | automatic    | deactivated | deactivated |
        | Projektmitglied | automatic    | deactivated | activated   |


Scenario: Do Not Reschedule Running Tasks
    GIVEN the successor is scheduled ASAP
        AND the successor starts on 2016-09-01 and ends on 2016-09-05
        AND the successor's completion is 1
        AND an EA link exists between predecessor and successor
        AND the predecessor starts on 2016-09-08 and ends on 2016-09-12
    WHEN the project's tasks are rescheduled
    THEN the successor starts on 2016-09-01 and ends on 2016-09-05


Scenario: Do Not Reschedule Manual Tasks
    GIVEN the successor is scheduled manually
        AND the successor starts on 2016-09-01 and ends on 2016-09-05
        AND the successor's completion is 0
        AND an EA link exists between predecessor and successor
        AND the predecessor starts on 2016-09-08 and ends on 2016-09-12
    WHEN the project's tasks are rescheduled
    THEN the successor starts on 2016-09-01 and ends on 2016-09-05


Scenario Outline: Schedule /w Direct Predecessor
    # predecessor's dates are stable unless its duration has changed (manual schedule functionally equivalent to MSO current start)
    # they depend on scheduling constraint and link type
    # most combinations of constraint/link are tested twice: constraint preceding over the link, and vice versa

    GIVEN the successor is scheduled <constraint>
        AND an <link> link exists between predecessor and successor
        AND the predecessor starts on 2016-09-08 and ends on 2016-09-12
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-09-08 and ends on 2016-09-12
        AND the successor starts on <succ_start> and ends on <succ_end>

    Examples:
    | constraint      | link  | succ_start | succ_end   |
    | ASAP            | AA    | 2016-09-08 | 2016-09-12 |
    | ASAP            | AA+2d | 2016-09-12 | 2016-09-14 |
    | ASAP            | AA-2d | 2016-09-06 | 2016-09-08 |
    | ASAP            | AE    | 2016-09-06 | 2016-09-08 |
    | ASAP            | AE+2d | 2016-09-08 | 2016-09-12 |
    | ASAP            | AE-2d | 2016-09-02 | 2016-09-06 |
    | ASAP            | EA    | 2016-09-13 | 2016-09-15 |
    | ASAP            | EA+2d | 2016-09-15 | 2016-09-19 |
    | ASAP            | EA-2d | 2016-09-09 | 2016-09-13 |
    | ASAP            | EE    | 2016-09-08 | 2016-09-12 |
    | ASAP            | EE+2d | 2016-09-12 | 2016-09-14 |
    | ASAP            | EE-2d | 2016-09-06 | 2016-09-08 |
    | MSO 2016-09-15  | AA    | 2016-09-15 | 2016-09-19 |
    | MSO 2016-09-02  | AA    | 2016-09-02 | 2016-09-06 |
    | MSO 2016-09-15  | AE    | 2016-09-15 | 2016-09-19 |
    | MSO 2016-09-02  | AE    | 2016-09-02 | 2016-09-06 |
    | MSO 2016-09-15  | EA    | 2016-09-15 | 2016-09-19 |
    | MSO 2016-09-02  | EA    | 2016-09-02 | 2016-09-06 |
    | MSO 2016-09-15  | EE    | 2016-09-15 | 2016-09-19 |
    | MSO 2016-09-02  | EE    | 2016-09-02 | 2016-09-06 |
    | MFO 2016-09-19  | AA    | 2016-09-15 | 2016-09-19 |
    | MFO 2016-09-06  | AA    | 2016-09-02 | 2016-09-06 |
    | MFO 2016-09-19  | AE    | 2016-09-15 | 2016-09-19 |
    | MFO 2016-09-06  | AE    | 2016-09-02 | 2016-09-06 |
    | MFO 2016-09-19  | EA    | 2016-09-15 | 2016-09-19 |
    | MFO 2016-09-06  | EA    | 2016-09-02 | 2016-09-06 |
    | MFO 2016-09-19  | EE    | 2016-09-15 | 2016-09-19 |
    | MFO 2016-09-06  | EE    | 2016-09-02 | 2016-09-06 |
    | SNET 2016-09-09 | AA    | 2016-09-09 | 2016-09-13 |
    | SNET 2016-09-07 | AA    | 2016-09-08 | 2016-09-12 |
    | SNET 2016-09-07 | AE    | 2016-09-07 | 2016-09-09 |
    | SNET 2016-09-01 | AE    | 2016-09-06 | 2016-09-08 |
    | SNET 2016-09-14 | EA    | 2016-09-14 | 2016-09-16 |
    | SNET 2016-09-09 | EA    | 2016-09-13 | 2016-09-15 |
    | SNET 2016-09-09 | EE    | 2016-09-09 | 2016-09-13 |
    | SNET 2016-09-07 | EE    | 2016-09-08 | 2016-09-12 |
    | SNLT 2016-09-02 | AA    | 2016-09-02 | 2016-09-06 |
    | SNLT 2016-09-09 | AA    | 2016-09-08 | 2016-09-12 |
    | SNLT 2016-09-02 | AE    | 2016-09-02 | 2016-09-06 |
    | SNLT 2016-09-15 | EA    | 2016-09-13 | 2016-09-15 |
    | SNLT 2016-09-12 | EA    | 2016-09-12 | 2016-09-14 |
    | SNLT 2016-09-15 | EE    | 2016-09-08 | 2016-09-12 |
    | FNET 2016-09-13 | AA    | 2016-09-09 | 2016-09-13 |
    | FNET 2016-09-09 | AA    | 2016-09-08 | 2016-09-12 |
    | FNET 2016-09-13 | AE    | 2016-09-09 | 2016-09-13 |
    | FNET 2016-09-07 | AE    | 2016-09-06 | 2016-09-08 |
    | FNET 2016-09-20 | EA    | 2016-09-16 | 2016-09-20 |
    | FNET 2016-09-12 | EA    | 2016-09-13 | 2016-09-15 |
    | FNET 2016-09-20 | EE    | 2016-09-16 | 2016-09-20 |
    | FNET 2016-09-09 | EE    | 2016-09-08 | 2016-09-12 |
    | FNLT 2016-09-14 | AA    | 2016-09-08 | 2016-09-12 |
    | FNLT 2016-09-09 | AA    | 2016-09-07 | 2016-09-09 |
    | FNLT 2016-09-14 | AE    | 2016-09-06 | 2016-09-08 |
    | FNLT 2016-09-07 | AE    | 2016-09-05 | 2016-09-07 |
    | FNLT 2016-09-20 | EA    | 2016-09-13 | 2016-09-15 |
    | FNLT 2016-09-14 | EA    | 2016-09-12 | 2016-09-14 |
    | FNLT 2016-09-20 | EE    | 2016-09-08 | 2016-09-12 |
    | FNLT 2016-09-09 | EE    | 2016-09-07 | 2016-09-09 |


Scenario Outline: Schedule /w Direct Predecessor (ALAP)
    GIVEN the project <auto> automatically rescheduled
        AND the successor is scheduled ALAP
        AND an <link> link exists between predecessor and successor
        AND the predecessor starts on 2016-09-08 and ends on 2016-09-12
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-09-08 and ends on 2016-09-12
        AND the successor starts on <succ_start> and ends on <succ_end>

    Examples:
    | auto   | link  | succ_start | succ_end   |
    # ALAP, AA: see next scenario
    | is     | AA+9d | 2016-09-21 | 2016-09-23 |
    | is     | AE    | 2016-09-08 | 2016-09-12 |
    | is     | AE+4d | 2016-09-12 | 2016-09-14 |
    | is     | EA    | 2016-09-13 | 2016-09-15 |
    | is     | EE    | 2016-09-08 | 2016-09-12 |
    | is     | EE+2d | 2016-09-12 | 2016-09-14 |
    | is     | EE-2d | 2016-09-08 | 2016-09-12 |
    | is not | AA+9d | 2016-09-22 | 2016-09-26 |
    | is not | AE    | 2016-09-22 | 2016-09-26 |
    | is not | AE+4d | 2016-09-22 | 2016-09-26 |
    | is not | EA    | 2016-09-22 | 2016-09-26 |
    | is not | EE    | 2016-09-22 | 2016-09-26 |
    | is not | EE+2d | 2016-09-22 | 2016-09-26 |
    | is not | EE-2d | 2016-09-22 | 2016-09-26 |


Scenario Outline: Schedule /w Direct Predecessor (ALAP, AA) and Shorter Successor
    # corner case: successor's duration should be shorter than predecessor's

    GIVEN the project <auto> automatically rescheduled
        AND the successor is scheduled ALAP
        AND an AA link exists between predecessor and successor
        AND the successor's duration is 2 days
        AND the predecessor starts on 2016-09-08 and ends on 2016-09-12
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-09-08 and ends on 2016-09-12
        AND the successor starts on <succ_start> and ends on <succ_end>

    Examples:
    | auto   | succ_start | succ_end   |
    | is     | 2016-09-09 | 2016-09-12 |
    | is not | 2016-09-23 | 2016-09-26 |


Scenario Outline: Schedule /w Direct Predecessor (ALAP) and Unrelated Last Task
    # corner case: last task is unrelated to others, but pushes the project's end to a later date

    GIVEN the project <auto> automatically rescheduled
        AND the successor is scheduled ALAP
        AND an EA link exists between predecessor and successor
        AND the successor's duration is 2 days
        AND the predecessor starts on 2016-09-08 and ends on 2016-09-12
        AND a task named "Third Task" exists
        AND the third task starts on 2016-09-16 and ends on 2016-09-16
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-09-08 and ends on 2016-09-12
        AND the successor starts on <succ_start> and ends on <succ_end>

    Examples:
    | auto   | succ_start | succ_end   |
    | is     | 2016-09-15 | 2016-09-16 |
    | is not | 2016-09-23 | 2016-09-26 |


Scenario Outline: Schedule /w Direct Successor (ALAP)
    GIVEN the predecessor is scheduled ALAP
        AND the predecessor's duration is <days> days
        AND the successor is scheduled SNET 2016-09-12
        AND an <link> link exists between predecessor and successor
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on <pred_start> and ends on <pred_end>
        AND the successor starts on 2016-09-12 and ends on 2016-09-14

    Examples:
    | link  | days | pred_start | pred_end   |
    | AA    | 2    | 2016-09-12 | 2016-09-13 |
    | AA    | 4    | 2016-09-12 | 2016-09-15 |
    | AE    | 3    | 2016-09-14 | 2016-09-16 |
    | EA    | 3    | 2016-09-07 | 2016-09-09 |
    | EE    | 2    | 2016-09-13 | 2016-09-14 |
    | EE    | 4    | 2016-09-09 | 2016-09-14 |


# Scenario Outline: Predecessor is Summary Task
#     # Project
#     # └ Predecessor
#     #   └ Predecessor Child (09/08-09/12)
#     # └ Successor
#     #
#     # Predecessor -EA-> Successor
#
#     GIVEN the successor is scheduled ASAP
#         AND the project <proj_auto> automatically rescheduled
#         AND the predecessor <pred_auto> automatically rescheduled
#         AND the predecessor has a child task
#         AND the predecessor child's duration is 3 days
#         AND the predecessor child starts on 2016-09-08 and ends on 2016-09-12
#         AND an EA link exists between predecessor and successor
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor child starts on 2016-09-08 and ends on 2016-09-12
#         AND the predecessor starts on <pred_start> and ends on <pred_end>
#         AND the successor starts on <succ_start> and ends on <succ_end>
#
#     Examples:
#     | proj_auto | pred_auto | pred_start | pred_end   | succ_start | succ_end   |
#     | is        | is        | 2016-09-08 | 2016-09-12 | 2016-09-13 | 2016-09-15 |
#     | is not    | is        | 2016-09-08 | 2016-09-12 | 2016-09-13 | 2016-09-15 |
#     | is        | is not    | 2016-09-07 | 2016-09-09 | 2016-09-08 | 2016-09-12 |
#     | is not    | is not    | 2016-08-26 | 2016-08-30 | 2016-08-31 | 2016-09-02 |
#
#
# Scenario Outline: Successor is manual Summary Task
#     # Project
#     # └ Predecessor (ALAP)
#     # └ Successor (manually)
#     #   └ Successor Child (manually)
#     #
#     # Predecessor -EA-> Successor
#
#     GIVEN the predecessor is scheduled ALAP
#         AND the successor is scheduled manually
#         AND the successor's duration is <succ_dur> days
#         AND the successor starts on 2016-09-08 and ends on <succ_end_giv>
#         AND the successor has a child task
#         AND the successor child is scheduled ASAP
#         AND the successor child's duration is <child_dur> days
#         AND the successor child starts on 2016-09-06 and ends on <child_end_giv>
#         AND an EA link exists between predecessor and successor
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor starts on 2016-09-05 and ends on 2016-09-07
#         AND the successor starts on 2016-09-08 and ends on <succ_end_giv>
#         AND the successor child starts on 2016-09-08 and ends on <child_end>
#
#     Examples:
#     | succ_dur | succ_end_giv | child_dur | child_end_giv | child_end  |
#     | 3        | 2016-09-12   | 2         | 2016-09-07    | 2016-09-09 |
#     | 2        | 2016-09-09   | 3         | 2016-09-08    | 2016-09-12 |
#
#
# Scenario Outline: Successor is Summary Task, Summary task and child task with constraints
#     # Project
#     # └ Predecessor
#     # └ Successor
#     #   └ Successor Child (09/08-09/09)
#     #
#     # Predecessor -EA-> Successor
#
#     GIVEN the predecessor is scheduled ASAP
#         AND the successor is scheduled <succ_constraint>
#         AND the successor has a child task
#         AND the successor child's duration is 2 days
#         AND the successor child starts on 2016-09-08 and ends on 2016-09-09
#         AND the successor child is scheduled <child_constraint>
#         AND an EA link exists between predecessor and successor
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
#         AND the successor starts on <succ_start> and ends on <succ_end>
#         AND the successor child starts on <child_start> and ends on <child_end>
#
#     Examples:
#     | succ_constraint | child_constraint | succ_start | succ_end   | child_start | child_end  |
#     | FNLT 2016-09-05 | ASAP             | 2016-08-31 | 2016-09-02 | 2016-09-01  | 2016-09-02 |
#     | FNLT 2016-09-05 | SNET 2016-09-07  | 2016-09-01 | 2016-09-05 | 2016-09-02  | 2016-09-05 |
#     | SNET 2016-09-08 | FNLT 2016-09-06  | 2016-09-08 | 2016-09-12 | 2016-09-09  | 2016-09-12 |
#
#
# Scenario Outline: Predecessor and Successor are Summary Tasks
#     # Project
#     # └ Predecessor
#     #   └ Predecessor Child
#     # └ Successor
#     #   └ Successor Child
#     # └ Third Task (unrelated, 09/19)
#     #
#     # Predecessor -EA-> Successor
#     #
#     # children are expected to share their parents' dates
#     # ASAP: pred + child pushes succ + child back from project start
#     # ALAP: third task determines project end, pushes others back
#
#     GIVEN the predecessor is scheduled ASAP
#         AND the predecessor has a child task
#         AND the predecessor child's duration is 3 days
#         AND the predecessor child is scheduled <mode>
#         AND the successor has a child task
#         AND the successor child's duration is 3 days
#         AND the successor child is scheduled <mode>
#         AND a task named "Third Task" exists
#         AND the third task's duration is 1 day
#         AND the third task starts on 2016-09-19 and ends on 2016-09-19
#         AND an EA link exists between predecessor and successor
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor starts on <pred_start> and ends on <pred_end>
#         AND the predecessor child starts on <pred_start> and ends on <pred_end>
#         AND the successor starts on <succ_start> and ends on <succ_end>
#         AND the successor child starts on <succ_start> and ends on <succ_end>
#
#     Examples:
#     | mode | pred_start | pred_end   | succ_start | succ_end   |
#     | ASAP | 2016-08-26 | 2016-08-30 | 2016-09-01 | 2016-09-05 |
#     | ALAP | 2016-09-12 | 2016-09-14 | 2016-09-15 | 2016-09-19 |
#

Scenario: Link to Summary Task, Constraint in Child Task
    # Project
    # └ Predecessor (ASAP)
    # └ Successor (ASAP)
    #   └ Successor Child (FNET 09/05)
    #
    # Predecessor -EA-> Successor
    #
    # succ child pushes succ back to create a 1 day gap between pred and succ

    GIVEN the predecessor is scheduled ASAP
        AND the successor is scheduled ASAP
        AND the successor has a child task
        AND the successor child's duration is 3 days
        AND the successor child is scheduled FNET 2016-09-05
        AND an EA link exists between predecessor and successor
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
        AND the successor starts on 2016-09-01 and ends on 2016-09-05
        AND the successor child starts on 2016-09-01 and ends on 2016-09-05


# Scenario: Link to Child Task, Constraint in Summary Task
#     # Project
#     # └ Predecessor (ASAP)
#     # └ Successor (FNET 09/05)
#     #   └ Successor Child (ASAP)
#     #
#     # Predecessor -EA-> Successor Child
#     #
#     # succ constraint pushes it and its child back to create 1 day gap to pred
#
#     GIVEN the predecessor is scheduled ASAP
#         AND the successor is scheduled FNET 2016-09-05
#         AND the successor has a child task
#         AND the successor child's duration is 3 days
#         AND the successor child is scheduled ASAP
#         AND an EA link exists between predecessor and successor child
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
#         AND the successor starts on 2016-09-01 and ends on 2016-09-05
#         AND the successor child starts on 2016-09-01 and ends on 2016-09-05
#
#
# Scenario: Child Already Running
#     # Project
#     # └ Predecessor (ASAP)
#     # └ Successor (ASAP)
#     #   └ Successor Child (09/02)
#     #
#     # Predecessor -EA-> Successor
#     #
#     # successor and child are not pulled forward by pred
#
#     GIVEN the predecessor is scheduled ASAP
#         AND the successor is scheduled ASAP
#         AND the successor has a child task
#         AND the successor child's completion is 1
#         AND the successor child's duration is 3 days
#         AND the successor child starts on 2016-09-02 and ends on 2016-09-06
#         AND an EA link exists between predecessor and successor
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
#         AND the successor starts on 2016-09-02 and ends on 2016-09-06
#         AND the successor child starts on 2016-09-02 and ends on 2016-09-06
#
#
# Scenario: Link to Summary Task, Children Unrelated
#     # Project
#     # └ Predecessor (ASAP)
#     # └ Successor (ASAP)
#     #   └ First Child (ASAP)
#     #   └ Second Child (SNET 09/05)
#     #   └ Third Child (SNET 09/08)
#     #
#     # Predecessor -EA-> Successor
#     #
#     # succ duration is increased by first child pulling forward, other children stay put
#
#     GIVEN the predecessor is scheduled ASAP
#         AND the successor is scheduled ASAP
#         AND the successor has three child tasks
#         AND the first child's duration is 2 days
#         AND the first child is scheduled ASAP
#         AND the second child's duration is 1 day
#         AND the second child is scheduled SNET 2016-09-05
#         AND the third child's duration is 1 day
#         AND the third child is scheduled SNET 2016-09-08
#         AND an EA link exists between predecessor and successor
#     WHEN the project's tasks are rescheduled
#     THEN the third child starts on 2016-09-08 and ends on 2016-09-08
#         AND the second child starts on 2016-09-05 and ends on 2016-09-05
#         AND the first child starts on 2016-08-31 and ends on 2016-09-01
#         AND the successor starts on 2016-08-31 and ends on 2016-09-08
#         AND the predecessor starts on 2016-08-26 and ends on 2016-08-30
#
#
# Scenario: Predecessor is Summary Task /w Child Scheduled ALAP
#     # Project
#     # └ Predecessor (ASAP)
#     #   └ Predecessor Child (ALAP)
#     # └ Successor (ASAP)
#     # └ Third Task (unrelated, SNET 09/09)
#     #
#     # Predecessor -EA-> Successor
#     #
#     # third task pulls others away from project start
#
#     GIVEN the predecessor is scheduled ASAP
#         AND the successor is scheduled ASAP
#         AND the predecessor has a child task
#         AND the predecessor child's duration is 2 days
#         AND the predecessor child is scheduled ALAP
#         AND the successor's duration is 2 days
#         AND a task named "Third Task" exists
#         AND the third task's duration is 1 day
#         AND the third task is scheduled SNET 2016-09-09
#         AND an EA link exists between predecessor and successor
#     WHEN the project's tasks are rescheduled
#     THEN the third task starts on 2016-09-09 and ends on 2016-09-09
#         AND the successor starts on 2016-09-08 and ends on 2016-09-09
#         AND the predecessor child starts on 2016-09-06 and ends on 2016-09-07
#         AND the predecessor starts on 2016-09-06 and ends on 2016-09-07
#
#
# Scenario: Child Constraint Precedes Summary Task's Constraint
#     # Project
#     # └ Predecessor (SNET 09/06)
#     #   └ Predecessor Child (FNLT 09/01)
#     #
#     # no links, succ is ignored
#     # predecessor's constraint is violated by its child
#     # TODO pred + child _could_ be pushed back another day to match pred's constraint as much as possible
#
#     GIVEN the predecessor is scheduled SNET 2016-09-06
#         AND the predecessor has a child task
#         AND the predecessor child's duration is 3 days
#         AND the predecessor child is scheduled FNLT 2016-09-01
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor child starts on 2016-08-26 and ends on 2016-08-30
#         AND the predecessor starts on 2016-08-26 and ends on 2016-08-30
#
#
# Scenario: Linked Child Constraint Precedes Summary Task's Constraint
#     # Project
#     # └ Predecessor (FNLT 09/05)
#     #   └ Predecessor Child (ALAP)
#     # └ Successor (SNET 09/07)
#     #
#     # Predecessor Child -EA-> Successor
#     #
#     # pred child overrides pred's constraint by pushing it back too far
#
#     GIVEN the predecessor is scheduled FNLT 2016-09-05
#         AND the predecessor has a child task
#         AND the predecessor child's duration is 2 days
#         AND the predecessor child is scheduled ALAP
#         AND the successor's duration is 2 days
#         AND the successor is scheduled SNET 2016-09-07
#         AND an EA link exists between predecessor child and successor
#     WHEN the project's tasks are rescheduled
#     THEN the successor starts on 2016-09-07 and ends on 2016-09-08
#         AND the predecessor starts on 2016-09-03 and ends on 2016-09-06
#         AND the predecessor child starts on 2016-09-03 and ends on 2016-09-06
#
#
# Scenario: Summary Task and Child are Both Linked
#     # Project
#     # └ Predecessor (ASAP)
#     # └ Second Predecessor (SNET 09/04)
#     # └ Successor (ASAP, successor to Second Predecessor)
#     #   └ Successor Child (ASAP, actual successor to Predecessor)
#     #
#     # Predecessor -EA-> Successor Child
#     # Second Predecessor -EA-> Successor
#     #
#     # TODO what is this test's purpose again?
#
#     GIVEN the predecessor is scheduled ASAP
#         AND a task named "Second Predecessor" exists
#         AND the second predecessor's duration is 3 days
#         AND the second predecessor is scheduled SNET 2016-09-04
#         AND the successor is scheduled ASAP
#         AND the successor has a child task
#         AND the successor child's duration is 2 days
#         AND the successor child is scheduled ASAP
#         AND an EA link exists between predecessor and successor child
#         AND an EA link exists between second predecessor and successor
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
#         AND the second predecessor starts on 2016-09-05 and ends on 2016-09-07
#         AND the successor starts on 2016-09-08 and ends on 2016-09-12
#         AND the successor child starts on 2016-09-08 and ends on 2016-09-09
#

Scenario Outline: Predecessor is Milestone
    # Project
    # └ Predecessor (Milestone, 09/07)
    # └ Successor (various constraints/links)
    #
    # Predecessor -<link>-> Successor

    GIVEN the predecessor is a milestone
        AND the predecessor starts on 2016-09-07 and ends on 2016-09-07
        AND the successor is scheduled ASAP
        AND an <link> link exists between predecessor and successor
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-09-07 and ends on 2016-09-07
        AND the successor starts on <succ_start> and ends on <succ_end>

    Examples:
    | link  | succ_start | succ_end   |
    | AA    | 2016-09-08 | 2016-09-12 |
    | AA+2d | 2016-09-12 | 2016-09-14 |
    | AA-2d | 2016-09-06 | 2016-09-08 |
    | AE    | 2016-09-05 | 2016-09-07 |
    | AE+2d | 2016-09-07 | 2016-09-09 |
    | AE-2d | 2016-09-01 | 2016-09-05 |
    | EA    | 2016-09-08 | 2016-09-12 |
    | EA+2d | 2016-09-12 | 2016-09-14 |
    | EA-2d | 2016-09-06 | 2016-09-08 |
    | EE    | 2016-09-05 | 2016-09-07 |
    | EE+2d | 2016-09-07 | 2016-09-09 |
    | EE-2d | 2016-09-01 | 2016-09-05 |


Scenario Outline: Successor is Milestone
    # Project
    # └ Predecessor (09/07-09/09)
    # └ Successor (Milestone)
    #
    # Predecessor -<link>-> Successor

    GIVEN the successor is a milestone
        AND the successor is scheduled ASAP
        AND an <link> link exists between predecessor and successor
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-09-07 and ends on 2016-09-09
        AND the successor starts on <succ_date> and ends on <succ_date>

    Examples:
    | link  | succ_date  |
    | AA    | 2016-09-07 |
    | AA+2d | 2016-09-09 |
    | AA-2d | 2016-09-05 |
    | AE    | 2016-09-07 |
    | AE+2d | 2016-09-09 |
    | AE-2d | 2016-09-05 |
    | EA    | 2016-09-09 |
    | EA+2d | 2016-09-13 |
    | EA-2d | 2016-09-07 |
    | EE    | 2016-09-09 |
    | EE+2d | 2016-09-13 |
    | EE-2d | 2016-09-07 |

#
# Scenario: Milestone in Summary Task
#     # Project
#     # └ Predecessor (ASAP)
#     # └ Successor (ASAP)
#     #   └ First Child (Milestone, ASAP)
#     #   └ Second Child (SNET 09/08)
#     #
#     # Predecessor -EA-> Successor
#
#     GIVEN the predecessor is scheduled ASAP
#         AND the successor is scheduled ASAP
#         AND the successor has two child tasks
#         AND the first child is a milestone
#         AND the first child is scheduled ASAP
#         AND the second child's duration is 2 days
#         AND the second child is scheduled SNET 2016-09-08
#         AND an EA link exists between predecessor and successor
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
#         AND the first child starts on 2016-08-30 and ends on 2016-08-30
#         AND the second child starts on 2016-09-08 and ends on 2016-09-09
#         AND the successor starts on 2016-08-30 and ends on 2016-09-09
#
#
# Scenario: Milestone Links
#     # Project
#     # └ Predecessor (ASAP)
#     # └ Milestone (ASAP)
#     # └ Successor (ASAP)
#     #
#     # Predecessor -EA-> Milestone -EA-> Successor
#
#     GIVEN the predecessor is scheduled ASAP
#         AND the successor is scheduled ASAP
#         AND a task named "Milestone" exists
#         AND the milestone is a milestone
#         AND the milestone is scheduled ASAP
#         AND an EA link exists between predecessor and milestone
#         AND an EA link exists between milestone and successor
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
#         AND the milestone starts on 2016-08-30 and ends on 2016-08-30
#         AND the successor starts on 2016-08-31 and ends on 2016-09-02

# FIXME convoluted...
Scenario Outline: Summary Task /w Manual Scheduling, Constrained Children
    # Project
    # └ Predecessor (ASAP)
    # └ Successor
    #   └ First Child
    #   └ Second Child
    #   └ Third Child (ALAP)
    #
    # Predecessor -EA-> Successor

    GIVEN the predecessor is scheduled ASAP
        AND the successor is scheduled <succ_constraint>
        AND the successor has three child tasks
        AND the first child starts on 2016-08-29 and ends on 2016-08-30
        AND the first child's duration is 2 days
        AND the first child is scheduled <c1_constraint>
        AND the second child starts on 2016-09-02 and ends on 2016-09-02
        AND the second child's duration is 1 day
        AND the second child is scheduled <c2_constraint>
        AND the third child's duration is 2 day
        AND the third child is scheduled ALAP
        AND the successor starts on 2016-08-29 and ends on 2016-09-02
        AND an EA link exists between predecessor and successor
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
        AND the <manual_task> starts on <manual_start> and ends on <manual_end>
        AND the third child starts on <c3_start> and ends on <c3_end>

    Examples:
    | succ_constraint | c1_constraint | c2_constraint | manual_task  | manual_start | manual_end | c3_start   | c3_end     |
    # fails | manually        | ASAP          | ASAP          | successor    | 2016-09-01   | 2016-09-05 | 2016-09-02 | 2016-09-05 |
    # fails | ASAP            | manually      | ASAP          | first child  | 2016-08-29   | 2016-08-30 | 2016-08-31 | 2016-09-01 | violates link
    | ASAP            | ASAP          | manually      | second child | 2016-09-02   | 2016-09-02 | 2016-09-01 | 2016-09-02 |

# FIXME even more convoluted...
# Scenario Outline: Summary Task /w Manual Scheduling
#     # Project
#     # └ Predecessor (ASAP)
#     # └ Successor (ASAP)
#     #   └ First Child (ASAP)
#     #   └ Second Child (ASAP)
#     #
#     # Predecessor -EA-> Successor
#     # First Child -EA-> Second Child
#
#     GIVEN the predecessor is scheduled ASAP
#         AND the successor is scheduled <succ_constraint>
#         AND the successor has two child tasks
#         AND the first child starts on 2016-08-29 and ends on 2016-08-30
#         AND the first child's duration is 2 days
#         AND the first child is scheduled <c1_constraint>
#         AND the second child starts on 2016-09-02 and ends on 2016-09-02
#         AND the second child's duration is 1 day
#         AND the second child is scheduled <c2_constraint>
#         AND the <manual_task> starts on <manual_start> and ends on <manual_end>
#         AND an EA link exists between predecessor and successor
#         AND an EA link exists between first child and second child
#     WHEN the project's tasks are rescheduled
#     THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
#         AND the <manual_task> starts on <manual_start> and ends on <manual_end>
#         AND the <x1> starts on <x1_start> and ends on <x1_end>
#         AND the <x2> starts on <x2_start> and ends on <x2_end>
#
#     Examples:
#     | succ_constraint | c1_constraint | c2_constraint | manual_task  | manual_start | manual_end | x1          | x1_start   | x1_end     | x2           | x2_start   | x2_end     |
#     | manually        | ASAP          | ASAP          | successor    | 2016-09-01   | 2016-09-05 | first child | 2016-09-01 | 2016-09-02 | second child | 2016-09-05 | 2016-09-05 |
#     | ASAP            | manually      | ASAP          | first child  | 2016-08-29   | 2016-08-30 | successor   | 2016-08-29 | 2016-08-31 | second child | 2016-08-31 | 2016-08-31 | violates first link
#     | ASAP            | ASAP          | manually      | second child | 2016-09-02   | 2016-09-02 | successor   | 2016-08-31 | 2016-09-02 | first child  | 2016-08-31 | 2016-09-01 |
#

Scenario Outline: ASAP-Scheduled Tasks Following ALAP-Scheduled Task
    # Project
    # └ Predecessor (ASAP, duration 3)
    # └ Successor (ALAP, duration 3)
    # └ Third Task (various, duration 1)
    # └ Fourth Task (SNET 09/15, duration 1)
    #
    # Predecessor -EA-> Successor -EA-> Third Task

    GIVEN the predecessor is scheduled ASAP
        AND the successor is scheduled ALAP
        AND a task named "Third Task" exists
        AND the third task's duration is 1 day
        AND the third task starts on 2016-09-09 and ends on 2016-09-09
        AND the third task is scheduled <t3_constraint>
        AND a task named "Fourth Task" exists
        AND the fourth task's duration is 1 day
        AND the fourth task is scheduled SNET 2016-09-15
        AND an EA link exists between predecessor and successor
        AND an EA link exists between successor and third task
    WHEN the project's tasks are rescheduled
    THEN the predecessor starts on 2016-08-26 and ends on 2016-08-30
        AND the successor starts on <succ_start> and ends on <succ_end>
        AND the third task starts on <t3_date> and ends on <t3_date>
        AND the fourth task starts on 2016-09-15 and ends on 2016-09-15

    Examples:
    | t3_constraint   | succ_start | succ_end   | t3_date    |
    | ASAP            | 2016-09-12 | 2016-09-14 | 2016-09-15 |
    | SNLT 2016-09-13 | 2016-09-08 | 2016-09-12 | 2016-09-13 |
    | manually        | 2016-09-06 | 2016-09-08 | 2016-09-09 |

# FIXME move to another feature (this is link mgmt not scheduling)
#
# Scenario: No Links Between Parent and Child
#     GIVEN the predecessor has a child task
#     WHEN Projektleiter tries to create an EA link between predecessor and predecessor child
#     THEN a link has not been created

# FIXME not yet implemented?
# Scenario Outline: Constraint Date May Not Invalidate Deadline
#     GIVEN the predecessor is scheduled <constraint>
#         AND the predecessor starts on 2016-09-07 and ends on 2016-09-08
#     WHEN Projektleiter changes the predecessor's <attribute> attribute to <value>
#     THEN the predecessor's <attribute2> attribute is <value2>
#
#     Examples:
#     | constraint      | attribute        | value      | attribute2       | value2     |
#     | SNET 2016-09-07 | constraint_date  | 2016-09-08 | start_time_fcast | 2016-09-08 |
#     | SNET 2016-09-07 | constraint_date  | 2016-09-06 | start_time_fcast | 2016-09-07 |
#     | SNET 2016-09-07 | start_time_fcast | 2016-09-08 | constraint_date  | 2016-09-07 |
#     | SNET 2016-09-07 | start_time_fcast | 2016-09-06 | constraint_date  | 2016-09-06 |
#
#     | SNLT 2016-09-07 | constraint_date  | 2016-09-08 | start_time_fcast | 2016-09-07 |
#     | SNLT 2016-09-07 | constraint_date  | 2016-09-06 | start_time_fcast | 2016-09-06 |
#     | SNLT 2016-09-07 | start_time_fcast | 2016-09-08 | constraint_date  | 2016-09-08 |
#     | SNLT 2016-09-07 | start_time_fcast | 2016-09-06 | constraint_date  | 2016-09-07 |
#
#     | FNET 2016-09-07 | constraint_date  | 2016-09-08 | end_time_fcast   | 2016-09-08 |
#     | FNET 2016-09-07 | constraint_date  | 2016-09-06 | end_time_fcast   | 2016-09-07 |
#     | FNET 2016-09-07 | end_time_fcast   | 2016-09-08 | constraint_date  | 2016-09-07 |
#     | FNET 2016-09-07 | end_time_fcast   | 2016-09-06 | constraint_date  | 2016-09-06 |
#
#     | SNLT 2016-09-07 | constraint_date  | 2016-09-08 | end_time_fcast   | 2016-09-07 |
#     | SNLT 2016-09-07 | constraint_date  | 2016-09-06 | end_time_fcast   | 2016-09-06 |
#     | SNLT 2016-09-07 | end_time_fcast   | 2016-09-08 | constraint_date  | 2016-09-08 |
#     | SNLT 2016-09-07 | end_time_fcast   | 2016-09-06 | constraint_date  | 2016-09-07 |
#
#     | MSO 2016-09-07  | constraint_date  | 2016-09-08 | start_time_fcast | 2016-09-08 |
#     | MSO 2016-09-07  | constraint_date  | 2016-09-06 | start_time_fcast | 2016-09-06 |
#     | MSO 2016-09-07  | start_time_fcast | 2016-09-08 | constraint_date  | 2016-09-08 |
#     | MSO 2016-09-07  | start_time_fcast | 2016-09-06 | constraint_date  | 2016-09-06 |
#
#     | MFO 2016-09-07  | constraint_date  | 2016-09-08 | end_time_fcast   | 2016-09-08 |
#     | MFO 2016-09-07  | constraint_date  | 2016-09-06 | end_time_fcast   | 2016-09-06 |
#     | MFO 2016-09-07  | end_time_fcast   | 2016-09-08 | constraint_date  | 2016-09-08 |
#     | MFO 2016-09-07  | end_time_fcast   | 2016-09-06 | constraint_date  | 2016-09-06 |
#
#
# Scenario: Prevent Circular Links
#     # note: circular links _should_ be independent of actual link type, only test one case
#     GIVEN an EA link exists between predecessor and successor
#     WHEN Projektleiter tries to create an EA link between successor and predecessor
#     THEN a link has not been created
#
#
# Scenario: Prevent Circular Links Across Multiple Tasks
#     GIVEN a task named "Third Task" exists
#         AND an EA link exists between predecessor and successor
#         AND an EA link exists between successor and third task
#     WHEN Projektleiter tries to create an EA link between third task and predecessor
#     THEN a link has not been created
#
#
# Scenario: Delete Only Predecessor
#     GIVEN successor is scheduled ASAP
#         AND the successor starts on 2016-09-12 and ends on 2016-09-15
#         AND an EA link exists between predecessor and successor
#     WHEN Projektleiter deletes the predecessor
#     THEN the successor starts on 2016-09-01 and ends on 2016-09-05
