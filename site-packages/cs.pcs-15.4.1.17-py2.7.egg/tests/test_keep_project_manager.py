#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2018 CONTACT Software GmbH
# All rights reserved.
# https://www.contact-software.com/

"""
Test Module test_keep_project_manager

It is tested whether at least one project manager remains in the project
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: test_keep_project_manager.py 184404 2018-09-26 09:29:53Z umu $"

import unittest
import sys
import traceback
import logging
from cdb import testcase
# noinspection PyUnresolvedReferences
from cdb.constants import kOperationNew
from cdb.constants import kOperationDelete
from cdb.objects import Object
from cdb.objects.org import Person
from cdb.objects.operations import operation

from cs.pcs.projects import Project
from cs.pcs.projects.tasks import Task
from cs.pcs.projects import SubjectAssignment
from cs.pcs.projects import TeamMember


class ProjectRoleDef(Object):
    __classname__ = "cdbpcs_role_def"
    __maps_to__ = "cdbpcs_role_def"


# Tests
class TestKeepProjectManager(testcase.RollbackTestCase):
    """
    Testcase with one account only
    Project
      Manager      caddok     delete (caddok) --> False
      Assistant    caddok     delete (caddok) --> True
      Stakeholder  caddok     delete (caddok) --> True
      Member       caddok     delete (caddok) --> False

    Testcase with two accounts
    Project
      Manager      caddok + nosetest    delete (caddok) --> True
      Assistant    caddok               delete (caddok) --> True
      Stakeholder  caddok               delete (caddok) --> True
      Member       caddok + nosetest    delete (caddok) --> True
    """

    additional_roles = [
        {'name': 'Stakeholder',
         'name_ml_de': 'Interessenvertreter',
         'name_ml_en': 'Stakeholder',
         'obsolete': 0,
         },
    ]

    first_role_set = [
        "Projektmitglied",
        "Projektleiter",
        "Projektassistent",
    ]

    second_role_set = [
        "Projektmitglied",
        "Projektleiter",
    ]

    second_account = None

    def _setup_project(self):
        self.project = operation(kOperationNew,
                                 Project,
                                 cdb_project_id="#",
                                 project_name="project name")

    def _create_project_roles(self):
        for default_role in self.first_role_set:
            self.project.createRole(default_role)

    def get_person(self, personalnummer='caddok'):
        return Person.ByKeys(personalnummer)

    def _create_additional_role_definition(self):
        for additional_role in self.additional_roles:
            role = ProjectRoleDef.Create(**additional_role)
            self.first_role_set.append(role.name)

    def _create_second_account(self):
        source = self.get_person()
        self.second_account = source.Copy(personalnummer="nose_test",
                                          login='nn',
                                          lastname='nose',
                                          firstname='test',
                                          name='nose, test')

    def _preparation_first_account(self):
        self._create_additional_role_definition()
        self._setup_project()
        self._create_project_roles()
        for role_id in self.first_role_set:
            role = self.project.getRole(role_id=role_id)
            role.assignSubject(self.get_person())
        self.project.assignTeamMember(self.get_person())

    def _preparation_second_account(self):
        self._create_second_account()
        for role_id in self.second_role_set:
            role = self.project.getRole(role_id=role_id)
            role.assignSubject(self.second_account)
        self.project.assignTeamMember(self.second_account)

    # Test cases using one account only

    def test_remove_project_member_using_one_account(self):
        role = 'Projektmitglied'
        expected_result = False
        self._preparation_first_account()
        role_assignment = SubjectAssignment.KeywordQuery(cdb_project_id=self.project.cdb_project_id,
                                                         role_id=role,
                                                         subject_id='caddok',
                                                         subject_type='Person')
        try:
            operation(kOperationDelete, role_assignment[0])
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)

    def test_remove_project_manager_using_one_account(self):
        role = 'Projektleiter'
        expected_result = False
        self._preparation_first_account()
        role_assignment = SubjectAssignment.KeywordQuery(cdb_project_id=self.project.cdb_project_id,
                                                         role_id=role,
                                                         subject_id='caddok',
                                                         subject_type='Person')
        try:
            operation(kOperationDelete, role_assignment[0])
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)

    def test_remove_project_assistant_using_one_account(self):
        role = 'Projektassistent'
        expected_result = True
        self._preparation_first_account()
        role_assignment = SubjectAssignment.KeywordQuery(cdb_project_id=self.project.cdb_project_id,
                                                         role_id=role,
                                                         subject_id='caddok',
                                                         subject_type='Person')
        try:
            operation(kOperationDelete, role_assignment[0])
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)

    def test_remove_stakeholder_using_one_account(self):
        role = 'Stakeholder'
        expected_result = True
        self._preparation_first_account()
        role_assignment = SubjectAssignment.KeywordQuery(cdb_project_id=self.project.cdb_project_id,
                                                         role_id=role,
                                                         subject_id='caddok',
                                                         subject_type='Person')
        try:
            operation(kOperationDelete, role_assignment[0])
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)

    def test_remove_team_member_using_one_account(self):
        expected_result = False
        self._preparation_first_account()
        team_member = TeamMember.ByKeys(cdb_project_id=self.project.cdb_project_id,
                                        cdb_person_id='caddok')
        try:
            operation(kOperationDelete, team_member)
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)

    # Test cases using two accounts

    def test_remove_project_member_using_two_accounts(self):
        role = 'Projektmitglied'
        expected_result = True
        self._preparation_first_account()
        self._preparation_second_account()
        role_assignment = SubjectAssignment.KeywordQuery(cdb_project_id=self.project.cdb_project_id,
                                                         role_id=role,
                                                         subject_id='caddok',
                                                         subject_type='Person')
        try:
            operation(kOperationDelete, role_assignment[0])
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)

    def test_remove_project_manager_using_two_accounts(self):
        role = 'Projektleiter'
        expected_result = True
        self._preparation_first_account()
        self._preparation_second_account()
        role_assignment = SubjectAssignment.KeywordQuery(cdb_project_id=self.project.cdb_project_id,
                                                         role_id=role,
                                                         subject_id='caddok',
                                                         subject_type='Person')
        try:
            operation(kOperationDelete, role_assignment[0])
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)

    def test_remove_project_assistant_using_two_accounts(self):
        role = 'Projektassistent'
        expected_result = True
        self._preparation_first_account()
        self._preparation_second_account()
        role_assignment = SubjectAssignment.KeywordQuery(cdb_project_id=self.project.cdb_project_id,
                                                         role_id=role,
                                                         subject_id='caddok',
                                                         subject_type='Person')
        try:
            operation(kOperationDelete, role_assignment[0])
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)

    def test_remove_stakeholder_using_two_accounts(self):
        role = 'Stakeholder'
        expected_result = True
        self._preparation_first_account()
        self._preparation_second_account()
        role_assignment = SubjectAssignment.KeywordQuery(cdb_project_id=self.project.cdb_project_id,
                                                         role_id=role,
                                                         subject_id='caddok',
                                                         subject_type='Person')
        try:
            operation(kOperationDelete, role_assignment[0])
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)

    def test_remove_team_member_using_two_accounts(self):
        expected_result = True
        self._preparation_first_account()
        self._preparation_second_account()
        team_member = TeamMember.ByKeys(cdb_project_id=self.project.cdb_project_id,
                                        cdb_person_id='caddok')
        try:
            operation(kOperationDelete, team_member)
            op_result = True
        except RuntimeError:
            op_result = False
            msg = "".join(traceback.format_exception(*sys.exc_info()))
            logging.warning(msg)
        self.assertEqual(expected_result, op_result)


# Allow running this testfile directly
if __name__ == "__main__":
    unittest.main()
