Ember.TEMPLATES["base_date-picker"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('  <input type="text"\r\n       ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":date :editable view.changeable::disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n       ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                value: "view.formattedDate"
            },
            hashTypes: {
                value: "STRING"
            },
            hashContexts: {
                value: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(' tabindex = "0"/>\r\n');
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('  <input type="text"\r\n       ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":date view.changeable::disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n       ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                value: "view.formattedDate"
            },
            hashTypes: {
                value: "STRING"
            },
            hashContexts: {
                value: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(' disabled="disabled"/>\r\n');
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "view.changeable", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        stack1 = helpers.unless.call(depth0, "view.changeable", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(3, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("      \r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/base-chart-left-panel"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push(escapeExpression((helpers["base-schedule-table"] || depth0 && depth0["base-schedule-table"] || helperMissing).call(depth0, {
            name: "base-schedule-table",
            hash: {
                chartType: "chartType",
                model: "model",
                settings: "settings"
            },
            hashTypes: {
                chartType: "ID",
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                chartType: depth0,
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        data.buffer.push(escapeExpression((helpers["base-scroll-bar"] || depth0 && depth0["base-scroll-bar"] || helperMissing).call(depth0, {
            name: "base-scroll-bar",
            hash: {
                model: "model",
                settings: "settings"
            },
            hashTypes: {
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        data.buffer.push(escapeExpression((helpers["base-column-selector"] || depth0 && depth0["base-column-selector"] || helperMissing).call(depth0, {
            name: "base-column-selector",
            hash: {
                model: "settings"
            },
            hashTypes: {
                model: "ID"
            },
            hashContexts: {
                model: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        stack1 = helpers._triageMustache.call(depth0, "yield", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/base-chart-right-panel"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push(escapeExpression((helpers["base-time-scale-header"] || depth0 && depth0["base-time-scale-header"] || helperMissing).call(depth0, {
            name: "base-time-scale-header",
            hash: {
                settings: "settings",
                model: "settings.scale"
            },
            hashTypes: {
                settings: "ID",
                model: "ID"
            },
            hashContexts: {
                settings: depth0,
                model: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        stack1 = helpers._triageMustache.call(depth0, "yield", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/base-column-selector"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('      <i class="icon-double-angle-right" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "labels.pcs_columns_in"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></i>\r\n");
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('      <i class="icon-double-angle-left" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "labels.pcs_columns_out"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></i>\r\n");
        return buffer;
    },
    "5": function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("        <li ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":column-selector column.moveable:moveable:fixed"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                "data-name": "column.name"
            },
            hashTypes: {
                "data-name": "ID"
            },
            hashContexts: {
                "data-name": depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n          <a href="#">\r\n            <input type="checkbox" \r\n              ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                name: "column.name"
            },
            hashTypes: {
                name: "ID"
            },
            hashContexts: {
                name: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("  \r\n              ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                checked: "column.visible"
            },
            hashTypes: {
                checked: "ID"
            },
            hashContexts: {
                checked: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n              ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                disabled: "column.always_visible"
            },
            hashTypes: {
                disabled: "ID"
            },
            hashContexts: {
                disabled: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n            <label ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                for: "column.name"
            },
            hashTypes: {
                for: "ID"
            },
            hashContexts: {
                for: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n              ");
        stack1 = helpers._triageMustache.call(depth0, "column.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n            </label>\r\n          </a>\r\n        </li>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="btn-group btn-group-vertical">\r\n  <a class="btn" ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "expandHideColumnsAction", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(' href="#">\r\n');
        stack1 = helpers["if"].call(depth0, "model.globalSettings.columns_collapsed", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "model.globalSettings.columns_collapsed", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(3, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push('  </a>\r\n  <a class="btn dropdown-toggle" data-toggle="dropdown" href="#" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "labels.pcs_choose_columns"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n    <i class="icon-table"></i> \r\n  </a>\r\n  <ul class="dropdown-menu">\r\n    <ul class="dropdown-menu columns-list" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "view.ulStyle"
            },
            hashTypes: {
                style: "STRING"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n");
        stack1 = helpers.each.call(depth0, "column", "in", "model._columns", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(5, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push('    </ul>\r\n    <li class="divider"></li>\r\n      <div class="column-widget-buttons">\r\n        <button type="button" class="btn btn-primary pull-left" ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "saveColumns", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(">\r\n          ");
        stack1 = helpers._triageMustache.call(depth0, "labels.pccl_save", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push('\r\n        </button>\r\n        <button type="button" class="btn pull-right" ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "cancelChanges", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(">\r\n          ");
        stack1 = helpers._triageMustache.call(depth0, "labels.pccl_cancel", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n        </button>\r\n      </div>\r\n  </ul>\r\n</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/base-else-equal"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("  ");
        stack1 = helpers._triageMustache.call(depth0, "yield", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1;
        stack1 = helpers.unless.call(depth0, "isEqual", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        } else {
            data.buffer.push("");
        }
    },
    useData: true
});

Ember.TEMPLATES["components/base-if-equal"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("  ");
        stack1 = helpers._triageMustache.call(depth0, "yield", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1;
        stack1 = helpers["if"].call(depth0, "isEqual", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        } else {
            data.buffer.push("");
        }
    },
    useData: true
});

Ember.TEMPLATES["components/base-schedule-table-row"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("  ");
        data.buffer.push(escapeExpression((helpers["base-table-cell"] || depth0 && depth0["base-table-cell"] || helperMissing).call(depth0, {
            name: "base-table-cell",
            hash: {
                settingsBinding: "settings",
                refTableBinding: "refTable",
                contentBinding: "viewingContent",
                chartType: "chartType",
                columnBinding: "column"
            },
            hashTypes: {
                settingsBinding: "STRING",
                refTableBinding: "STRING",
                contentBinding: "STRING",
                chartType: "ID",
                columnBinding: "STRING"
            },
            hashContexts: {
                settingsBinding: depth0,
                refTableBinding: depth0,
                contentBinding: depth0,
                chartType: depth0,
                columnBinding: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="schedule-table-column order" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "viewingContent.index"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n  ");
        stack1 = helpers._triageMustache.call(depth0, "viewingContent.index", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n</div>\r\n");
        stack1 = helpers.each.call(depth0, "column", "in", "settings.columns", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/base-schedule-table"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("    <div ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":schedule-table-header-column column.format column.name"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n    ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "column.columnStyle"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n    ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                name: "column.name"
            },
            hashTypes: {
                name: "ID"
            },
            hashContexts: {
                name: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n    ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "column.title"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n      <div class="header-column-text">\r\n        ');
        stack1 = helpers._triageMustache.call(depth0, "column.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n        &nbsp;\r\n      </span>\r\n    </div>\r\n");
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("    ");
        data.buffer.push(escapeExpression((helpers["base-schedule-table-row"] || depth0 && depth0["base-schedule-table-row"] || helperMissing).call(depth0, {
            name: "base-schedule-table-row",
            hash: {
                refTable: "model",
                chartType: "chartType",
                model: "row",
                settings: "settings"
            },
            hashTypes: {
                refTable: "ID",
                chartType: "ID",
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                refTable: depth0,
                chartType: depth0,
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push('<div class="schedule-table-header">\r\n  <div class="schedule-table-header-column order">\r\n    &nbsp;\r\n  </div>\r\n');
        stack1 = helpers.each.call(depth0, "column", "in", "settings.columns", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push('</div>\r\n<div class="schedule-table-body">\r\n  <div class="dummy" style="height: 0px">\r\n  </div>\r\n');
        stack1 = helpers.each.call(depth0, "row", "in", "model.rows", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(3, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</div>\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/base-scroll-bar"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="scroll-bar-parent" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "scrollParentStyle"
            },
            hashTypes: {
                style: "STRING"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n  <div class="scroll-bar" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "scrollContentStyle"
            },
            hashTypes: {
                style: "STRING"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></div>\r\n</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/base-table-cell"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "view.cellView", {
            name: "view",
            hash: {
                settingsBinding: "settings",
                refTableBinding: "refTable",
                columnBinding: "column",
                chartBinding: "chart",
                contentBinding: "content"
            },
            hashTypes: {
                settingsBinding: "STRING",
                refTableBinding: "STRING",
                columnBinding: "STRING",
                chartBinding: "STRING",
                contentBinding: "STRING"
            },
            hashContexts: {
                settingsBinding: depth0,
                refTableBinding: depth0,
                columnBinding: depth0,
                chartBinding: depth0,
                contentBinding: depth0
            },
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/base-time-scale-control"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="btn-group">\r\n  <button type="button" class="btn go-left-icon" ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "left", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(' title="');
        data.buffer.push(escapeExpression(helpers.unbound.call(depth0, "labels.cdbpcs_basechart_move_left", {
            name: "unbound",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('">\r\n    &nbsp;\r\n  </button>\r\n  <button type="button" class="btn today-icon" ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "today", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(' title="');
        data.buffer.push(escapeExpression(helpers.unbound.call(depth0, "labels.cdbpcs_jump_to_today", {
            name: "unbound",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('">\r\n    &nbsp;\r\n  </button>\r\n  <button type="button" class="btn go-right-icon" ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "right", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(' title="');
        data.buffer.push(escapeExpression(helpers.unbound.call(depth0, "labels.cdbpcs_basechart_move_right", {
            name: "unbound",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('">\r\n    &nbsp;\r\n  </button>\r\n</div>\r\n<div class="btn-group">\r\n  <button type="button" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn :zoom-in-icon model.zoomInDisabled:disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n    ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "zoomin", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(' title="');
        data.buffer.push(escapeExpression(helpers.unbound.call(depth0, "labels.pcs_enlarge", {
            name: "unbound",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('">\r\n    &nbsp;\r\n  </button>\r\n  <button type="button" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn :zoom-out-icon model.zoomOutDisabled:disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n    ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "zoomout", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(' title="');
        data.buffer.push(escapeExpression(helpers.unbound.call(depth0, "labels.pcs_reduce", {
            name: "unbound",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('">\r\n    &nbsp;\r\n  </button>\r\n</div>');
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/base-time-scale-header"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('              <div class="time-scale-header-cell"\r\n              ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "cell.style"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n              ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "zoom_to", "cell", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push("\r\n              ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "cell.title"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n                ");
        stack1 = helpers._triageMustache.call(depth0, "cell.str", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n              </div>\r\n");
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("            <div ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":time-scale-header-cell cell.isWeekendDay:weekend-day"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n              ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "cell.style"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n              ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "zoom_to", "cell", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push("\r\n              ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "cell.title"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n                ");
        stack1 = helpers._triageMustache.call(depth0, "cell.str", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n              </div>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="time-scale-header" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "model.style"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n    <div class="time-scale-header-row time-scale-header-upper-row" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "model.rowStyle"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n        <div class="fix-wraparound">\r\n');
        stack1 = helpers.each.call(depth0, "cell", "in", "model.upperRow", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push('        </div>\r\n    </div>\r\n    <div class="time-scale-header-row time-scale-header-lower-row" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "model.rowStyle"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n        <div class="fix-wraparound">\r\n');
        stack1 = helpers.each.call(depth0, "cell", "in", "model.lowerRow", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(3, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("        </div>\r\n    </div>\r\n</div>\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["error"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        return "";
    },
    useData: true
});

Ember.TEMPLATES["loading"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        return "";
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/base-checkbox"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "view.disabled", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "view.disabled", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(4, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("\t  ");
        data.buffer.push(escapeExpression((helpers.input || depth0 && depth0.input || helperMissing).call(depth0, {
            name: "input",
            hash: {
                disabled: "disabled",
                bubbles: false,
                checked: "view.boolValue",
                type: "checkbox"
            },
            hashTypes: {
                disabled: "STRING",
                bubbles: "BOOLEAN",
                checked: "ID",
                type: "STRING"
            },
            hashContexts: {
                disabled: depth0,
                bubbles: depth0,
                checked: depth0,
                type: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("\t  ");
        data.buffer.push(escapeExpression((helpers.input || depth0 && depth0.input || helperMissing).call(depth0, {
            name: "input",
            hash: {
                bubbles: false,
                checked: "view.boolValue",
                type: "checkbox"
            },
            hashTypes: {
                bubbles: "BOOLEAN",
                checked: "ID",
                type: "STRING"
            },
            hashContexts: {
                bubbles: depth0,
                checked: depth0,
                type: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    "6": function(depth0, helpers, partials, data) {
        data.buffer.push("    &nbsp;    \r\n");
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "view.visible", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "view.visible", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(6, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/base-date"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="text" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.formatDate"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n  ");
        stack1 = helpers._triageMustache.call(depth0, "view.formatDate", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/base-default-text"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="text" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.value"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n  ");
        stack1 = helpers._triageMustache.call(depth0, "view.value", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/base-delete"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "view.disabledSchedule", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.program(7, data),
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "view.value.inSchedule", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(3, data),
            inverse: this.program(5, data),
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('\t\t\t    <img class="clickable icon-button readonly"\r\n\t\t\t        ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "view.srcPinActive"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t\t\t        ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "controller.labels.pcs_resource_fixed"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t        >\r\n");
        return buffer;
    },
    "5": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('\t\t\t    <img class="clickable icon-button readonly"\r\n\t\t\t        ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "view.srcPinNotActiveTransparent"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t\t\t        ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "controller.labels.pcs_resource_not_fixed"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t        >\r\n");
        return buffer;
    },
    "7": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "view.value.inSchedule", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(8, data),
            inverse: this.program(10, data),
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "8": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('\t\t\t   <img class="clickable icon-button"\r\n\t\t\t        ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "view.srcPinActive"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t\t\t        ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "controller.labels.pcs_resource_fixed"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t\t\t        ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleInSchedule", {
            name: "action",
            hash: {
                target: "view",
                on: "click",
                bubbles: false
            },
            hashTypes: {
                target: "STRING",
                on: "STRING",
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                target: depth0,
                on: depth0,
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n\t       >\r\n");
        return buffer;
    },
    "10": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('\t\t\t   <img class="clickable icon-button"\r\n\t\t\t        ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "view.srcPinNotActive"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t\t\t        ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "controller.labels.pcs_resource_not_fixed"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t\t\t        ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleInSchedule", {
            name: "action",
            hash: {
                target: "view",
                on: "click",
                bubbles: false
            },
            hashTypes: {
                target: "STRING",
                on: "STRING",
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                target: depth0,
                on: depth0,
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n\t       >\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1;
        stack1 = helpers.unless.call(depth0, "view.value.unremovable", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        } else {
            data.buffer.push("");
        }
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/base-editable"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<input type="text" \r\n  ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: "view.attr :editable view.editing::invisible"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n  ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                value: "view.value"
            },
            hashTypes: {
                value: "STRING"
            },
            hashContexts: {
                value: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n  ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.value"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n  ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                disabled: "view.disabled"
            },
            hashTypes: {
                disabled: "STRING"
            },
            hashContexts: {
                disabled: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n>\r\n<div ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":with-overflow :editable view.editing:invisible view.disabled:readonly-on-selected"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n     ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.value"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n  ");
        stack1 = helpers._triageMustache.call(depth0, "view.value", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("&nbsp;\r\n</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/base-icon"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("  <img ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "view.src"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.desc"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(' alt="">\r\n');
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1;
        stack1 = helpers["if"].call(depth0, "view.src", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        } else {
            data.buffer.push("");
        }
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/base-operations"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("            <li>\r\n                <a ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "op.tooltip"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n                ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "run_operation", "op.url", {
            name: "action",
            hash: {
                bubbles: false,
                target: "view"
            },
            hashTypes: {
                bubbles: "BOOLEAN",
                target: "STRING"
            },
            hashContexts: {
                bubbles: depth0,
                target: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push('>\r\n                    <img class="operation_icon" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "op.iconUrl"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("/>\r\n                    ");
        stack1 = helpers._triageMustache.call(depth0, "op.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n                </a>\r\n            </li>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push('<div class="btn-group dropdown">\r\n    <div class="icon dropdown-toggle operation-icon" data-toggle="dropdown"></div>\r\n    <ul class="dropdown-menu">\r\n');
        stack1 = helpers.each.call(depth0, "op", "in", "view.value", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("    </ul>\r\n</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/base-title-without-expand-icon"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<input type="text" \r\n  ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: "view.attr :editable view.editing::invisible"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n  ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                value: "view.value"
            },
            hashTypes: {
                value: "STRING"
            },
            hashContexts: {
                value: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n  ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.title"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n  ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                disabled: "view.disabled"
            },
            hashTypes: {
                disabled: "STRING"
            },
            hashContexts: {
                disabled: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n>\r\n<div ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":with-overflow :editable view.editing:invisible view.disabled:readonly-on-selected"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n     ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.title"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n  ");
        stack1 = helpers._triageMustache.call(depth0, "view.value", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("&nbsp;\r\n</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/base-title"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('\t  <div class="clickable" ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "toggleChildren", "content", {
            name: "action",
            hash: {
                target: "view",
                on: "click",
                bubbles: false
            },
            hashTypes: {
                target: "STRING",
                on: "STRING",
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                target: depth0,
                on: depth0,
                bubbles: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push(">\r\n\t    <i ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: "content.isExpanded:icon-caret-down:icon-angle-right"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></i>\r\n\t  </div>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="schedule-table-column icon" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "view.expandIconStyle"
            },
            hashTypes: {
                style: "STRING"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n");
        stack1 = helpers["if"].call(depth0, "content.scheduleContent.hasChildren", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</div>\r\n");
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "base-title-without-expand-icon", {
            name: "view",
            hash: {
                titleBinding: "view.title",
                settingsBinding: "settings",
                refTableBinding: "refTable",
                contentBinding: "content",
                chartType: "chartType",
                columnBinding: "column"
            },
            hashTypes: {
                titleBinding: "STRING",
                settingsBinding: "STRING",
                refTableBinding: "STRING",
                contentBinding: "STRING",
                chartType: "ID",
                columnBinding: "STRING"
            },
            hashContexts: {
                titleBinding: depth0,
                settingsBinding: depth0,
                refTableBinding: depth0,
                contentBinding: depth0,
                chartType: depth0,
                columnBinding: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        return buffer;
    },
    useData: true
});

mainApp = Ember.Application.extend({
    errorHappened: false,
    ajaxCnt: 0,
    renderingDelayed: false,
    init: function() {
        this._super();
        if (!this.get("windowHeight") || !this.get("windowWidth")) {
            this.set("renderingDelayed", true);
            this.deferReadiness();
        }
    },
    getTemplateName: function(templateName) {
        var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
        return templateName.replace(STRING_DECAMELIZE_REGEXP, "$1-$2").toLowerCase().replace("-", "_");
    },
    Resolver: Ember.DefaultResolver.extend({
        resolveTemplate: function(parsedName) {
            var template = this._super(parsedName), templateName = parsedName.fullNameWithoutType.replace(/\./g, "/"), templateType = null, filePath = null;
            if (templateName.indexOf("/") < 0) {
                templateName = this.namespace.get("getTemplateName")(templateName);
                if (templateName.indexOf("_") < 0) {
                    templateType = window.appSettings.chartType;
                } else {
                    templateType = templateName.split("_")[0];
                }
            } else {
                templateType = templateName.split("/")[1].split("-")[0];
            }
            if (!template) {
                template = Ember.TEMPLATES[templateName];
                if (!template) {
                    filePath = window.appSettings[templateType + "ChartLocalRes"] + "custom_hbs/" + templateName + ".hbs";
                    $.ajax({
                        url: filePath,
                        async: false,
                        success: function(response) {
                            template = Ember.TEMPLATES[templateName] = Ember.Handlebars.compile(response);
                        },
                        error: function(response) {
                            console.log("Error: ", response);
                        }
                    });
                }
            }
            return template;
        }
    }),
    displayLoadingGif: function() {
        if (this.get("ajaxCnt") === 0) {
            cdb.elink.stopWaiting();
        } else {
            cdb.elink.startWaiting();
        }
    }.observes("ajaxCnt"),
    windowHeight: function() {
        return $("#elink_page_content").height();
    }.property(),
    windowWidth: function() {
        return $("#elink_page_content").width();
    }.property(),
    chartHeight: function() {
        return window.appSettings.chartType === "full" ? this.get("windowHeight") / 2 : this.get("windowHeight");
    }.property("windowHeight")
});

Ember.TEMPLATES.application = Ember.Handlebars.compile("{{outlet}}");

var App = window.App = mainApp.create({
    rootElement: "#mainApp",
    ready: function() {
        window.appSettings.customTemplates = [].concat(window.appSettings.custom_base_templates || []).concat(window.appSettings.custom_time_templates || []).concat(window.appSettings.custom_resource_templates || []).concat(window.appSettings.custom_full_templates || []);
        for (var i = 0; i < window.appSettings.customTemplates.length; i++) {
            delete Ember.TEMPLATES[window.appSettings.customTemplates[i]];
        }
        this.register("labels:main", Ember.Object.extend(window.appLabels), {
            singleton: true
        });
        this.inject("controller", "labels", "labels:main");
        this.inject("component", "labels", "labels:main");
    },
    LOG_TRANSITIONS: true,
    LOG_TRANSITIONS_INTERNAL: true,
    LOG_BINDINGS: true,
    LOG_VIEW_LOOKUPS: true,
    LOG_STACKTRACE_ON_DEPRECATION: true,
    LOG_VERSION: true,
    debugMode: true
});

App.moment = moment;

App.moment.lang(cdb.elink.currentLanguage);

App.momentConstructor = App.moment.utc;

Ember.RSVP.configure("onerror", function(e) {
    if (e && App.get("debugMode")) {
        console.log(e.message);
        console.log(e.stack);
    }
});

function _AppSizeChanged() {
    App.notifyPropertyChange("windowHeight");
    App.notifyPropertyChange("windowWidth");
    if (App.get("renderingDelayed")) {
        App.advanceReadiness();
        App.set("renderingDelayed", false);
    }
}

$(window).load(function() {
    _AppSizeChanged();
});

$(document).ready(function() {
    $("button").attr("type", "button");
    $(window).on("resize", function(evt) {
        if (evt.originalEvent && evt.originalEvent.target === window) {
            Ember.run.scheduleOnce("sync", App, _AppSizeChanged);
        }
    });
});

App.IndexRoute = Ember.Route.extend({
    beforeModel: function() {
        return this.container.lookup("Settings:global").load();
    },
    model: function() {
        return Ember.RSVP.resolve(null);
    }
});

var dateToStr = function(date) {
    return date.isValid() ? date.format(cdb.elink.cdbDateFormat) : "";
};

var strToDate = function(dateStr) {
    return App.momentConstructor(dateStr, cdb.elink.cdbDateFormat);
};

var UTCToDate = function(timestamp) {
    return App.momentConstructor(timestamp);
};

var simpleRelationCompare = function(obj1, obj2) {
    return obj1.get("predecessorID") === obj2.predecessorID && obj1.get("successorID") === obj2.successorID && obj1.get("type") === obj2.type;
};

var getRelationsInArray = function(obj, arr) {
    var clones = [];
    $.each(arr, function(index, value) {
        if (simpleRelationCompare(value, obj)) {
            clones.push(value);
        }
    });
    return clones;
};

Ember.Handlebars.helper("not", function(val) {
    return !val;
});

Ember.Handlebars.helper("isEqual", function(val1, val2, options) {
    return Ember.isEqual(val1, val2);
});

App.BaseIfEqualComponent = Ember.Component.extend({
    isEqual: function() {
        return Ember.isEqual(this.get("param1"), this.get("param2"));
    }.property("param1", "param2")
});

App.BaseElseEqualComponent = App.BaseIfEqualComponent.extend();

var alertCDBMessage = function(message, id) {
    if (message && message.length) {
        cdb.elink.alertCDBMessage(message.replace("\\n", "<br>"));
    } else {
        cdb.elink.alertCDBMessage("Correct error message (" + id + ") not found");
    }
};

var _ajax = Ember.RSVP.resolve(null);

function asyncPost(url, data, type) {
    _ajax = _ajax.then(function() {
        App.incrementProperty("ajaxCnt");
        return Ember.$.ajax({
            url: url,
            data: data,
            async: true,
            type: type ? type : "GET",
            dataType: "json"
        }).then(function(data) {
            App.decrementProperty("ajaxCnt");
            if (data && typeof data === "object") {
                var keys = Object.keys(data);
                if (keys.length === 1 && keys[0] === "error") {
                    alertCDBMessage(data.error);
                    App.set("errorHappened", true);
                }
            }
            return Ember.RSVP.resolve(data);
        }, function(data) {
            alertCDBMessage(data.responseText);
            App.decrementProperty("ajaxCnt");
            App.set("errorHappened", true);
        });
    });
    return _ajax;
}

var resizablePlugins = $.ui.resizable.prototype.plugins, newGhostPlugin = {
    start: function() {
        var that = $(this).resizable("instance"), o = that.options, cs = that.size;
        that.helper.css("z-index", "2300");
        that.ghost = that.originalElement.clone();
        that.ghost.css({
            opacity: 1,
            display: "block",
            position: "relative",
            height: "auto",
            width: cs.width,
            margin: 0,
            left: 0,
            top: 0
        }).addClass("ui-resizable-ghost").addClass(typeof o.ghost === "string" ? o.ghost : "");
        that.ghost.appendTo(that.helper);
    },
    resize: function() {
        var that = $(this).resizable("instance"), height = this.height();
        that.helper.height(height);
        if (that.ghost) {
            that.ghost.css({
                position: "relative",
                height: height,
                width: that.size.width
            });
        }
    },
    stop: function() {
        var that = $(this).resizable("instance");
        if (that.ghost && that.helper) {
            that.helper.get(0).removeChild(that.ghost.get(0));
        }
    }
};

Object.keys(resizablePlugins).forEach(function(key, index, enumerable) {
    resizablePlugins[key].forEach(function(item, index, enumerable) {
        if (item[0] === "ghost") {
            item[1] = newGhostPlugin[key];
        }
    });
});

Math.sign = Math.sign || function(x) {
    x = +x;
    if (x === 0 || isNaN(x)) {
        return x;
    }
    return x > 0 ? 1 : -1;
};

Number.isNaN = Number.isNaN || function(value) {
    return value !== value;
};

Number.isInteger = Number.isInteger || function(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

window.createNewEvent = function(eventName) {
    if (typeof Event === "function") {
        var event = $.Event();
        event.type = eventName;
    } else {
        var event = document.createEvent("Event");
        event.initEvent(eventName, true, true);
        event = $.Event(event);
    }
    return event;
};

var oldToggle = $.fn.dropdown.prototype.constructor.Constructor.prototype.toggle;

$.fn.dropdown.prototype.constructor.Constructor.prototype.toggle = function() {
    oldToggle.apply(this);
    $(this).triggerHandler("dropdownOpened");
};

App.RefTableClass = Ember.Mixin.create(Ember.Evented, {
    numRows: 0,
    indexTop: 0,
    contentsStructure: null,
    content: null,
    refTableRowClass: null,
    delayRowUpdate: true,
    numEntries: function() {
        return this.get("contentsStructure.filteredContent.length");
    }.property("contentsStructure.filteredContent.length"),
    init: function() {
        var self = this, contentsStructure = self.get("contentsStructure");
        self._super();
        self.set("rows", Ember.A([]));
        contentsStructure.on("delayRowUpdate", function() {
            self.set("delayRowUpdate", true);
        });
        contentsStructure.on("resumeRowUpdate", function() {
            self.set("delayRowUpdate", false);
        });
    },
    create_rows: function() {
        var rows = this.get("rows"), numRows = this.get("numRows");
        rows.beginPropertyChanges();
        for (var i = rows.length; i < numRows; i++) {
            rows.pushObject(App.get(this.get("refTableRowClass")).create({
                rowIndex: i,
                refTable: this
            }));
        }
        rows.endPropertyChanges();
        this.notifyPropertyChange("rows");
    }.observes("numRows").on("init"),
    _updateReferences: function() {
        if (this.get("delayRowUpdate")) return;
        var self = this, indexTop = self.get("indexTop"), numRows = self.get("numRows"), lastIndex = numRows + indexTop, rows = self.get("rows"), contentsStructure = self.get("contentsStructure"), filteredContent = contentsStructure.all(), row = null;
        contentsStructure._all().setEach("refRowIndex", null);
        for (var i = indexTop; i < lastIndex; i++) {
            row = rows.objectAt(i - indexTop);
            if (row) row.updateReferences(filteredContent.objectAt(i));
        }
        if (rows.length > numRows) {
            rows.removeAt(numRows, rows.length - numRows);
        }
        Ember.run.scheduleOnce("sync", this, "_loadAsyncData");
    },
    _loadAsyncData: function() {
        var self = this, indexTop = self.get("indexTop"), numRows = self.get("numRows"), lastIndex = numRows + indexTop, contentsStructure = self.get("contentsStructure");
        if (contentsStructure.loadAsyncData) {
            contentsStructure.loadAsyncData(contentsStructure.all().objectsAt(new Array(lastIndex - indexTop + 1).join().split(",").map(function(item, index) {
                return ++index + indexTop - 1;
            })).without(undefined));
        }
    },
    updateReferences: function() {
        if (!this.get("delayRowUpdate")) {
            Ember.run.scheduleOnce("sync", this, "_updateReferences");
        }
    }.observes("contentsStructure.filteredContent.[]", "contentsStructure.filteredContent.length", "indexTop", "numRows", "delayRowUpdate")
});

App.RefTableRowClass = Ember.Mixin.create({
    rowIndex: undefined,
    referencedObject: undefined,
    updateReferences: function(contentStructureItem) {
        this.set("referencedObject", contentStructureItem);
        if (contentStructureItem) contentStructureItem.set("refRowIndex", this.get("rowIndex"));
    }
});

App.TimeScale = Ember.Object.extend(Ember.Evented, {
    personal_start_date: null,
    personal_end_date: null,
    pixelsPerDay: null,
    onRender: Ember.$.noop,
    viewportWidth: 0,
    minZoomFactor: .2,
    maxZoomFactor: 200,
    set_personal_end_date: function() {
        var self = this, endDateView = null, pixelsPerDay = self.get("pixelsPerDay"), viewportWidth = self.get("viewportWidth");
        if (self.get("personal_start_date") && pixelsPerDay && viewportWidth) {
            endDateView = UTCToDate(self.get("startDateView")).add("days", Math.ceil(viewportWidth / pixelsPerDay));
            var new_personal_end_date = endDateView.valueOf(), new_pixelsPerDay = viewportWidth / endDateView.diff(self.get("startDateView"), "days");
            if (new_pixelsPerDay !== pixelsPerDay || new_personal_end_date !== self.get("personal_end_date")) {
                self.beginPropertyChanges();
                Ember.changeProperties(function() {
                    self.set("personal_end_date", new_personal_end_date);
                    self.set("pixelsPerDay", new_pixelsPerDay);
                });
                self.endPropertyChanges();
            }
        }
    }.observes("personal_start_date", "viewportWidth", "pixelsPerDay"),
    startDateView: function() {
        var personal_start_date = this.get("personal_start_date"), startDateView = null;
        if (personal_start_date) {
            startDateView = UTCToDate(personal_start_date);
        }
        return startDateView;
    }.property("personal_start_date"),
    endDateView: function() {
        var personal_end_date = this.get("personal_end_date"), endDateView = null;
        if (personal_end_date) {
            endDateView = UTCToDate(personal_end_date);
        }
        return endDateView;
    }.property("personal_end_date"),
    setStartScale: function(start, ppd) {
        var self = this, startMoment = null;
        if (!start || !ppd) return;
        if (App.moment.isMoment(start)) startMoment = start;
        if (typeof start === "number") startMoment = UTCToDate(start);
        start = startMoment.startOf("day").valueOf();
        Ember.changeProperties(function() {
            self.set("pixelsPerDay", ppd);
            self.set("personal_start_date", start);
        });
    },
    init: function() {
        this.upperRow = Ember.A([]);
        this.lowerRow = Ember.A([]);
        this.get("timeUnits");
    },
    todayCell: function() {
        return App.TimeUnit.create({
            timeScale: this
        });
    }.property("startDateView", "endDateView"),
    _setViewportWidth: function(width) {
        var self = this;
        self.beginPropertyChanges();
        Ember.changeProperties(function() {
            self.set("viewportWidth", width);
            var pixelsPerDay = self.get("pixelsPerDay"), startDate = self.get("startDateView"), endDate = self.get("endDateView");
            if (!pixelsPerDay && endDate && endDate.isValid()) {
                self.set("pixelsPerDay", width / endDate.diff(startDate, "days"));
            }
        });
        self.endPropertyChanges();
    },
    _resizeTo: function() {
        this._setViewportWidth(this.get("newViewportWidth"));
    },
    resizeTo: function(width) {
        this.set("newViewportWidth", width);
        Ember.run.debounce(this, this._resizeTo, 150, true);
    },
    timeUnits: function() {
        var ppd = this.get("pixelsPerDay"), globalSettings = this.get("globalSettings"), init_params = {
            timeScale: this,
            calendar_exceptions: globalSettings.get("calendar_exceptions"),
            workdays: globalSettings.get("workdays")
        }, result;
        if (!ppd) return;
        if (ppd > 30) {
            result = Ember.Object.create({
                upper: App.TimeUnitMonth.create(init_params),
                lower: App.TimeUnitDay.create(init_params)
            });
        } else if (ppd > 7) {
            result = Ember.Object.create({
                upper: App.TimeUnitMonth.create(init_params),
                lower: App.TimeUnitWeek.create(init_params)
            });
        } else if (ppd > 4) {
            result = Ember.Object.create({
                upper: App.TimeUnitQuarter.create(init_params),
                lower: App.TimeUnitMonth.create(init_params)
            });
        } else if (ppd > 2) {
            result = Ember.Object.create({
                upper: App.TimeUnitHalfYear.create(init_params),
                lower: App.TimeUnitMonth.create(init_params)
            });
        } else if (ppd > 1.25) {
            result = Ember.Object.create({
                upper: App.TimeUnitYear.create(init_params),
                lower: App.TimeUnitQuarter.create(init_params)
            });
        } else {
            result = Ember.Object.create({
                upper: App.TimeUnitYear.create(init_params),
                lower: App.TimeUnitHalfYear.create(init_params)
            });
        }
        return result;
    }.property("pixelsPerDay"),
    displayChanged: function() {
        var startDateView = this.get("startDateView"), endDateView = this.get("endDateView");
        if (typeof this.get("timeUnits") !== "undefined" && startDateView && startDateView.isValid() && endDateView && endDateView.isValid()) {
            Ember.run.once(this, "_onDisplayChanged");
        }
    }.observes("personal_end_date", "timeUnits"),
    _onDisplayChanged: function() {
        this.updateTimeUnits();
        this.initStyleProperties();
        this.trigger("timeFrameChanged");
    },
    updateTimeUnits: function() {
        var timeUnits = this.get("timeUnits");
        this.updateTimeUnitsRow(timeUnits.upper, this.get("upperRow"), this.get("startDateView"), this.get("endDateView"));
        this.updateTimeUnitsRow(timeUnits.lower, this.get("lowerRow"), this.get("startDateView"), this.get("endDateView"));
    },
    updateTimeUnitsRow: function(timeUnit, row, start, end) {
        var cell, d, idx, props;
        for (d = App.momentConstructor(start), idx = 0; d.isBefore(end); d = timeUnit.nextStartDate(d), 
        idx++) {
            props = {
                timeUnit: timeUnit,
                startDate: App.momentConstructor(d),
                isVisible: true
            };
            if (idx >= row.length) {
                cell = App.TimeScaleHeaderCell.create(props);
                row.pushObject(cell);
            } else {
                cell = row.objectAt(idx);
                cell.setProperties(props);
            }
        }
        for (;idx < row.length; idx++) {
            row.objectAt(idx).set("isVisible", false);
        }
    },
    displayInterval: function() {
        return this.get("timeUnits.lower").displayInterval;
    }.property("timeUnits.lower"),
    initStyleProperties: function() {
        var diff = this.get("endDateView").diff(this.get("startDateView"), "days");
        this.set("rowStyle", "width: " + Math.ceil(diff * this.get("pixelsPerDay")) + "px;");
    },
    scrollByPixels: function(delta) {
        var ppd = this.get("pixelsPerDay");
        var dt = Math.round(24 * 60 * 60 * delta / ppd);
        var sd = App.momentConstructor(this.get("startDateView")).subtract("seconds", dt);
        var ed = App.momentConstructor(this.get("endDateView")).subtract("seconds", dt);
        this.moveStartEnd(sd, ed);
    },
    moveLeft: function() {
        var sd = this.get("startDateView");
        var ed = this.get("endDateView");
        var tf = (ed.diff(sd, "days") + 1) / 2;
        sd.subtract("days", tf);
        ed.subtract("days", tf);
        this.moveStartEnd(sd, ed);
    },
    moveRight: function() {
        var sd = this.get("startDateView");
        var ed = this.get("endDateView");
        var tf = (ed.diff(sd, "days") + 1) / 2;
        sd.add("days", tf);
        ed.add("days", tf);
        this.moveStartEnd(sd, ed);
    },
    moveStart: function(startDate) {
        var sd = this.get("startDateView");
        var ed = this.get("endDateView");
        var tf = sd.diff(startDate, "days");
        tf = tf < 0 ? tf + 1 : tf + 2;
        sd.subtract("days", tf);
        ed.subtract("days", tf);
        this.moveStartEnd(sd, ed);
    },
    moveStartEnd: function(startDate, endDate) {
        var self = this;
        self.beginPropertyChanges();
        var start = startDate.startOf("day").valueOf(), end = endDate.startOf("day").valueOf();
        Ember.changeProperties(function() {
            self.set("personal_start_date", start);
            self.set("personal_end_date", end);
            var viewportWidth = self.get("viewportWidth");
            if (viewportWidth) {
                self.set("pixelsPerDay", viewportWidth / endDate.diff(startDate, "days"));
            }
        });
        self.endPropertyChanges();
    },
    centerOnToday: function() {
        var today = App.momentConstructor().startOf("day");
        var sd = this.get("startDateView");
        var ed = this.get("endDateView");
        var tf = (ed.diff(sd, "days") + 1) / 2;
        sd = App.momentConstructor(today).subtract("days", tf);
        ed = App.momentConstructor(today).add("days", tf);
        this.moveStartEnd(sd, ed);
    },
    zoomInDisabled: function() {
        return this.get("pixelsPerDay") * 2 > this.get("maxZoomFactor");
    }.property("pixelsPerDay"),
    zoomOutDisabled: function() {
        return this.get("pixelsPerDay") / 2 < this.get("minZoomFactor");
    }.property("pixelsPerDay"),
    setZoomFactor: function(target_zf) {
        var old_zf = this.get("pixelsPerDay");
        if (old_zf) {
            if (target_zf > this.get("maxZoomFactor") && target_zf > old_zf || target_zf < this.get("minZoomFactor") && target_zf < old_zf) {
                return;
            }
            var factor = old_zf / target_zf;
            var sd = App.momentConstructor(this.get("startDateView"));
            var ed = App.momentConstructor(this.get("endDateView"));
            var old_diff = ed.diff(sd, "days");
            var new_diff = old_diff * factor;
            var _delta = (old_diff - new_diff) / 2;
            var delta = Math.sign(_delta) * Math.ceil(Math.abs(_delta));
            sd.add("days", delta);
            ed.subtract("days", delta);
            this.moveStartEnd(sd, ed);
            this.set("pixelsPerDay", this.get("viewportWidth") / ed.diff(sd, "days"));
        } else {
            this.beginPropertyChanges();
            this.set("pixelsPerDay", target_zf);
            this.endPropertyChanges();
        }
    },
    zoomIn: function() {
        this.setZoomFactor(this.get("pixelsPerDay") * 2);
    },
    zoomOut: function() {
        this.setZoomFactor(this.get("pixelsPerDay") / 2);
    },
    zoomTo: function(start, end) {
        var viewport_width = Ember.$(".time-scale-header-viewport").width();
        var num_days = end.diff(start, "days");
        var zf = Math.max(Math.min(viewport_width / num_days, this.get("maxZoomFactor")), this.get("minZoomFactor"));
        var actual_end = App.momentConstructor(start).add("days", viewport_width / zf);
        this.moveStartEnd(start, actual_end);
        this.set("pixelsPerDay", zf);
    },
    computeDatesWidth: function(startDate, endDate) {
        return startDate && endDate && startDate.isValid() && endDate.isValid() ? (Math.round(endDate.diff(startDate, "days", true)) + 1) * this.get("pixelsPerDay") : 0;
    },
    computeDatePosition: function(startDate) {
        return startDate && startDate.isValid() ? Math.round(startDate.diff(this.get("startDateView"), "days", true)) * this.get("pixelsPerDay") : 0;
    }
});

App.TimeScaleHeaderCell = Ember.Object.extend({
    startDate: null,
    timeUnit: null,
    timeScale: Ember.computed.oneWay("timeUnit.timeScale").readOnly(),
    isWeekendDay: function() {
        return this.get("timeUnit").isWeekendDay(this.get("startDate"));
    }.property("startDate", "timeUnit"),
    startOfPeriod: function() {
        return this.get("timeUnit").startOfPeriod(this.get("startDate"));
    }.property("startDate", "timeUnit"),
    nextStartDate: function() {
        return this.get("timeUnit").nextStartDate(this.get("startDate"));
    }.property("startDate", "timeUnit"),
    str: function() {
        return this.get("timeUnit").str(this.get("startDate"));
    }.property("startDate", "timeUnit"),
    title: function() {
        return this.get("timeUnit").title(this.get("startDate"));
    }.property("startDate", "timeUnit"),
    pxLeft: function() {
        return this.get("timeUnit").pxLeft(this.get("startDate"));
    }.property("startDate", "timeUnit"),
    pxRight: function() {
        return this.get("timeUnit").pxRight(this.get("startDate"));
    }.property("startDate", "timeUnit"),
    style: function() {
        var width = "width: " + (this.get("pxRight") - this.get("pxLeft")) + "px;";
        var display = this.get("isVisible") ? "display: inline;" : "display: none;";
        return width + display;
    }.property("pxLeft", "pxRight", "isVisible")
});

Ember.Application.initializer({
    name: "timescale",
    after: [ "settings" ],
    initialize: function(container, application) {
        application.register("timescale:main", App.TimeScale, {
            instantiate: true,
            singleton: true
        });
        application.inject("timescale:main", "globalSettings", "Settings:global");
    }
});

App.TimeUnit = Ember.Object.extend({
    timeScale: null,
    startDateView: Ember.computed.oneWay("timeScale.startDateView").readOnly(),
    endDateView: Ember.computed.oneWay("timeScale.endDateView").readOnly(),
    pixelsPerDay: Ember.computed.oneWay("timeScale.pixelsPerDay").readOnly(),
    isWeekendDay: function(aMoment) {
        return false;
    },
    title: function(aMoment) {
        return this.str(aMoment);
    },
    pxLeft: function(aMoment) {
        return Math.round(aMoment.diff(this.get("startDateView"), "days") * this.get("pixelsPerDay"));
    },
    pxRight: function(aMoment) {
        var nextStart = this.nextStartDate(aMoment), endDateView = this.get("endDateView");
        var rightDate = nextStart.isBefore(endDateView) ? nextStart : endDateView;
        return Math.round(rightDate.diff(this.get("startDateView"), "days") * this.get("pixelsPerDay"));
    }
});

App.TimeUnitDay = App.TimeUnit.extend({
    displayInterval: "day",
    isWeekendDay: function(aMoment) {
        var wkDay = aMoment.isoWeekday(), momStr = aMoment.format(cdb.elink.cdbDateFormat), calendar_exceptions = this.get("calendar_exceptions");
        return !(Object.keys(calendar_exceptions).indexOf(momStr) === -1 ? this.get("workdays")[wkDay] : calendar_exceptions[momStr]);
    },
    startOfPeriod: function(aMoment) {
        return App.momentConstructor(aMoment).startOf("day");
    },
    nextStartDate: function(aMoment) {
        return App.momentConstructor(this.startOfPeriod(aMoment)).add("days", 1);
    },
    str: function(aMoment) {
        return aMoment.format("DD");
    },
    title: function(aMoment) {
        return this.startOfPeriod(aMoment).format("dddd, DD MMMM YYYY");
    }
});

App.TimeUnitWeek = App.TimeUnit.extend({
    displayInterval: "week",
    startOfPeriod: function(aMoment) {
        return App.momentConstructor(aMoment).startOf("isoWeek");
    },
    nextStartDate: function(aMoment) {
        return App.momentConstructor(this.startOfPeriod(aMoment)).add("weeks", 1);
    },
    str: function(aMoment) {
        return "W" + aMoment.format("WW");
    },
    title: function(aMoment) {
        return this.str(aMoment) + this.startOfPeriod(aMoment).format(", MMMM YYYY");
    }
});

App.TimeUnitMonth = App.TimeUnit.extend({
    displayInterval: "month",
    startOfPeriod: function(aMoment) {
        return App.momentConstructor(aMoment).startOf("month");
    },
    nextStartDate: function(aMoment) {
        return App.momentConstructor(this.startOfPeriod(aMoment)).add("months", 1);
    },
    str: function(aMoment) {
        var ppd = this.get("timeScale.pixelsPerDay");
        if (ppd < 1) {
            return aMoment.format("MM");
        } else if (ppd < 2) {
            return aMoment.format("MMM");
        } else if (ppd < 5) {
            return aMoment.format("MMMM");
        } else {
            return aMoment.format("MMMM YYYY");
        }
    }
});

App.TimeUnitQuarter = App.TimeUnit.extend({
    displayInterval: "quarter",
    startOfPeriod: function(aMoment) {
        var sop = App.momentConstructor(aMoment).startOf("month");
        var month = sop.month();
        sop.month(month - month % 3);
        return sop;
    },
    nextStartDate: function(aMoment) {
        return App.momentConstructor(this.startOfPeriod(aMoment)).add("months", 3);
    },
    str: function(aMoment) {
        var sd = aMoment;
        return "Q" + sd.quarter() + "/" + sd.year();
    }
});

App.TimeUnitHalfYear = App.TimeUnit.extend({
    displayInterval: "half-year",
    startOfPeriod: function(aMoment) {
        var sop = App.momentConstructor(aMoment).startOf("month");
        sop.month(sop.month() < 6 ? 0 : 6);
        return sop;
    },
    nextStartDate: function(aMoment) {
        return App.momentConstructor(this.startOfPeriod(aMoment)).add("months", 6);
    },
    str: function(aMoment) {
        var sd = aMoment;
        var result = "H" + (sd.month() < 6 ? 1 : 2);
        if (this.get("timeScale").get("pixelsPerDay") >= .4) {
            result += "/" + sd.year();
        }
        return result;
    }
});

App.TimeUnitYear = App.TimeUnit.extend({
    displayInterval: "year",
    startOfPeriod: function(aMoment) {
        return App.momentConstructor(aMoment).startOf("year");
    },
    nextStartDate: function(aMoment) {
        return App.momentConstructor(this.startOfPeriod(aMoment)).add("years", 1);
    },
    str: function(aMoment) {
        return aMoment.format("YYYY");
    }
});

App.Selection = Ember.Mixin.create(Ember.Object, {
    init: function() {
        this._super();
        this.set("selectedArray", Ember.A([]));
    },
    infoItem: function() {
        var selectedArray = this.get("selectedArray");
        switch (selectedArray.length) {
          case 0:
            return this.get("lastHovered");

          case 1:
            return this.get("lastSelected");

          default:
            return null;
        }
    }.property("lastSelected", "lastHovered", "selectedArray.@each"),
    oneSelected: function() {
        return this.get("selectedArray").length === 1;
    }.property("lastSelected", "selectedArray.@each"),
    notOneSelected: function() {
        return !this.get("oneSelected");
    }.property("oneSelected"),
    lastSelected: function(key, value, oldValue) {
        var selectedArray = this.get("selectedArray");
        if (value !== undefined) {
            this.propertyWillChange("selectedArray");
            if (value && !value.get("selected")) {
                selectedArray.push(value);
            } else {
                selectedArray.splice(selectedArray.indexOf(value), 1);
            }
            this.propertyDidChange("selectedArray");
        }
        return selectedArray[selectedArray.length - 1];
    }.property(),
    _lastHovered: null,
    lastHovered: function(key, value, oldValue) {
        if (this.get("selectedArray").length) {
            return null;
        } else {
            if (value !== undefined) {
                this.set("_lastHovered", value);
                return value;
            } else {
                return this.get("_lastHovered");
            }
        }
    }.property(),
    deselectItems: function() {
        if (this.get("selectedArray.length")) {
            this.get("selectedArray").setEach("selected", false);
            this.set("selectedArray", Ember.A([]));
        }
        if (this.get("lastSelected")) this.set("lastSelected", null);
    }
});

App.Column = Ember.Object.extend({
    name: null,
    position: null,
    visible: null,
    moveable: null,
    always_visible: null,
    format: null,
    width: null,
    title: null,
    clickable: function() {
        return [ "status_color", "delete", "operations" ].indexOf(this.get("name")) >= 0;
    }.property("name"),
    columnStyle: function() {
        var columnStyle = "width: " + this.get("width") + "px; ";
        if (this.get("globalSettings.columns_collapsed") && !this.get("always_visible")) {
            columnStyle += " display:none;";
        }
        return columnStyle;
    }.property("width", "always_visible", "globalSettings.columns_collapsed")
});

App.WithColumns = Ember.Mixin.create({
    init: function() {
        this._super();
        this.set("_columns", Ember.A());
        this.set("additionalAlwaysColumnSpace", 0);
    },
    chartDataURL: function() {
        return window.appSettings[this.get("settingsType") + "ChartData"];
    }.property("settingsType"),
    setCollapsedLeftPanelWidth: function() {
        var oldWidth = this.get("globalSettings.collapsed_left_panel_width");
        newWidth = this._sumColumnWidths(this.get("columns").filterBy("always_visible", true), this.get("additionalAlwaysColumnSpace"));
        if (newWidth > oldWidth) {
            this.set("globalSettings.collapsed_left_panel_width", newWidth);
        }
    },
    setColumns: function(columns) {
        columns = columns || [];
        var _columns = Ember.A([]), globalSettings = this.get("globalSettings");
        $.each(columns, function() {
            _columns.pushObject(App.Column.create(this, {
                globalSettings: globalSettings
            }));
        });
        this.set("_columns", _columns);
        this.notifyPropertyChange("_columns");
        this.setCollapsedLeftPanelWidth();
    },
    columns: function() {
        return this.get("_columns").filterBy("visible");
    }.property("_columns"),
    _sumColumnWidths: function(columns, additional) {
        var result = additional;
        columns.forEach(function(item) {
            result += item.width;
        });
        return result;
    },
    totalColumnsWidth: function() {
        var columns = this.get("columns"), addtnl = this.get("additionalAlwaysColumnSpace") + columns.length;
        return this._sumColumnWidths(columns, addtnl);
    }.property("columns.@each.width"),
    updateColumnWidth: function(columnName, newWidth) {
        var self = this, _columns = self.get("_columns"), globalSettings = self.get("globalSettings");
        _columns.findBy("name", columnName).set("width", newWidth);
        globalSettings.get("updateLeftPanelWidth").call(globalSettings, self.get("totalColumnsWidth"));
        asyncPost(self.get("chartDataURL") + "/update_columns_width/post", {
            column_name: columnName,
            width: newWidth
        });
    }
});

App.Settings = Ember.Object.extend({
    init: function() {
        this._super();
        this.set("chartType", window.appSettings.chartType);
    },
    chartType: null,
    left_panel_width: 0,
    collapsed_left_panel_width: 0,
    columns_collapsed: false,
    chartDataURL: function() {
        return window.appSettings[this.get("chartType") + "ChartData"];
    }.property("chartType"),
    leftPanelWidth: function() {
        var leftPanelWidth = this.get("columns_collapsed") ? this.get("collapsed_left_panel_width") : this.get("left_panel_width");
        if (leftPanelWidth) {
            $(window).trigger({
                type: "resize",
                isManuallyTriggered: true
            });
        }
        return leftPanelWidth;
    }.property("columns_collapsed", "collapsed_left_panel_width", "left_panel_width"),
    updateLeftPanelWidth: function(newWidth) {
        var self = this;
        asyncPost(this.get("chartDataURL") + "/update_left_panel_width/post", {
            left_panel_width: newWidth
        }).then(function() {
            self.set("left_panel_width", newWidth);
        });
    },
    updateColumnsCollapsed: function(newColumnsCollapsed) {
        var self = this;
        if (typeof newColumnsCollapsed === "undefined") {
            newColumnsCollapsed = !self.get("columns_collapsed");
        }
        asyncPost(this.get("chartDataURL") + "/update_columns_collapsed/post", {
            columns_collapsed: newColumnsCollapsed
        }).then(function() {
            self.set("columns_collapsed", newColumnsCollapsed);
        });
    },
    load: function() {
        var self = this;
        return asyncPost(window.appSettings.baseChartData + "/settings", {}).then(function(data) {
            self.setProperties(data);
            cdb.elink.cdbDateFormat = data.date_format;
        });
    }
});

Ember.Application.initializer({
    name: "settings",
    initialize: function(container, application) {
        container.register("Settings:global", App.Settings, {
            instantiate: true,
            singleton: true
        });
    }
});

App.BaseTableCellComponent = Em.Component.extend({
    chartType: null,
    column: null,
    viewingContent: null,
    refTable: null,
    classNameBindings: [ ":schedule-table-column", "column.format", "column.name", "column.clickable:clickable" ],
    attributeBindings: [ "style" ],
    style: Ember.computed.alias("column.columnStyle"),
    cellView: function() {
        var format = this.get("column.format");
        view = App.get(this.get("chartType").capitalize() + this.get("column.name").capitalize() + "View");
        if (!view && format) {
            view = App.get("Base" + format.capitalize() + "View");
        }
        return view ? view : App.BaseDefaultTextView;
    }.property("column")
});

App.BaseTimeScaleControlComponent = Ember.Component.extend({
    classNames: [ "btn-toolbar" ],
    actions: {
        left: function() {
            this.get("model").moveLeft();
        },
        today: function() {
            this.get("model").centerOnToday();
        },
        right: function() {
            this.get("model").moveRight();
        },
        zoomin: function() {
            if (!this.get("model.zoomInDisabled")) this.get("model").zoomIn();
        },
        zoomout: function() {
            if (!this.get("model.zoomOutDisabled")) this.get("model").zoomOut();
        }
    }
});

App.BaseTimeScaleHeaderComponent = Ember.Component.extend({
    classNames: [ "time-scale-header-viewport" ],
    minHeaderWidth: 500,
    firstRender: true,
    didInsertElement: function() {
        var self = this;
        Ember.run.scheduleOnce("afterRender", this, "runAfterRender");
        if (self.get("firstRender")) {
            Ember.$(window).on("resize", function(evt) {
                if (evt.isManuallyTriggered || evt.originalEvent && evt.originalEvent.target === window) {
                    self.handleResizeDebounce();
                }
            });
            self.set("firstRender", false);
        }
    },
    willDestroyElement: function() {
        this.destroyUIwidgets(this.$(".time-scale-header"));
    },
    destroyUIwidgets: function(hdrDiv) {
        if (hdrDiv.data("ui-draggable")) hdrDiv.draggable("destroy");
        if (hdrDiv.data("ui-droppable")) hdrDiv.draggable("destroy");
    },
    runAfterRender: function() {
        var self = this;
        self.handleResize();
        var hdrDiv = self.$(".time-scale-header");
        this.destroyUIwidgets(hdrDiv);
        self.$().droppable({
            accept: hdrDiv
        });
        hdrDiv.draggable({
            axis: "x",
            helper: "clone",
            scroll: false,
            start: function() {
                hdrDiv.addClass("hide-trick");
            },
            stop: function(event, ui) {
                hdrDiv.removeClass("hide-trick");
                self.get("model").scrollByPixels(ui.position.left);
            }
        });
    },
    handleResize: function() {
        var containerWidth = 0, viewport_width = this.$().width(), old_viewport_width = this.get("model.viewportWidth"), minHeaderWidth = this.get("minHeaderWidth"), container = this.$().closest("#elink_page_content"), leftPanelWidth = this.get("settings.globalSettings.leftPanelWidth"), pageTitleAndContainer = container.add($("#elink_page_title"));
        if (leftPanelWidth > $(window).width()) {
            containerWidth = leftPanelWidth + minHeaderWidth + 1;
            pageTitleAndContainer.css({
                width: containerWidth
            });
            viewport_width = minHeaderWidth;
        } else {
            if (viewport_width <= minHeaderWidth) {
                containerWidth = minHeaderWidth - viewport_width + container.width();
                pageTitleAndContainer.css({
                    width: containerWidth
                });
                viewport_width = minHeaderWidth;
            } else {
                pageTitleAndContainer.css({
                    width: "100%",
                    "overflow-x": "hidden"
                });
            }
        }
        if (old_viewport_width !== viewport_width) {
            this.get("model").resizeTo(viewport_width);
        }
    },
    handleResizeDebounce: function() {
        Ember.run.debounce(this, this.rerender, 150);
        Ember.run.debounce(this, this.handleResize, 150);
    },
    actions: {
        zoom_to: function(cell) {
            this.get("model").zoomTo(cell.get("startOfPeriod"), cell.get("nextStartDate"));
        }
    }
});

App.SelectionMixin = Ember.Mixin.create({
    chartType: null,
    lastClickTimestamp: 0,
    dblClickMaxInterval: 300,
    openDialog: function() {
        this.get("viewingContent.scheduleContent").performDoubleClickOperation();
    },
    doubleClick: function(evt) {
        if (this.get("viewingContent")) evt.stopPropagation();
        this.set("lastClickTimestamp", new Date().getTime() + this.get("dblClickMaxInterval"));
        var viewingContent = this.get("viewingContent"), selection = this.get("settings.selection");
        if (viewingContent && selection) {
            selection.deselectItems();
            selection.set("lastSelected", viewingContent);
            viewingContent.toggleProperty("selected");
            Ember.run.scheduleOnce("afterRender", this, "openDialog");
        }
    },
    click: function(evt) {
        if (this.get("viewingContent")) evt.stopPropagation();
        var self = this, timeStamp = new Date().getTime();
        Ember.run.debounce(self, function() {
            if (timeStamp === self.get("lastClickTimestamp")) {
                self.send("selectItem", evt, self);
            }
        }, self.get("dblClickMaxInterval"));
        if (timeStamp > self.get("lastClickTimestamp")) {
            self.set("lastClickTimestamp", timeStamp);
        }
    },
    mouseEnter: function(evt) {
        this.send("hoverItem", evt, this);
    },
    mouseLeave: function(evt) {
        this.send("stopHoveringItem", evt, this);
    },
    actions: {
        selectItem: function(evt, view) {
            var selection = this.get("settings.selection");
            if (!evt.ctrlKey) {
                selection.deselectItems();
            }
            var structObj = this.get("viewingContent");
            selection.set("lastSelected", structObj);
            if (structObj !== undefined) {
                structObj.toggleProperty("selected");
            }
        },
        hoverItem: function(evt, view) {
            var selection = this.get("settings.selection"), viewingContent = this.get("viewingContent");
            if (selection && viewingContent) {
                viewingContent.set("hovered", true);
                selection.set("lastHovered", viewingContent);
            }
        },
        stopHoveringItem: function(evt, view) {
            var selection = this.get("settings.selection"), viewingContent = this.get("viewingContent");
            if (selection && viewingContent) {
                viewingContent.set("hovered", false);
                selection.set("lastHovered", null);
            }
        }
    }
});

App.ChartPluginComponentMixin = Ember.Mixin.create({
    model: null,
    disabledClickElements: "#search_filter",
    noDeselectClickElements: "",
    didInsertElement: function() {
        var self = this, container = self.$();
        Ember.$(window).on("resize", function(evt) {
            if (evt.originalEvent && (evt.originalEvent.target === window || evt.originalEvent.type == "chartRatioModified")) {
                Ember.run.once(self, "handleResizeDebounce");
            }
        });
        self.handleResize();
        $("body").on("click", "#elink_page_content", function(e) {
            if (e.originalEvent && !e.originalEvent.noDeselect) {
                self.get("settings.selection").deselectItems();
            }
        });
        container.on("click", self.get("disabledClickElements"), function(e) {
            e.stopPropagation();
        });
        container.on("click", self.get("noDeselectClickElements"), function(e) {
            if (e.originalEvent) e.originalEvent.noDeselect = true;
        });
    },
    handleResizeDebounce: function() {
        Ember.run.debounce(this, this.handleResize, 150);
    },
    handleResize: function() {
        var rightPanel = this.$().find(".right-panel"), rightPanelHeight = rightPanel.height(), chartBodyHeight = rightPanelHeight - $.makeArray(rightPanel.children(":not(.chart-body)")).map(function(content, index) {
            return $(content).outerHeight(true);
        }).reduce(function(a, b) {
            return a + b;
        }, 0), ppdHeight = this.get("settings.ppdHeight"), numRows = Math.floor(chartBodyHeight / ppdHeight);
        numRows = numRows < 0 ? 0 : numRows;
        this.get("model").setProperties({
            numRows: numRows
        });
    }
});

App.BaseScheduleTableComponent = Ember.Component.extend({
    classNames: [ "schedule-table" ],
    attributeBindings: [ "style" ],
    height: 0,
    _insertbeforeID: null,
    chartType: null,
    redoColumnResizableAfterRerender: function() {
        Ember.run.schedule("afterRender", this, function() {
            this.destroyColumnsResizable();
            this.columnsResizable();
        });
    }.observes("settings.columns"),
    columnsResizable: function() {
        var self = this, columns = this.$(".schedule-table-header > .schedule-table-header-column:not(.order)");
        columns.resizable({
            handles: "e",
            animate: false,
            stop: function(event, ui) {
                var el = $(ui.element), settings = self.get("settings");
                settings.get("updateColumnWidth").call(settings, el.attr("name"), el.width());
            }
        });
    },
    destroyColumnsResizable: function() {
        var columns = this.$(".schedule-table-header > .schedule-table-header-column:not(.order)");
        if (columns.data("ui-resizable")) {
            columns.resizable("destroy");
        }
    },
    rowsSortable: function() {
        var self = this;
        self.$().sortable({
            items: ".schedule-table-row.root-content",
            cancel: ".schedule-table-row:not(.root-content), .schedule-table-row.dummy-element",
            axis: "y",
            containment: "parent",
            cursor: "move",
            delay: 100,
            distance: 5,
            tolerance: "pointer",
            forceHelperSize: true,
            appendTo: "parent",
            helper: function(event, rootElement) {
                var dummy = $("<div/>").append(rootElement.clone()), element = rootElement.next();
                while (!element.hasClass("root-content") && !element.hasClass("dummy-element") && element.length) {
                    dummy.append(element.clone());
                    element.hide();
                    element = element.next();
                }
                return dummy;
            }
        }).on("sortstart", function(event, ui) {
            ui.helper.css("height", "auto");
            ui.placeholder.height(ui.helper.height());
        }).on("sortbeforestop", function(event, ui) {
            var nextRows = ui.placeholder.nextAll(".schedule-table-row.root-content");
            self.set("_insertbeforeID", nextRows.length ? nextRows[0].attributes["data-objcdbobjectid"].value : undefined);
        }).on("sortstop", function(event, ui) {
            var contentsStructure = self.get("model.contentsStructure");
            contentsStructure.get("switchItems").call(contentsStructure, ui.item.attr("data-objCdbObjectId"), self.get("_insertbeforeID"));
            $(this).sortable("cancel");
            self.$().find(".schedule-table-row").each(function() {
                $(this).css("display", "block");
            });
        });
    },
    didInsertElement: function() {
        Ember.run.scheduleOnce("afterRender", this, "calculateHeight");
        this.rowsSortable();
        this.columnsResizable();
    },
    willDestroyElement: function() {
        this.$().sortable("destroy");
        this.destroyColumnsResizable();
    },
    calculateHeight: function() {
        var parent = this.$().parent(), height = parent.height(), width = parent.width(), sibling = null;
        this.$().siblings().each(function() {
            sibling = $(this);
            if (sibling.contents().length && sibling.width() === width) height -= sibling.height();
        });
        this.set("height", height);
    }.observes("App.windowHeight"),
    style: function() {
        var width = this.get("settings.totalColumnsWidth"), leftPanelWidth = this.get("settings.globalSettings.leftPanelWidth");
        width = width >= leftPanelWidth ? width : leftPanelWidth;
        return "height:" + this.get("height") + "px; " + "width:" + width + "px;";
    }.property("height", "settings.totalColumnsWidth", "settings.globalSettings.leftPanelWidth"),
    tableContentHeight: function() {
        return this.get("height");
    }.property("height")
});

App.BaseScheduleTableRowComponent = Ember.Component.extend(App.SelectionMixin, {
    chartType: null,
    classNameBindings: [ "viewingContent.selected:selected", "viewingContent.hovered:gantt-hover", "isMarked:globally-marked", ":schedule-table-row", "isRoot:root-content", "viewingContent::dummy-element", "viewingContent.scheduleContent.planning_status", "viewingContent.scheduleContent.cssClass", "viewingContent.scheduleContent.drawBold:draw-bold", "viewingContent.scheduleContent.isDiscarded:draw-transparent" ],
    viewingContent: Ember.computed.alias("model.referencedObject"),
    attributeBindings: [ "objCdbObjectId:data-objCdbObjectId", "style:style" ],
    objCdbObjectId: Ember.computed.alias("viewingContent.scheduleContent.objCdbObjectId"),
    isRoot: function() {
        var content = this.get("viewingContent");
        return content && !content.get("level");
    }.property("viewingContent"),
    isMarked: function() {
        var obj = this.get("viewingContent.scheduleContent"), markedObjects = this.get("settings.selection.markedObjects");
        if (obj && $.isArray(markedObjects)) {
            return markedObjects.contains ? this.get("settings.selection.markedObjects").contains(obj.get("objCdbObjectId")) : false;
        }
        if (obj && markedObjects.get("constructor").toString() === "Ember.Object") {
            var marked_objects_attrs = window.appSettings.resources_marked_objects_attrs.findBy("classname", obj.get("class_name"));
            if (marked_objects_attrs) {
                return markedObjects.get(marked_objects_attrs.attr_name).contains(obj.get(marked_objects_attrs.key));
            } else {
                return false;
            }
        }
        return false;
    }.property("viewingContent.scheduleContent.objCdbObjectId", "settings.selection.markedObjects")
});

App.WithScrollMixin = Ember.Mixin.create({
    scrollBarView: Ember.computed.alias("model.contentsStructure.scrollBarView"),
    scrollOn: function() {
        var scrollBarView = this.get("scrollBarView");
        this.$().on("wheel", function(e) {
            if (e.target !== scrollBarView.get("scrollableElement")[0]) {
                if (e.originalEvent.deltaY > 0) {
                    scrollBarView.incrementProperty("scrollTicks");
                } else {
                    scrollBarView.decrementProperty("scrollTicks");
                }
                Ember.run.debounce(scrollBarView, scrollBarView.get("externalScrollFunction"), scrollBarView.get("scrollDelay"));
            }
        });
    },
    scrollOff: function() {
        this.$().off("wheel");
    }
});

App.BaseChartLeftPanelComponent = Ember.Component.extend(App.WithScrollMixin, {
    classNames: [ "left-panel" ],
    attributeBindings: [ "style" ],
    style: function() {
        return "width: " + this.get("settings.globalSettings.leftPanelWidth") + "px";
    }.property("settings.globalSettings.leftPanelWidth"),
    didInsertElement: function() {
        var self = this, leftPanel = self.$();
        leftPanel.resizable({
            axis: "x",
            containment: "parent",
            handles: "e",
            minWidth: this.get("settings.globalSettings.collapsed_left_panel_width"),
            animate: false,
            ghost: true,
            stop: function(event, ui) {
                var globalSettings = self.get("settings.globalSettings");
                globalSettings.get("updateLeftPanelWidth").call(globalSettings, Math.round(ui.size.width));
                if (globalSettings.get("columns_collapsed")) globalSettings.updateColumnsCollapsed();
                self.notifyPropertyChange("style");
            }
        });
        self.scrollOn();
    },
    willDestroyElement: function() {
        var leftPanel = this.$();
        if (leftPanel.data("ui-resizable")) leftPanel.resizable("destroy");
        this.scrollOff();
    }
});

App.BaseChartRightPanelComponent = Ember.Component.extend(App.WithScrollMixin, {
    classNames: [ "right-panel" ],
    didInsertElement: function() {
        this.scrollOn();
    },
    willDestroyElement: function() {
        this.scrollOff();
    }
});

App.BaseScrollBarComponent = Ember.Component.extend({
    classNameBindings: [ ":scroll-bar-container", "displayScrollBar::hidden" ],
    numRows: Ember.computed.alias("model.numRows"),
    numEntries: Ember.computed.alias("model.numEntries"),
    ppdHeight: Ember.computed.alias("settings.ppdHeight"),
    indexTop: Ember.computed.alias("model.indexTop"),
    scrollDelay: 100,
    scrollSensitivity: 1,
    scrollableElement: null,
    displayScrollBar: function() {
        return this.get("model.numRows") < this.get("model.numEntries");
    }.property("model.numRows", "model.numEntries"),
    _scrollTop: function() {
        if (!this.get("displayScrollBar") && this.get("indexTop")) this.set("indexTop", 0);
    }.observes("displayScrollBar"),
    parentHeight: function() {
        return this.get("ppdHeight") * (this.get("numRows") + 2);
    }.property("numRows", "ppdHeight"),
    contentHeight: function() {
        return this.get("ppdHeight") * (this.get("numEntries") + 3);
    }.property("numEntries", "ppdHeight"),
    scrollParentStyle: function() {
        var scrollableElement = this.get("scrollableElement");
        var additionalStyle = "";
        if (scrollableElement) {
            var topPosition = scrollableElement.parents(".left-panel").offset().top;
            additionalStyle = ";top:" + topPosition + "px";
        }
        return "height: " + this.get("parentHeight") + "px" + additionalStyle;
    }.property("parentHeight"),
    scrollContentStyle: function() {
        return "height: " + this.get("contentHeight") + "px";
    }.property("contentHeight"),
    externalScrollFunction: function() {
        var newIndexTop = this.get("indexTop") + this.get("scrollTicks") * this.get("scrollSensitivity");
        newIndexTop = Math.min(Math.max(newIndexTop, 0), this.get("numEntries"));
        if (newIndexTop !== this.get("indexTop")) {
            this.get("scrollableElement").scrollTop((newIndexTop + .5) * this.get("ppdHeight"));
        }
        this.set("scrollTicks", 0);
    },
    scrollFunction: function() {
        var pxOffset = Math.max(0, this.get("scrollableElement").scrollTop() - 2), newIndexTop = Math.floor(pxOffset / this.get("ppdHeight"));
        if (newIndexTop !== this.get("indexTop")) {
            this.get("model").set("indexTop", newIndexTop);
        }
    },
    didInsertElement: function() {
        var self = this, scrollableElement = self.$(".scroll-bar-parent");
        self.set("scrollableElement", scrollableElement);
        scrollableElement.on("scroll", function(e) {
            e.stopPropagation();
            Ember.run.debounce(self, self.get("scrollFunction"), self.get("scrollDelay"));
        });
        self.get("model.contentsStructure").set("scrollBarView", self);
    },
    willDestroyElement: function() {
        self.get("scrollableElement").off("scroll");
        this.get("model.contentsStructure").set("scrollBarView", null);
    }
});

App.BaseColumnSelectorComponent = Ember.Component.extend({
    classNames: [ "column-widget", "clickable" ],
    ulStyle: "",
    setUlStyle: function() {
        var self = this, elem = self.$();
        self.set("ulStyle", "max-height: " + (App.get("chartHeight") - 160) + "px");
    }.observes("App.chartHeight"),
    didInsertElement: function() {
        var self = this, element = self.$(), dropdownMenu = element.find("ul.dropdown-menu.columns-list");
        element.on("click.dropdown.data-api", ".column-selector input", function(e) {
            e.stopPropagation();
        }).on("wheel", function(e) {
            e.stopPropagation();
        }).on("click.dropdown.data-api", ".column-selector a", function(e) {
            e.preventDefault();
            e.stopPropagation();
        });
        element.sortable({
            items: ".column-selector.moveable",
            axis: "y",
            containment: "parent",
            cursor: "move",
            delay: 100,
            distance: 5,
            tolerance: "intersect",
            forceHelperSize: true,
            start: function(event, ui) {
                dropdownMenu.width(dropdownMenu.width());
            }
        });
        self.setUlStyle();
    },
    willDestroyElement: function() {
        var self = this, element = self.$(), dropdownMenu = element.find("ul.dropdown-menu.column-list");
        element.off("click.dropdown.data-api", ".column-selector input").off("click.dropdown.data-api", ".column-selector a").off("wheel");
        this.$().sortable("destroy");
    },
    actions: {
        saveColumns: function() {
            var listDOMItems = this.$().find(".column-selector"), columnNames = listDOMItems.map(function() {
                return $(this).data("name");
            }), columnVisibilities = listDOMItems.map(function() {
                return this.firstElementChild.firstElementChild.checked;
            });
            this.$(".dropdown-toggle").dropdown("toggle");
            this.get("model").saveColumns($.makeArray(columnNames), $.makeArray(columnVisibilities));
        },
        cancelChanges: function() {
            this.$(".dropdown-toggle").dropdown("toggle");
            this.rerender();
        },
        expandHideColumnsAction: function() {
            this.get("model.globalSettings").updateColumnsCollapsed();
        }
    }
});

App.BaseDatePickerView = Ember.Mixin.create({
    templateName: "base_date-picker",
    formattedDate: null,
    changeable: false,
    place: null,
    viewMode: "days",
    weekStart: 1,
    content: null,
    manualInput: false,
    didInsertElement: function() {
        this.set("dateFormat", cdb.elink.cdbDateFormat.toLowerCase());
    },
    doubleClick: function(evt) {
        evt.stopPropagation();
    },
    focusIn: function(evt) {
        this.$(".date:not(.disabled)").trigger("mouseenter").select();
    },
    mouseEnter: function(evt) {
        evt.stopPropagation();
        var self = this, oldDate = null, dateInput = self.$(".date:not(.disabled)");
        if (dateInput.data("datepicker")) return;
        var onChangeDate = function(ev) {
            var date = ev.date, content = self.get("content");
            content.set(self.get("propName"), App.momentConstructor([ date.getFullYear(), date.getMonth(), date.getDate() ]).startOf("day").add("hours", 12).valueOf());
            self.get("saveDate").call(self);
            return true;
        };
        dateInput.datepicker({
            autoclose: true,
            weekStart: self.get("weekStart"),
            format: self.get("dateFormat"),
            viewMode: self.get("viewMode"),
            minViewMode: self.get("viewMode"),
            language: cdb.elink.currentLanguage,
            keyboardNavigation: false,
            todayBtn: true,
            forceParse: false,
            todayHighlight: true,
            calendarWeeks: true,
            orientation: "left top"
        }).on("changeDate", onChangeDate).on("show", function() {
            var datepicker = dateInput.data("datepicker").picker;
            oldDate = self.get("value");
            if (datepicker.hasClass("datepicker-orient-top")) {
                datepicker.css("top", dateInput.offset().top + dateInput.outerHeight());
            }
        }).on("hide", function(ev) {
            var content = self.get("content");
            if (content && self.get("manualInput")) {
                var newValue = dateInput[0].value.trim();
                var propName = self.get("propName");
                if (newValue === "") {
                    self.get("clearDate").call(self);
                } else {
                    var newDate_utc = App.momentConstructor(newValue, self.get("dateFormat").toUpperCase()).startOf("day").add("hours", 12);
                    if (newDate_utc.isValid() && newDate_utc.parsingFlags().unusedTokens.length === 0) {
                        var newDate = newDate_utc.valueOf();
                        content.set(propName, newDate);
                        self.rerender();
                        self.get("saveDate").call(self);
                        dateInput.blur();
                    } else {
                        content.set(propName, oldDate);
                        self.rerender();
                    }
                }
            }
            self.set("manualInput", false);
            dateInput.datepicker("destroy");
            dateInput.data("datepicker", null);
            dateInput.off("focus").off("changeDate").off("show").off("hide").off("click").off("input");
        }).on("focus", function(evt) {
            evt.stopPropagation();
            dateInput.datepicker("update").datepicker("show");
        }).on("click", function(e) {
            e.stopPropagation();
            dateInput.select();
        }).on("keyup", function(e) {
            if (e.which == 27) {
                self.rerender();
            }
            if (e.which === 8 || e.which === 46) {
                self.set("manualInput", true);
            }
        }).on("input", function(e) {
            if (this.value.trim() !== self.get("formattedDate").trim()) {
                self.set("manualInput", true);
            }
        });
    }
});

App.TableCellBaseView = Ember.Mixin.create({
    column: null,
    content: null,
    chart: null,
    attr: null,
    refTable: null,
    observersAdded: false,
    disabled: function() {
        var attr = this.get("attr");
        if (!attr) return true;
        var notDisabled = this.get("content.scheduleContent.is" + this.get("attr").capitalize() + "Editable");
        return typeof notDisabled === "undefined" ? true : !notDisabled;
    }.property("content"),
    disabledSchedule: function() {
        return this.get("controller." + this.get("chart") + "Settings.schedule_permission_denied");
    }.property("content"),
    classNameBindings: [ ":schedule-table-cell" ],
    value: function() {
        var value = this.get("content") ? this.get("content.scheduleContent").get(this.get("column.name")) : null, format = this.get("column.format");
        if (value === null || value.toString().trim() === "") return value;
        if (format === "number") value = parseInt(value, 10);
        if (format === "float") value = parseFloat(value).toFixed(1);
        return value;
    }.property("content", "content.scheduleContent", "column.name"),
    addObservers: function() {
        if (!this.get("observersAdded")) {
            var scheduleContent = this.get("content.scheduleContent");
            if (typeof scheduleContent !== undefined && scheduleContent) {
                this.addObserver("content.scheduleContent." + this.get("column.name"), this, function() {
                    this.notifyPropertyChange("value");
                });
                this.addObserver("controller." + this.get("chart") + "Settings.schedule_permission_denied", this, function() {
                    this.notifyPropertyChange("disabledSchedule");
                });
                var attr = this.get("attr");
                if (attr && typeof this.get("content.scheduleContent.is" + attr.capitalize() + "Editable") !== "undefined") {
                    this.addObserver("content.scheduleContent.is" + this.get("attr").capitalize() + "Editable", this, function() {
                        this.notifyPropertyChange("disabled");
                    });
                }
                this.set("observersAdded", true);
            }
        }
    }.observes("content.scheduleContent"),
    willDestroyElement: function() {
        this.removeObserver("content.scheduleContent." + this.get("column.name"), this, function() {
            this.notifyPropertyChange("value");
        });
        this.removeObserver("controller." + this.get("chart") + "Settings.schedule_permission_denied", this, function() {
            this.notifyPropertyChange("disabledSchedule");
        });
        var attr = this.get("attr");
        if (attr && typeof this.get("content.scheduleContent.is" + attr.capitalize() + "Editable") !== "undefined") {
            this.removeObserver("content.scheduleContent.is" + this.get("attr").capitalize() + "Editable", this, function() {
                this.notifyPropertyChange("disabled");
            });
        }
        this.set("observersAdded", false);
    }
});

App.BaseEditableView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/base-editable",
    oldValue: null,
    editing: false,
    parseInput: $.noop,
    attr: "",
    testParsedInput: $.noop,
    isInteger: function(val) {
        return $.isNumeric(val) && parseFloat(val) == parseInt(val, 10) || !val;
    },
    asInteger: function(val) {
        return val ? parseInt(val, 10) : "";
    },
    isFloat: function(val) {
        return $.isNumeric(val) || !val;
    },
    asFloat: function(val) {
        return val ? parseFloat(val) : "";
    },
    compareValues: function(a, b) {
        var format = this.get("column.format");
        switch (format) {
          case "number":
            return parseInt(a, 10) === parseInt(b, 10);

          case "float":
            return parseFloat(a).toFixed(1) === parseFloat(b).toFixed(1);

          default:
            return a.toString().trim() === b.toString().trim();
        }
    },
    click: function(evt) {
        this.set("oldValue", this.get("value"));
        var input = this.$("input");
        if (this.get("content.selected")) {
            if (!evt.ctrlKey) {
                evt.stopPropagation();
                if (!this.get("disabled")) {
                    this.set("editing", true);
                }
            } else {
                input.blur();
            }
        } else {
            input.blur();
        }
    },
    selectInput: function() {
        Ember.run.debounce(this, function() {
            this.$("input").focus().select();
        }, 10);
    }.observes("editing"),
    doubleClick: function(evt) {
        evt.stopPropagation();
        this.$("input").blur();
    },
    focusOut: function(evt) {
        if (!this.get("disabled") && evt.target.nodeName === "INPUT") {
            this.set("editing", false);
            var oldVal = this.get("oldValue"), newVal = this.$("input")[0].value;
            if (this.get("testParsedInput").call(this, newVal)) {
                if (!this.get("compareValues").call(this, this.get("parseInput").call(this, newVal), oldVal)) {
                    this.saveChanges();
                }
            } else {
                this.set("content.scheduleContent." + this.get("attr"), oldVal);
                this.notifyPropertyChange("value");
            }
        }
    },
    keyPress: function(evt) {
        evt.stopPropagation();
        if (!this.get("disabled")) {
            switch (evt.keyCode) {
              case 13:
                this.$("input").blur();
                break;

              case 27:
                this.revertChanges();
                break;

              default:
            }
        }
    },
    revertChanges: function() {
        this.set("content.scheduleContent." + this.get("attr"), this.get("oldValue"));
        this.$("input").blur();
    },
    saveChanges: function() {
        var newValue = this.get("parseInput").call(this, this.$("input")[0].value), scheduleContent = this.get("content.scheduleContent");
        if (this.get("testParsedInput").call(this, newValue)) {
            scheduleContent.get("saveSingleParameter").bind(scheduleContent)(newValue, this.get("attr"));
        } else {
            this.notifyPropertyChange("content.scheduleContent." + this.get("attr"));
        }
    }
});

App.BaseIconView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/base-icon",
    src: function() {
        return this.get("value.icon");
    }.property("value"),
    desc: function() {
        return this.get("value.description");
    }.property("value")
});

App.BaseDefaultTextView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/base-default-text"
});

App.BaseDateView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/base-date",
    formatDate: function() {
        var val = this.get("value");
        return typeof val === "string" ? val : val ? UTCToDate(val).format(cdb.elink.cdbDateFormat) : "";
    }.property("value")
});

App.BaseCheckboxView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/base-checkbox",
    attrName: null,
    visible: true,
    boolValue: function() {
        if (this.get("isValueNull")) return null;
        return this.get("value") > .5;
    }.property("value"),
    isValueNull: function() {
        return this.get("value") === null;
    }.property("value"),
    click: function(event) {
        event.stopPropagation();
        Ember.$().click();
    },
    updateValue: function() {
        var value = this.get("boolValue");
        value = value === true ? 1 : value;
        value = value === false ? 0 : value;
        var scheduleContent = this.get("content.scheduleContent");
        if (typeof scheduleContent === "undefined" || scheduleContent === null) return;
        var oldValue = scheduleContent.get(this.get("attrName"));
        if (typeof oldValue === "undefined") return;
        if (value === 0 && (oldValue === null || oldValue === "")) return;
        if (value !== oldValue) {
            scheduleContent.get("saveSingleParameter").bind(scheduleContent)(value, this.get("attrName"));
        }
    }.observes("boolValue")
});

App.BaseTitleView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/base-title",
    title: Ember.computed.oneWay("value"),
    shiftPerLevel: 10,
    totalShift: function() {
        return this.get("shiftPerLevel") * this.get("viewingContent.level");
    }.property("shiftPerLevel", "viewingContent.level"),
    expandIconStyle: function() {
        var totalShift = this.get("shiftPerLevel") * this.get("content.level");
        return " padding-left: " + totalShift + "px;";
    }.property("content.level"),
    actions: {
        toggleChildren: function(viewingContent) {
            var contentsStructure = this.get("refTable.contentsStructure");
            contentsStructure.get("toggleChildren").call(contentsStructure, viewingContent);
        }
    }
});

App.BaseTitleWithoutExpandIconView = App.BaseEditableView.extend({
    templateName: "table-cell-views/base-title-without-expand-icon",
    attr: "title",
    testParsedInput: function(val) {
        return true;
    },
    parseInput: function(val) {
        return typeof val === "string" ? val.trim() : "";
    }
});

App.BaseDeleteView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/base-delete",
    localRes: "",
    srcPinActive: function() {
        return "" + this.get("localRes") + "images/Pin-Active.svg";
    }.property("localRes"),
    srcPinNotActiveTransparent: function() {
        return "" + this.get("localRes") + "images/Pin-NotActive-Transparent.svg";
    }.property("localRes"),
    srcPinNotActive: function() {
        return "" + this.get("localRes") + "images/Pin-NotActive.svg";
    }.property("localRes"),
    doubleClick: function(evt) {
        evt.stopPropagation();
    },
    actions: {
        toggleInSchedule: function() {
            if (!this.get("disabledSchedule")) {
                var value = this.get("value");
                if (value) {
                    var contentsStructure = this.get("refTable.contentsStructure"), model = this.get("content");
                    contentsStructure.get("toggleInScheduleAction").call(contentsStructure, model.get("scheduleContent.objCdbObjectId"), !model.get("scheduleContent.delete.inSchedule"));
                    model.get("scheduleContent.delete").toggleProperty("inSchedule");
                }
            }
        }
    }
});

App.BaseOperationsView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/base-operations",
    didInsertElement: function() {
        this._super();
        var toggle = this.$(".dropdown-toggle"), menu = this.$(".dropdown-menu"), self = this;
        toggle.dropdown().on("dropdownOpened", function(evt) {
            var container = self.$().closest(".chart-container"), spaceToTop = self.$().offset().top - container.offset().top, spaceToBottom = container.height() + container.offset().top - (self.$().offset().top + self.$().height()), menuHeight = menu.outerHeight(), gap = 15;
            if (spaceToBottom > spaceToTop) {
                self.$().find(".btn-group").removeClass("dropup").addClass("dropdown");
                if (spaceToBottom < menuHeight) {
                    menu.css({
                        height: "" + (spaceToBottom - gap) + "px",
                        "overflow-y": "scroll"
                    });
                }
            } else {
                self.$().find(".btn-group").removeClass("dropdown").addClass("dropup");
                if (spaceToTop < menuHeight) {
                    menu.css({
                        height: "" + (spaceToTop - gap) + "px",
                        "overflow-y": "scroll"
                    });
                }
            }
        });
        menu.on("mouseleave", function(evt) {
            toggle.click();
        });
        this.$().on("mousedown", function(evt) {
            evt.stopPropagation();
            evt.preventDefault();
        });
    },
    willDestroyElement: function() {
        this.$(".dropdown-menu").off("mouseleave");
        this.$(".dropdown-toggle").off("dropdownOpened");
        this.$().off("mousedown");
    },
    doubleClick: function(evt) {
        evt.stopPropagation();
    },
    actions: {
        run_operation: function(op_url) {
            $(document).trigger("click.dropdown.data-api");
            window.open(op_url, "_self");
            var contentsStructure = this.get("refTable.contentsStructure");
            contentsStructure.get("refresh").call(contentsStructure);
        }
    }
});