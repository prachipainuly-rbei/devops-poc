/*
 * Copyright (C) 2014 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact.de/
 *
 * Revision "$Id: app-util.js 165016 2017-09-12 13:47:23Z via $"
 */

var dateToStr = function(date) {
  return date.isValid() ? date.format(cdb.elink.cdbDateFormat) : '';
};

var strToDate = function(dateStr) {
  return App.momentConstructor(dateStr, cdb.elink.cdbDateFormat);
};

var UTCToDate = function(timestamp) {
  return App.momentConstructor(timestamp);
};

var simpleRelationCompare = function(obj1, obj2) {
  return obj1.get('predecessorID') === obj2.predecessorID &&
         obj1.get('successorID') === obj2.successorID &&
         obj1.get('type') === obj2.type;
};

var getRelationsInArray = function(obj, arr) {
  var clones = [];
  $.each(arr, function(index, value) {
    if (simpleRelationCompare(value, obj)) {
      clones.push(value);
    }
  });
  return clones;
};

Ember.Handlebars.helper('not', function(val) {
  return !val;
});

Ember.Handlebars.helper('isEqual', function(val1, val2,  options) {
  return Ember.isEqual(val1, val2);
});

App.BaseIfEqualComponent = Ember.Component.extend({
  isEqual: function() {
    return Ember.isEqual(this.get('param1'), this.get('param2'));
  }.property('param1', 'param2')
});

App.BaseElseEqualComponent = App.BaseIfEqualComponent.extend();

var alertCDBMessage = function(message, id) {
  if (message && message.length) {
    cdb.elink.alertCDBMessage(message.replace('\\n', '<br>'));
  } else {
    cdb.elink.alertCDBMessage("Correct error message (" + id + ") not found");
  }
}

var _ajax = Ember.RSVP.resolve(null);
function asyncPost(url, data, type) {
  _ajax = _ajax.then(function() {
    App.incrementProperty('ajaxCnt');
    return Ember.$.ajax({
      url: url,
      data: data,
      async: true,
      type: type ? type : 'GET',
      dataType: 'json'
    }).then(
      function(data) {
        App.decrementProperty('ajaxCnt');
        if (data && (typeof data === 'object')) {
          var keys = Object.keys(data);
          if (keys.length === 1 && keys[0] === 'error') {
            alertCDBMessage(data.error);
            App.set("errorHappened", true);
          }
        }
        return Ember.RSVP.resolve(data);
      },
      function(data) {
        alertCDBMessage(data.responseText);
        App.decrementProperty('ajaxCnt');
        App.set("errorHappened", true);
      }
    );
  });
  return _ajax;
}


var resizablePlugins = $.ui.resizable.prototype.plugins,
    newGhostPlugin = {
      'start': function() {
        var that = $(this).resizable( "instance" ), o = that.options, cs = that.size;
        that.helper.css('z-index', '2300');
        that.ghost = that.originalElement.clone();
        that.ghost
          .css({ opacity: 1, display: "block", position: "relative", height: 'auto', width: cs.width, margin: 0, left: 0, top: 0 })
          .addClass("ui-resizable-ghost")
          .addClass(typeof o.ghost === "string" ? o.ghost : "");
        that.ghost.appendTo(that.helper);
      },
      'resize': function() {
        var that = $(this).resizable( "instance" ),
            height = this.height();
        that.helper.height(height);
        if (that.ghost) {
          that.ghost.css({ position: "relative", height: height, width: that.size.width });
        }
      },
      'stop': function() {
        var that = $(this).resizable( "instance" );
        if (that.ghost && that.helper) {
          that.helper.get(0).removeChild(that.ghost.get(0));
        }
      }
};
Object.keys(resizablePlugins).forEach(function(key, index, enumerable) {
  resizablePlugins[key].forEach(function(item, index, enumerable) {
    if (item[0]==='ghost') {
      item[1] = newGhostPlugin[key];
    }
  });
});

Math.sign = Math.sign || function(x) {
  x = +x; // convert to a number
  if (x === 0 || isNaN(x)) {
    return x;
  }
  return x > 0 ? 1 : -1;
};

Number.isNaN = Number.isNaN || function(value) {
  return value !== value;
};

Number.isInteger = Number.isInteger || function(value) {
  return typeof value === "number" && 
         isFinite(value) && 
         Math.floor(value) === value;
};


//IE Event constructor polyfill
window.createNewEvent = function(eventName) {
    if(typeof(Event) === 'function') {
        var event = $.Event();
        event.type = eventName;
    }else{
        var event = document.createEvent('Event');
        event.initEvent(eventName, true, true);
        event = $.Event(event);
    }
    return event;
}

var oldToggle = $.fn.dropdown.prototype.constructor.Constructor.prototype.toggle;
$.fn.dropdown.prototype.constructor.Constructor.prototype.toggle = function() {
    oldToggle.apply(this);
    $(this).triggerHandler('dropdownOpened');
}