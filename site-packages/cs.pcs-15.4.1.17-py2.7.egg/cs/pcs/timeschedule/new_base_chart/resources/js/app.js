/*
 * Copyright (C) 2014 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact.de/
 *
 * Revision "$Id: app.js 163339 2017-08-15 13:10:30Z via $"
 */

mainApp = Ember.Application.extend({
  errorHappened: false,
  ajaxCnt: 0,
  renderingDelayed: false,

  init: function() {
      this._super();
      if ( !this.get('windowHeight') || !this.get('windowWidth')) {
        this.set('renderingDelayed', true);
        this.deferReadiness();
      }
  },
  
  getTemplateName: function(templateName) {
      var STRING_DECAMELIZE_REGEXP = (/([a-z\d])([A-Z])/g);
      return templateName.replace(STRING_DECAMELIZE_REGEXP, '$1-$2').toLowerCase().replace('-', '_');
  },
  
  Resolver : Ember.DefaultResolver.extend({
      //Get hbs templates when needed
      //If template is included in index.html, this one will be used
      //otherwise, the template will be loaded per ajax
      resolveTemplate : function(parsedName) {
          var template = this._super(parsedName),
              templateName = parsedName.fullNameWithoutType.replace(/\./g, '/'),
              templateType = null,
              filePath = null;
          if (templateName.indexOf('/') < 0) {
              //normal template
              templateName = this.namespace.get('getTemplateName')(templateName);
              if (templateName.indexOf('_') < 0) {
                  templateType = window.appSettings.chartType;
              } else {
                  templateType = templateName.split('_')[0];
              }
          } else {
              //component & helper templates
              templateType = templateName.split('/')[1].split('-')[0];
          }
          if (!template) {
              template = Ember.TEMPLATES[templateName];
              if (!template) {
                  filePath = window.appSettings[templateType + 'ChartLocalRes'] + 'custom_hbs/' + templateName + '.hbs';
                  $.ajax({
                    url : filePath,
                    async : false,
                    success : function(response) {
                      template = Ember.TEMPLATES[templateName] = Ember.Handlebars
                          .compile(response);
                    },
                    error : function(response) {
                      console.log('Error: ', response);
                    }
                  });
              }
          }
          return template;
      }
  }),
  
  displayLoadingGif: function() {
    if (this.get('ajaxCnt') === 0) {
      cdb.elink.stopWaiting();
    } else {
      cdb.elink.startWaiting();
    }
  }.observes('ajaxCnt'),

  windowHeight: function() {
    return $('#elink_page_content').height();
  }.property(),

  windowWidth:  function() {
    return $('#elink_page_content').width();
  }.property(),
  
  chartHeight: function() {
    return window.appSettings.chartType === 'full' ? 
        this.get('windowHeight') / 2 : 
        this.get('windowHeight');
  }.property('windowHeight')
});

Ember.TEMPLATES.application = Ember.Handlebars.compile('{{outlet}}');

var App = window.App = mainApp.create({

  rootElement: '#mainApp',

  ready: function() {
      // remove custom templates if the user hasn't deleted them
      window.appSettings.customTemplates = []
          .concat(window.appSettings.custom_base_templates || [])
          .concat(window.appSettings.custom_time_templates || [])
          .concat(window.appSettings.custom_resource_templates || [])
          .concat(window.appSettings.custom_full_templates || []);
      for (var i = 0; i < window.appSettings.customTemplates.length; i++) {
          delete Ember.TEMPLATES[window.appSettings.customTemplates[i]];
      }
      // inject labels into all controllers
      this.register('labels:main', Ember.Object.extend(window.appLabels), { singleton: true });
      this.inject('controller', 'labels', 'labels:main');
      this.inject('component', 'labels', 'labels:main');
  },

  //DEBUG
  LOG_TRANSITIONS: true,
  LOG_TRANSITIONS_INTERNAL: true,
  LOG_BINDINGS: true,
  LOG_VIEW_LOOKUPS: true,
  LOG_STACKTRACE_ON_DEPRECATION: true,
  LOG_VERSION: true,
  debugMode: true
});

App.moment = moment;
App.moment.lang(cdb.elink.currentLanguage);
App.momentConstructor = App.moment.utc;

Ember.RSVP.configure('onerror', function(e) {
  if (e && App.get('debugMode')) {
    console.log(e.message);
    console.log(e.stack);
  }
});

function _AppSizeChanged() {
  App.notifyPropertyChange('windowHeight');
  App.notifyPropertyChange('windowWidth');
  if (App.get('renderingDelayed')) {
    App.advanceReadiness();
    App.set('renderingDelayed', false);
  }
}

$(window).load(function() {
  _AppSizeChanged();
});

$(document).ready(function() {
  //IE 9, 10 treat all button with no defined type as type='submit'
  //this means that when an input with no parent form is changed, IE will trigger a button (elink_page_refresh in this case)
  //for no reason considering it the form submit button
  $('button').attr('type', 'button');

  $(window).on('resize', function(evt) {
    if (evt.originalEvent && evt.originalEvent.target === window) {
      Ember.run.scheduleOnce('sync', App, _AppSizeChanged);
    }
  });
});
