/*
 * Copyright (C) 2014 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact.de/
 *
 * Revision "$Id: app-model.js 164860 2017-09-08 13:30:40Z via $"
 */

App.Selection = Ember.Mixin.create(Ember.Object, {

    init: function() {
        this._super();
        this.set("selectedArray", Ember.A([]));
    },

  infoItem: function(){
    var selectedArray = this.get('selectedArray');
    switch(selectedArray.length){
      case 0:
        return this.get('lastHovered');
      case 1:
        return this.get('lastSelected');
      default:
        return null;
    }
  }.property('lastSelected', 'lastHovered', 'selectedArray.@each'),

  oneSelected: function(){
    return this.get('selectedArray').length === 1;
  }.property('lastSelected', 'selectedArray.@each'),

  notOneSelected: function(){
    return !this.get('oneSelected');
  }.property('oneSelected'),

  lastSelected: function(key, value, oldValue) {
    var selectedArray = this.get('selectedArray');
    if (value !== undefined) {
      this.propertyWillChange('selectedArray');
      if (value && !value.get('selected')){
        selectedArray.push(value);
      }else{
        selectedArray.splice(selectedArray.indexOf(value), 1);
      }
      this.propertyDidChange('selectedArray');
    }
    return selectedArray[selectedArray.length - 1];
  }.property(),

  _lastHovered: null,
  lastHovered: function(key, value, oldValue) {
    if (this.get('selectedArray').length) {
      return null;
    }else{
      if (value !== undefined) {
        this.set('_lastHovered', value);
        return value;
      }else{
        return this.get('_lastHovered');
      }
    }
  }.property(),

  deselectItems: function() {
    if (this.get('selectedArray.length')) {
      this.get('selectedArray').setEach('selected', false);
      this.set('selectedArray', Ember.A([]));
    }
    if (this.get('lastSelected')) this.set('lastSelected', null);
  }
});

App.Column = Ember.Object.extend({
  name: null,
  position: null,
  visible: null,
  moveable: null,
  always_visible: null,
  format: null,
  width: null,
  title: null,

  clickable: function() {
    return ['status_color', 'delete', 'operations'].indexOf(this.get('name')) >= 0;
  }.property('name'),

  columnStyle: function() {
    var columnStyle = 'width: ' + this.get('width') + 'px; ';
    if (this.get('globalSettings.columns_collapsed') && !this.get('always_visible')) {
      columnStyle += ' display:none;';
    }
    return columnStyle;
  }.property('width', 'always_visible', 'globalSettings.columns_collapsed')
});

App.WithColumns = Ember.Mixin.create({
    
    init: function() {
      this._super();
      // all defined columns
      this.set("_columns", Ember.A());
      // defaults for reserved space besides defined columns; will be
      // overwritten by classes using this mixin
      this.set("additionalAlwaysColumnSpace", 0);
    },
    
    chartDataURL: function() {
        return window.appSettings[this.get('settingsType') + 'ChartData'];
    }.property('settingsType'),
    
    setCollapsedLeftPanelWidth: function() {
      var oldWidth = this.get('globalSettings.collapsed_left_panel_width');
          newWidth = this._sumColumnWidths(
              this.get('columns').filterBy('always_visible', true), 
              this.get('additionalAlwaysColumnSpace')
          );
      if (newWidth > oldWidth) {
        this.set('globalSettings.collapsed_left_panel_width', newWidth);
      }
    },

    setColumns: function(columns) {
      columns = columns || [];
      var _columns = Ember.A([]),
          globalSettings = this.get('globalSettings');
      $.each(columns, function() {
          _columns.pushObject(App.Column.create(this, {'globalSettings': globalSettings}));
      });
      this.set('_columns', _columns);
      this.notifyPropertyChange('_columns');
      this.setCollapsedLeftPanelWidth();
    },

    columns: function() { // visible columns
      return this.get('_columns').filterBy('visible');
    }.property('_columns'),

    _sumColumnWidths: function(columns, additional) {
      var result = additional;
      columns.forEach(function(item) {result += item.width;});
      return result;
    },

    totalColumnsWidth: function() {
      var columns = this.get('columns'),
          addtnl = this.get('additionalAlwaysColumnSpace') + columns.length; // margin/padding 1px
      return this._sumColumnWidths(columns, addtnl);
    }.property('columns.@each.width'),
    
    updateColumnWidth: function(columnName, newWidth) {
        var self = this,
            _columns = self.get('_columns'),
            globalSettings = self.get('globalSettings');
        _columns.findBy('name', columnName).set('width', newWidth);
        globalSettings.get('updateLeftPanelWidth').call(globalSettings, self.get('totalColumnsWidth'));
        asyncPost(
          self.get('chartDataURL') + '/update_columns_width/post',
          {'column_name': columnName,
           'width': newWidth}
        );
    }
});

App.Settings = Ember.Object.extend({

  init: function() {
    this._super();
    this.set('chartType', window.appSettings.chartType);
  },

  chartType: null,
  left_panel_width: 0,
  collapsed_left_panel_width: 0,
  columns_collapsed: false,
  
  chartDataURL: function() {
      return window.appSettings[this.get('chartType') + 'ChartData'];
  }.property('chartType'),

  leftPanelWidth: function() {
    var leftPanelWidth = this.get('columns_collapsed') ? this.get('collapsed_left_panel_width') : this.get('left_panel_width');
    if (leftPanelWidth) {
      $(window).trigger({type: 'resize', isManuallyTriggered: true});
    }
    return leftPanelWidth;
  }.property('columns_collapsed', 'collapsed_left_panel_width', 'left_panel_width'),
  
  updateLeftPanelWidth: function(newWidth) {
      var self = this;
      asyncPost(
          this.get('chartDataURL') + '/update_left_panel_width/post',
          {'left_panel_width': newWidth}
      ).then(function() {
         self.set('left_panel_width', newWidth); 
      });
  },
  
  updateColumnsCollapsed: function(newColumnsCollapsed) {
      var self = this;
      if (typeof newColumnsCollapsed === "undefined") {
          newColumnsCollapsed = !self.get('columns_collapsed'); 
      }
      asyncPost(
        this.get('chartDataURL') + '/update_columns_collapsed/post',
        {'columns_collapsed': newColumnsCollapsed}
      ).then(function() { 
          self.set('columns_collapsed', newColumnsCollapsed); 
      });
  },
  
  load: function() {
    var self = this;
    return asyncPost(
        window.appSettings.baseChartData + '/settings',
        {}).then(function(data) {
          self.setProperties(data);
          cdb.elink.cdbDateFormat = data.date_format;
        });
  }
});

Ember.Application.initializer({
    name: "settings",

    initialize: function(container, application) {
        container.register('Settings:global', App.Settings, { instantiate: true, singleton: true });
    }
});