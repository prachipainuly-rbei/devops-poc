App.BaseDatePickerView = Ember.Mixin.create({
  templateName: 'base_date-picker',
  formattedDate: null,
  changeable: false,
  place: null,
  viewMode: 'days',
  weekStart: 1,
  content: null,
  manualInput: false,

  didInsertElement: function() {
      this.set('dateFormat', cdb.elink.cdbDateFormat.toLowerCase());
  },

  doubleClick: function(evt) {
    evt.stopPropagation();
  },

  focusIn: function(evt) {
    this.$('.date:not(.disabled)').trigger('mouseenter').select();
  },

  mouseEnter: function(evt) {
    evt.stopPropagation();
    var self = this,
      oldDate = null,
      dateInput = self.$('.date:not(.disabled)');
    if (dateInput.data('datepicker')) return;
    var onChangeDate = function(ev) {
        var date = ev.date,
            content = self.get('content');
        content.set(self.get('propName'), App.momentConstructor([
          date.getFullYear(),
          date.getMonth(),
          date.getDate()]).startOf('day').add('hours', 12).valueOf()
        );
        self.get('saveDate').call(self);
        return true;
      };
    dateInput.datepicker({
        'autoclose': true,
        'weekStart': self.get('weekStart'),
        'format': self.get('dateFormat'),
        'viewMode': self.get('viewMode'),
        'minViewMode': self.get('viewMode'),
        'language': cdb.elink.currentLanguage,
        'keyboardNavigation': false,
        'todayBtn': true,
        'forceParse': false,
        'todayHighlight': true,
        'calendarWeeks': true,
        'orientation': 'left top'
      })
    .on('changeDate', onChangeDate)
    .on('show', function() {
        //https://github.com/eternicode/bootstrap-datepicker/issues/576
        var datepicker = dateInput.data("datepicker").picker;
        oldDate = self.get("value");
        if (datepicker.hasClass("datepicker-orient-top")) {
          datepicker.css("top", dateInput.offset().top + dateInput.outerHeight());
        }
    }).on('hide', function(ev) {
        //manual change of input value here. for click selection see changeDate handler
        var content = self.get('content');
        if (content && self.get('manualInput')) {
          var newValue = dateInput[0].value.trim();
          var propName = self.get('propName');
          if (newValue === '') {
            self.get('clearDate').call(self);
          } else {
            var newDate_utc = App.momentConstructor(newValue, self.get('dateFormat').toUpperCase()).startOf('day').add('hours', 12);
            if ((newDate_utc.isValid()) && (newDate_utc.parsingFlags().unusedTokens.length === 0)) {
              var newDate = newDate_utc.valueOf();
              content.set(propName, newDate);
              self.rerender();
              self.get('saveDate').call(self);
              dateInput.blur();
            } else {
              content.set(propName, oldDate);
              self.rerender();
            }
          }
        }
        self.set('manualInput', false);
        dateInput.datepicker("destroy");
        dateInput.data('datepicker', null); //not deleted..
        dateInput.off('focus').off('changeDate').off('show').off('hide').off('click').off('input');
    }).on('focus', function(evt) {
        evt.stopPropagation();
        dateInput.datepicker('update').datepicker('show');
    }).on('click', function(e){
        e.stopPropagation();
        dateInput.select();
    }).on('keyup', function(e){
        if (e.which == 27) { //ESC
          self.rerender();
        }
        //IE9 triggert kein Backspace/Entfernen als Input
        if (e.which === 8 || e.which === 46) {
          self.set('manualInput', true);
        }
    }).on('input', function(e){
        //manual change of value (i.e. copy/paste)
        //many events triggered =>
        //only when datepicker is closed ('hide' event),
        //do we save the final value in content
        if (this.value.trim() !== self.get('formattedDate').trim()) {
          self.set('manualInput', true);
        }
    });
  }
});

///////////////////////////
//Table Cell Views   //
//////////////////////////
App.TableCellBaseView = Ember.Mixin.create({
  column: null,
  content: null,
  chart: null,
  attr: null,
  refTable:null,
  observersAdded: false,

  disabled: function() {
    var attr = this.get('attr');
    if (!attr) return true;
    var notDisabled = this.get('content.scheduleContent.is' + this.get('attr').capitalize() + 'Editable');
    return typeof notDisabled === "undefined" ? true : !notDisabled;
  }.property('content'),

  disabledSchedule: function() {
    return this.get('controller.' + this.get('chart') + 'Settings.schedule_permission_denied');
  }.property('content'),

  classNameBindings: [':schedule-table-cell'],

  value: function() {
	  var value = (this.get('content')) ? this.get('content.scheduleContent').get(this.get('column.name')) : null,
	      format = this.get('column.format');
	  if (value ===  null || value.toString().trim() === "") return value;
	  if (format === 'number') value = parseInt(value, 10);
	  if (format === 'float') value = parseFloat(value).toFixed(1);
	  return value;
  }.property('content', 'content.scheduleContent', 'column.name'),

  addObservers: function() {
      if (!this.get('observersAdded')) {
          var scheduleContent = this.get('content.scheduleContent');
          if (typeof scheduleContent !== undefined && scheduleContent) {
              this.addObserver(
                  'content.scheduleContent.' + this.get('column.name'),
                  this,
                  function(){
                    this.notifyPropertyChange('value');
                  }
              );
              this.addObserver(
                  'controller.' + this.get('chart') + 'Settings.schedule_permission_denied',
                  this,
                  function(){
                    this.notifyPropertyChange('disabledSchedule');
                  }
              );
              var attr = this.get('attr');
              if (attr && typeof this.get('content.scheduleContent.is' + attr.capitalize() + 'Editable') !== "undefined") {
                this.addObserver(
                    'content.scheduleContent.is' + this.get('attr').capitalize() + 'Editable',
                    this,
                    function() {
                      this.notifyPropertyChange('disabled');
                    }
                );
              }
              this.set('observersAdded', true);
          }
      }
  }.observes('content.scheduleContent'),

  willDestroyElement: function() {
    this.removeObserver(
        'content.scheduleContent.' + this.get('column.name'),
        this,
        function(){
          this.notifyPropertyChange('value');
        }
    );
    this.removeObserver(
        'controller.' + this.get('chart') + 'Settings.schedule_permission_denied',
        this,
        function(){
          this.notifyPropertyChange('disabledSchedule');
        }
    );
    var attr = this.get('attr');
    if (attr && typeof this.get('content.scheduleContent.is' + attr.capitalize() + 'Editable') !== "undefined") {
      this.removeObserver(
          'content.scheduleContent.is' + this.get('attr').capitalize() + 'Editable',
          this,
          function(){
            this.notifyPropertyChange('disabled');
          }
      );
    }
    this.set('observersAdded', false);
  }
});

App.BaseEditableView = Ember.View.extend(App.TableCellBaseView, {
  templateName: 'table-cell-views/base-editable',
  oldValue: null,
  editing: false,
  parseInput: $.noop,
  attr: '',
  testParsedInput: $.noop,

  isInteger: function(val) {
    return ($.isNumeric(val) && (parseFloat(val) == parseInt(val, 10))) || !val;
  },
  asInteger: function(val) {
    return val ? parseInt(val, 10) : "";
  },

  isFloat: function(val) {
    return $.isNumeric(val) || !val;
  },
  asFloat: function(val) {
    return (val) ? parseFloat(val) : "";
  },

  compareValues: function(a, b) {
    var format = this.get('column.format');
    switch (format) {
      case 'number':
        return parseInt(a, 10) === parseInt(b, 10);
      case 'float':
        return parseFloat(a).toFixed(1) === parseFloat(b).toFixed(1);
      default:
        return a.toString().trim() === b.toString().trim();
    }
  },

  click: function(evt) {
    this.set('oldValue', this.get('value'));
    var input = this.$('input');
    if (this.get('content.selected')) {
      if (!evt.ctrlKey) {
        evt.stopPropagation();
        if (!this.get('disabled')) {
          this.set('editing', true);
        }
      } else {
        input.blur();
      }
    } else {
      input.blur();
    }
  },

  selectInput: function() {
    Ember.run.debounce(this, function() {
      this.$('input').focus().select();
    }, 10);
  }.observes('editing'),

  doubleClick: function(evt) {
    evt.stopPropagation();
    this.$('input').blur();
  },

  focusOut: function(evt) {
    if (!this.get('disabled') && evt.target.nodeName === 'INPUT') {
      this.set('editing', false);
      var oldVal = this.get('oldValue'),
          newVal = this.$('input')[0].value;
      if (this.get('testParsedInput').call(this, newVal)) {
        if (!this.get('compareValues').call(this, this.get('parseInput').call(this, newVal), oldVal)) {
          this.saveChanges();
        }
      }
      else {
          this.set('content.scheduleContent.' + this.get('attr'), oldVal);
          this.notifyPropertyChange('value');
      }
    }
  },

  keyPress: function(evt) {
    evt.stopPropagation();
    if (!this.get('disabled')) {
      switch (evt.keyCode) {
        case 13: //enter
          this.$('input').blur();
          break;
        case 27: //esc
          this.revertChanges();
          break;
        default:

      }
    }
  },

  revertChanges: function() {
    this.set('content.scheduleContent.' + this.get('attr'), this.get('oldValue'));
    this.$('input').blur();
  },

  saveChanges: function() {
    var newValue = this.get('parseInput').call(this, this.$('input')[0].value),
        scheduleContent = this.get('content.scheduleContent');
    if (this.get('testParsedInput').call(this, newValue)) {
      scheduleContent.get('saveSingleParameter').bind(scheduleContent)(newValue, this.get('attr'));
    } else {
      this.notifyPropertyChange('content.scheduleContent.' + this.get('attr'));
    }
  }
});

App.BaseIconView = Ember.View.extend(App.TableCellBaseView, {
  templateName: 'table-cell-views/base-icon',

  src: function() {
    return this.get('value.icon');
  }.property('value'),

  desc: function() {
    return this.get('value.description');
  }.property('value')
});

App.BaseDefaultTextView = Ember.View.extend(App.TableCellBaseView, {
  templateName: 'table-cell-views/base-default-text'
});

App.BaseDateView = Ember.View.extend(App.TableCellBaseView, {
  templateName: 'table-cell-views/base-date',
  formatDate: function() {
    var val = this.get('value');
    return (typeof val === 'string') ?
            val :
            val ? UTCToDate(val).format(cdb.elink.cdbDateFormat) : '';
  }.property('value')
});

App.BaseCheckboxView = Ember.View.extend(App.TableCellBaseView, {
  templateName: 'table-cell-views/base-checkbox',
  attrName: null,
  visible: true,
  boolValue: function() {
	  if (this.get('isValueNull')) return null;
	  return this.get('value') > 0.5;
	}.property('value'),

  isValueNull: function() {
    return this.get('value') === null;
  }.property('value'),

  click: function(event) {
    event.stopPropagation();
    Ember.$().click();
  },

  updateValue: function() {
    var value = this.get('boolValue');
    value = value === true ? 1 : value;
    value = value === false ? 0 : value;
	  var scheduleContent = this.get('content.scheduleContent');
	  if (typeof scheduleContent === "undefined" || scheduleContent === null) return;
	  var oldValue = scheduleContent.get(this.get('attrName'));
	  if (typeof oldValue === "undefined") return;
	  if (value === 0 && (oldValue === null || oldValue === '')) return;
	  if (value !== oldValue) {
	    scheduleContent.get('saveSingleParameter').bind(scheduleContent)(value, this.get('attrName'));
	  }
  }.observes('boolValue')
});

App.BaseTitleView = Ember.View.extend(App.TableCellBaseView, {
    templateName: 'table-cell-views/base-title',
    title: Ember.computed.oneWay('value'),

    shiftPerLevel: 10,
    totalShift: function() {
      return this.get('shiftPerLevel') * this.get('viewingContent.level');
    }.property('shiftPerLevel', 'viewingContent.level'),

    expandIconStyle: function() {
      var totalShift = this.get('shiftPerLevel') * this.get('content.level');
      return ' padding-left: ' + totalShift + 'px;';
    }.property('content.level'),

    actions: {
      toggleChildren: function(viewingContent) {
        var contentsStructure = this.get('refTable.contentsStructure');
        contentsStructure.get('toggleChildren').call(contentsStructure, viewingContent);
      }
    }
});

App.BaseTitleWithoutExpandIconView = App.BaseEditableView.extend({
    templateName: 'table-cell-views/base-title-without-expand-icon',
    attr: "title",

    testParsedInput: function(val) {
      return true;
    },

    parseInput: function(val) {return typeof val === 'string' ? val.trim() : "";}
});

App.BaseDeleteView = Ember.View.extend(App.TableCellBaseView, {
  templateName: 'table-cell-views/base-delete',
  localRes: '',

  srcPinActive: function() {
    return '' + this.get('localRes')  +'images/Pin-Active.svg';
  }.property('localRes'),

  srcPinNotActiveTransparent: function() {
    return '' + this.get('localRes')  +'images/Pin-NotActive-Transparent.svg';
  }.property('localRes'),

  srcPinNotActive: function() {
    return '' + this.get('localRes')  +'images/Pin-NotActive.svg';
  }.property('localRes'),

  doubleClick: function(evt) {
    evt.stopPropagation();
  },

  actions: {
    toggleInSchedule: function() {
      if (!this.get('disabledSchedule')) {
        var value = this.get('value');
        if (value) {
          var contentsStructure = this.get('refTable.contentsStructure'),
              model = this.get('content');
          contentsStructure.get('toggleInScheduleAction').call(
            contentsStructure,
            model.get('scheduleContent.objCdbObjectId'),
            !model.get('scheduleContent.delete.inSchedule')
          );
          model.get('scheduleContent.delete').toggleProperty('inSchedule');
        }
      }
    }
  }
});

App.BaseOperationsView = Ember.View.extend(App.TableCellBaseView, {
    templateName: 'table-cell-views/base-operations',
    didInsertElement: function() {
        this._super();
        var toggle = this.$('.dropdown-toggle'),
            menu = this.$('.dropdown-menu'),
            self = this;
        toggle.dropdown().on('dropdownOpened', function(evt) {
            var container = self.$().closest('.chart-container'),
                spaceToTop = self.$().offset().top - container.offset().top,
                spaceToBottom = container.height() + container.offset().top - (self.$().offset().top + self.$().height()),
                menuHeight = menu.outerHeight(),
                gap = 15;
            if (spaceToBottom > spaceToTop) {
                self.$().find('.btn-group').removeClass('dropup').addClass('dropdown');
                if (spaceToBottom < menuHeight) {
                    menu.css({
                        'height': '' + (spaceToBottom - gap) + 'px',
                        'overflow-y': 'scroll'
                    });
                }
            } else {
                self.$().find('.btn-group').removeClass('dropdown').addClass('dropup');
                if (spaceToTop < menuHeight) {
                    menu.css({
                        'height': '' + (spaceToTop - gap) + 'px',
                        'overflow-y': 'scroll'
                    });
                }
            }
        });
        menu.on('mouseleave', function(evt) {
            toggle.click()
        });
        //IE triggers row sort....
        this.$().on('mousedown', function(evt) {
            evt.stopPropagation();
            evt.preventDefault();
        });
    },

    willDestroyElement: function() {
        this.$('.dropdown-menu').off('mouseleave');
        this.$('.dropdown-toggle').off('dropdownOpened');
        this.$().off('mousedown');
    },

    doubleClick: function(evt) {
        evt.stopPropagation();
    },

    actions: {
        run_operation: function(op_url) {
          $(document).trigger('click.dropdown.data-api');
          window.open(op_url, '_self');
          var contentsStructure = this.get('refTable.contentsStructure');
          contentsStructure.get('refresh').call(contentsStructure);
        }
    }
});