/*
 * Copyright (C) 2014 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact.de/
 *
 * Revision "$Id: app-reftable.js 152897 2017-02-01 16:14:48Z heg $"
 */

App.RefTableClass = Ember.Mixin.create(Ember.Evented, {

  numRows: 0,
  indexTop: 0,
  contentsStructure: null,
  content: null,
  refTableRowClass: null,
  delayRowUpdate: true,

  numEntries: function() {
    return this.get('contentsStructure.filteredContent.length');
  }.property('contentsStructure.filteredContent.length'),


  init: function() {
    var self = this,
        contentsStructure = self.get('contentsStructure');
    self._super();
    self.set('rows', Ember.A([]));
    contentsStructure.on('delayRowUpdate', function() {
      self.set('delayRowUpdate', true);
    });
    contentsStructure.on('resumeRowUpdate', function() {
      self.set('delayRowUpdate', false);
    });
  },

  create_rows: function() {
    var rows = this.get('rows'),
        numRows = this.get('numRows');
    rows.beginPropertyChanges();
    for(var i = rows.length; i < numRows; i++) {
      rows.pushObject(App.get(this.get('refTableRowClass')).create({rowIndex: i, refTable: this}));
    }
    rows.endPropertyChanges();
    this.notifyPropertyChange('rows');
  }.observes('numRows').on('init'),

  _updateReferences: function() {
    if (this.get('delayRowUpdate')) return;
    var self = this,
        indexTop = self.get('indexTop'),
        numRows = self.get('numRows'),
        lastIndex = numRows + indexTop,
        rows = self.get('rows'),
        contentsStructure = self.get('contentsStructure'),
        filteredContent = contentsStructure.all(),
        row = null;
    contentsStructure._all().setEach('refRowIndex', null);
    
    for (var i = indexTop; i < lastIndex; i++) {
      row = rows.objectAt(i - indexTop);
      if (row) row.updateReferences(filteredContent.objectAt(i));
    }
    if (rows.length > numRows) {
      rows.removeAt(numRows, rows.length - numRows);
    }
    
    // load async data
    Ember.run.scheduleOnce('sync', this, '_loadAsyncData');
  },
  
  _loadAsyncData: function() {
    var self = this,
        indexTop = self.get('indexTop'),
        numRows = self.get('numRows'),
        lastIndex = numRows + indexTop,
        contentsStructure = self.get('contentsStructure');
    if (contentsStructure.loadAsyncData) {
      contentsStructure.loadAsyncData(
          contentsStructure.all().objectsAt(
              new Array(lastIndex - indexTop + 1).join().split(",").map(function(item, index){ return ++index + indexTop - 1;})
          ).without(undefined)
      )
    }
  },
  
  updateReferences: function() {
    if (!this.get('delayRowUpdate')) {
      Ember.run.scheduleOnce('sync', this, '_updateReferences');
    }
  }.observes('contentsStructure.filteredContent.[]', 'contentsStructure.filteredContent.length', 'indexTop', 'numRows', 'delayRowUpdate')
});

App.RefTableRowClass = Ember.Mixin.create({
  rowIndex: undefined,
  referencedObject: undefined,
  updateReferences: function(contentStructureItem) {
    this.set('referencedObject', contentStructureItem);
    if (contentStructureItem) contentStructureItem.set('refRowIndex', this.get('rowIndex'));
  }
});
