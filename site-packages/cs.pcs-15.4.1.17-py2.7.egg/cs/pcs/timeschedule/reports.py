# !/usr/bin/env powerscript
# -*- python -*- coding: utf-8 -*-
#
# Copyright (C) 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
# Created on 26.02.2014
# @author: mher
import datetime
from cdb import sqlapi, cdbtime, auth
from cdb.objects import ByID
from cs.pcs.projects.tasks import Task
from cs.tools import powerreports as PowerReports
from cs.pcs.projects.chart import ChartConfig
from cs.pcs.timeschedule.new_time_chart.helper import TimeScheduleHelper
from cs.pcs.projects import Project


class ExportGantt(PowerReports.CustomDataProvider):
    CARD = PowerReports.CARD_N
    CALL_CARD = PowerReports.CARD_1

    def getData(self, parent_result, source_args, **kwargs):
        # Get the Start and end for the complete gantt
        startGantt = source_args.get("exportgantt-start", None)
        endGantt = source_args.get("exportgantt-end", None)
        StartDate = False
        if startGantt:
            StartDate = cdbtime.Time(startGantt).date()
        EndDate = False
        if endGantt:
            EndDate = cdbtime.Time(endGantt).date()

        def _flatten_schedule_content(obj, lvl, timeobjects):
            key = obj.keys()[0]
            timeobjects.append((lvl, key))
            children = obj[key]["children"]
            if children:
                for child in children:
                    result = _flatten_schedule_content(child, lvl + 1, timeobjects)
            return timeobjects

        def flatten_schedule_contents(to_list):
            timeobjects = []
            for obj in to_list:
                timeobjects = _flatten_schedule_content(obj, 0, timeobjects)
            return timeobjects

        time_schedule_id = parent_result.getObject().cdb_object_id
        expanded_ids = ChartConfig.getSetting(auth.persno, time_schedule_id, setting_name='#expandedId#')
        to_list = TimeScheduleHelper.get_changed_data(time_schedule_id=time_schedule_id,
                                                      expanded_ids=expanded_ids)["scheduleContents"]
        object_list = flatten_schedule_contents(to_list)
        timeobjects = []  # p.TimeScheduleContents
        for object_id in object_list:
            timeobjects.append((object_id[0], ByID(object_id[1])))

        result = PowerReports.ReportDataList(self)
        for singleobject in timeobjects:
            dataRD = PowerReports.ReportData(self)
            # soid = singleobject.content_oid
            socontent = singleobject[1]  # ByID(soid)

            level = singleobject[0]
            # spacestring = "-"
            # buildpre = lambda level, spacestring: "|" + spacestring * level if level != 0 else ""
            prefix = ""  # buildpre(level, spacestring)

            start = None
            end = None
            starts = socontent.getStartTimeFcast()
            ends = socontent.getEndTimeFcast()
            if starts is not None and starts != "":
                start = cdbtime.Time(starts).date()
            if ends is not None and starts != "":
                end = cdbtime.Time(ends).date()
            if (start is None or starts == "") and (isinstance(end, datetime.date)):
                start = end
            elif (end is None or end == "") and (isinstance(start, datetime.date)):
                end = start

            # misc.log_traceback(
            # "startDate %s endDate %s start %s end %s " % (str(StartDate), str(EndDate), starts, ends))
            dataRD["cdbxml_level"] = level
            dataRD[u"start-time"] = starts
            dataRD[u"end-time"] = ends
            # ### for a oure text title use the first variant, for a hyperlink use the second one
            # dataRD["titel"] = socontent.getName()
            dataRD[u"titel"] = PowerReports.MakeReportURL(socontent, text_to_display=prefix + socontent.getName())

            dataRD[u"psp-code"] = socontent.get_psp_code()
            soProject = Project.ByKeys(socontent.getProjectID())
            dataRD[u"project_hyperlink"] = PowerReports.MakeReportURL(soProject, text_to_display="cdb_project_id")
            if socontent.getAttributeValue(u"cdb_objektart") == u"cdbpcs_task" and socontent.getAttributeValue(
                    u"milestone"):
                dataRD[u"art"] = u"cdbpcs_milestone"
            else:
                dataRD[u"art"] = socontent.getAttributeValue(u"cdb_objektart")
            dataRD[u"time-status"] = socontent.getAttributeValue(u"status_time_fcast")
            dataRD[u"status_txt"] = socontent.getStatusText()
            if isinstance(socontent.getCompletion(), (int, long)) or isinstance(socontent.getCompletion(), float):
                dataRD[u"percent_complete"] = socontent.getCompletion() / 100.
            # The traffic light color which shows the status
            light_string = socontent.getAttributeValue(u"rating")
            light = u""
            if light_string == u"rot":
                light = 3
            elif light_string == u"gelb":
                light = 2
            elif light_string == u"gruen":
                light = 1
            dataRD[u"man_light"] = light
            # get the pre- and successorrelations
            if len(socontent.getPredecessorRelations()) != 0:
                violation = False
                for each in socontent.getPredecessorRelations():
                    if each.violation:
                        violation = True
                    if violation:
                        dataRD[u"parents-ok"] = 2
                    else:
                        dataRD[u"parents-ok"] = 0
            if len(socontent.getSuccessorRelations()) != 0:
                violation = False
                for each in socontent.getSuccessorRelations():
                    if each.violation:
                        violation = True
                if violation:
                    dataRD[u"children-ok"] = 2
                else:
                    dataRD[u"children-ok"] = 0
            result += dataRD
        return result

    def getSchema(self):
        t = PowerReports.XSDType(self.CARD, u'cdbpcs_time_schedule')
        t.add_attr(u"art", sqlapi.SQL_CHAR)
        t.add_attr(u"titel", sqlapi.SQL_CHAR)
        t.add_attr(u"psp-code", sqlapi.SQL_CHAR)
        t.add_attr(u"start-time", sqlapi.SQL_DATE)
        t.add_attr(u"end-time", sqlapi.SQL_DATE)
        t.add_attr(u"time-status", sqlapi.SQL_INTEGER)
        t.add_attr(u"parents-ok", sqlapi.SQL_INTEGER)
        t.add_attr(u"children-ok", sqlapi.SQL_INTEGER)
        t.add_attr(u"project_hyperlink", sqlapi.SQL_CHAR)
        t.add_attr(u"status_txt", sqlapi.SQL_CHAR)
        t.add_attr(u"percent_complete", sqlapi.SQL_FLOAT)
        t.add_attr(u"man_light", sqlapi.SQL_INTEGER)
        t.add_attr("cdbxml_level", sqlapi.SQL_INTEGER)
        return t

    def getArgumentDefinitions(self):
        return {u"start": sqlapi.SQL_DATE,
                u"end": sqlapi.SQL_DATE,
                u"range_code": sqlapi.SQL_CHAR}
