Ember.TEMPLATES["components/time-chart-bar"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('  <div class="progress-completion" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "percentCompleteStr"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></div>\r\n");
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('  <span class="text" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "textStyle"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n    ");
        stack1 = helpers._triageMustache.call(depth0, "viewingContent.scheduleContent.barDescription", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n  </span>\r\n");
        return buffer;
    },
    "5": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('  <i class="icon-circle end_plan_fix" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "labels.pcs_end_fix"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></i>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers.unless.call(depth0, "viewingContent.scheduleContent.isMilestone", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers["if"].call(depth0, "viewingContent.scheduleContent.barWidth", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(3, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers["if"].call(depth0, "viewingContent.scheduleContent.end_plan_fix", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(5, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/time-chart-plan-bar"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        data.buffer.push("\r\n");
    },
    useData: true
});

Ember.TEMPLATES["components/time-chart-plugin"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("      ");
        data.buffer.push(escapeExpression((helpers.render || depth0 && depth0.render || helperMissing).call(depth0, "timeRelationTooltip", {
            name: "render",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("      ");
        data.buffer.push(escapeExpression((helpers["time-chart"] || depth0 && depth0["time-chart"] || helperMissing).call(depth0, {
            name: "time-chart",
            hash: {
                model: "model",
                settings: "settings"
            },
            hashTypes: {
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="time-chart">\r\n  ');
        data.buffer.push(escapeExpression((helpers["time-chart-top"] || depth0 && depth0["time-chart-top"] || helperMissing).call(depth0, {
            name: "time-chart-top",
            hash: {
                model: "model",
                settings: "settings"
            },
            hashTypes: {
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('\r\n  <div class="bottom-panel">\r\n');
        stack1 = (helpers["base-chart-left-panel"] || depth0 && depth0["base-chart-left-panel"] || helperMissing).call(depth0, {
            name: "base-chart-left-panel",
            hash: {
                chartType: "time",
                model: "model",
                settings: "settings"
            },
            hashTypes: {
                chartType: "STRING",
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                chartType: depth0,
                model: depth0,
                settings: depth0
            },
            fn: this.program(1, data),
            inverse: this.noop,
            types: [],
            contexts: [],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = (helpers["base-chart-right-panel"] || depth0 && depth0["base-chart-right-panel"] || helperMissing).call(depth0, {
            name: "base-chart-right-panel",
            hash: {
                model: "model",
                settings: "settings"
            },
            hashTypes: {
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                model: depth0,
                settings: depth0
            },
            fn: this.program(3, data),
            inverse: this.noop,
            types: [],
            contexts: [],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("  </div>\r\n</div>\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/time-chart-relation"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "successorViewingContent.scheduleContent.hasDates", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "isRelationVisible", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(3, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('      <div>\r\n        <div class="relation-top">\r\n          <i class="icon-caret-left"></i>\r\n          <i class="icon-caret-right"></i>\r\n        </div>\r\n        <div class="relation-connector">\r\n        </div>\r\n        <div class="relation-bottom" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "styleBottom"
            },
            hashTypes: {
                style: "STRING"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n          <i class="icon-caret-left"></i>\r\n          <i class="icon-caret-right"></i>\r\n        </div>\r\n      </div>\r\n');
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1;
        stack1 = helpers["if"].call(depth0, "predecessorViewingContent.scheduleContent.hasDates", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        } else {
            data.buffer.push("");
        }
    },
    useData: true
});

Ember.TEMPLATES["components/time-chart-relations"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("  ");
        data.buffer.push(escapeExpression((helpers["time-chart-relation"] || depth0 && depth0["time-chart-relation"] || helperMissing).call(depth0, {
            name: "time-chart-relation",
            hash: {
                refTable: "refTable",
                model: "relation",
                settings: "settings"
            },
            hashTypes: {
                refTable: "ID",
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                refTable: depth0,
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers.each.call(depth0, "relation", "in", "viewingContent.scheduleContent.successorsRelations", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/time-chart-row"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        stack1 = helpers["if"].call(depth0, "viewingContent.scheduleContent.early_start", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("  \r\n  ");
        data.buffer.push(escapeExpression((helpers["time-chart-bar"] || depth0 && depth0["time-chart-bar"] || helperMissing).call(depth0, {
            name: "time-chart-bar",
            hash: {
                model: "model",
                settings: "settings"
            },
            hashTypes: {
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        stack1 = helpers["if"].call(depth0, "displayPlanBar", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(4, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("  \r\n");
        stack1 = helpers["if"].call(depth0, "viewingContent.scheduleContent.late_finish", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(6, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("  \r\n  ");
        data.buffer.push(escapeExpression((helpers["time-chart-relations"] || depth0 && depth0["time-chart-relations"] || helperMissing).call(depth0, {
            name: "time-chart-relations",
            hash: {
                refTable: "refTable",
                model: "model",
                settings: "settings"
            },
            hashTypes: {
                refTable: "ID",
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                refTable: depth0,
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("    <i ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: "leftIntervalBorderClass"
            },
            hashTypes: {
                class: "ID"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "leftIntervalBorderStyle"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></i>\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("    ");
        data.buffer.push(escapeExpression((helpers["time-chart-plan-bar"] || depth0 && depth0["time-chart-plan-bar"] || helperMissing).call(depth0, {
            name: "time-chart-plan-bar",
            hash: {
                model: "model",
                settings: "settings"
            },
            hashTypes: {
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    "6": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("    <i ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: "rightIntervalBorderClass"
            },
            hashTypes: {
                class: "ID"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "rightIntervalBorderStyle"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></i>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1;
        stack1 = helpers["if"].call(depth0, "viewingContent", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        } else {
            data.buffer.push("");
        }
    },
    useData: true
});

Ember.TEMPLATES["components/time-chart-top"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('        <a class="btn disabled">\r\n\t\t  <img ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                alt: "settings.firstOperation.iconLabel"
            },
            hashTypes: {
                alt: "ID"
            },
            hashContexts: {
                alt: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t\t  ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "settings.firstOperation.iconUrl"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n        </a>\r\n");
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("\t\t<a ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "settings.firstOperation.title"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('\r\n\t\t  target="_blank"\r\n\t\t  ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                href: "settings.firstOperation.url"
            },
            hashTypes: {
                href: "ID"
            },
            hashContexts: {
                href: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('\r\n\t\t  class="btn">\r\n\t\t  <img ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                alt: "settings.firstOperation.iconLabel"
            },
            hashTypes: {
                alt: "ID"
            },
            hashContexts: {
                alt: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t\t  ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "settings.firstOperation.iconUrl"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n\t\t</a>\r\n");
        return buffer;
    },
    "5": function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("          <li>\r\n            <a ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "op.tooltip"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n             ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "run_operation", "op.url", {
            name: "action",
            hash: {
                bubbles: false,
                target: "view"
            },
            hashTypes: {
                bubbles: "BOOLEAN",
                target: "STRING"
            },
            hashContexts: {
                bubbles: depth0,
                target: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push('>\r\n                <img class="operation_icon" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "op.iconUrl"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("/>\r\n              ");
        stack1 = helpers._triageMustache.call(depth0, "op.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n            </a>\r\n          </li>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, buffer = "";
        data.buffer.push('<div class="left-toolbar">\r\n  <div id="search_filter">\r\n    <div class="input-prepend elink-filter-input">\r\n      <span class="add-on">\r\n        <img ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "labels.filter_img_src"
            },
            hashTypes: {
                src: "ID"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n      </span>\r\n      ");
        data.buffer.push(escapeExpression((helpers.input || depth0 && depth0.input || helperMissing).call(depth0, {
            name: "input",
            hash: {
                value: "filterMessage",
                placeholder: "labels.cdbpcs_timeschedule_filter"
            },
            hashTypes: {
                value: "ID",
                placeholder: "ID"
            },
            hashContexts: {
                value: depth0,
                placeholder: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('\r\n    </div>\r\n  </div>\r\n  <div id="time_info_dropdown_menu">\r\n    <div ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn-group :elink-button-dropdown settings.operations_deactivated:disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n");
        stack1 = helpers["if"].call(depth0, "settings.operations_deactivated", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.program(3, data),
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push('\t  <button type="button" data-toggle="dropdown"\r\n\t    ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn :dropdown-toggle settings.operations_deactivated:disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n        <span class="caret"></span>\r\n      </button>\r\n      <ul ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":dropdown-menu settings.operations_deactivated:disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n");
        stack1 = helpers.each.call(depth0, "op", "in", "settings.ts_ops", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(5, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push('      </ul>\r\n    </div>\r\n  </div>\r\n  <div class="btn-group expand-icon" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "labels.pcs_expand"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n    <button type="button" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn settings.selection.lastSelected::disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "expandAction", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('>\r\n      &nbsp;\r\n    </button>\r\n  </div>\r\n  <div class="btn-group reveal-icon" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "labels.pcs_reveal"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n    <button type="button" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn settings.selection.lastSelected::disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "revealAction", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(">\r\n      &nbsp;\r\n    </button>\r\n  </div>\r\n  <div ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn-group :refresh-icon"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "labels.cdbpcs_update_schedule"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n    <button type="button" class="btn" ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "refreshAction", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('>\r\n      &nbsp;\r\n    </button>\r\n  </div>\r\n  <div class="btn-group jump-icon" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "labels.cdbpcs_jump_begining"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n    <button type="button" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn settings.selection.lastSelected::disabled"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "jumpAction", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('>\r\n      &nbsp;\r\n    </button>\r\n  </div>\r\n  <div class="btn-group time-icon" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "labels.cdbpcs_gantt_chart_interval_too_small"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n    <button type="button" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "timeAction", {
            name: "action",
            hash: {
                bubbles: false
            },
            hashTypes: {
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('>\r\n      &nbsp;\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<div class="right-toolbar">\r\n  ');
        data.buffer.push(escapeExpression((helpers["base-time-scale-control"] || depth0 && depth0["base-time-scale-control"] || helperMissing).call(depth0, {
            name: "base-time-scale-control",
            hash: {
                model: "settings.scale"
            },
            hashTypes: {
                model: "ID"
            },
            hashContexts: {
                model: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n</div>\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["components/time-chart"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("      <div ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":time-scale-header-cell cell.isWeekendDay:weekend-day"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n        ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "cell.style"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n          &nbsp;\r\n        </div>\r\n");
        return buffer;
    },
    "3": function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("  ");
        data.buffer.push(escapeExpression((helpers["time-chart-row"] || depth0 && depth0["time-chart-row"] || helperMissing).call(depth0, {
            name: "time-chart-row",
            hash: {
                refTable: "model",
                model: "row",
                settings: "settings"
            },
            hashTypes: {
                refTable: "ID",
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                refTable: depth0,
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, buffer = "";
        data.buffer.push('<div class="time-scale-header-lower-row" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "settings.scale.rowStyle"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n  <div class="fix-wraparound">\r\n');
        stack1 = helpers.each.call(depth0, "cell", "in", "settings.scale.lowerRow", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("  </div>\r\n</div>\r\n");
        stack1 = helpers.each.call(depth0, "row", "in", "model.rows", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(3, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("<div id='today_bar'");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "view.todayBarStyle"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></div>\r\n<div id='selected_area'");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "view.selectedAreaStyle"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("></div>\r\n");
        data.buffer.push(escapeExpression((helpers.render || depth0 && depth0.render || helperMissing).call(depth0, "timeChartBarTooltip", {
            name: "render",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["index"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="chart-container" style="height: 100%">\r\n  ');
        data.buffer.push(escapeExpression((helpers["time-chart-plugin"] || depth0 && depth0["time-chart-plugin"] || helperMissing).call(depth0, {
            name: "time-chart-plugin",
            hash: {
                model: "timeReftable",
                settings: "timeSettings"
            },
            hashTypes: {
                model: "ID",
                settings: "ID"
            },
            hashContexts: {
                model: depth0,
                settings: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n</div>\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/time-constraint_date"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "time_constraint-date-picker", {
            name: "view",
            hash: {
                propName: "constraint_date",
                settingsBinding: "settings",
                contentBinding: "view.content.scheduleContent",
                formattedDateBinding: "view.content.scheduleContent.constraintDateStr",
                valueBinding: "view.content.scheduleContent.constraint_date",
                changeableBinding: "view.content.scheduleContent.isConstraintDateEditable"
            },
            hashTypes: {
                propName: "STRING",
                settingsBinding: "STRING",
                contentBinding: "STRING",
                formattedDateBinding: "STRING",
                valueBinding: "STRING",
                changeableBinding: "STRING"
            },
            hashContexts: {
                propName: depth0,
                settingsBinding: depth0,
                contentBinding: depth0,
                formattedDateBinding: depth0,
                valueBinding: depth0,
                changeableBinding: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("  \r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/time-end_date"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("\t");
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "time_start-end-date-picker", {
            name: "view",
            hash: {
                propName: "end_date",
                settingsBinding: "settings",
                contentBinding: "view.content.scheduleContent",
                formattedDateBinding: "view.content.scheduleContent.endDateStr",
                valueBinding: "view.content.scheduleContent.end_date",
                changeableBinding: "view.content.scheduleContent.isEndEditable"
            },
            hashTypes: {
                propName: "STRING",
                settingsBinding: "STRING",
                contentBinding: "STRING",
                formattedDateBinding: "STRING",
                valueBinding: "STRING",
                changeableBinding: "STRING"
            },
            hashContexts: {
                propName: depth0,
                settingsBinding: depth0,
                contentBinding: depth0,
                formattedDateBinding: depth0,
                valueBinding: depth0,
                changeableBinding: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers.unless.call(depth0, "view.content.scheduleContent.isEndHidden", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/time-relations-buttons"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="btn-group">\r\n  <button type="button" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn :predecessors view.predecessorsConflictClass"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.predecessorsTitle"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n    ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "openRelationsLeft", {
            name: "action",
            hash: {
                target: "view",
                on: "click",
                bubbles: false
            },
            hashTypes: {
                target: "STRING",
                on: "STRING",
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                target: depth0,
                on: depth0,
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('>\r\n    <i class="icon-angle-left"></i>\r\n  </button>\r\n  <button type="button" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":btn :successors view.successorsConflictClass"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.successorsTitle"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n    ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "openRelationsRight", {
            name: "action",
            hash: {
                target: "view",
                on: "click",
                bubbles: false
            },
            hashTypes: {
                target: "STRING",
                on: "STRING",
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                target: depth0,
                on: depth0,
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('>\r\n    <i class="icon-angle-right"></i>\r\n  </button>\r\n</div>  ');
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/time-relations-pre"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "view.editMode", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "view.editMode", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(4, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("\t  ");
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "timePredecessorsRelationsEdit", {
            name: "view",
            hash: {
                settingsBinding: "settings",
                refTableBinding: "refTable",
                relationsBinding: "view.value",
                contentBinding: "content"
            },
            hashTypes: {
                settingsBinding: "STRING",
                refTableBinding: "STRING",
                relationsBinding: "STRING",
                contentBinding: "STRING"
            },
            hashContexts: {
                settingsBinding: depth0,
                refTableBinding: depth0,
                relationsBinding: depth0,
                contentBinding: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("\t  ");
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "timePredecessorsRelationsDisplay", {
            name: "view",
            hash: {
                relationsBinding: "view.value"
            },
            hashTypes: {
                relationsBinding: "STRING"
            },
            hashContexts: {
                relationsBinding: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('\r\n\t  <i class="icon-edit relations-edit clickable" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "controller.labels.op_edit"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t  ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "openEditMode", {
            name: "action",
            hash: {
                target: "view",
                on: "click",
                bubbles: false
            },
            hashTypes: {
                target: "STRING",
                on: "STRING",
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                target: depth0,
                on: depth0,
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("></i>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1;
        stack1 = helpers["if"].call(depth0, "view.hasRelations", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        } else {
            data.buffer.push("");
        }
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/time-relations-suc"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "view.editMode", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "view.editMode", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(4, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("\t  ");
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "timeSuccessorsRelationsEdit", {
            name: "view",
            hash: {
                settingsBinding: "settings",
                refTableBinding: "refTable",
                relationsBinding: "view.value",
                contentBinding: "content"
            },
            hashTypes: {
                settingsBinding: "STRING",
                refTableBinding: "STRING",
                relationsBinding: "STRING",
                contentBinding: "STRING"
            },
            hashContexts: {
                settingsBinding: depth0,
                refTableBinding: depth0,
                relationsBinding: depth0,
                contentBinding: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("\t  ");
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "timeSuccessorsRelationsDisplay", {
            name: "view",
            hash: {
                relationsBinding: "view.value"
            },
            hashTypes: {
                relationsBinding: "STRING"
            },
            hashContexts: {
                relationsBinding: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push('\r\n\t  <i class="icon-edit relations-edit clickable" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "controller.labels.op_edit"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t  ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "openEditMode", {
            name: "action",
            hash: {
                target: "view",
                on: "click",
                bubbles: false
            },
            hashTypes: {
                target: "STRING",
                on: "STRING",
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                target: depth0,
                on: depth0,
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("></i>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1;
        stack1 = helpers["if"].call(depth0, "view.hasRelations", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        } else {
            data.buffer.push("");
        }
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/time-start_date"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("\t");
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "time_start-end-date-picker", {
            name: "view",
            hash: {
                propName: "start_date",
                settingsBinding: "settings",
                contentBinding: "view.content.scheduleContent",
                formattedDateBinding: "view.content.scheduleContent.startDateStr",
                valueBinding: "view.content.scheduleContent.start_date",
                changeableBinding: "view.content.scheduleContent.isStartEditable"
            },
            hashTypes: {
                propName: "STRING",
                settingsBinding: "STRING",
                contentBinding: "STRING",
                formattedDateBinding: "STRING",
                valueBinding: "STRING",
                changeableBinding: "STRING"
            },
            hashContexts: {
                propName: depth0,
                settingsBinding: depth0,
                contentBinding: depth0,
                formattedDateBinding: depth0,
                valueBinding: depth0,
                changeableBinding: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1;
        stack1 = helpers.unless.call(depth0, "view.content.scheduleContent.isStartHidden", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        } else {
            data.buffer.push("");
        }
    },
    useData: true
});

Ember.TEMPLATES["table-cell-views/time-status_color"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<div class="status-container">\r\n    <div ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":circle view.disabled:readonly"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "view.style"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.description"
            },
            hashTypes: {
                title: "ID"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n         ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "changeStatus", {
            name: "action",
            hash: {
                target: "view",
                on: "click",
                bubbles: false
            },
            hashTypes: {
                target: "STRING",
                on: "STRING",
                bubbles: "BOOLEAN"
            },
            hashContexts: {
                target: depth0,
                on: depth0,
                bubbles: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push(">\r\n    </div>\r\n</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_chart-bar-tooltip"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        return "";
    },
    useData: true
});

Ember.TEMPLATES["time_default-bar-tooltip"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push('    <ul class="chart-tooltip dropdown-menu popover">\r\n      <div class="arrow"></div>\r\n      <li><a>');
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n      <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.startDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(" - ");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.endDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n    </ul>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "model", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_milestone-bar-tooltip"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push('  <ul class="chart-tooltip dropdown-menu popover">\r\n      <div class="arrow"></div>\r\n      <li><a>');
        stack1 = helpers._triageMustache.call(depth0, "labels.milestone", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(": ");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n      <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.endDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n    </ul>\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "model", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_project-bar-tooltip"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push('    <ul class="chart-tooltip dropdown-menu popover">\r\n      <div class="arrow"></div>\r\n      <li><a>');
        stack1 = helpers._triageMustache.call(depth0, "labels.cdbpcs_project", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(": ");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n      <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.startDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(" - ");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.endDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n      <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.duration", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        stack1 = helpers["if"].call(depth0, "model.scheduleContent.multipleWorkdays", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.program(4, data),
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("           </a></li>\r\n    </ul>\r\n");
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("              ");
        stack1 = helpers._triageMustache.call(depth0, "labels.workdays_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("              ");
        stack1 = helpers._triageMustache.call(depth0, "labels.workday_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "model", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_project-planbar-tooltip"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push('    <ul class="chart-tooltip dropdown-menu popover">\r\n      <div class="arrow"></div>\r\n      <li><a>');
        stack1 = helpers._triageMustache.call(depth0, "labels.cdbpcs_project", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(": ");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n      <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.startPlanDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(" - ");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.endPlanDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n      <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.duration_plan", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        stack1 = helpers["if"].call(depth0, "model.scheduleContent.multiplePlanWorkdays", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.program(4, data),
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("           </a></li>\r\n    </ul>\r\n");
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("              ");
        stack1 = helpers._triageMustache.call(depth0, "labels.workdays_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("              ");
        stack1 = helpers._triageMustache.call(depth0, "labels.workday_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "model", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_relation-pre"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "relation.predecessor.scheduleContent.delete.inSchedule", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "relation.predecessor.scheduleContent.delete.inSchedule", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(4, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("        <img ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "relation.icon_url"
            },
            hashTypes: {
                src: "STRING"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('        <img class="clickable" \r\n          ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "relation.icon_url"
            },
            hashTypes: {
                src: "STRING"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n          ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "fixOther", "relation", {
            name: "action",
            hash: {
                bubbles: false,
                target: "view"
            },
            hashTypes: {
                bubbles: "BOOLEAN",
                target: "STRING"
            },
            hashContexts: {
                bubbles: depth0,
                target: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push("\r\n          ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.fixLabel"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n        >\r\n");
        return buffer;
    },
    "6": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('      <img class="clickable" \r\n        ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "relation.icon_url"
            },
            hashTypes: {
                src: "STRING"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n        ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "fixOther", "relation", {
            name: "action",
            hash: {
                bubbles: false,
                target: "view"
            },
            hashTypes: {
                bubbles: "BOOLEAN",
                target: "STRING"
            },
            hashContexts: {
                bubbles: depth0,
                target: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push("\r\n        ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.fixLabel"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n      >\r\n");
        return buffer;
    },
    "8": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("        ");
        stack1 = helpers._triageMustache.call(depth0, "relation.predecessor.index", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    "10": function(depth0, helpers, partials, data) {
        data.buffer.push("        &nbsp;\r\n");
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("<span ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":label relation.conflict:conflict:no-conflict"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n    \r\n");
        stack1 = helpers["if"].call(depth0, "relation.predecessor", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "relation.predecessor", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(6, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("  \r\n    <span>\r\n      ");
        stack1 = helpers._triageMustache.call(depth0, "relation.type_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n      \r\n");
        stack1 = helpers["if"].call(depth0, "relation.predecessor.index", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(8, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "relation.predecessor.index", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(10, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("      \r\n      ");
        stack1 = helpers._triageMustache.call(depth0, "relation.minimalGapInDays", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push('\r\n    </span>\r\n  \r\n  <i class="icon-remove-sign clickable" \r\n    ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteRelation", "relation", {
            name: "action",
            hash: {
                bubbles: false,
                target: "view"
            },
            hashTypes: {
                bubbles: "BOOLEAN",
                target: "STRING"
            },
            hashContexts: {
                bubbles: depth0,
                target: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push(" \r\n    ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "relation.preDelTitle"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n   ></i>\r\n</span>\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_relation-suc"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "relation.successor.scheduleContent.delete.inSchedule", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "relation.successor.scheduleContent.delete.inSchedule", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(4, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("        <img ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "relation.icon_url"
            },
            hashTypes: {
                src: "STRING"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('        <img class="clickable" \r\n          ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "relation.icon_url"
            },
            hashTypes: {
                src: "STRING"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n          ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "fixOther", "relation", {
            name: "action",
            hash: {
                bubbles: false,
                target: "view"
            },
            hashTypes: {
                bubbles: "BOOLEAN",
                target: "STRING"
            },
            hashContexts: {
                bubbles: depth0,
                target: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push("\r\n          ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.fixLabel"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n        >\r\n");
        return buffer;
    },
    "6": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('      <img class="clickable" \r\n        ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                src: "relation.icon_url"
            },
            hashTypes: {
                src: "STRING"
            },
            hashContexts: {
                src: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n        ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "fixOther", "relation", {
            name: "action",
            hash: {
                bubbles: false,
                target: "view"
            },
            hashTypes: {
                bubbles: "BOOLEAN",
                target: "STRING"
            },
            hashContexts: {
                bubbles: depth0,
                target: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push("\r\n        ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "view.fixLabel"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n      >\r\n");
        return buffer;
    },
    "8": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("        ");
        stack1 = helpers._triageMustache.call(depth0, "relation.successor.index", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    "10": function(depth0, helpers, partials, data) {
        data.buffer.push("        &nbsp;\r\n");
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("<span ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                class: ":label relation.conflict:conflict:no-conflict"
            },
            hashTypes: {
                class: "STRING"
            },
            hashContexts: {
                class: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(">\r\n\r\n");
        stack1 = helpers["if"].call(depth0, "relation.successor", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "relation.successor", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(6, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("  \r\n    <span>\r\n      ");
        stack1 = helpers._triageMustache.call(depth0, "relation.type_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n    \r\n");
        stack1 = helpers["if"].call(depth0, "relation.successor.index", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(8, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        stack1 = helpers.unless.call(depth0, "relation.successor.index", {
            name: "unless",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(10, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("      \r\n      ");
        stack1 = helpers._triageMustache.call(depth0, "relation.minimalGapInDays", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push('\r\n    </span>\r\n  \r\n  <i class="icon-remove-sign clickable" \r\n    ');
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "deleteRelation", "relation", {
            name: "action",
            hash: {
                bubbles: false,
                target: "view"
            },
            hashTypes: {
                bubbles: "BOOLEAN",
                target: "STRING"
            },
            hashContexts: {
                bubbles: depth0,
                target: depth0
            },
            types: [ "STRING", "ID" ],
            contexts: [ depth0, depth0 ],
            data: data
        })));
        data.buffer.push(" \r\n    ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "relation.sucDelTitle"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n   ></i>\r\n</span>\r\n  ");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_relation-tooltip"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('\t<ul class="relation-tooltip dropdown-menu popover right" ');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                style: "view.style"
            },
            hashTypes: {
                style: "ID"
            },
            hashContexts: {
                style: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push('>\r\n\t  <div class="arrow"></div>\r\n\t  <li><a>');
        stack1 = helpers._triageMustache.call(depth0, "view.classLabel", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(": ");
        stack1 = helpers._triageMustache.call(depth0, "view.tempTooltipObj.scheduleContent.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n    <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "view.tempTooltipObj.scheduleContent.startDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(" - ");
        stack1 = helpers._triageMustache.call(depth0, "view.tempTooltipObj.scheduleContent.endDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n    <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "view.tempTooltipObj.scheduleContent.duration", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        stack1 = helpers["if"].call(depth0, "view.tempTooltipObj.scheduleContent.multipleWorkdays", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.program(4, data),
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("    </a></li>\r\n\t</ul>\r\n");
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("            ");
        stack1 = helpers._triageMustache.call(depth0, "labels.workdays_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("            ");
        stack1 = helpers._triageMustache.call(depth0, "labels.workday_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "view.tempTooltipObj", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_relations-pre-display"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("    ");
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "time_relation-pre", {
            name: "view",
            hash: {
                model: "relation"
            },
            hashTypes: {
                model: "ID"
            },
            hashContexts: {
                model: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push('<div class="relation-tags" tabindex="999">\r\n');
        stack1 = helpers.each.call(depth0, "relation", "in", "view.relations", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_relations-pre-edit"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<input type="text" class="editable relations-input"\r\n\t');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "controller.labels.cdbpcs_gantt_create_relations"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n\t");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                value: "view.inputValue"
            },
            hashTypes: {
                value: "STRING"
            },
            hashContexts: {
                value: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                disabled: "view.disabled"
            },
            hashTypes: {
                disabled: "ID"
            },
            hashContexts: {
                disabled: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n>\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_relations-suc-display"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push("    ");
        data.buffer.push(escapeExpression(helpers.view.call(depth0, "time_relation-suc", {
            name: "view",
            hash: {
                model: "relation"
            },
            hashTypes: {
                model: "ID"
            },
            hashContexts: {
                model: depth0
            },
            types: [ "STRING" ],
            contexts: [ depth0 ],
            data: data
        })));
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push('<div class="relation-tags" tabindex="999">\r\n');
        stack1 = helpers.each.call(depth0, "relation", "in", "view.relations", {
            name: "each",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID", "ID", "ID" ],
            contexts: [ depth0, depth0, depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</div>");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_relations-suc-edit"] = Ember.Handlebars.template({
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var escapeExpression = this.escapeExpression, buffer = "";
        data.buffer.push('<input type="text" class="editable relations-input"\r\n\t');
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                title: "controller.labels.cdbpcs_gantt_create_relations"
            },
            hashTypes: {
                title: "STRING"
            },
            hashContexts: {
                title: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push(" \r\n\t");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                value: "view.inputValue"
            },
            hashTypes: {
                value: "STRING"
            },
            hashContexts: {
                value: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n\t");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            name: "bind-attr",
            hash: {
                disabled: "view.disabled"
            },
            hashTypes: {
                disabled: "ID"
            },
            hashContexts: {
                disabled: depth0
            },
            types: [],
            contexts: [],
            data: data
        })));
        data.buffer.push("\r\n>\r\n");
        return buffer;
    },
    useData: true
});

Ember.TEMPLATES["time_task-bar-tooltip"] = Ember.Handlebars.template({
    "1": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push('    <ul class="chart-tooltip dropdown-menu popover">\r\n      <div class="arrow"></div>\r\n      <li><a>');
        stack1 = helpers._triageMustache.call(depth0, "labels.cdbpcs_task", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(": ");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.title", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n      <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.startDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push(" - ");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.endDateStr", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\r\n      <li><a>");
        stack1 = helpers._triageMustache.call(depth0, "model.scheduleContent.duration", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        stack1 = helpers["if"].call(depth0, "model.scheduleContent.multipleWorkdays", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(2, data),
            inverse: this.program(4, data),
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("      </a></li>\r\n    </ul>\r\n");
        return buffer;
    },
    "2": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("              ");
        stack1 = helpers._triageMustache.call(depth0, "labels.workdays_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    "4": function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        data.buffer.push("              ");
        stack1 = helpers._triageMustache.call(depth0, "labels.workday_label", {
            name: "_triageMustache",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\r\n");
        return buffer;
    },
    compiler: [ 6, ">= 2.0.0-beta.1" ],
    main: function(depth0, helpers, partials, data) {
        var stack1, buffer = "";
        stack1 = helpers["if"].call(depth0, "model", {
            name: "if",
            hash: {},
            hashTypes: {},
            hashContexts: {},
            fn: this.program(1, data),
            inverse: this.noop,
            types: [ "ID" ],
            contexts: [ depth0 ],
            data: data
        });
        if (stack1 != null) {
            data.buffer.push(stack1);
        }
        return buffer;
    },
    useData: true
});

App.IndexRoute.reopen({
    beforeModel: function() {
        var self = this;
        return this._super().then(function() {
            return self.container.lookup("Settings:timeChart").load();
        });
    },
    model: function(params) {
        var self = this;
        return this._super(params).then(function() {
            return self.container.lookup("ScheduleContent:timeChartStructure").load();
        });
    },
    setupController: function(controller, model) {
        this._super(controller, model);
        controller.set("timeSettings", this.container.lookup("Settings:timeChart"));
        controller.set("timeReftable", this.container.lookup("ScheduleContent:timeChartReftable"));
    }
});

App.TimeSelection = Ember.Object.extend(App.Selection, {
    markedObjects: Ember.A([])
});

Ember.Application.initializer({
    name: "time_selection",
    initialize: function(container, application) {
        container.register("Selection:timeSelection", App.TimeSelection, {
            singleton: true
        });
    }
});

App.TimeSettings = Ember.Object.extend(App.WithColumns, {
    settingsType: "time",
    scale: null,
    personal_start_date: null,
    margin_left: null,
    time_schedule_id: null,
    rel_types: [],
    ppdHeight: 24,
    init: function() {
        this._super();
        this.set("additionalAlwaysColumnSpace", 26);
    },
    firstOperation: function() {
        var ts_ops = this.get("ts_ops");
        var ts_ops_empty = {
            iconLabel: "default",
            iconUrl: this.get("default_info_icon"),
            url: ""
        };
        return ts_ops.length ? ts_ops[0] : ts_ops_empty;
    }.property("ts_ops"),
    saveColumnVisibility: function(columnName, columnVisibility) {
        var self = this, _columns = self.get("_columns"), onSuccess = function() {
            _columns.findBy("name", columnName).set("visible", columnVisibility);
            self.notifyPropertyChange("_columns");
            var globalSettings = self.get("globalSettings");
            globalSettings.get("updateLeftPanelWidth").call(globalSettings, self.get("totalColumnsWidth"));
        };
        asyncPost(window.appSettings.timeChartData + "/update_columns_visibility/post", {
            column_name: columnName,
            visible: columnVisibility
        }).then(onSuccess.bind(self));
    },
    saveColumns: function(columnNames, columnVisibilities) {
        var self = this, positionIndex = 0, data2Send = [];
        $.each(columnNames, function(index, name) {
            data2Send.push({
                name: name,
                position: positionIndex++,
                visible: columnVisibilities[index]
            });
        });
        var onSuccess = function() {
            var self = this, _columns = self.get("_columns"), newColumns = Ember.A([]);
            self.beginPropertyChanges("_columns");
            $.each(data2Send, function(_index, colObj) {
                newColumns.pushObject(_columns.findBy("name", colObj.name).setProperties({
                    visible: colObj.visible,
                    position: colObj.position
                }));
            });
            self.set("_columns", newColumns);
            self.endPropertyChanges("_columns");
            Ember.run.scheduleOnce("sync", self, function() {
                var globalSettings = self.get("globalSettings");
                globalSettings.get("updateLeftPanelWidth").call(globalSettings, self.get("totalColumnsWidth"));
            });
        };
        asyncPost(window.appSettings.timeChartData + "/update_columns/post", {
            columns: JSON.stringify(data2Send)
        }).then(onSuccess.bind(self));
    },
    _saveTimePersonalDates: function() {
        var self = this, personal_start_date = self.get("scale.personal_start_date"), pixels_per_day = self.get("scale.pixelsPerDay"), postData = {
            personal_start_date: personal_start_date,
            pixels_per_day: pixels_per_day
        };
        if (personal_start_date !== self.get("personal_start_date") || pixels_per_day !== self.get("pixels_per_day")) {
            asyncPost(window.appSettings.timeChartData + "/update_time_frame/post", postData).then(function() {
                self.setProperties(postData);
            });
        }
    },
    saveTimePersonalDates: function() {
        Ember.run.once(this, "_saveTimePersonalDates");
    },
    load: function() {
        var self = this, onSuccess = function(data) {
            self.setProperties(data);
            self.setColumns(self.get("_columns_as_dict"));
            if (window.appSettings.chartType === "time") {
                var globalSettings = self.get("globalSettings"), new_left_panel_width = self.get("left_panel_width");
                if (new_left_panel_width != null) {
                    globalSettings.set("left_panel_width", new_left_panel_width);
                } else {
                    globalSettings.get("updateLeftPanelWidth").call(globalSettings, self.get("totalColumnsWidth"));
                }
                globalSettings.set("columns_collapsed", self.get("columns_collapsed"));
                var personal_start_date = self.get("personal_start_date"), pixels_per_day = self.get("pixels_per_day");
                if (!personal_start_date || !pixels_per_day) App.__container__.lookup("ScheduleContent:timeChartStructure").set("recomputeChartDates", true);
                self.get("scale").off("timeFrameChanged", self, self.saveTimePersonalDates).on("timeFrameChanged", self, self.saveTimePersonalDates).setStartScale(personal_start_date, pixels_per_day);
            }
        };
        return asyncPost(window.appSettings.timeChartData + "/settings", {
            chart_type: window.appSettings.chartType
        }).then(onSuccess.bind(self));
    }
});

Ember.Application.initializer({
    name: "time_settings",
    after: [ "settings", "time_selection", "timescale" ],
    initialize: function(container, application) {
        container.register("Settings:timeChart", App.TimeSettings, {
            instantiate: true,
            singleton: true
        });
        application.inject("Settings:timeChart", "globalSettings", "Settings:global");
        application.inject("Settings:timeChart", "scale", "timescale:main");
        application.inject("Settings:timeChart", "selection", "Selection:timeSelection");
    }
});

App.RelationsArray = Ember.ArrayProxy.extend({
    content: null,
    init: function() {
        this.set("content", Ember.A([]));
    },
    _toString: function() {
        var predIndex = 0;
        return this.get("content").reduce(function(previousValue, item, index, enumerable) {
            return previousValue + item.get("_toString").call(item) + ", ";
        }, "");
    }
});

App.TimeScheduleContent = Ember.Object.extend(Ember.Evented, {
    init: function() {
        this._super();
        this.resetStructure();
    },
    updateObjectSync: function(props) {
        this.setProperties($.extend({
            asyncDataLoaded: false
        }, props));
    },
    updateObjectAsync: function(props) {
        this.setProperties($.extend({
            asyncDataLoaded: true
        }, props));
    },
    resetStructure: function() {
        this.set("structureObjects", Ember.A([]));
    },
    asyncDataLoaded: false,
    disableBarComputations: false,
    barWidth: 0,
    drawBold: function() {
        var bold = this.get("class_name");
        return bold == "drawBold";
    }.property("drawBold"),
    setBarWidth: function() {
        if (!this.get("disableBarComputations")) {
            this.set("barWidth", this.get("settings.scale").computeDatesWidth(this.get("startDate"), this.get("endDate")));
        }
    }.observes("startDate", "endDate", "settings.scale.pixelsPerDay", "disableBarComputations").on("init"),
    barPosition: 0,
    setBarPosition: function() {
        if (!this.get("disableBarComputations")) {
            this.set("barPosition", this.get("settings.scale").computeDatePosition(this.get("startDate")));
        }
    }.observes("startDate", "settings.scale.startDateView", "settings.scale.pixelsPerDay", "disableBarComputations").on("init"),
    barEnd: function() {
        return this.get("barPosition") + this.get("barWidth");
    }.property("barPosition", "barWidth"),
    disablePlanBarComputations: false,
    barPlanWidth: 0,
    setBarPlanWidth: function() {
        if (!this.get("disablePlanBarComputations")) {
            this.set("barPlanWidth", this.get("settings.scale").computeDatesWidth(this.get("startPlanDate"), this.get("endPlanDate")));
        }
    }.observes("startPlanDate", "endPlanDate", "settings.scale.pixelsPerDay", "disablePlanBarComputations").on("init"),
    barPlanPosition: 0,
    setBarPlanPosition: function() {
        if (!this.get("disablePlanBarComputations")) {
            this.set("barPlanPosition", this.get("settings.scale").computeDatePosition(this.get("startPlanDate")));
        }
    }.observes("startPlanDate", "settings.scale.startDateView", "settings.scale.pixelsPerDay", "disablePlanBarComputations").on("init"),
    barStyle: function() {
        return this.get("hasDates") ? "width:" + this.get("barWidth") + "px;" + "left:" + this.get("barPosition") + "px;" : "display: none";
    }.property("hasDates", "barWidth", "barPosition"),
    _createDeleteObject: function() {
        var _delete = this.get("delete");
        if (!(_delete instanceof Ember.Object)) {
            this.set("delete", Ember.Object.create(_delete));
        }
    }.observes("delete").on("init"),
    _createStatusObject: function() {
        var status_color = this.get("status_color");
        if (!(status_color instanceof Ember.Object)) {
            this.set("status_color", Ember.Object.create(status_color));
        }
    }.observes("status_color").on("init"),
    _createPredecessorsRelationsObject: function() {
        this.beginPropertyChanges("predecessorsRelations");
        this.set("predecessorsRelations", App.RelationsArray.create());
        var predecessors_relations = this.get("predecessors_relations"), predecessorsRelations = this.get("predecessorsRelations");
        $.each(predecessors_relations, function(index, _relation) {
            predecessorsRelations.pushObject(App.Relation.create($.extend(_relation, {
                is_successor: true
            })));
        });
        this.endPropertyChanges("predecessorsRelations");
    }.observes("predecessors_relations").on("init"),
    _createSuccessorsRelationsObject: function() {
        this.beginPropertyChanges("successorsRelations");
        this.set("successorsRelations", App.RelationsArray.create());
        var successors_relations = this.get("successors_relations"), successorsRelations = this.get("successorsRelations");
        $.each(successors_relations, function(index, _relation) {
            successorsRelations.pushObject(App.Relation.create($.extend(_relation, {
                is_successor: false
            })));
        });
        this.endPropertyChanges("successorsRelations");
    }.observes("successors_relations").on("init"),
    backupAttributes: [ "start_date", "end_date", "start_date", "end_date" ],
    isBarDragging: false,
    isPlanBarDragging: false,
    structureObjects: null,
    setBackupAttributes: function() {
        var self = this;
        backupAttributes = this.get("backupAttributes");
        backupAttributes.forEach(function(item, index, enumerable) {
            self.set("backup_" + item, self.get(item));
        });
    },
    predecessorsConflict: function() {
        if (!this.get("predecessorsRelations.length")) {
            return -1;
        } else {
            return this.get("predecessorsRelations").reduce(function(previousValue, item, index, enumerable) {
                return previousValue || item.get("conflict");
            }, 0);
        }
    }.property("predecessorsRelations.@each.conflict"),
    multipleWorkdays: function() {
        if (this.duration < 2) return false;
        return true;
    }.property("duration"),
    multiplePlanWorkdays: function() {
        if (this.duration_plan < 2) return false;
        return true;
    }.property("duration_plan"),
    successorsConflict: function() {
        if (!this.get("successorsRelations.length")) {
            return -1;
        } else {
            return this.get("successorsRelations").reduce(function(previousValue, item, index, enumerable) {
                return previousValue || item.get("conflict");
            }, 0);
        }
    }.property("successorsRelations.@each.conflict"),
    startDate: function() {
        return UTCToDate(this.get("start_date"));
    }.property("start_date"),
    endDate: function() {
        return UTCToDate(this.get("end_date"));
    }.property("end_date"),
    startPlanDate: function() {
        return UTCToDate(this.get("start_date_plan"));
    }.property("start_date_plan"),
    endPlanDate: function() {
        return UTCToDate(this.get("end_date_plan"));
    }.property("end_date_plan"),
    startDateStr: function() {
        return dateToStr(this.get("startDate"));
    }.property("startDate"),
    endDateStr: function() {
        return dateToStr(this.get("endDate"));
    }.property("endDate"),
    constraintDate: function() {
        return UTCToDate(this.get("constraint_date"));
    }.property("constraint_date"),
    constraintDateStr: function() {
        return dateToStr(this.get("constraintDate"));
    }.property("constraintDate"),
    startPlanDateStr: function() {
        return dateToStr(this.get("startPlanDate"));
    }.property("startDate"),
    endPlanDateStr: function() {
        return dateToStr(this.get("endPlanDate"));
    }.property("endDate"),
    earlyStart: function() {
        return UTCToDate(this.get("early_start")).subtract("days", 1);
    }.property("early_start"),
    lateFinish: function() {
        return UTCToDate(this.get("late_finish")).add("days", 1);
    }.property("late_finish"),
    hasDates: false,
    setHasDates: function() {
        if (!this.get("disableBarComputations")) {
            var newHasDates = this.get("start_date") && this.get("end_date");
            if (this.get("hasDates") !== newHasDates) {
                this.set("hasDates", newHasDates);
            }
        }
    }.observes("start_date", "end_date", "disableBarComputations").on("init"),
    performDoubleClickOperation: function() {
        window.open(this.get("modifyOperationUrl"), "_self");
        this.trigger("dataChanged");
    },
    saveStartEndDates: function(inTable) {
        var data = {}, self = this;
        if (self.get("start_date") !== self.get("backup_start_date")) {
            data.start_date = self.get("start_date");
        }
        if (self.get("end_date") !== self.get("backup_end_date")) {
            data.end_date = self.get("end_date");
        }
        if (Object.keys(data).length) {
            data.cdb_object_id = this.get("objCdbObjectId");
            data.drag = this.get("isBarDragging");
            data.in_table = inTable;
            asyncPost(window.appSettings.timeChartData + "/update_start_end_dates/post", data).then(function(data) {
                self.trigger("dataChanged");
                if (data && Object.keys(data).indexOf("error") !== -1) {
                    self.set("start_date", self.get("backup_start_date"));
                    self.set("end_date", self.get("backup_end_date"));
                }
            });
        }
    },
    saveStartEndPlanDates: function() {
        var data = {}, self = this;
        if (self.get("start_date_plan") !== self.get("backup_start_date_plan")) data.start_date_plan = self.get("start_date_plan");
        if (self.get("end_date_plan") !== self.get("backup_end_date_plan")) data.end_date_plan = self.get("end_date_plan");
        if (Object.keys(data).length) {
            data.cdb_object_id = this.get("objCdbObjectId");
            asyncPost(window.appSettings.timeChartData + "/update_start_end_plan_dates/post", data).then(function(data) {
                self.trigger("dataChanged");
            });
        }
    },
    saveConstraintDate: function() {
        var data = {}, self = this;
        data.constraint_date = self.get("constraint_date");
        data.cdb_object_id = this.get("objCdbObjectId");
        asyncPost(window.appSettings.timeChartData + "/update_constraint_date/post", data).then(function(data) {
            self.trigger("dataChanged");
        });
    },
    saveSingleParameter: function(value, paramName) {
        var self = this, oldValue = self.get(paramName);
        data = {
            cdb_object_id: self.get("objCdbObjectId")
        };
        data[paramName] = value;
        self.set(paramName, value);
        asyncPost(window.appSettings.timeChartData + "/update_" + paramName + "/post", data).then(function(data) {
            self.trigger("dataChanged");
        });
    }
});

App.TimeScheduleContents = Ember.ArrayProxy.extend(Ember.Evented, {
    content: Ember.A([]),
    loadedTimeStamp: null,
    _all: function() {
        return this.get("content");
    },
    onDataChanged: function() {
        this.trigger("dataChanged");
    },
    addScheduleContent: function(data) {
        var _scheduleContent = $.extend(data, {
            settings: this.get("settings")
        });
        var scheduleContent = App.TimeScheduleContent.create(_scheduleContent);
        scheduleContent.on("dataChanged", this, this.onDataChanged);
        return this.pushObject(scheduleContent);
    },
    resetStructures: function() {
        this.get("content").forEach(function(item) {
            item.resetStructure();
        });
    }
});

Ember.Application.initializer({
    name: "time_schedule_contents",
    after: [ "time_settings" ],
    initialize: function(container, application) {
        container.register("ScheduleContent:timeChart", App.TimeScheduleContents, {
            instantiate: true,
            singleton: true
        });
        application.inject("ScheduleContent:timeChart", "settings", "Settings:timeChart");
    }
});

App.TimeScheduleContentStructure = Ember.Object.extend({
    init: function() {
        this._super();
        this.get("scheduleContent.structureObjects").pushObject(this);
    },
    scheduleContent: null,
    level: 0,
    parent: null,
    _isHiddenByAncestor: false,
    isExpanded: false,
    isHiddenByClone: false,
    hovered: false,
    selected: false,
    hiddenByCloneFunction: function() {
        var model = this;
        if (model.get("scheduleContent.structureObjects").length < 2) {
            model.set("isHiddenByClone", false);
        } else {
            var maxLevel = -1, visibleStructureObject = null, structureObjects = model.get("scheduleContent.structureObjects");
            structureObjects = structureObjects.filter(function(content, index) {
                return !content.get("isHiddenByAncestor");
            });
            if (!structureObjects.length) return;
            $.each(structureObjects, function(index, content) {
                if (content.get("level") > maxLevel) {
                    maxLevel = content.get("level");
                    visibleStructureObject = content;
                }
                content.set("isHiddenByClone", true);
            });
            visibleStructureObject.set("isHiddenByClone", false);
        }
    }.observes("scheduleContent.structureObjects.length", "scheduleContent.structureObjects.@each.isHiddenByAncestor"),
    isHiddenByAncestor: function(key, value) {
        var model = this, parent = null;
        if (value === undefined) {
            parent = model.get("parent");
            if (model.get("level")) {
                if (parent === null) {
                    model.set("_isHiddenByAncestor", false);
                } else {
                    if (!parent.get("isExpanded")) {
                        model.set("_isHiddenByAncestor", true);
                    } else {
                        model.set("_isHiddenByAncestor", model.get("parent.isHiddenByAncestor") || model.get("parent.isHiddenByClone"));
                    }
                }
            } else {
                model.set("_isHiddenByAncestor", false);
            }
            return model.get("_isHiddenByAncestor");
        } else {
            model.set("_isHiddenByAncestor", value);
            return value;
        }
    }.property("parent.isExpanded", "parent.isHiddenByAncestor", "_isHiddenByAncestor", "parent.isHiddenByClone")
});

App.TimeScheduleContentsStructure = Ember.ArrayProxy.extend(Ember.Evented, {
    recomputeChartDates: false,
    selectionStatus: null,
    content: Ember.A([]),
    filteredContent: Ember.A([]),
    additionalContent: Ember.A([]),
    filterMessage: "",
    load: function() {
        this.get("_scheduleContents").set("loadedTimeStamp", null);
        this.refresh();
    },
    _all: function() {
        return this.get("content");
    }.observes("content"),
    all: function() {
        return this.get("filteredContent");
    }.observes("filteredContent"),
    _allLevel0: function() {
        return this.get("content").filter(function(content, index) {
            return content.get("level") === 0;
        });
    }.observes("content"),
    _pushParent4Filter: function(__filteredContents, item) {
        if (!item) return;
        this._pushParent4Filter(__filteredContents, item.get("parent"));
        if (__filteredContents.indexOf(item) === -1) __filteredContents.pushObject(item);
    },
    filter: function() {
        var self = this, text = self.get("filterMessage"), timeScheduleContentsStructure = this._all(), filterColumns = this.get("settings").get("columns").filter(function(item, index, enumerable) {
            return [ "text", "number", "date", "float" ].indexOf(item.get("format")) !== -1;
        }), textArr = text.trim().split(" ").map(function(item, index, enumerable) {
            return item.length ? item.toUpperCase() : null;
        }).filter(function(item, index, enumerable) {
            return item !== null;
        });
        if (textArr.length) {
            var scrollBarView = self.get("scrollBarView");
            if (scrollBarView) {
                scrollBarView.$(".scroll-bar-parent").scrollTop(0);
            }
        }
        var _filteredContents = timeScheduleContentsStructure.filter(function(cnt, idx) {
            return self._filterFunction(filterColumns, cnt.get("scheduleContent"), textArr) && !cnt.get("isHiddenByAncestor") && !cnt.get("isHiddenByClone") ? cnt : null;
        });
        var __filteredContents = Ember.A([]), _item = null;
        _filteredContents.forEach(function(item, index, enumerable) {
            self._pushParent4Filter(__filteredContents, item);
        });
        timeScheduleContentsStructure.setEach("index", null);
        __filteredContents.forEach(function(item, index, enumerable) {
            item.set("index", index + 1);
        });
        self.beginPropertyChanges("filteredContent");
        self.get("filteredContent").clear();
        self.get("filteredContent").pushObjects(__filteredContents);
        self.endPropertyChanges("filteredContent");
    },
    _filterFunction: function(filterColumns, element, textArr) {
        var matchFound = false, attr = null, str = "";
        var stringsToFilter = $.map(filterColumns, function(column, indexColumn) {
            if (column.get("format") === "date") {
                str = UTCToDate(element.get(column.get("name"))).format(cdb.elink.cdbDateFormat);
            } else {
                str = element.get(column.get("name"));
            }
            if (typeof str === "object") {
                if (str && "search_value" in str) {
                    str = str.search_value;
                } else {
                    str = "";
                }
            }
            return str.toString().toUpperCase();
        });
        var textFound = $.map(textArr, function(text, indexText) {
            return text.length ? stringsToFilter.filter(function(str, index, enumerable) {
                return text.length ? str.indexOf(text) !== -1 : true;
            }).length > 0 : true;
        });
        return textFound.indexOf(false) === -1;
    },
    deleteModel: function(model) {
        model.get("scheduleContent.structureObjects").removeObject(model);
        this.get("content").removeObject(model);
        this.get("filteredContent").removeObject(model);
    },
    toggleInScheduleAction: function(oid, inSchedule) {
        var self = this;
        asyncPost(window.appSettings.timeChartData + "/toggle_ts_obj/post", {
            oid: oid,
            inSchedule: inSchedule
        }).then(function() {
            self.refresh(true);
        });
    },
    saveSelectionStatus: function() {
        var selection = this.get("settings.selection"), lastHovered = selection.get("lastHovered"), selectedArray = selection.get("selectedArray");
        this.set("selectionStatus", {
            lastHovered: lastHovered ? {
                id: lastHovered.get("scheduleContent.objCdbObjectId"),
                hovered: lastHovered.get("hovered")
            } : null,
            selectedArray: selectedArray.length ? selectedArray.map(function(item, index, enumerable) {
                return {
                    id: item.get("scheduleContent.objCdbObjectId"),
                    selected: item.get("selected")
                };
            }) : []
        });
    },
    redoSelectionStatus: function() {
        var structureContents = this.all(), selection = this.get("settings.selection"), selectionStatus = this.get("selectionStatus"), item = null;
        selection.set("_lastHovered", null);
        selection.get("selectedArray").clear();
        if (selectionStatus.lastHovered) {
            item = structureContents.findBy("scheduleContent.objCdbObjectId", selectionStatus.lastHovered.id);
            if (item) {
                selection.set("lastHovered", item);
                item.set("hovered", selectionStatus.lastHovered.hovered);
            }
        }
        if (selectionStatus.selectedArray.length) {
            $.each(selectionStatus.selectedArray, function(index, content) {
                item = structureContents.findBy("scheduleContent.objCdbObjectId", content.id);
                if (item) {
                    selection.set("lastSelected", item);
                    item.set("selected", content.selected);
                }
            });
        }
    },
    setScaleDates: function() {
        var start_timestamp = this.computeEarliestDate(), end_timestamp = this.computeLatestDate();
        if (start_timestamp > end_timestamp) {
            var tmp = start_timestamp;
            start_timestamp = end_timestamp;
            end_timestamp = tmp;
        }
        var start = UTCToDate(start_timestamp), end = UTCToDate(end_timestamp), daysDisplayed = end.diff(start, "days"), additionalDaysStart = Math.ceil(daysDisplayed * 2 / 100), additionalDaysEnd = Math.ceil(daysDisplayed * 5 / 100);
        this.get("settings.scale").moveStartEnd(start.subtract("days", additionalDaysStart).startOf("day"), end.add("days", additionalDaysEnd + 1).endOf("day"));
    },
    loadTempTooltipObj: function(id, callback) {
        var self = this;
        asyncPost(window.appSettings.timeChartData + "/get_one_object", {
            cdb_object_id: id
        }).then(function(data) {
            var scheduleContent = App.TimeScheduleContent.create($.extend(data, {
                settings: self.get("settings")
            }));
            self.get("additionalContent").pushObject(App.TimeScheduleContentStructure.create({
                scheduleContent: scheduleContent,
                level: -1
            }));
            callback();
        });
    },
    loadAsyncData: function(sCSObjs) {
        var self = this, onSuccess = function(data) {
            var self = this, _scheduleContents = self.get("_scheduleContents");
            Object.keys(data).forEach(function(key) {
                var sC = _scheduleContents.findBy("objCdbObjectId", key);
                if (sC) {
                    sC.updateObjectAsync(data[key]);
                }
            });
        };
        Ember.$.ajax({
            url: window.appSettings.timeChartData + "/load_async_data",
            data: {
                obj_ids: JSON.stringify(sCSObjs.mapBy("scheduleContent").filterBy("asyncDataLoaded", false).mapBy("objCdbObjectId").uniq())
            },
            async: true,
            type: "GET",
            dataType: "json"
        }).then(function(data) {
            if (data && typeof data === "object") {
                var keys = Object.keys(data);
                if (keys.length === 1 && keys[0] === "error") {
                    alertCDBMessage(data.error);
                    App.set("errorHappened", true);
                }
            }
            Ember.RSVP.resolve(data).then(onSuccess.bind(self));
        }, function(data) {
            alertCDBMessage(data.responseText);
            App.set("errorHappened", true);
        });
    },
    refresh: function(serverSideSettings) {
        var self = this;
        var onSuccess = function(data) {
            var newTScContent = Ember.A([]), newTScContentLastObject = null, _scheduleContents = self.get("_scheduleContents"), model = null;
            _scheduleContents.set("loadedTimeStamp", data.loaded_time_stamp);
            self.get("additionalContent").clear();
            self.beginPropertyChanges("content");
            _scheduleContents.beginPropertyChanges("content");
            self.get("content").clear();
            _scheduleContents.resetStructures();
            $.each(data.scheduleContents, function(index, _content) {
                modelId = Object.keys(_content)[0];
                dataValues = _content[modelId];
                if (!dataValues.obj) {
                    newTScContentLastObject = _scheduleContents.findBy("objCdbObjectId", modelId);
                } else {
                    newTScContentLastObject = _scheduleContents.findBy("objCdbObjectId", modelId);
                    if (newTScContentLastObject) {
                        newTScContentLastObject.updateObjectSync(dataValues.obj);
                    } else {
                        newTScContentLastObject = _scheduleContents.addScheduleContent(dataValues.obj);
                    }
                }
                model = self.get("content").pushObject(App.TimeScheduleContentStructure.create({
                    scheduleContent: newTScContentLastObject,
                    level: 0
                }));
                self._recursivelyAddChildrenToStructure(model, dataValues.children);
            });
            _scheduleContents.forEach(function(item, index, enumerable) {
                item.setBackupAttributes();
            });
            self.get("_scheduleContents").endPropertyChanges("content");
            self.endPropertyChanges("content");
            if (self.get("recomputeChartDates")) {
                self.setScaleDates();
                self.set("recomputeChartDates", false);
            }
            Ember.run.scheduleOnce("sync", self, function() {
                self.trigger("resumeRowUpdate");
                self.filter();
                self.redoSelectionStatus();
            });
        };
        var filterMessage = self.get("filterMessage"), loadedTimeStamp = self.get("_scheduleContents.loadedTimeStamp");
        self.set("filterMessage", "");
        self.trigger("delayRowUpdate");
        self.filter();
        Ember.run.sync();
        var scheduleContents = self.get("_scheduleContents")._all(), timeContents = self._all(), ids_client = $.map(timeContents, function(cnt) {
            return cnt.get("scheduleContent.objCdbObjectId");
        }), timeContentsDisplayed = self.all(), timeContentsExpandedIds = timeContentsDisplayed.filterBy("isExpanded").mapBy("scheduleContent.objCdbObjectId");
        self.saveSelectionStatus();
        self.set("filterMessage", filterMessage);
        asyncPost(window.appSettings.timeChartData + "/refresh_data", {
            loaded_time_stamp: loadedTimeStamp,
            ids_client: JSON.stringify(ids_client),
            expanded_ids: JSON.stringify(timeContentsExpandedIds),
            use_serverside_settings: !loadedTimeStamp || serverSideSettings === true
        }, "POST").then(onSuccess.bind(self));
    },
    addChildrenToStructure: function(model, childrenData) {
        if (!model) return;
        var self = this, index = self.indexOf(model), scheduleContent = null, modelLevel = model.get("level"), _scheduleContent = null, child = self.objectAt(index + 1), _scheduleContents = self.get("_scheduleContents");
        do {
            if (child && child.get("level") > modelLevel) {
                self.deleteModel(child);
            } else {
                break;
            }
            child = self.objectAt(index + 1);
        } while (child);
        $.each(childrenData, function(idx, _item) {
            index++;
            id = Object.keys(_item)[0];
            _scheduleContent = _item[id];
            if (!_scheduleContent) {
                scheduleContent = _scheduleContents.findBy("objCdbObjectId", id);
            } else {
                scheduleContent = _scheduleContents.findBy("objCdbObjectId", id);
                if (scheduleContent) {
                    scheduleContent.updateObjectSync(_scheduleContent);
                } else {
                    scheduleContent = _scheduleContents.addScheduleContent(_scheduleContent);
                }
            }
            self.get("content").insertAt(index, App.TimeScheduleContentStructure.create({
                scheduleContent: scheduleContent,
                level: model.get("level") + 1,
                parent: model
            }));
        });
        model.set("childrenLoaded", true);
        model.set("isExpanded", true);
    },
    fullyExpandSCS: function(id) {
        var self = this;
        asyncPost(window.appSettings.timeChartData + "/fully_expand_id/post", {
            id: id
        }).then(function() {
            self.refresh(true);
        });
    },
    toggleChildren: function(model) {
        var self = this;
        if (!model.get("isExpanded")) {
            model.set("isExpanded", true);
            self.refresh();
        } else {
            var modelLevel = model.get("level"), index = self.indexOf(model), child = self.objectAt(index + 1);
            model.set("isExpanded", false);
            while (child) {
                if (child.get("level") > modelLevel) {
                    child.set("isExpanded", false);
                } else {
                    break;
                }
                index++;
                child = self.objectAt(index + 1);
            }
            self.filter();
            var timeContentsExpandedIds = self.all().filterBy("isExpanded").mapBy("scheduleContent.objCdbObjectId");
            asyncPost(window.appSettings.timeChartData + "/save_expanded_ids/post", {
                expanded_ids: JSON.stringify(timeContentsExpandedIds)
            }).then(function() {
                if (App.get("errorHappened")) {
                    self.refresh(true);
                }
            });
        }
    },
    _getNextObjectWithId: function(model, id) {
        var self = this, content = self._all(), slicedContent = content.slice(content.indexOf(model));
        return slicedContent.findBy("scheduleContent.objCdbObjectId", id);
    },
    _recursivelyAddChildrenToStructure: function(model, childrenData) {
        if (!childrenData.length) return;
        var self = this, key = null, obj = null, childModel = null;
        _childrenData = $.map(childrenData, function(cnt, idx) {
            key = Object.keys(cnt)[0];
            obj = {};
            obj[key] = cnt[key].obj;
            return obj;
        });
        self.addChildrenToStructure(model, _childrenData);
        $.each(childrenData, function(index, content) {
            key = Object.keys(content)[0];
            childModel = self._getNextObjectWithId(model, key);
            self._recursivelyAddChildrenToStructure(childModel, content[key].children);
        });
    },
    switchItems: function(id1, id2) {
        var self = this, timeContentsLevel0 = self._allLevel0(), timeContents = self._all(), item1 = timeContentsLevel0.find(function(item, index, enumerable) {
            return item.get("scheduleContent.objCdbObjectId") === id1;
        }), item2 = timeContentsLevel0.find(function(item, index, enumerable) {
            return item.get("scheduleContent.objCdbObjectId") === id2;
        }), ids = $.map(timeContentsLevel0, function(cnt) {
            return cnt.get("scheduleContent.objCdbObjectId");
        });
        ids.splice(ids.indexOf(id1), 1);
        if (id2) {
            ids.splice(ids.indexOf(id2), 0, id1);
        } else {
            ids.push(id1);
        }
        asyncPost(window.appSettings.timeChartData + "/change_position/post", {
            ids: JSON.stringify(ids)
        }, "POST").then(self.refresh.bind(self));
    },
    revealUpToId: function(id) {
        var self = this;
        asyncPost(window.appSettings.timeChartData + "/reveal_id/post", {
            id: id
        }).then(function() {
            self.refresh(true);
        });
    },
    createRelations: function(relationsData) {
        var self = this;
        asyncPost(window.appSettings.timeChartData + "/create_relations/post", {
            relations_data: JSON.stringify(relationsData)
        }).then(function() {
            self.refresh();
        });
    },
    deleteRelations: function(relations) {
        var self = this;
        asyncPost(window.appSettings.timeChartData + "/delete_relations/post", {
            primary_keys: JSON.stringify(relations.map(function(item) {
                return item.primary_keys;
            }))
        }).then(self.refresh.bind(self));
    },
    moveRelations: function(relations) {
        var self = this;
        asyncPost(window.appSettings.timeChartData + "/move_relations/post", {
            primary_keys: JSON.stringify(relations.map(function(rel, index) {
                return $.extend(rel.relation.primary_keys, {
                    minimal_gap: rel.minimal_gap
                });
            }))
        }).then(self.refresh.bind(self));
    },
    computeEarliestDate: function() {
        var all = this._all(), timestamps = $.map(all, function(cnt, idx) {
            var date = cnt.get("scheduleContent.start_date");
            return date ? date.valueOf() : null;
        }).concat($.map(all, function(cnt, idx) {
            var date = cnt.get("scheduleContent.start_date_plan");
            return date ? date.valueOf() : null;
        }));
        timestamps = timestamps.filter(function(cnt) {
            return cnt;
        });
        return timestamps.length ? Math.min.apply(Math, timestamps) : App.momentConstructor().startOf("month").valueOf();
    },
    computeLatestDate: function() {
        var all = this._all(), timestamps = $.map(all, function(cnt, idx) {
            var date = cnt.get("scheduleContent.isMilestone") ? cnt.get("scheduleContent.start_date") : cnt.get("scheduleContent.end_date");
            return date ? date.valueOf() : null;
        }).concat($.map(all, function(cnt, idx) {
            var date = cnt.get("scheduleContent.isMilestone") ? cnt.get("scheduleContent.start_date_plan") : cnt.get("scheduleContent.end_date_plan");
            return date ? date.valueOf() : null;
        }));
        timestamps = timestamps.filter(function(cnt) {
            return cnt;
        });
        return timestamps.length ? Math.max.apply(Math, timestamps) : App.momentConstructor().endOf("month").startOf("day").add("days", 1).valueOf();
    },
    setDataChangedObserver: function() {
        this.get("_scheduleContents").on("dataChanged", this, this.refresh);
    }.on("init")
});

App.Relation = Ember.Object.extend({
    contentsStructure: null,
    _contentsStructure: null,
    labels: null,
    tempTooltipObj: null,
    is_successor: null,
    minimalGapInDays: function() {
        var minimal_gap = this.get("minimal_gap"), dayAbbreviation = cdb.elink.currentLanguage == "de" ? "t" : "d";
        return (minimal_gap >= 0 ? "+" : "") + minimal_gap + dayAbbreviation;
    }.property("minimal_gap"),
    _toString: function() {
        var index = this.get("is_successor") ? this.get("predecessor.index") : this.get("successor.index");
        return this.get("type_label") + (index ? index : "") + this.get("minimalGapInDays");
    },
    init: function() {
        this._super();
        this.set("contentsStructure", App.__container__.lookup("ScheduleContent:timeChartStructure").all());
        this.set("_contentsStructure", App.__container__.lookup("ScheduleContent:timeChartStructure")._all());
        this.set("additionalContentsStructure", App.__container__.lookup("ScheduleContent:timeChartStructure").get("additionalContent"));
        this.set("labels", App.__container__.lookup("labels:main"));
    },
    getTempTooltipObj: function(id) {
        if (id === this.get("successor.scheduleContent.objCdbObjectId")) {
            this.set("tempTooltipObj", this.get("successor"));
        } else if (id === this.get("predecessor.scheduleContent.objCdbObjectId")) {
            this.set("tempTooltipObj", this.get("predecessor"));
        } else {
            var hiddenContent = this.get("_contentsStructure").findBy("scheduleContent.objCdbObjectId", id);
            if (hiddenContent) {
                this.set("tempTooltipObj", hiddenContent);
            } else {
                var additionalContent = this.get("additionalContentsStructure").findBy("scheduleContent.objCdbObjectId", id);
                if (additionalContent) {
                    this.set("tempTooltipObj", additionalContent);
                } else {
                    var self = this, setTempTooltipObj = function() {
                        var additionalContent = self.get("additionalContentsStructure").findBy("scheduleContent.objCdbObjectId", id);
                        if (additionalContent) {
                            self.set("tempTooltipObj", additionalContent);
                        }
                    };
                    App.__container__.lookup("ScheduleContent:timeChartStructure").loadTempTooltipObj(id, setTempTooltipObj.bind(self));
                }
            }
        }
    },
    preDelTitle: function() {
        return this.get("labels.pcs_rel_pre") + ' "' + this.get("predecessor.scheduleContent.title") + '" ' + this.get("labels.pcs_delete_lc");
    }.property("predecessor"),
    sucDelTitle: function() {
        return this.get("labels.pcs_rel_suc") + ' "' + this.get("successor.scheduleContent.title") + '" ' + this.get("labels.pcs_delete_lc");
    }.property("successor"),
    predecessor: function() {
        return this.get("contentsStructure").findBy("scheduleContent.objCdbObjectId", this.get("predecessorID"));
    }.property("contentsStructure.[]"),
    successor: function() {
        return this.get("contentsStructure").findBy("scheduleContent.objCdbObjectId", this.get("successorID"));
    }.property("contentsStructure.[]")
});

Ember.Application.initializer({
    name: "time_schedule_structure",
    after: [ "time_schedule_contents" ],
    initialize: function(container, application) {
        container.register("ScheduleContent:timeChartStructure", App.TimeScheduleContentsStructure, {
            instantiate: true,
            singleton: true
        });
        application.inject("ScheduleContent:timeChartStructure", "_scheduleContents", "ScheduleContent:timeChart");
        application.inject("ScheduleContent:timeChartStructure", "settings", "Settings:timeChart");
    }
});

App.TimeRefTable = Ember.Object.extend(App.RefTableClass, {
    refTableRowClass: "TimeRefTableRow",
    numRows: 0
});

App.TimeRefTableRow = Ember.Object.extend(App.RefTableRowClass, {});

Ember.Application.initializer({
    name: "time_schedule_reftable",
    after: [ "time_schedule_structure" ],
    initialize: function(container, application) {
        container.register("ScheduleContent:timeChartReftable", App.TimeRefTable, {
            instantiate: true,
            singleton: true
        });
        application.inject("ScheduleContent:timeChartReftable", "contentsStructure", "ScheduleContent:timeChartStructure");
    }
});

App.TimeChartPluginComponent = Ember.Component.extend(App.ChartPluginComponentMixin, {
    noDeselectClickElements: "#time_info_dropdown_menu, .column-widget, .left-panel > .ui-resizable-handle"
});

App.TimeChartTopComponent = Ember.Component.extend({
    classNames: [ "top-panel" ],
    _waitInterval: 500,
    _testInterval: 450,
    _filterMessage: "",
    _lastChanged: new Date(0),
    button_task_type_code: [ 0, 2, 3 ],
    filterMessage: function(key, value) {
        if (value === undefined) {
            return this.get("_filterMessage");
        } else {
            this.set("_filterMessage", value);
            this.set("_lastChanged", new Date());
            return value;
        }
    }.property("_filterMessage"),
    _filter: function(self) {
        var now = new Date();
        if (now - self.get("_lastChanged") > self.get("_testInterval")) {
            var contentsStructure = self.get("model.contentsStructure");
            contentsStructure.set("filterMessage", self.get("filterMessage"));
            contentsStructure.get("filter").call(contentsStructure);
        }
    },
    filter: function() {
        var self = this;
        setTimeout(function() {
            self.get("_filter")(self);
        }, self._waitInterval);
    }.observes("filterMessage"),
    hideInfoMenuOnDelete: function() {
        if (!this.get("settings.selection.oneSelected")) {
            var menu = this.$("#time_info_dropdown_menu .elink-button-dropdown");
            if (menu && menu.length) menu.removeClass("open");
        }
    }.observes("settings.selection.oneSelected"),
    didInsertElement: function() {
        this.$("input").placeholder();
    },
    actions: {
        run_operation: function(op_url) {
            $(document).trigger("click.dropdown.data-api");
            window.open(op_url, "_self");
            var contentsStructure = this.get("model.contentsStructure");
            contentsStructure.get("refresh").call(contentsStructure);
        },
        expandAction: function() {
            var lastSelected = this.get("settings.selection.lastSelected");
            if (lastSelected) {
                var scheduleContent = lastSelected.get("scheduleContent"), contentsStructure = this.get("model.contentsStructure");
                if (scheduleContent && contentsStructure) {
                    contentsStructure.get("fullyExpandSCS").call(contentsStructure, scheduleContent.get("objCdbObjectId"));
                }
            }
        },
        revealAction: function() {
            var lastSelected = this.get("settings.selection.lastSelected");
            if (lastSelected) {
                var scheduleContent = lastSelected.get("scheduleContent"), contentsStructure = this.get("model.contentsStructure");
                if (scheduleContent && contentsStructure) {
                    contentsStructure.get("revealUpToId").call(contentsStructure, scheduleContent.get("objCdbObjectId"));
                }
            }
        },
        timeAction: function() {
            var contentsStructure = this.get("model.contentsStructure");
            contentsStructure.get("setScaleDates").call(contentsStructure);
        },
        jumpAction: function() {
            if (this.get("settings.selection.selectedArray").length === 1) {
                var scheduleContent = this.get("settings.selection.lastSelected.scheduleContent");
                if (scheduleContent) {
                    var startDate = scheduleContent.get("startDate");
                    if (startDate.isValid()) {
                        this.get("settings.scale").moveStart(scheduleContent.get("startDate"));
                    }
                }
            }
        },
        refreshAction: function() {
            var contentsStructure = this.get("model.contentsStructure");
            contentsStructure.get("refresh").call(contentsStructure);
        }
    }
});

App.TimeChartComponent = Ember.Component.extend({
    classNames: [ "chart-body" ],
    attributeBindings: [ "style:style" ],
    todayBarStyle: function() {
        var ppd = this.get("settings.scale.pixelsPerDay");
        return "left: " + (this.get("settings.scale.todayCell").pxLeft(App.momentConstructor().startOf("day").add("hours", 12)) + ppd / 2 - 3) + "px;";
    }.property("settings.scale.todayCell", "settings.scale.pixelsPerDay", "settings.scale.startDateView"),
    selectedAreaDefaultStyle: "left: 0px; width: 0px",
    selectedAreaStyle: function() {
        var lastSelected = this.get("settings.selection.lastSelected");
        if (lastSelected) {
            return lastSelected.get("scheduleContent.barStyle");
        } else {
            return this.get("selectedAreaDefaultStyle");
        }
    }.property("settings.selection.lastSelected.scheduleContent.barStyle"),
    style: function() {
        return "width: " + this.get("settings.scale.viewportWidth") + "px";
    }.property("settings.scale.viewportWidth")
});

App.TimeChartRowComponent = Ember.Component.extend({
    classNames: [ "time-bar-row" ],
    classNameBindings: [ "viewingContent.scheduleContent.isDiscarded:draw-transparent" ],
    dragStart: 0,
    gridStep: 0,
    viewingContent: Ember.computed.alias("model.referencedObject"),
    displayPlanBar: function() {
        return !this.get("viewingContent.scheduleContent.isMilestone") && this.get("viewingContent.scheduleContent.start_date_plan") && this.get("viewingContent.scheduleContent.end_date_plan") && this.get("viewingContent.scheduleContent.displayPlanBar") && this.get("viewingContent.scheduleContent.hasChildren");
    }.property("viewingContent.scheduleContent.isMilestone", "viewingContent.scheduleContent.start_date_plan", "viewingContent.scheduleContent.end_date_plan", "viewingContent.scheduleContent.displayPlanBar", "viewingContent.scheduleContent.hasChildren"),
    leftIntervalBorderStyle: function() {
        var timeScaleModel = this.get("settings.scale");
        return "left:" + (timeScaleModel.get("computeDatePosition").call(timeScaleModel, this.get("viewingContent.scheduleContent.earlyStart")) + timeScaleModel.get("pixelsPerDay") - 20) + "px;" + "width: 20px";
    }.property("viewingContent.scheduleContent.earlyStart", "settings.scale.startDateView", "settings.scale.pixelsPerDay"),
    rightIntervalBorderStyle: function() {
        var timeScaleModel = this.get("settings.scale");
        return "left:" + timeScaleModel.get("computeDatePosition").call(timeScaleModel, this.get("viewingContent.scheduleContent.lateFinish")) + "px;" + "width: 20px";
    }.property("viewingContent.scheduleContent.lateFinish", "settings.scale.startDateView", "settings.scale.pixelsPerDay"),
    leftIntervalBorderClass: function() {
        var className = "interval-borders left", scheduleContent = this.get("viewingContent.scheduleContent");
        if (scheduleContent) {
            var conflict = scheduleContent.get("startDate") <= scheduleContent.get("earlyStart");
            className += conflict ? " violated" : "";
            className += this.get("viewingContent.selected") || this.get("viewingContent.hovered") ? "" : " hidden";
        }
        return className;
    }.property("viewingContent.scheduleContent.earlyStart", "viewingContent.scheduleContent.startDate", "viewingContent.selected", "viewingContent.hovered"),
    rightIntervalBorderClass: function() {
        var className = "interval-borders right", scheduleContent = this.get("viewingContent.scheduleContent");
        if (scheduleContent) {
            var conflict = scheduleContent.get("endDate") >= scheduleContent.get("lateFinish");
            className += conflict ? " violated" : "";
            className += this.get("viewingContent.selected") || this.get("viewingContent.hovered") ? "" : " hidden";
        }
        return className;
    }.property("viewingContent.scheduleContent.endDate", "viewingContent.scheduleContent.lateFinish", "viewingContent.selected", "viewingContent.hovered")
});

function _getTimeChartBarTooltipView() {
    var _timeChartBarTooltipView = App.__container__.lookup("router:main")._activeViews["timeChartBarTooltip"];
    if (_timeChartBarTooltipView !== undefined) {
        return _timeChartBarTooltipView[0];
    } else {
        return {
            tooltipShow: function() {},
            tooltipTurnoff: function() {}
        };
    }
}

App.TimeChartBarComponent = Ember.Component.extend(App.SelectionMixin, {
    classNameBindings: [ "viewingContent.scheduleContent.customBarClass", "viewingContent.scheduleContent.objPermission::readonly", ":chart-bar", "viewingContent.selected:selected", "viewingContent.hovered:gantt-hover" ],
    attributeBindings: [ "style" ],
    style: Ember.computed.alias("viewingContent.scheduleContent.barStyle"),
    gridStep: Ember.computed.alias("settings.scale.pixelsPerDay"),
    viewingContent: Ember.computed.alias("model.referencedObject"),
    objCdbObjectId: null,
    dragStart: 0,
    mouseover: false,
    percentCompleteStr: function() {
        var width = this.get("viewingContent.scheduleContent.percentComplete") ? this.get("viewingContent.scheduleContent.percentComplete") : 0;
        return "width: " + width + "%";
    }.property("viewingContent.scheduleContent.percentComplete"),
    mouseEnter: function(e) {
        this._super();
        this.mouseover = true;
        _getTimeChartBarTooltipView().tooltipShow(this, e);
    },
    mouseLeave: function() {
        this._super();
        _getTimeChartBarTooltipView().tooltipTurnoff(this);
    },
    didInsertElement: function() {
        this.createUIwidgets();
    },
    willDestroyElement: function() {
        this.destroyUIwidgets();
    },
    onAsyncLoaded: function() {
        var newId = this.get("viewingContent.scheduleContent.objCdbObjectId");
        if (this.get("viewingContent.scheduleContent.asyncDataLoaded")) {
            if (newId !== this.get("objCdbObjectId")) {
                this.set("objCdbObjectId", newId);
                Ember.run.schedule("afterRender", this, function() {
                    this.destroyUIwidgets();
                    this.createUIwidgets();
                });
            }
        } else {
            this.set("objCdbObjectId", null);
        }
    }.observes("viewingContent.scheduleContent.asyncDataLoaded"),
    createUIwidgets: function() {
        var self = this, bar = self.$();
        if (!self.get("viewingContent") || !bar || !bar.length) {
            return;
        }
        var parent = bar.parent(), minLeft = parent.offset().left, maxRight = minLeft + parent.width();
        if (self.get("viewingContent.scheduleContent.dragableFcast")) {
            bar.draggable({
                axis: "x",
                start: function(event, ui) {
                    var width = ui.helper.width();
                    width = width < 16 && self.get("viewingContent.scheduleContent.isMilestone") ? 16 : width;
                    if (ui.helper.offset().left + width < event.pageX) {
                        return false;
                    }
                    self.set("dragStart", ui.position.left);
                    self.set("viewingContent.scheduleContent.isBarDragging", true);
                    _getTimeChartBarTooltipView().tooltipShow(self, event);
                },
                stop: function(event, ui) {
                    if (!self.get("viewingContent")) {
                        return;
                    }
                    self.get("viewingContent.scheduleContent").saveStartEndDates(false);
                    self.set("viewingContent.scheduleContent.isBarDragging", false);
                    _getTimeChartBarTooltipView().tooltipTurnoff(self);
                    self.rerender();
                },
                drag: function(event, ui) {
                    if (!self.get("viewingContent")) {
                        return;
                    }
                    if (self.get("viewingContent.selected")) {
                        self.$().closest(".chart-body").children("#selected_area").attr("style", ui.helper.attr("style")).css("top", "0");
                    }
                    if (event.pageX <= minLeft || event.pageX >= maxRight) {
                        return false;
                    }
                    var offset = ui.position.left - self.get("dragStart"), gridStep = self.get("gridStep"), isMilestone = self.get("viewingContent.scheduleContent.isMilestone"), dragAttr = isMilestone ? "end_date" : "start_date", attrValue = self.get("viewingContent.scheduleContent").get(dragAttr), offsetSteps = Math.round(offset / gridStep);
                    if (gridStep) {
                        if (Math.abs(offsetSteps) >= 1) {
                            self.dragBar(offsetSteps * 24 * 3600);
                            self.set("dragStart", self.get("dragStart") + offsetSteps * gridStep);
                        }
                    }
                }
            });
        } else {
            if (bar.data("ui-draggable")) bar.draggable("destroy");
        }
        if (self.get("viewingContent.scheduleContent.resizableFcast")) {
            bar.resizable({
                handles: self.get("viewingContent.scheduleContent.end_plan_fix") ? "w" : "e,w",
                minWidth: 0,
                minHeight: 0,
                animate: false,
                start: function(event, ui) {
                    if (!self.get("viewingContent")) {
                        return;
                    }
                    if (bar.data("ui-draggable")) bar.draggable("disable");
                    self.set("viewingContent.scheduleContent.disableBarComputations", true);
                    self.set("resizeStartLeft", ui.position.left);
                    self.set("resizeStartWidth", ui.size.width);
                    _getTimeChartBarTooltipView().tooltipShow(self, event);
                },
                stop: function(event, ui) {
                    if (!self.get("viewingContent")) {
                        return;
                    }
                    self.set("viewingContent.scheduleContent.disableBarComputations", false);
                    self.get("viewingContent.scheduleContent").saveStartEndDates(false);
                    if (bar.data("ui-draggable")) bar.draggable("enable");
                    _getTimeChartBarTooltipView().tooltipTurnoff(self);
                    self.rerender();
                },
                resize: function(event, ui) {
                    if (!self.get("viewingContent")) {
                        return;
                    }
                    if (self.get("viewingContent.selected")) {
                        self.$().closest(".chart-body").children("#selected_area").attr("style", ui.helper.attr("style")).css("top", "0");
                    }
                    if (event.pageX <= minLeft || event.pageX >= maxRight) {
                        return false;
                    }
                    var offsetLeft = ui.position.left - self.get("resizeStartLeft"), offsetRight = ui.size.width - self.get("resizeStartWidth"), gridStep = self.get("gridStep"), dragAttr = offsetLeft !== 0 ? "start_date" : "end_date", attrValue = self.get("viewingContent").get(dragAttr);
                    if (gridStep) {
                        var roundOffset;
                        if (dragAttr === "start_date") {
                            roundOffset = Math.floor(offsetLeft / gridStep);
                            if (roundOffset !== 0) {
                                self.resizeBar(roundOffset * 24 * 3600, dragAttr);
                                self.set("resizeStartLeft", self.get("resizeStartLeft") + roundOffset * gridStep);
                                self.set("resizeStartWidth", self.get("resizeStartWidth") + roundOffset * gridStep);
                            }
                        } else {
                            roundOffset = Math.ceil(offsetRight / gridStep);
                            if (roundOffset !== 0) {
                                self.resizeBar(roundOffset * 24 * 3600, dragAttr);
                                self.set("resizeStartWidth", self.get("resizeStartWidth") + roundOffset * gridStep);
                            }
                        }
                    }
                }
            });
        } else {
            if (bar.data("ui-resizable")) bar.resizable("destroy");
        }
    },
    destroyUIwidgets: function() {
        var bar = this.$();
        viewingContent = this.get("viewingContent");
        if (!this.get("viewingContent.scheduleContent.objPermission")) return;
        if (bar && bar.length && viewingContent) {
            if (bar.data("ui-draggable")) bar.draggable("destroy");
            if (bar.data("ui-resizable")) bar.resizable("destroy");
        }
    },
    dragBar: function(offset) {
        if (!this.get("viewingContent")) {
            return;
        }
        var start = this.get("viewingContent.scheduleContent.start_date"), end = this.get("viewingContent.scheduleContent.end_date");
        this.get("viewingContent.scheduleContent").set("start_date", App.momentConstructor(start).add("second", offset).valueOf());
        this.get("viewingContent.scheduleContent").set("end_date", App.momentConstructor(end).add("second", offset).valueOf());
    },
    resizeBar: function(offset, corner) {
        if (!this.get("viewingContent")) {
            return;
        }
        if (corner === "start_date") {
            var start = this.get("viewingContent.scheduleContent.start_date");
            this.get("viewingContent.scheduleContent").set("start_date", App.momentConstructor(start).add("second", offset).valueOf());
        } else {
            var end = this.get("viewingContent.scheduleContent.end_date");
            this.get("viewingContent.scheduleContent").set("end_date", App.momentConstructor(end).add("second", offset).valueOf());
        }
    }
});

App.TimeChartPlanBarComponent = Ember.Component.extend(App.SelectionMixin, {
    classNameBindings: [ "viewingContent.scheduleContent.customBarClass", "viewingContent.scheduleContent.objPermission::readonly", ":chart-bar", ":lower-bar", "viewingContent.hovered:gantt-hover", "viewingContent.selected:selected" ],
    attributeBindings: [ "style" ],
    gridStep: Ember.computed.alias("settings.scale.pixelsPerDay"),
    viewingContent: Ember.computed.alias("model.referencedObject"),
    objCdbObjectId: null,
    dragStart: 0,
    style: function() {
        return "width:" + this.get("viewingContent.scheduleContent.barPlanWidth") + "px;" + "left:" + this.get("viewingContent.scheduleContent.barPlanPosition") + "px;";
    }.property("viewingContent.scheduleContent.barPlanWidth", "viewingContent.scheduleContent.barPlanPosition"),
    mouseEnter: function(e) {
        this._super();
        this.mouseover = true;
        _getTimeChartBarTooltipView().tooltipShow(this, e);
    },
    mouseLeave: function() {
        this._super();
        _getTimeChartBarTooltipView().tooltipTurnoff(this);
    },
    onAsyncLoaded: function() {
        var newId = this.get("viewingContent.scheduleContent.objCdbObjectId");
        if (this.get("viewingContent.scheduleContent.asyncDataLoaded") && newId !== this.get("objCdbObjectId")) {
            this.set("objCdbObjectId", newId);
            Ember.run.schedule("afterRender", this, function() {
                this.destroyUIwidgets();
                this.createUIwidgets();
            });
        }
    }.observes("viewingContent.scheduleContent.asyncDataLoaded"),
    didInsertElement: function() {
        this.createUIwidgets();
    },
    willDestroyElement: function() {
        this.destroyUIwidgets();
    },
    createUIwidgets: function() {
        var self = this, planBar = this.$();
        if (!self.get("viewingContent") || !planBar || !planBar.length) {
            return;
        }
        var parent = planBar.parent(), minLeft = parent.offset().left, maxRight = minLeft + parent.width();
        if (self.get("viewingContent.scheduleContent.dragablePlan")) {
            planBar.draggable({
                axis: "x",
                containment: "window",
                start: function(event, ui) {
                    var width = ui.helper.width();
                    self.set("dragStart", ui.position.left);
                    self.set("viewingContent.scheduleContent.disablePlanBarComputations", true);
                    self.set("viewingContent.scheduleContent.isPlanBarDragging", true);
                    _getTimeChartBarTooltipView().tooltipShow(self, event);
                },
                stop: function(event, ui) {
                    if (!self.get("viewingContent")) {
                        return;
                    }
                    self.set("viewingContent.scheduleContent.disablePlanBarComputations", false);
                    self.get("viewingContent.scheduleContent").saveStartEndPlanDates();
                    self.set("viewingContent.scheduleContent.isPlanBarDragging", false);
                    _getTimeChartBarTooltipView().tooltipTurnoff(self);
                    self.rerender();
                },
                drag: function(event, ui) {
                    if (!self.get("viewingContent")) {
                        return;
                    }
                    if (event.pageX <= minLeft || event.pageX >= maxRight) {
                        return false;
                    }
                    var offset = ui.position.left - self.get("dragStart"), gridStep = self.get("gridStep"), dragAttr = "start_date_plan", attrValue = self.get("viewingContent").get(dragAttr);
                    if (gridStep) {
                        if (Math.abs(offset) > gridStep) {
                            self.dragPlanBar(offset / gridStep * 24 * 3600);
                            self.set("dragStart", self.get("dragStart") + offset);
                        }
                    }
                }
            });
        } else {
            if (planBar.data("ui-draggable")) planBar.draggable("destroy");
        }
    },
    destroyUIwidgets: function() {
        var bar = this.$();
        viewingContent = this.get("viewingContent");
        if (!this.get("viewingContent.scheduleContent.objPermission")) return;
        if (bar && bar.length && viewingContent) {
            if (bar.data("ui-draggable")) bar.draggable("destroy");
        }
    },
    dragPlanBar: function(offset) {
        if (!this.get("viewingContent")) {
            return;
        }
        var start = this.get("viewingContent.scheduleContent.start_date_plan"), end = this.get("viewingContent.scheduleContent.end_date_plan");
        this.get("viewingContent.scheduleContent").set("start_date_plan", App.momentConstructor(start).add("second", offset).valueOf());
        this.get("viewingContent.scheduleContent").set("end_date_plan", App.momentConstructor(end).add("second", offset).valueOf());
    }
});

App.TimeChartRelationsComponent = Ember.Component.extend({
    classNameBindings: [ ":chart-relations" ],
    viewingContent: Ember.computed.alias("model.referencedObject")
});

App.TimeChartRelationComponent = Ember.Component.extend({
    attributeBindings: [ "style" ],
    classNameBindings: [ "isRelationValid::hidden", ":relation-container", "horizontalBackwards", "verticalBackwards:verti-backwards", "typeClass", "colorClass" ],
    relationClass: "",
    minWidth: 20,
    refTable: null,
    predecessorViewingContent: Ember.computed.alias("model.predecessor"),
    predecessorViewIndex: Ember.computed.alias("predecessorViewingContent.refRowIndex"),
    rowHeightFactor: function() {
        var rowHeight = this.get("settings.ppdHeight");
        return rowHeight / (rowHeight - 1);
    }.property("settings.ppdHeight"),
    successorViewingContent: Ember.computed.alias("model.successor"),
    successorViewIndex: Ember.computed.alias("successorViewingContent.refRowIndex"),
    isRelationValid: function() {
        return this.get("predecessorViewingContent.scheduleContent.hasDates") && this.get("successorViewingContent.scheduleContent.hasDates") && this.get("predecessorViewingContent.refRowIndex") !== null && this.get("successorViewingContent.refRowIndex") !== null;
    }.property("predecessorViewingContent.scheduleContent.hasDates", "successorViewingContent.scheduleContent.hasDates"),
    isRelationVisible: function() {
        return this.get("predecessorViewIndex") !== undefined && this.get("predecessorViewIndex") !== null && this.get("successorViewIndex") !== undefined && this.get("successorViewIndex") !== null;
    }.property("predecessorViewIndex", "successorViewIndex"),
    styles: function() {
        var rType = this.get("model.type"), pIndex = this.get("predecessorViewIndex"), sIndex = this.get("successorViewIndex"), pStart = this.get("predecessorViewingContent.scheduleContent.barPosition"), pEnd = this.get("predecessorViewingContent.scheduleContent.barEnd"), sStart = this.get("successorViewingContent.scheduleContent.barPosition"), sEnd = this.get("successorViewingContent.scheduleContent.barEnd"), left = 0, width = 0, top = .5, height = Math.abs(sIndex - pIndex), horiBackwards = false, vertiBackwards = false, ppd = this.get("settings.scale.pixelsPerDay");
        if (this.get("predecessorViewingContent.scheduleContent.isMilestone")) {
            pStart = pStart + ppd / 2 - 8;
            pEnd = pEnd - ppd / 2 + 8;
        }
        if (this.get("successorViewingContent.scheduleContent.isMilestone")) {
            sStart = sStart + ppd / 2 - 8;
            sEnd = sEnd - ppd / 2 + 8;
        }
        if (rType == "EA") {
            if (sStart >= pEnd) {
                left = pEnd;
                width = sStart - left;
            } else {
                left = sStart;
                width = pEnd - left;
                horiBackwards = true;
            }
        } else if (rType == "AA") {
            if (sStart >= pStart) {
                left = pStart;
                width = sStart - left;
            } else {
                left = sStart;
                width = pStart - left;
                horiBackwards = true;
            }
        } else if (rType == "AE") {
            if (sEnd >= pStart) {
                left = pStart;
                width = sEnd - left;
            } else {
                left = sEnd;
                width = pStart - left;
                horiBackwards = true;
            }
        } else if (rType == "EE") {
            if (sEnd >= pEnd) {
                left = pEnd;
                width = sEnd - left;
            } else {
                left = sEnd;
                width = pEnd - left;
                horiBackwards = true;
            }
        }
        if (pIndex > sIndex) {
            vertiBackwards = true;
            top = top + sIndex - pIndex;
        }
        width = width < 1e-5 ? 0 : width;
        var style = {
            left: left,
            width: width,
            top: top * 100 * this.get("rowHeightFactor"),
            height: height * 100 * this.get("rowHeightFactor"),
            bottomHeight: height === 0 ? 0 : .5 / height * 100
        };
        return [ style, horiBackwards, vertiBackwards, rType ];
    }.property("model.type", "successorViewIndex", "predecessorViewIndex", "successorViewingContent.scheduleContent.barPosition", "successorViewingContent.scheduleContent.barEnd", "predecessorViewingContent.scheduleContent.barPosition", "predecessorViewingContent.scheduleContent.barEnd", "rowHeightFactor"),
    style: function() {
        var style = this.get("styles")[0];
        return "left:" + style.left + "px;" + "width:" + style.width + "px;" + "top:" + style.top + "%;" + "height:" + style.height + "%;";
    }.property("styles"),
    styleBottom: function() {
        var style = this.get("styles")[0];
        return "height:" + (100 - style.bottomHeight) + "%;";
    }.property("styles"),
    horizontalBackwards: function() {
        var style = this.get("styles")[0], horiBackwards = this.get("styles")[1], minWidth = this.get("minWidth"), rType = this.get("styles")[3], classname = "";
        if (rType == "EA" && !horiBackwards && style.width < minWidth * 2) {
            horiBackwards = style.width < minWidth;
            classname = "connector-narrow";
        } else if (rType == "AE" && horiBackwards && style.width < minWidth * 2) {
            classname = "connector-narrow";
            horiBackwards = style.width > minWidth;
        }
        return horiBackwards ? "hori-backwards " + classname : classname;
    }.property("styles", "minWidth"),
    verticalBackwards: function() {
        return this.get("styles")[2];
    }.property("styles"),
    typeClass: function() {
        return "type-" + this.get("styles")[3];
    }.property("styles"),
    colorClass: function() {
        var color = this.get("model.conflict") ? "warning" : "ok";
        return "relation-" + color;
    }.property()
});

App.TimeChartBarTooltipController = Ember.ObjectController.extend({
    model: null
});

App.TimeRelationTooltipController = Ember.Controller.extend({
    relation: null,
    domEl: null
});

App.TimeChartBarTooltipView = Ember.View.extend({
    classNameBindings: [ ":bar-tooltip" ],
    attributeBindings: [ "style:style" ],
    viewName: "timeChartBarTooltip",
    style: "",
    clientX: 0,
    clientY: 0,
    ctx: null,
    showTooltip: false,
    templateName: function() {
        var ctx = this.get("ctx"), templateName = "time_default-bar-tooltip";
        if (ctx && ctx.get("mouseover")) {
            var scheduleContent = ctx.get("viewingContent.scheduleContent"), className = scheduleContent.get("class_name");
            if (className == "cdbpcs_task" && !scheduleContent.get("isMilestone")) templateName = "time_task-bar-tooltip";
            if (className == "cdbpcs_task" && scheduleContent.get("isMilestone")) templateName = "time_milestone-bar-tooltip";
            if (className == "cdbpcs_project" && ctx.get("templateName") != "chartplanbar") templateName = "time_project-bar-tooltip";
            if (className == "cdbpcs_project" && ctx.get("templateName") == "chartplanbar") templateName = "time_project-planbar-tooltip";
        }
        return templateName;
    }.property(),
    _templateChanged: function() {
        this.rerender();
    }.observes("ctx"),
    _tooltipShow: function() {
        if (this.get("showTooltip")) {
            this.set("clientX", this.get("_clientX"));
            this.set("clientY", this.get("_clientY"));
            this.set("controller.model", this.get("_model"));
            this.set("ctx", this.get("_ctx"));
            this.notifyPropertyChange("templateName");
        }
    },
    tooltipShow: function(ctx, event) {
        this.set("_clientX", event.pageX);
        this.set("_clientY", event.pageY);
        this.set("_model", ctx.get("viewingContent"));
        this.set("_ctx", ctx);
        this.set("showTooltip", true);
        Ember.run.debounce(this, "_tooltipShow", 1e3);
    },
    _tooltipTurnoff: function() {
        var ctx = this.get("ctx");
        if (ctx && !ctx.get("viewingContent.scheduleContent.isBarDragging") && !ctx.get("viewingContent.scheduleContent.isPlanBarDragging")) {
            ctx.set("mouseover", false);
            this.set("controller.model", null);
            this.set("ctx", null);
            this.notifyPropertyChange("templateName");
        }
    },
    tooltipTurnoff: function(ctx) {
        this.set("showTooltip", false);
        Ember.run.debounce(this, "_tooltipTurnoff", 100);
    },
    _registerActiveView: function() {
        var router = App.__container__.lookup("router:main"), registeredName = "timeChartBarTooltip";
        function disconnectActiveView() {
            delete router._activeViews[registeredName];
        }
        router._activeViews[registeredName] = [ this, disconnectActiveView ];
        this.one("willDestroyElement", router, disconnectActiveView);
    },
    didInsertElement: function() {
        this._registerActiveView();
        var menu = this.$(".chart-tooltip"), ctx = this.get("ctx");
        if (!menu.length || !ctx) return;
        var left = this.get("clientX"), top = this.get("clientY"), menuWidth = menu.outerWidth(true), menuHeight = menu.outerHeight(true), rightPanel = menu.closest(".right-panel"), containerHeight = rightPanel.height(), containerOffset = rightPanel.offset(), containerOffsetTop = containerOffset.top, ppdHeight = this.get("controller.model.scheduleContent.settings.ppdHeight"), styleTop = top, styleLeft = left - menuWidth / 2;
        if (menuHeight + top > containerHeight + containerOffsetTop) {
            menu.addClass("top");
            styleTop -= menuHeight + ppdHeight;
        } else {
            styleTop += ppdHeight;
            menu.addClass("bottom");
        }
        this.set("style", "display: block; " + "top: " + styleTop + "px; " + "left: " + styleLeft + "px");
    }
});

App.TimeRelationTooltipView = Ember.View.extend({
    classNameBindings: [ ":relation-tooltip", "arrowTop:arrow-top:arrow-bottom" ],
    viewName: "timeRelationTooltip",
    templateName: "time_relation-tooltip",
    arrowTop: true,
    classLabel: function() {
        var labels = this.get("controller.labels"), tempTooltipObj = this.get("controller.relation.tempTooltipObj");
        return tempTooltipObj ? labels.get(tempTooltipObj.get("scheduleContent.class_name")) : "";
    }.property("controller.relation.tempTooltipObj"),
    tempTooltipObj: function() {
        var rel = this.get("controller.relation");
        return rel ? rel.get("tempTooltipObj") : null;
    }.property("controller.relation.tempTooltipObj"),
    _changeStyle: function() {
        style = "display: none;";
        var domEl = this.get("controller.domEl"), ul = this.$("ul");
        if (domEl && ul) {
            var offset = domEl.offset(), leftPanelTop = this.$().closest(".left-panel").offset().top, tableTop = offset.top - leftPanelTop, styleTop = tableTop;
            if (tableTop > (window.innerHeight - leftPanelTop) / 2) {
                styleTop = styleTop - ul.outerHeight() + domEl.height();
                this.set("arrowTop", false);
            } else {
                this.set("arrowTop", true);
            }
            style = "display: block; " + "top: " + styleTop + "px; " + "left: " + (offset.left + domEl.width() + 10) + "px";
        } else {
            style = "display: none; top: 0; left: 0;";
        }
        this.set("style", style);
    },
    changeStyle: function() {
        Ember.run.scheduleOnce("afterRender", this, "_changeStyle");
    }.observes("controller.domEl"),
    style: "display: none; top: 0; left: 0;",
    _cleanOnRelationDelete: function() {
        if (this.get("controller.relation.__willDeleteSoon")) {
            this.get("controller").setProperties({
                relation: null,
                domEl: null
            });
        }
    }.observes("controller.relation.__willDeleteSoon")
});

App.TimeStartEndDatePickerView = Ember.View.extend(App.BaseDatePickerView, {
    saveDate: function() {
        this.get("content").saveStartEndDates(true);
    },
    clearDate: function() {
        var content = this.get("content");
        content.set("start_date", null);
        content.set("end_date", null);
        content.saveStartEndDates(true);
    }
});

App.TimeConstraintDatePickerView = Ember.View.extend(App.BaseDatePickerView, {
    saveDate: function() {
        this.get("content").saveConstraintDate();
    },
    clearDate: function() {
        var content = this.get("content");
        content.set("constraint_date", null);
        content.saveConstraintDate();
    }
});

App.TimeObj_iconView = App.BaseIconView.extend({});

App.TimeStatus_colorView = Ember.View.extend(App.TableCellBaseView, {
    disabled: false,
    templateName: "table-cell-views/time-status_color",
    description: function() {
        return this.get("value.description");
    }.property("value.description"),
    style: function() {
        return this.get("value.style");
    }.property("value.style"),
    url: function() {
        return this.get("value.url");
    }.property("value.url"),
    doubleClick: function(evt) {
        evt.stopPropagation();
    },
    actions: {
        changeStatus: function() {
            if (this.get("content.scheduleContent.objPermission") && this.get("url")) {
                window.open(this.get("url"), "_self");
                var contentsStructure = this.get("refTable.contentsStructure");
                contentsStructure.get("refresh").call(contentsStructure);
            }
        }
    }
});

App.TimeTotal_rating_iconView = App.BaseIconView.extend({});

App.TimePspView = Ember.View.extend(App.TableCellBaseView, {});

App.TimeDeleteView = App.BaseDeleteView.extend({
    localRes: window.appSettings.timeChartLocalRes
});

App.TimeTime_signal_iconView = App.BaseIconView.extend({});

App.TimeRelations_buttonsView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/time-relations-buttons",
    predecessorsTitle: function() {
        switch (this.get("content.scheduleContent.predecessorsConflict")) {
          case 1:
            return this.get("controller.labels.pcs_pre_conflicts_yes");

          case 0:
            return this.get("controller.labels.pcs_pre_conflicts_no");

          default:
            return this.get("controller.labels.pcs_pre_none");
        }
    }.property("content.scheduleContent.predecessorsConflict"),
    successorsTitle: function() {
        switch (this.get("content.scheduleContent.successorsConflict")) {
          case 1:
            return this.get("controller.labels.pcs_suc_conflicts_yes");

          case 0:
            return this.get("controller.labels.pcs_suc_conflicts_no");

          default:
            return this.get("controller.labels.pcs_suc_none");
        }
    }.property("content.scheduleContent.successorsConflict"),
    predecessorsConflictClass: function() {
        switch (this.get("content.scheduleContent.predecessorsConflict")) {
          case 1:
            return "conflict";

          case 0:
            return "no-conflict";

          default:
            return "";
        }
    }.property("content.scheduleContent.predecessorsConflict"),
    successorsConflictClass: function() {
        switch (this.get("content.scheduleContent.successorsConflict")) {
          case 1:
            return "conflict";

          case 0:
            return "no-conflict";

          default:
            return "";
        }
    }.property("content.scheduleContent.successorsConflict"),
    actions: {
        openRelationsLeft: function(model) {
            var settings = this.get("settings");
            settings.get("saveColumnVisibility").call(settings, "predecessorsRelations", !settings.get("_columns").findBy("name", "predecessorsRelations").get("visible"));
        },
        openRelationsRight: function(model) {
            var settings = this.get("settings");
            settings.get("saveColumnVisibility").call(settings, "successorsRelations", !settings.get("_columns").findBy("name", "successorsRelations").get("visible"));
        }
    }
});

App.TimeStart_dateView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/time-start_date"
});

App.TimeEnd_dateView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/time-end_date"
});

App.TimeDurationView = App.BaseEditableView.extend({
    testParsedInput: function(val) {
        return this.get("isInteger").call(this, val);
    },
    parseInput: function(val) {
        return this.get("asInteger").call(this, val);
    },
    disabled: function() {
        return !this.get("content.scheduleContent.isDurationEditable");
    }.property("content.scheduleContent.isDurationEditable"),
    attr: "duration"
});

App.TimeEffort_fcastView = App.BaseEditableView.extend({
    testParsedInput: function(val) {
        return this.get("isFloat").call(this, val);
    },
    parseInput: function(val) {
        return this.get("asFloat").call(this, val);
    },
    disabled: function() {
        return !this.get("content.scheduleContent.isEffortEditable");
    }.property("content.scheduleContent.isEffortEditable"),
    attr: "effort_fcast"
});

App.TimeEffort_actView = App.BaseEditableView.extend({
    testParsedInput: function(val) {
        return this.get("isFloat").call(this, val);
    },
    parseInput: function(val) {
        return this.get("asFloat").call(this, val);
    },
    disabled: function() {
        return !this.get("content.scheduleContent.isEffortActEditable");
    }.property("content.scheduleContent.isEffortActEditable"),
    attr: "effort_act"
});

App.TimeEffort_fcast_dView = App.BaseEditableView.extend({
    testParsedInput: function(val) {
        return this.get("isFloat").call(this, val);
    },
    parseInput: function(val) {
        return this.get("asFloat").call(this, val);
    },
    disabled: function() {
        return !this.get("content.scheduleContent.isEffortDemandEditable");
    }.property("content.scheduleContent.isEffortDemandEditable"),
    attr: "effort_fcast_d"
});

App.TimeEffort_fcast_aView = App.BaseEditableView.extend({
    testParsedInput: function(val) {
        return this.get("isFloat").call(this, val);
    },
    parseInput: function(val) {
        return this.get("asFloat").call(this, val);
    },
    disabled: function() {
        return !this.get("content.scheduleContent.isEffortAssignmentEditable");
    }.property("content.scheduleContent.isEffortAssignmentEditable"),
    attr: "effort_fcast_a"
});

App.TimePositionView = App.BaseEditableView.extend({
    testParsedInput: function(val) {
        return this.get("isInteger").call(this, val);
    },
    parseInput: function(val) {
        return this.get("asInteger").call(this, val);
    },
    disabled: function() {
        return !this.get("content.scheduleContent.isPositionEditable");
    }.property("content.scheduleContent.isPositionEditable"),
    attr: "position"
});

App.TimeRelationsView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "",
    editMode: false,
    hasRelations: function() {
        return this.get("content.scheduleContent.hasRelations");
    }.property("content", "hasRelations"),
    actions: {
        openEditMode: function() {
            this.set("editMode", true);
        }
    }
});

App.TimePredecessorsRelationsView = App.TimeRelationsView.extend({
    disabled: false,
    is_successor: true,
    templateName: "table-cell-views/time-relations-pre"
});

App.TimeSuccessorsRelationsView = App.TimeRelationsView.extend({
    disabled: false,
    is_successor: false,
    templateName: "table-cell-views/time-relations-suc"
});

App.TimeRelationsDisplayView = Ember.Mixin.create({
    templateName: "",
    disabled: false
});

App.TimePredecessorsRelationsDisplayView = Ember.View.extend(App.TimeRelationsDisplayView, {
    is_successor: true,
    templateName: "time_relations-pre-display"
});

App.TimeSuccessorsRelationsDisplayView = Ember.View.extend(App.TimeRelationsDisplayView, {
    is_successor: false,
    templateName: "time_relations-suc-display"
});

App.TimeRelationsEditView = Ember.Mixin.create({
    templateName: "",
    disabled: false,
    inputValue: "",
    _throwParseErrorMessage: "parseError",
    _breakRelationsRegExp: new RegExp(/[\+|\-]/),
    click: function(evt) {
        evt.stopPropagation();
    },
    doubleClick: function(evt) {
        evt.stopPropagation();
    },
    keyPress: function(evt) {
        evt.stopPropagation();
        switch (evt.keyCode) {
          case 13:
            this.$("input").trigger("blur");
            break;

          case 27:
            this.get("parentView").set("editMode", false);
            break;

          default:
        }
    },
    focusOut: function(evt) {
        var ok = this.parseNewRelations();
        this.get("parentView").set("editMode", false);
    },
    _makeRelObj: function(type, index, minimal_gap) {
        return {
            type: type,
            index: index,
            minimal_gap: minimal_gap
        };
    },
    _parseRelationStr: function(relStr) {
        var index = relStr.search(this._breakRelationsRegExp);
        relTypeAndIndex = index !== -1 ? relStr.slice(0, index).trim() : relStr.trim(), 
        relGap = index !== -1 ? parseInt(relStr.slice(index).trim(), 10) : null, relType = "", 
        relIndex = -1;
        if (/^[0-9]+$/.test(relTypeAndIndex)) {
            relType = this.get("settings.rel_default");
            relIndex = parseInt(relTypeAndIndex, 10);
        } else {
            var relTypeMatch = relTypeAndIndex.match(this.get("_getTypeRelationsRegExp"));
            if (relTypeMatch === null) {
                relType = null;
                relIndex = parseInt(relTypeAndIndex, 10);
            } else {
                relType = relTypeMatch[0];
                relIndex = parseInt(relTypeAndIndex.slice(relType.length), 10);
            }
        }
        return this._makeRelObj(relType, relIndex, relGap);
    },
    _searchRelInArr: function(type, index, arr) {
        var l = arr.length, tempObj = {};
        for (i = 0; i < l; i++) {
            tempObj = arr[i];
            if (tempObj.type === type && (tempObj.index === index || Number.isNaN(tempObj.index) && Number.isNaN(index))) {
                return i;
            }
        }
        return -1;
    },
    parseNewRelations: function() {
        var self = this, relations = this.get("relations"), oldRelationsArray = relations._toString().split(","), re = new RegExp(/\,/), newRelationsArray = this.$("input")[0].value.toUpperCase().split(",");
        newRelationsArray = newRelationsArray.map(function(item) {
            return item.trim().replace(re, "");
        }).filter(function(item) {
            return item.length;
        });
        oldRelObjs = [], newRelObjs = [], deletedRelations = [], movedRelations = [], newRelations = [], 
        newIndex = 0, oldIndex = 0, contentsStructure = this.get("context.refTable.contentsStructure"), 
        sCSs = contentsStructure.get("all").call(contentsStructure);
        oldRelationsArray.pop();
        oldRelObjs = oldRelationsArray.map(function(rel) {
            return self._parseRelationStr(rel);
        });
        newRelObjs = newRelationsArray.map(function(rel) {
            return self._parseRelationStr(rel);
        });
        oldRelObjs.forEach(function(obj, index) {
            newIndex = self._searchRelInArr(obj.type, obj.index, newRelObjs);
            if (newIndex === -1) {
                deletedRelations.push(relations.objectAt(index));
            } else {
                if (oldRelObjs[index].minimal_gap !== newRelObjs[newIndex].minimal_gap) {
                    movedRelations.push({
                        relation: relations.objectAt(index),
                        minimal_gap: newRelObjs[newIndex].minimal_gap
                    });
                }
            }
        });
        newRelObjs.forEach(function(obj, index) {
            oldIndex = self._searchRelInArr(obj.type, obj.index, oldRelObjs);
            if (oldIndex === -1) {
                newRelations.push(obj);
            }
        });
        try {
            newRelations.forEach(function(relObj) {
                self._validateNewRelation(relObj, sCSs);
            });
        } catch (ex) {
            if (ex.message === this._throwParseErrorMessage) {
                return false;
            }
        }
        this.deleteRelations(deletedRelations);
        this.moveRelations(movedRelations);
        this.createRelations(newRelations);
        return true;
    },
    _validateNewRelation: function(rel, sCSs) {
        var contentIndex = this.get("content.index");
        if (this.get("settings.rel_types").indexOf(rel.type) === -1) {
            alertCDBMessage(this.get("controller.labels.cdbpcs_gantt_invalid_relation_type"), "cdbpcs_gantt_invalid_relation_type");
            throw new Error(this._throwParseErrorMessage);
        }
        if (!Number.isInteger(rel.index) || rel.index < 0 || rel.index > sCSs.length) {
            alertCDBMessage(this.get("controller.labels.cdbpcs_gantt_relation_successor_existance"), "cdbpcs_gantt_relation_successor_existance");
            throw new Error(this._throwParseErrorMessage);
        }
        if (rel.index === this.get("content.index")) {
            alertCDBMessage(this.get("controller.labels.cdbpcs_gantt_create_relations_error_same"), "cdbpcs_gantt_create_relations_error_same");
            throw new Error(this._throwParseErrorMessage);
        }
        var is_successor = this.get("is_successor");
        predSCC = is_successor ? sCSs[rel.index - 1] : sCSs[contentIndex - 1], succSCC = is_successor ? sCSs[contentIndex - 1] : sCSs[rel.index - 1];
        if (!predSCC.get("scheduleContent.hasRelations") || !succSCC.get("scheduleContent.hasRelations")) {
            alertCDBMessage(this.get("controller.labels.cdbpcs_gantt_create_relations_error_tasks"), "cdbpcs_gantt_create_relations_error_tasks");
            throw new Error(this._throwParseErrorMessage);
        } else {
            if (succSCC.get("scheduleContent.is_group") && this.get("settings.allowed_task_group_dependecies").indexOf(rel.type) === -1) {
                alertCDBMessage(this.get("controller.labels.cdbpcs_task_group_rel_not_allowed"), "cdbpcs_task_group_rel_not_allowed");
                throw new Error(this._throwParseErrorMessage);
            }
        }
    },
    deleteRelations: function(deletedRelations) {
        if (deletedRelations.length) {
            var contentsStructure = this.get("context.refTable.contentsStructure");
            contentsStructure.get("deleteRelations").call(contentsStructure, deletedRelations);
        }
    },
    moveRelations: function(movedRelations) {
        if (movedRelations.length) {
            var contentsStructure = this.get("context.refTable.contentsStructure");
            contentsStructure.get("moveRelations").call(contentsStructure, movedRelations);
        }
    },
    createRelations: function(newRelations) {
        if (newRelations.length) {
            var self = this, contentsStructure = this.get("context.refTable.contentsStructure"), is_successor = this.get("is_successor"), sCSs = contentsStructure.get("all").call(contentsStructure), thisID = this.get("content.scheduleContent.objCdbObjectId"), otherID = "";
            contentsStructure.get("createRelations").call(contentsStructure, newRelations.map(function(rel) {
                otherID = sCSs.objectAt(rel.index - 1).get("scheduleContent.objCdbObjectId");
                return {
                    successorID: is_successor ? thisID : otherID,
                    predecessorID: is_successor ? otherID : thisID,
                    type: rel.type,
                    minimal_gap: rel.minimal_gap
                };
            }));
        }
    },
    didInsertElement: function() {
        Ember.run.schedule("afterRender", this, function() {
            this.$("input").focus();
            this.set("inputValue", this.get("relations")._toString());
            this.set("_getTypeRelationsRegExp", new RegExp(this.get("settings.rel_types").join("|")));
        });
    }
});

App.TimePredecessorsRelationsEditView = Ember.View.extend(App.TimeRelationsEditView, {
    is_successor: true,
    templateName: "time_relations-pre-edit"
});

App.TimeSuccessorsRelationsEditView = Ember.View.extend(App.TimeRelationsEditView, {
    is_successor: false,
    templateName: "time_relations-suc-edit"
});

App.TimeRelationView = Ember.View.extend({
    templateName: "",
    is_successor: null,
    mouseIsIn: false,
    tooltipTimeDelay: 500,
    fixLabel: function() {
        return this.get("is_successor") ? this.get("controller.labels.pcs_predecessor") + " " + this.get("controller.labels.pcs_show") : this.get("controller.labels.pcs_successor") + " " + this.get("controller.labels.pcs_show");
    }.property("is_successor"),
    doubleClick: function(evt) {
        evt.stopPropagation();
    },
    mouseEnter: function(evt) {
        var self = this;
        self.set("mouseIsIn", true);
        Ember.run.later(self, function() {
            if (self.get("mouseIsIn")) {
                var timeRelationTooltipView = App.__container__.lookup("router:main")._activeViews["timeRelationTooltip"][0];
                if (timeRelationTooltipView) {
                    var relation = self.get("model");
                    if (relation) {
                        var tempTooltipObjID = self.get("is_successor") ? relation.get("predecessorID") : relation.get("successorID");
                        relation.getTempTooltipObj(tempTooltipObjID);
                        timeRelationTooltipView.get("controller").setProperties({
                            relation: relation,
                            domEl: self.$()
                        });
                    }
                }
            }
        }, self.get("tooltipTimeDelay"));
    },
    mouseLeave: function(evt) {
        var self = this;
        self.set("mouseIsIn", false);
        Ember.run.later(self, function() {
            var timeRelationTooltipView = App.__container__.lookup("router:main")._activeViews["timeRelationTooltip"][0];
            if (timeRelationTooltipView) {
                timeRelationTooltipView.get("controller").setProperties({
                    relation: null,
                    domEl: null
                });
            }
        }, self.get("tooltipTimeDelay"));
    },
    actions: {
        deleteRelation: function(relation) {
            relation.set("__willDeleteSoon", true);
            var contentsStructure = this.get("context.refTable.contentsStructure"), parentView = this.get("parentView");
            contentsStructure.get("deleteRelations").call(contentsStructure, [ relation ]);
        },
        fixOther: function(relation) {
            var contentsStructure = this.get("context.refTable.contentsStructure"), parentView = this.get("parentView");
            contentsStructure.get("toggleInScheduleAction").call(contentsStructure, this.get("is_successor") ? relation.get("predecessorID") : relation.get("successorID"), true);
            if (this.get("is_successor")) {
                var predecessor = relation.get("predecessor");
                if (predecessor) {
                    predecessor.get("scheduleContent.delete").toggleProperty("inSchedule");
                } else {
                    var scheduleContent = contentsStructure.get("_scheduleContents.content").findBy("objCdbObjectId", relation.get("predecessorID"));
                    if (scheduleContent) scheduleContent.get("delete").toggleProperty("inSchedule");
                }
            } else {
                var is_successor = relation.get("is_successor");
                if (is_successor) {
                    successor.get("scheduleContent.delete").toggleProperty("inSchedule");
                } else {
                    var scheduleContent = contentsStructure.get("_scheduleContents.content").findBy("objCdbObjectId", relation.get("successorID"));
                    if (scheduleContent) scheduleContent.get("delete").toggleProperty("inSchedule");
                }
            }
        }
    }
});

App.TimeRelationPreView = App.TimeRelationView.extend({
    is_successor: true,
    templateName: "time_relation-pre"
});

App.TimeRelationSucView = App.TimeRelationView.extend({
    is_successor: false,
    templateName: "time_relation-suc"
});

App.TimeEarly_positionView = App.BaseCheckboxView.extend({
    visible: function() {
        return this.get("content.scheduleContent.isEarlyPositionVisible");
    }.property("content.scheduleContent.isEarlyPositionVisible"),
    disabled: function() {
        return !this.get("content.scheduleContent.isEarlyPositionEditable");
    }.property("content.scheduleContent.isEarlyPositionEditable"),
    attrName: "early_position"
});

App.TimeTitleView = App.BaseTitleView.extend({});

App.TimeAutomaticView = App.BaseCheckboxView.extend({
    visible: function() {
        return this.get("content.scheduleContent.isAutomaticVisible");
    }.property("content.scheduleContent.isAutomaticVisible"),
    disabled: function() {
        return !this.get("content.scheduleContent.isAutomaticEditable");
    }.property("content.scheduleContent.isAutomaticEditable"),
    attrName: "automatic"
});

App.TimeAuto_update_timeView = App.BaseCheckboxView.extend({
    visible: function() {
        return this.get("content.scheduleContent.isAutoUpdateTimeVisible");
    }.property("content.scheduleContent.isAutoUpdateTimeVisible"),
    disabled: function() {
        return !this.get("content.scheduleContent.isAutoUpdateTimeEditable");
    }.property("content.scheduleContent.isAutoUpdateTimeEditable"),
    attrName: "auto_update_time"
});

App.TimeConstraint_dateView = Ember.View.extend(App.TableCellBaseView, {
    templateName: "table-cell-views/time-constraint_date"
});

App.TimeOperationsView = App.BaseOperationsView.extend({});