/*
 * Copyright (C) 2014 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact.de/
 *
 * Revision "$Id: time_settings.js 169367 2017-11-27 14:05:29Z heg $"
 */

App.TimeSelection = Ember.Object.extend(App.Selection, {
  markedObjects: Ember.A([])
});

Ember.Application.initializer({
  name: 'time_selection',

  initialize: function(container, application) {
    container.register('Selection:timeSelection', App.TimeSelection, { singleton: true });
  }
});

App.TimeSettings = Ember.Object.extend(App.WithColumns, {

    settingsType: 'time',
    scale: null,
    personal_start_date: null,
    margin_left: null,
    time_schedule_id: null,
    rel_types: [],
    ppdHeight: 24, // TODO compute this?
    
    init: function() {
      this._super();
      // order, column selector, expand, +1 border of order
      this.set('additionalAlwaysColumnSpace', 26);
    },
    
    firstOperation: function() {
        var ts_ops = this.get('ts_ops');
        var ts_ops_empty = {
        		"iconLabel": "default",
        		"iconUrl": this.get('default_info_icon'),
        		"url": ""
        }
        return ts_ops.length ? ts_ops[0] : ts_ops_empty;
    }.property('ts_ops'),

    saveColumnVisibility: function(columnName, columnVisibility) {
      var self = this,
          _columns = self.get('_columns'),
          onSuccess = function() {
            _columns.findBy('name', columnName).set('visible', columnVisibility);
            self.notifyPropertyChange('_columns');
            var globalSettings = self.get('globalSettings');
            globalSettings.get('updateLeftPanelWidth').call(globalSettings, self.get('totalColumnsWidth'));
      };
      asyncPost(
        window.appSettings.timeChartData + '/update_columns_visibility/post',
        {'column_name': columnName,
         'visible': columnVisibility}
      ).then(onSuccess.bind(self));
    },
    
    saveColumns: function(columnNames, columnVisibilities) {
      var self = this,
          positionIndex = 0,
          data2Send = [];
      $.each(columnNames, function(index, name) {
        data2Send.push({
          'name': name,
          'position': positionIndex++,
          'visible': columnVisibilities[index]
        });
      });

      var onSuccess = function() {
        var self = this,
            _columns = self.get('_columns'),
            newColumns = Ember.A([]);
        self.beginPropertyChanges('_columns');
        $.each(data2Send, function(_index, colObj) {
          newColumns.pushObject(_columns.findBy('name', colObj.name).setProperties(
              {'visible': colObj.visible, 'position': colObj.position})
          );
        });
        self.set('_columns', newColumns);
        self.endPropertyChanges('_columns');
        Ember.run.scheduleOnce('sync', self, function() {
            var globalSettings = self.get('globalSettings');
            globalSettings.get('updateLeftPanelWidth').call(globalSettings, self.get('totalColumnsWidth'));
        });
      };

      asyncPost(
        window.appSettings.timeChartData + '/update_columns/post',
        {'columns': JSON.stringify(data2Send)}
      ).then(onSuccess.bind(self));
    },
    
    _saveTimePersonalDates: function() {
      var self = this,
          personal_start_date = self.get('scale.personal_start_date'),
          pixels_per_day = self.get('scale.pixelsPerDay'),
          postData = {
            'personal_start_date': personal_start_date,
            'pixels_per_day': pixels_per_day
          };
      if ((personal_start_date !== self.get('personal_start_date')) ||
          (pixels_per_day !== self.get('pixels_per_day'))) {
        asyncPost(
            window.appSettings.timeChartData + '/update_time_frame/post',
            postData).then(function() {
              self.setProperties(postData);
            });
      }
    },

    saveTimePersonalDates: function() {
      Ember.run.once(this, '_saveTimePersonalDates');
    },
    
    load: function() {
      var self = this,
      onSuccess = function(data) {
        self.setProperties(data);
        self.setColumns(self.get('_columns_as_dict'));
        if (window.appSettings.chartType === "time") {
            //otherwise handeled in full_chart
            var globalSettings = self.get('globalSettings'),
                new_left_panel_width = self.get('left_panel_width');
            if (new_left_panel_width != null) {
                globalSettings.set('left_panel_width', new_left_panel_width);
            } else {
                globalSettings.get('updateLeftPanelWidth').call(globalSettings, self.get('totalColumnsWidth'));
            }
            globalSettings.set('columns_collapsed', self.get('columns_collapsed'));
            var personal_start_date = self.get('personal_start_date'),
                pixels_per_day = self.get('pixels_per_day');
            if (!personal_start_date || !pixels_per_day) App.__container__.lookup('ScheduleContent:timeChartStructure').set('recomputeChartDates', true);
            self.get('scale')
              .off('timeFrameChanged', self, self.saveTimePersonalDates)
              .on('timeFrameChanged', self, self.saveTimePersonalDates)
              .setStartScale(personal_start_date, pixels_per_day);
        }
      };
      return asyncPost(
          window.appSettings.timeChartData + '/settings',
          {'chart_type': window.appSettings.chartType}
      ).then(onSuccess.bind(self));
    }
});


Ember.Application.initializer({
    name: 'time_settings',
    after: ['settings', 'time_selection', 'timescale'],

    initialize: function(container, application) {
      container.register('Settings:timeChart', App.TimeSettings,  { instantiate: true, singleton: true });
      application.inject('Settings:timeChart', 'globalSettings', 'Settings:global');
      application.inject('Settings:timeChart', 'scale', 'timescale:main');
      application.inject('Settings:timeChart', 'selection', 'Selection:timeSelection');
    }
});
