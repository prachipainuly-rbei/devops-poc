#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
Widget plugin for cs.pcs.dashboard.
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 103216 2013-10-29 13:49:58Z heg $"

from cdb import elink
from cdb import sig
from cdb.platform.mom import entities
from cs.pcs.dashboard import WidgetBase
from cs.documents import Document

__all__ = []


class DocumentWidget(WidgetBase):
    # which filters should be displayed
    __filters__ = ["filter_mine",
                   "filter_recently_created",
                   "filter_categ_document",
                   "filter_categ_model",
                   "filter_released",
                   "filter_not_released"]

    # CDB class for result objects
    __result_cls__ = Document

    __stmt_attr__ = "cdb_object_id"

    # Rule to match CAD documents
    __model_rule__ = None

    # Rule for searching objects in period
    __released_rule__ = "cdbpcs: Kosmodrom: Released Objects"

    __order_by__ = "cdb_cdate desc"

    @classmethod
    def get_model_rule(cls):
        if cls.__model_rule__ is None:
            # Set model rule once if model class exists
            if len(entities.Entity.KeywordQuery(classname="model")):
                cls.__model_rule__ = u"%s" % (Document.cdb_classname >= "model")
            else:
                cls.__model_rule__ = ""
        return cls.__model_rule__

    @classmethod
    def get_filter_cond(cls, cdb_project_id, filters):
        add_expr = cls.get_rule_add_expr(cdb_project_id)
        attr = cls.__stmt_attr__
        ands = cls._get_filter_cond(cdb_project_id, filters)

        # category
        cats = []
        model_rule = cls.get_model_rule()
        if model_rule:
            if "filter_categ_model" in filters:
                cats.append(model_rule)
            if "filter_categ_document" in filters:
                cats.append("NOT %s" % model_rule)
        if cats:
            ands.append("(%s)" % (" or ".join(cats)))

        # released
        released = []
        from cdb.objects import Rule
        if "filter_released" in filters:
            myrule = Rule.ByKeys(cls.__released_rule__)
            if myrule:
                released.append(cls.get_rule_stmt(
                                    myrule, cls.__result_cls__, attr,
                                    add_expr=add_expr))
        # not released
        if "filter_not_released" in filters:
            myrule = Rule.ByKeys(cls.__released_rule__)
            if myrule:
                released.append("NOT (%s)" % cls.get_rule_stmt(
                                    myrule, cls.__result_cls__, attr,
                                    add_expr=add_expr))
        if released:
            ands.append("(%s)" % (" or ".join(released)))

        return " and ".join(ands)


@elink.using_template_engine("chameleon")
class PluginImpl(elink.Application):

    __plugin_macro_file__ = "widget_documents.html"
    dashboard_widget = DocumentWidget


# lazy initialization
app = None


@sig.connect("cs.pcs.dashboard.widget", "document")
@sig.connect("cs.pcs.dashboard.getplugins")
def get_plugin():
    global app
    if app is None:
        app = PluginImpl()
    return (5, app)
