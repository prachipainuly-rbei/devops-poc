#!/usr/bin/env powerscript
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
Custom data providers
"""

__revision__ = "$Id: reports.py 145032 2016-08-15 09:56:07Z kbu $"

from cdb import sqlapi
from cdb import cdbtime
from cs.tools import powerreports as PowerReports
from cs.pcs.efforts import TimeSheet
from operator import itemgetter


class ProjectEfforts(PowerReports.CustomDataProvider):
    CARD = PowerReports.CARD_N
    CALL_CARD = PowerReports.CARD_1

    def getData(self, parent_result, source_args, **kwargs):
        t_id = kwargs["task_id"]
        fd = kwargs["fromdate"]
        cdbDateFrom = cdbtime.Time(fd).timetuple()
        td = kwargs["to"]
        cdbDateTo = cdbtime.Time(td).timetuple()
        p_id = kwargs["person_id"]
        bill = kwargs["billable"]
        result = PowerReports.ReportDataList(self)
        p = parent_result.getObject()
        order = kwargs["ordercode"]

        if not order:
            order = "effort_id"
        myList = []
        for i in p.TimeSheets:
            cdbDateTs = cdbtime.Time(i.day).timetuple()
            if ((not t_id or t_id == i.task_id) and (not bill or bill == i.billable) and
               (not i.day or fd == "" or cdbDateFrom <= cdbDateTs) and
               (td == "" or cdbDateTs <= cdbDateTo) and (not p_id or p_id == i.person_id)):
                myList.append(i)

        if order != "day":
            myList = sorted(myList, key=itemgetter(order))
        else:
            myList.sort(cmpDateRep)

        for i in myList:
            data = PowerReports.ReportData(self, i)
            for t in p.Tasks:
                if t.task_id == i.task_id:
                    data["task_name"] = t.task_name
                    data["task_hyperlink"] = PowerReports.MakeReportURL(
                        t, "CDB_Modify", "task_name")
            result.append(data)
        return result

    def getSchema(self):
        t = PowerReports.XSDType(self.CARD, TimeSheet)
        t.add_attr("task_name", sqlapi.SQL_CHAR)
        t.add_attr("task_hyperlink", sqlapi.SQL_CHAR)
        return t

    def getArgumentDefinitions(self):
        return {
            "task_id": sqlapi.SQL_CHAR,
            "fromdate": sqlapi.SQL_CHAR,
            "to": sqlapi.SQL_CHAR,
            "person_id": sqlapi.SQL_CHAR,
            "billable": sqlapi.SQL_CHAR,
            "ordercode": sqlapi.SQL_CHAR
        }

    def getClass(self):
        return TimeSheet


class TaskEfforts(PowerReports.CustomDataProvider):
    CARD = PowerReports.CARD_N
    CALL_CARD = PowerReports.CARD_1

    def getData(self, parent_result, source_args, **kwargs):
        fd = kwargs["fromdate"]
        cdbDateFrom = cdbtime.Time(fd).timetuple()
        td = kwargs["to"]
        cdbDateTo = cdbtime.Time(td).timetuple()
        p_id = kwargs["person_id"]
        bill = kwargs["billable"]
        result = PowerReports.ReportDataList(self)
        p = parent_result.getObject()
        order = kwargs["ordercode"]

        if not order:
            order = "effort_id"

        myList = []
        for i in p.TimeSheets:
            cdbDateTs = cdbtime.Time(i.day).timetuple()
            if ((not bill or bill == i.billable)
               and (not i.day or fd == "" or cdbDateFrom <= cdbDateTs)
               and (td == "" or cdbDateTs <= cdbDateTo)
               and (not p_id or p_id == i.person_id)):
                myList.append(i)

        if order != "day":
            myList = sorted(myList, key=itemgetter(order))
        else:
            myList.sort(cmpDateRep)

        for i in myList:
            data = PowerReports.ReportData(self, i)
            data["task_name"] = p.task_name
            data["task_hyperlink"] = PowerReports.MakeReportURL(p, "CDB_Modify", "task_name")
            result.append(data)
        return result

    def getSchema(self):
        t = PowerReports.XSDType(self.CARD, TimeSheet)
        t.add_attr("task_name", sqlapi.SQL_CHAR)
        t.add_attr("task_hyperlink", sqlapi.SQL_CHAR)
        return t

    def getArgumentDefinitions(self):
        return {
            "fromdate": sqlapi.SQL_CHAR,
            "to": sqlapi.SQL_CHAR,
            "person_id": sqlapi.SQL_CHAR,
            "billable": sqlapi.SQL_CHAR,
            "ordercode": sqlapi.SQL_CHAR
        }

    def getClass(self):
        return TimeSheet


def cmpDateRep(d1, d2):
    return cmp(cdbtime.Time(d1["day"]).date(), cdbtime.Time(d2["day"]).date())
