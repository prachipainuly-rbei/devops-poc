#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Import result objects.
"""

from __future__ import unicode_literals

from collections import OrderedDict

from cdb.objects import Object

from cs.pcs.projects.tasks import Task
from cs.pcs.msp.misc import get_classname, get_icon_name, KeyObject, log

__docformat__ = "restructuredtext en"
__revision__ = "$Id: import_results.py 157733 2017-04-26 14:32:37Z kbu $"


class DiffType:

    ADDED = "added"
    MODIFIED = "modified"
    DELETED = "deleted"
    UNMODIFIED = "unmodified"


class DiffObject(object):

    def __init__(self, pcs_object, diff_type=DiffType.UNMODIFIED, classname=None, icon_name=None,
                 diffs=None, exception=None):
        self.pcs_object = pcs_object
        self.diff_type = diff_type
        self.classname = classname or get_classname(pcs_object)
        self.icon_name = icon_name or get_icon_name(self.classname)
        self.diffs = OrderedDict()
        self.references = {}
        self.exceptions = []
        self.add_diffs(diffs)
        self.add_exception(exception)

    def add_diffs(self, diffs):
        if diffs:
            self.diffs.update(diffs)

    def add_exception(self, exception):
        if exception:
            exception = "%s" % exception
            if exception not in self.exceptions:
                self.exceptions.append(exception)


class DiffObjectCollection(object):

    def __init__(self):
        self.all = OrderedDict()
        self.added = []
        self.modified = []
        self.deleted = []
        self.excepted = []


class ImportResult(object):

    def __init__(self, pcs_project):
        self.project = DiffObject(pcs_project)
        self.tasks = DiffObjectCollection()
        self.num_old_tasks = 0
        self.references = {"cdbpcs_taskrel": DiffObjectCollection()}

    def get_diff_object_collection(self, classname):
        if classname == "cdbpcs_task":
            return self.tasks
        elif classname != "cdbpcs_project":
            return self.references.setdefault(classname, DiffObjectCollection())
        return None

    def get_diff_object(self, key_object, classname):
        if classname == "cdbpcs_project":
            return self.project
        else:
            diff_obj_coll = self.get_diff_object_collection(classname)
            if key_object in diff_obj_coll.all:
                return diff_obj_coll.all[key_object]
        return None

    def add_diff_object(self, diff_type, pcs_object, cls_or_clsname=None, icon_name=None,
                        diffs=None, parent=None, exception=None):
        classname = get_classname(cls_or_clsname or pcs_object)
        key_object = KeyObject(pcs_object)
        diff_object = self.get_diff_object(key_object, classname)
        if not diff_object:
            diff_object = DiffObject(pcs_object, diff_type, classname, icon_name, diffs, exception)
        else:
            if diffs:
                diff_object.add_diffs(diffs)
            if exception:
                diff_object.add_exception(exception)
                desc = pcs_object.GetDescription() if isinstance(pcs_object, Object) \
                    else "%s" % pcs_object
                log("%s: %s" % (cls_or_clsname, desc), 0)
                log("==> %s" % exception, 0)

        if classname == "cdbpcs_project":
            if self.project.diff_type == DiffType.UNMODIFIED:
                self.project = diff_object
                self.project.diff_type = diff_type
        else:
            diff_obj_coll = self.get_diff_object_collection(classname)
            if key_object not in diff_obj_coll.all:
                diff_obj_coll.all[key_object] = diff_object
            if diff_type != DiffType.UNMODIFIED:
                diff_obj_list = getattr(diff_obj_coll, diff_type, None)
                if diff_object not in diff_obj_list:
                    diff_obj_list.append(diff_object)
            if exception and (diff_object not in diff_obj_coll.excepted):
                diff_obj_coll.excepted.append(diff_object)
            if parent:
                # currently parent can only be a task
                parent_key_obj = KeyObject(parent)
                if parent_key_obj in self.tasks.all:
                    parent_diff_object = self.tasks.all[parent_key_obj]
                else:
                    parent_diff_object = self.add_diff_object(DiffType.MODIFIED, parent, Task)
                diff_obj_list = parent_diff_object.references.setdefault(classname, {})
                diff_obj_list[key_object] = diff_object
        return diff_object

    def exceptions_occurred(self):
        num = len(self.project.exceptions)
        num += len([d.exceptions for d in self.tasks.excepted])
        for classname in self.references:
            num += len([d.exceptions for d in self.references[classname].excepted])
        return num

    def log_count(self):
        log("Modified project attributes: %s" % len(self.project.diffs))
        log("Added tasks: %s" % len(self.tasks.added))
        log("Modified tasks: %s" % len(self.tasks.modified))
        log("Deleted tasks: %s" % len(self.tasks.deleted))
        log("Added task links: %s" % len(self.references["cdbpcs_taskrel"].added))
        log("Modified task links: %s" % len(self.references["cdbpcs_taskrel"].modified))
        log("Deleted task links: %s" % len(self.references["cdbpcs_taskrel"].deleted))
        num_added_references = 0
        for classname in self.references:
            num_added_references += len(self.references[classname].added)
        log("Added references: %s" % num_added_references)
        log("Number of exceptions: %s" % self.exceptions_occurred())


class ImportException(Exception):
    """
    Raised in order to cancel a whole import transaction, e.g. when single import operations fail.
    """
    pass
