/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ImportPercentageBar.jsx 180298 2018-07-10 14:33:04Z kbu $"
 */

import React from 'react';
import {PropTypes} from 'cs-web-components-externals';

import {prefixNS} from '../helpers';

export default class ImportPercentageBar extends React.Component {

    constructor(props) {
        super(props);
        this.stretchItems = this.stretchItems.bind(this);
    }

    componentDidMount() {
        window.addEventListener('resize', this.stretchItems);
        this.stretchItems();
    }

    componentDidUpdate() {
        this.stretchItems();
    }

    componentWillUnmount() {
        window.removeEventListener('resize', this.stretchItems);
    }

    stretchItems() {
        const barWidth = document.getElementsByClassName(
            prefixNS('percentage-bar'))[0].getBoundingClientRect().width;

        const emptyElement = document.getElementsByClassName(prefixNS('percentage-bar-empty'))[0];
        emptyElement.setAttribute('width', barWidth - 4);

        const exceptedElement = document.getElementsByClassName(
            prefixNS('percentage-bar-excepted'))[0];
        const exceptedWidth = (barWidth - 6) * this.props.exceptedPercentage / 100;
        exceptedElement.setAttribute('width', exceptedWidth);

        const deletedElement = document.getElementsByClassName(
            prefixNS('percentage-bar-deleted'))[0];
        const deletedWidth = (barWidth - 6) * this.props.deletedPercentage / 100;
        deletedElement.setAttribute('x', exceptedWidth + 3);
        deletedElement.setAttribute('width', deletedWidth);

        const addedElement = document.getElementsByClassName(prefixNS('percentage-bar-added'))[0];
        const addedWidth = (barWidth - 6) * this.props.addedPercentage / 100;
        addedElement.setAttribute('x', exceptedWidth + deletedWidth + 3);
        addedElement.setAttribute('width', addedWidth);

        const modifiedElement = document.getElementsByClassName(
            prefixNS('percentage-bar-modified'))[0];
        const modifiedWidth = (barWidth - 6) * this.props.modifiedPercentage / 100;
        modifiedElement.setAttribute('x', exceptedWidth + deletedWidth + addedWidth + 3);
        modifiedElement.setAttribute('width', modifiedWidth);
    }

    render() {
        return (
            <svg className={prefixNS('percentage-bar')} width={this.props.width}
                 height={this.props.height}>
                <rect className={prefixNS('percentage-bar-empty')}
                      x="2" y="2" rx="2" ry="2" height={this.props.height - 4} />
                <rect className={prefixNS('percentage-bar-excepted')} x="3" y="3"
                      height={this.props.height - 6}>
                    <title>{this.props.exceptedCount}</title>
                </rect>
                <rect className={prefixNS('percentage-bar-deleted')} y="3"
                      height={this.props.height - 6}>
                    <title>{this.props.deletedCount}</title>
                </rect>
                <rect className={prefixNS('percentage-bar-added')} y="3"
                      height={this.props.height - 6}>
                    <title>{this.props.addedCount}</title>
                </rect>
                <rect className={prefixNS('percentage-bar-modified')} y="3"
                      height={this.props.height - 6}>
                    <title>{this.props.modifiedCount}</title>
                </rect>
            </svg>
        );
    }
}

ImportPercentageBar.propTypes = {
    exceptedPercentage: PropTypes.number,
    deletedPercentage: PropTypes.number,
    addedPercentage: PropTypes.number,
    modifiedPercentage: PropTypes.number,
    width: PropTypes.number,
    height: PropTypes.number,
    exceptedCount: PropTypes.number,
    deletedCount: PropTypes.number,
    addedCount: PropTypes.number,
    modifiedCount: PropTypes.number
};
