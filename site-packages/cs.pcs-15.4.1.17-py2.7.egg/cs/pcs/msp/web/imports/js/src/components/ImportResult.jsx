/*
 * Copyright (C) 2017 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ImportResult.jsx 180298 2018-07-10 14:33:04Z kbu $"
 */

import React from 'react';
import {Button} from 'react-bootstrap';
import Immutable from 'immutable';

import {getAppSetup, getJSON, postJSON, Registry, Throbber} from 'cs-web-components-base';
const ContentBlockGroup = Registry.findComponent('cs-web-components-base-ContentBlockGroup');
const Icon = Registry.findComponent('cs-web-components-base-Icon');

import {formatStr} from '../i18n';
import ImportDiffObject from './ImportDiffObject';
import ImportPercentageBar from './ImportPercentageBar';
import {prefixNS} from '../helpers';

const dataLink = getAppSetup().getIn(['links', componentNameSpace, 'dataLink']);

export default class ImportResult extends React.Component {

    constructor(props) {
        super(props);
        this.state = {data: null, error: null, busy: false};
        this.previewImport = this.previewImport.bind(this);
        this.executeImport = this.executeImport.bind(this);
        this.closeWindow = this.closeWindow.bind(this);
    }

    componentDidMount() {
        this.previewImport();
    }

    previewImport() {
        getJSON(dataLink).then(
            data => this.setState({data: Immutable.fromJS(data)}),
            (err) => {err.response.json().then(error => {this.setState({error})})}
        );
    }

    executeImport() {
        this.setState({busy: true});
        postJSON(dataLink).then(
            data => this.setState({data: Immutable.fromJS(data), busy: false}),
            (err) => {err.response.json().then(error => {this.setState({error})})}
        );
    }

    closeWindow() {
        window.close();
    }

    render() {
        const {data, error, busy} = this.state;

        if (error) {
            return (
                <div>
                    <h1><b>{error.title}</b></h1>
                    <h3>{error.explanation}</h3>
                    <p><i>{error.detail}</i></p>
                </div>
            );
        }

        const throbber = (
            <div className={prefixNS('result-please-wait')}>
                <Throbber/><br/>
                {formatStr('please_wait')}
            </div>
        );

        if (!data) {
            return throbber;
        }

        const project = data.get('project');
        const tasks = data.get('tasks');
        const info = data.get('info');
        let synced = false;

        if (info.get('dryRun')) {
            let count = info.get('exceptedCount');
            count += info.get('deletedCount');
            count += info.get('addedPercentage');
            count += info.get('modifiedCount');
            if (count === 0) {
                synced = true;
            }
        } else {
            if (info.get('exceptedCount') === 0) {
                this.previewImport();
                return (null);
            }
        }

        return (
            <div className={prefixNS('result')}>
                <div className={prefixNS('result-header')}>
                    <Button onClick={this.executeImport} disabled={busy || synced}>
                        <Icon size='xs' name='Import' />
                            &nbsp;&nbsp;&nbsp;{formatStr('execute_import')}
                    </Button>
                    <Button onClick={this.closeWindow} disabled={busy}>
                        <Icon size='sm' name='csweb_cancel' />&nbsp;&nbsp;&nbsp;{
                            synced ? formatStr('close') : formatStr('cancel')}
                    </Button>
                    <ImportPercentageBar width='100%' height='36'
                                         exceptedPercentage={info.get('exceptedPercentage')}
                                         exceptedCount={info.get('exceptedCount')}
                                         deletedPercentage={info.get('deletedPercentage')}
                                         deletedCount={info.get('deletedCount')}
                                         addedPercentage={info.get('addedPercentage')}
                                         addedCount={info.get('addedCount')}
                                         modifiedPercentage={info.get('modifiedPercentage')}
                                         modifiedCount={info.get('modifiedCount')} />
                </div>
                {busy ? throbber : null}
                <ImportDiffObject diffObject={project} />
                {synced ?
                 <div className={prefixNS('result-synced')}>{formatStr('synced')}</div> :
                 <ContentBlockGroup>
                     {tasks.map((task, index) =>
                         <ImportDiffObject key={index} diffObject={task} />
                      )}
                 </ContentBlockGroup>}
            </div>
        );
    }
}
