#!/usr/bin/env powerscript
# -*- python -*- coding: UTF-8 -*-
#
# Copyright (C) 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

from __future__ import unicode_literals

import copy
import datetime

from webob.exc import HTTPInternalServerError

from cdb import misc, ue
from cs.platform.web import JsonAPI
from cs.platform.web.root import get_internal, Internal
from cs.platform.web.uisupport import get_ui_link

from cs.pcs.msp.misc import to_locale_date
from cs.pcs.msp.import_results import DiffType
from cs.pcs.msp.web.imports.main import IMPORT_RESULT_APP_NAME

__docformat__ = "restructuredtext en"
__revision__ = "$Id: rest.py 176073 2018-04-18 06:44:28Z kbu $"


class ImportResultApp(JsonAPI):
    pass


@Internal.mount(app=ImportResultApp, path=IMPORT_RESULT_APP_NAME)
def _mount_app():
    return ImportResultApp()


def get_import_result(request):
    return get_internal(request).child(IMPORT_RESULT_APP_NAME)


class ImportResultModel(object):

    def __init__(self, extra_parameters):
        self.extra_parameters = extra_parameters
        self.cdb_project_id = extra_parameters.get("cdb_project_id")
        self.z_nummer = extra_parameters.get("z_nummer")
        self.z_index = extra_parameters.get("z_index", "")
        self.called_from_officelink = extra_parameters.get("called_from_officelink") == "True"

    def get_result(self, request, dry_run):
        from cs.pcs.projects import Project
        project = Project.ByKeys(self.cdb_project_id)
        doc_keys = {"z_nummer": self.z_nummer,
                    "z_index": self.z_index}
        result = project.XML_IMPORT_CLASS.import_project_from_xml(
            project, doc_keys, dry_run, self.called_from_officelink)

        def get_title(diff_object, format, attrs):
            # CAUTION:
            # Original percent characters in the 'format' parameter must be escaped before.
            # E.g. '20% (%s - %s)' -> '20%% (%s - %s)'
            if isinstance(diff_object.pcs_object, dict):
                _values = [(diff_object.pcs_object.get(attr, "") or "") for attr in attrs]
            else:
                _values = [(getattr(diff_object.pcs_object, attr, "") or "") for attr in attrs]
            values = []
            for val in _values:
                values.append(to_locale_date(val)
                              if isinstance(val, (datetime.datetime, datetime.date)) else val)
            return format % tuple(values)

        def jsonable_dict(diff_object):
            if diff_object.classname == "cdbpcs_project":
                title = get_title(diff_object, "%s (%s - %s)",
                                  ["project_name", "start_time_fcast", "end_time_fcast"])
            elif diff_object.classname == "cdbpcs_task":
                title = get_title(diff_object, "%s (%s - %s)",
                                  ["task_name", "start_time_fcast", "end_time_fcast"])
            elif diff_object.classname == "cdbpcs_taskrel":
                title_format = "%s+%s"
                # workaround to see a descriptive task link name in the import preview
                task_name = getattr(diff_object.pcs_object, "task_id2", None) \
                    or diff_object.pcs_object.get("task_id2")
                if task_name:
                    if task_name.startswith("@"):
                        task_name = task_name[1:]
                    else:
                        cdb_project_id2 = getattr(diff_object.pcs_object, "cdb_project_id2", None) \
                            or diff_object.pcs_object.get("cdb_project_id2")
                        from cs.pcs.projects.tasks import Task
                        task = Task.ByKeys(cdb_project_id=cdb_project_id2, task_id=task_name)
                        if task:
                            task_name = task.task_name
                if task_name:
                    task_name = task_name.replace("%", "%%")
                    title_format = "%s %s" % (task_name, title_format)
                title = get_title(diff_object, title_format, ["rel_type", "minimal_gap"])
            elif diff_object.classname == "cdbpcs_checklist":
                title = get_title(diff_object, "%s", ["checklist_name"])
            elif diff_object.classname == "cdbwf_process":
                title = get_title(diff_object, "%s", ["title"])
            references = {}
            for ref_type, refs in diff_object.references.items():
                references[ref_type] = [jsonable_dict(ref_diff_object)
                                        for ref_diff_object in refs.values()]
            return {
                "diff_type": diff_object.diff_type,
                "classname": diff_object.classname,
                "icon_name": diff_object.icon_name,
                "title": title,
                "hyperlink": get_ui_link(request, diff_object.pcs_object),
                "diffs": copy.deepcopy(diff_object.diffs),
                "references": references,
                "exceptions": diff_object.exceptions,
            }

        data = {}
        data["project"] = jsonable_dict(result.project)

        data["tasks"] = []
        for diff_object in result.tasks.all.values():
            data["tasks"].append(jsonable_dict(diff_object))

        total = 1 + len(result.tasks.excepted) + len(result.tasks.added) + result.num_old_tasks
        num_excepted = (1 if len(result.project.exceptions) else 0) + len(result.tasks.excepted)
        num_modified = (1 if (result.project.diff_type == DiffType.MODIFIED) else 0) + \
            len(result.tasks.modified)
        data["info"] = {
            "dryRun": (1 if dry_run else 0),
            "exceptedPercentage": num_excepted * 100.0 / total,
            "exceptedCount": num_excepted,
            "deletedPercentage": len(result.tasks.deleted) * 100.0 / total,
            "deletedCount": len(result.tasks.deleted),
            "addedPercentage": len(result.tasks.added) * 100.0 / total,
            "addedCount": len(result.tasks.added),
            "modifiedPercentage": num_modified * 100.0 / total,
            "modifiedCount": num_modified,
        }
        return data


@ImportResultApp.path(path='/', model=ImportResultModel)
def get_model(extra_parameters):
    return ImportResultModel(extra_parameters)


@ImportResultApp.json(model=ImportResultModel)
def result_get(model, request):
    try:
        return model.get_result(request, True)
    except Exception as ex:
        misc.log_traceback("")
        raise HTTPInternalServerError("%s" % (ex if isinstance(ex, ue.Exception) else repr(ex)))


@ImportResultApp.json(model=ImportResultModel, request_method="POST")
def result_post(model, request):
    try:
        return model.get_result(request, False)
    except Exception as ex:
        misc.log_traceback("")
        raise HTTPInternalServerError("%s" % (ex if isinstance(ex, ue.Exception) else repr(ex)))
