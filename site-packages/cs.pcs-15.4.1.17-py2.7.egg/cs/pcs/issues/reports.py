#!/usr/bin/env powerscript
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 2014 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

"""
Custom data providers
"""

__revision__ = "$Id: reports.py 148667 2016-11-01 10:56:22Z kbu $"

from cdb import cdbtime, sqlapi
from cs.tools import powerreports as PowerReports
from cs.pcs.issues import Issue


class ProjectIssues(PowerReports.CustomDataProvider):
    CARD = PowerReports.CARD_N
    CALL_CARD = PowerReports.CARD_1

    def getData(self, parent_result, source_args, **kwargs):
        t_id = kwargs["task_id"]
        prio = kwargs["priority"]
        cf = kwargs["close_flag"]
        fd = kwargs["fromdate"]
        cdbDateFrom = cdbtime.Time(fd).timetuple()
        td = kwargs["to"]
        cdbDateTo = cdbtime.Time(td).timetuple()

        result = PowerReports.ReportDataList(self)
        p = parent_result.getObject()
        for i in p.Issues:
            cdbDateIssue = cdbtime.Time(i.reported_at).timetuple()
            if ((not t_id or t_id == i.task_id)
                and (not prio or prio == i.priority)
                and (not cf or cf == i.close_flag_oid)
                and (not i.reported_at or (fd == "" or cdbDateFrom <= cdbDateIssue)
                     and (td == "" or cdbDateIssue <= cdbDateTo))):
                result += PowerReports.ReportData(self, i)
        return result

    def getSchema(self):
        return PowerReports.XSDType(self.CARD, Issue, provider=self)

    def getArgumentDefinitions(self):
        return {
            "task_id": sqlapi.SQL_CHAR,
            "fromdate": sqlapi.SQL_CHAR,
            "to": sqlapi.SQL_CHAR,
            "priority": sqlapi.SQL_CHAR,
            "close_flag": sqlapi.SQL_CHAR
        }

    def getClass(self):
        return Issue


class TaskIssues(PowerReports.CustomDataProvider):
    CARD = PowerReports.CARD_N
    CALL_CARD = PowerReports.CARD_1

    def getData(self, parent_result, source_args, **kwargs):
        prio = kwargs["priority"]
        cf = kwargs["close_flag"]
        fd = kwargs["fromdate"]
        cdbDateFrom = cdbtime.Time(fd).timetuple()
        td = kwargs["to"]
        cdbDateTo = cdbtime.Time(td).timetuple()
        result = PowerReports.ReportDataList(self)
        p = parent_result.getObject()
        for i in p.Issues:
            cdbDateIssue = cdbtime.Time(i.reported_at).timetuple()
            if ((not prio or prio == i.priority)
                and (not cf or cf == i.close_flag_oid)
                and (not i.reported_at or (fd == "" or cdbDateFrom <= cdbDateIssue)
                     and (td == "" or cdbDateIssue <= cdbDateTo))):
                result += PowerReports.ReportData(self, i)
        return result

    def getSchema(self):
        return PowerReports.XSDType(self.CARD, Issue, provider=self)

    def getArgumentDefinitions(self):
        return {
            "fromdate": sqlapi.SQL_CHAR,
            "to": sqlapi.SQL_CHAR,
            "priority": sqlapi.SQL_CHAR,
            "close_flag": sqlapi.SQL_CHAR
        }

    def getClass(self):
        return Issue
