#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
# CDB:Browse
# pylint: disable-msg=E0213,E1103,E0102,E0203,W0212,W0621,W0201,W0142

__docformat__ = "restructuredtext en"
__revision__ = "$Id: psp.py 184145 2018-09-19 10:20:16Z umu $"

import sys
from cdb import ue
from cdb import sig
from cdb import misc
from cdb.objects import ByID
from cdb.classbody import classbody
from cdb.objects.org import WithSubject
from cs.pcs.projects import Project
from cs.pcs.projects.tasks import Task

kpsp_id_min_length = 2


class WithPSP(object):

    def getProject(self):
        return Project.ByKeys(self.cdb_project_id)

    def getPSPParent(self):
        return ByID(self.parent_oid)

    def includeParentPSPCode(self):
        return True

    def getPSPSubElements(self):
        return []

    def getPSPID(self):
        return None

    def _calculateNextPSPID(self):
        parent = self.getPSPParent()
        if parent:
            psp_codes = map(lambda x: x.getPSPCode(), parent.getPSPSubElements())
            psp_codes = filter(lambda x: x, psp_codes)
            if psp_codes:
                max_code = max(psp_codes)
                if self.includeParentPSPCode():
                    max_code = max_code[len(parent.getPSPCode()) + 1:]
                try:
                    return int(max_code) + 1
                except (ValueError, TypeError):
                    msg = "Fallback on the number of tasks while the PSP code is being calculated."
                    misc.log_traceback(msg)
            return len(psp_codes) + 1
        return None

    def _fillPSPID(self, psp_id):
        return (u"%s" % psp_id).zfill(kpsp_id_min_length)

    def getPSPCode(self):
        return self.psp_code

    def getNextPSPID(self, psp_id=None):
        code = self.getPSPID()
        if not code and isinstance(psp_id, (int, long)):
            code = self._fillPSPID(psp_id)
        if not code:
            code = psp_id
        if not code:
            code = self._fillPSPID(self._calculateNextPSPID())
        return code

    def resetPSPCode(self):
        self.psp_code = ""
        for s in self.getPSPSubElements():
            s.resetPSPCode()

    def setPSPCode(self, psp_id=None, enforce=False):
        result = []
        code = self.getNextPSPID(psp_id)
        if code:
            if self.includeParentPSPCode():
                parent = self.getPSPParent()
                if parent:
                    code = u"%s.%s" % (parent.getPSPCode(), code)
            if enforce or not self.psp_code:
                self.psp_code = code
        else:
            self.psp_code = u""
            result.append(self.GetDescription())
        sub_elements = self.getPSPSubElements()
        for i in range(len(sub_elements)):
            if enforce:
                result += sub_elements[i].setPSPCode(psp_id=i + 1, enforce=enforce)
            else:
                result += sub_elements[i].setPSPCode(enforce=enforce)
        return result


@classbody
class Project(WithPSP):

    def on_cdbpcs_create_psp_code_now(self, ctx):
        result = self.setPSPCode(enforce=self.status == 0)
        if result:
            output = u"\n".join(result)
            raise ue.Exception(u"cdbpcs_psp_code_invalid", output)
        Project._mark_changed_project(self.cdb_project_id)
        Task._mark_changed_tasks(self.cdb_project_id)

    def getPSPParent(self):
        return self.getParent()

    def includeParentPSPCode(self):
        return False

    def getPSPID(self):
        if self.psp_code:
            return self.psp_code
        return self.cdb_project_id

    def getPSPSubElements(self):
        subelements = self.TopTasks
        if self.SubProjects:
            subelements += self.SubProjects
        return subelements

    @sig.connect(Project, "modify", "pre_mask")
    def set_psp_code_read_only(self, ctx):
        """
        The WBS code can only be recalculated if the project prefix remains unchanged.
        If the project status is New, the code is completely recalculated,
        including the prefix from the project.
        """
        if self.status > Project.NEW.status:
            ctx.set_fields_readonly(["psp_code"])


@classbody
class Task(WithPSP):

    def getPSPParent(self):
        return self.getParent()

    def getPSPSubElements(self):
        return self.SubTasks


class Phase(WithSubject, WithPSP):

    def getPSPID(self):
        return self.ID()

    def getPSPSubElements(self):
        return []


class WorkContingent(WithSubject, WithPSP):

    def getPSPID(self):
        return self.ID()

    def getPSPSubElements(self):
        return []
