#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#
"""
"""

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 159807 2017-06-07 08:43:53Z yzh $"

from cs.platform.web import JsonAPI
from cs.platform.web.root import Internal
from cs.platform.web.root import get_internal
from cs.pcs.projects import Project
from cdb.objects.iconcache import ICON_CACHE


APP_PATH = "cs.pcs.projects"


class ProjectsApp(JsonAPI):
    pass


@Internal.mount(app=ProjectsApp, path=APP_PATH)
def _mount_app():
    return ProjectsApp()


def get_projects_app(request):
    """Try to look up /internal/cs.pcs.projects
    """
    return get_internal(request).child(APP_PATH)


class ProjectKPIs(object):
    def __init__(self, project):
        self.project = project

    def query(self):
        from cs.pcs.dashboard.widget_issues import IssueWidget
        from cs.pcs.dashboard.widget_tasks import TaskWidget
        cst = self.project.get_cost_state()
        sst = self.project.get_schedule_state()
        result = {
            "issues": IssueWidget.get_count(self.project.cdb_project_id, []),
            "overdue_tasks": TaskWidget.get_count(
                self.project.cdb_project_id, ["filter_overdue"]),
            "overdue_milestones": TaskWidget.get_count(
                self.project.cdb_project_id,
                ["filter_overdue", "filter_categ_milestone"]),
            "critical_issues": len(self.project.getCriticalIssues()),
            "cpi": cst[3],
            "cpi_icon": ICON_CACHE.getIcon(
                "cdbpcs_status_effort_fcast", status_effort_fcast=cst[6]),
            "spi": sst[3],
            "spi_icon": ICON_CACHE.getIcon(
                "cdbpcs_status_time_fcast", status_time_fcast=sst[6])
        }
        return result


@ProjectsApp.path(path="project/{cdb_project_id}",
                  model=Project)
def get_project(cdb_project_id):
    return Project.ByKeys(cdb_project_id)


@ProjectsApp.path(path="project/{cdb_project_id}/kpis",
                  model=ProjectKPIs,
                  variables=lambda p: {"cdb_project_id": p.project.cdb_project_id})
def get_project_kpis(cdb_project_id):
    project = get_project(cdb_project_id)
    if not project:
        return None
    return ProjectKPIs(project)


@ProjectsApp.json(model=ProjectKPIs)
def kpis_get(kpis, request):
    """Get kpi data for given project."""
    result = kpis.query()
    result.update({"@id": request.link(kpis)})
    return result
