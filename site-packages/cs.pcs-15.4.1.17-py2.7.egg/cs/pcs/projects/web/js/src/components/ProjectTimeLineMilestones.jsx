/*
 * Copyright (C) 2016 CONTACT Software GmbH
 * All rights reserved.
 * http://www.contact-software.com
 *
 * Revision "$Id: ProjectTimeLineMilestones.jsx 165761 2017-09-25 14:34:43Z yzh $"
 */

import React from 'react';
import {prefixNS, formatDate, getTimeLinePosition, getDateObject} from '../helpers';
import {ImmutablePropTypes, classNames, connect} from 'cs-web-components-externals';
import {referencedObjects, fetchRelship, getRelshipUrl} from 'cs-web-components-base';
import {Popover, OverlayTrigger} from 'react-bootstrap';

const RELSHIPNAME = 'Milestones';

function getMilestoneEnd(milestone) {
    return milestone.get('end_time_fcast');
}

function getMilestoneState(milestone) {
    const today = getDateObject();
    const target = getDateObject(getMilestoneEnd(milestone));
    // TODO: Request that from BE(due to usage of object rules)!!!
    if (target < today) {
        if ([180, 200, 250].indexOf(milestone.get('status')) > -1) {
            return 'success';
        }
        return 'danger';
    }
    return 'default';
}

export class Milestone extends React.PureComponent {
    renderTooltip() {
        const {milestone} = this.props;
        return (
            <Popover id={prefixNS('project-timeline-milestone-info')}
                     title={milestone.get('task_name')}>
                <span>{milestone.get('mapped_subject_name')}</span><br />
                <span>{formatDate(getMilestoneEnd(milestone))}</span><br />
                <span>{milestone.get('joined_status_name')}</span>
            </Popover>
        );
    }

    render() {
        const {project, milestone} = this.props;
        const left = getTimeLinePosition(project, getMilestoneEnd(milestone));
        const state = getMilestoneState(milestone);
        const clsname = classNames(
            prefixNS('project-timeline__milestone'),
            prefixNS(`project-timeline__milestone--${state}`)
        );
        return (
            <OverlayTrigger
                trigger="click"
                rootClose
                placement="top"
                overlay={this.renderTooltip()}
                key={prefixNS('project-timeline-milestone-info-trigger')}>
                <svg viewBox="-5 -5 10 10"
                     className={clsname}
                     style={{left: `${left}%`}}>
                    <polygon points="0,-5 -5,0 0,5 5,0"/>
                </svg>
            </OverlayTrigger>
        );
    }
}

Milestone.propTypes = {
    project: ImmutablePropTypes.map.isRequired,
    milestone: ImmutablePropTypes.map.isRequired
};

export class Milestones extends React.Component {
    constructor(props) {
        super(props);
        this.fetchMilestones = this.fetchMilestones.bind();
    }

    componentDidMount() {
        if (this.props.contextObject) {
            this.fetchMilestones(this.props);
        }
    }

    componentWillReceivProps(nextProps) {
        if (nextProps.contextObject &&
            nextProps.contextObject !== this.props.contextObject) {
            this.fetchMilestones(nextProps);
        }
    }

    fetchMilestones(props) {
        const {contextObject, fetchRelship} = props;
        const url = getRelshipUrl(contextObject, RELSHIPNAME);
        if (fetchRelship) {
            fetchRelship(url);
        }
    }

    render() {
        const {contextObject, milestones} = this.props;
        if (milestones === undefined) {
            return null;
        }
        return (
            <div className={prefixNS('project-timeline__milestones')}>
                {milestones.map(milestone => (
                    <Milestone
                        key={milestone.get('@id')}
                        project={contextObject} milestone={milestone}/>
                ))}
            </div>
        );
    }

}

Milestones.propTypes = {
    contextObject: ImmutablePropTypes.map.isRequired,
    milestones: ImmutablePropTypes.orderedSet
};

function mapStateToProps(state, ownProps) {
    const {contextObject} = ownProps;
    const milestones = referencedObjects(state, contextObject, RELSHIPNAME);
    return {
        milestones
    };
}

export default connect(mapStateToProps, {fetchRelship})(Milestones);
