#!/usr/bin/env python
# -*- python -*- coding: iso-8859-1 -*-
#
# Copyright (C) 1990 - 2013 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/
#

__docformat__ = "restructuredtext en"
__revision__ = "$Id: cdbcalendar_extensions.py 166539 2017-10-11 13:04:44Z heg $"

from cdb import sig
from cdb import cdbtime
from cdb import sqlapi
from cdb import ue
from cs.calendar import workday
from cdb.classbody import classbody

from cdb.objects import Reference_1
from cdb.objects import Reference_N

from cs.pcs.projects import Project
from cs.pcs.projects.tasks import Task
from cdb.objects.org import Person

from cs.calendar import CalendarProfile
from cs.calendar import CalendarEntry
from cs.calendar import CalendarException
from cs.calendar import CalendarDayType


@classbody
class CalendarProfile(object):

    Projects = Reference_N(Project, Project.calendar_profile_id ==
                           CalendarProfile.cdb_object_id)

    Resources = Reference_N(Person, Person.calendar_profile_id ==
                            CalendarProfile.cdb_object_id,
                            Person.is_resource == 1)

    @classmethod
    def get_by_name(cls, name):
        """
        Returns the calendar profile by name, if name exists and name is unique
        :return: cs.calendar.CalendarProfile
        """
        calendar_profiles = cls.KeywordQuery(name=name)
        if len(calendar_profiles) == 1:
            return calendar_profiles[0]
        return None


@classbody
class CalendarEntry(object):

    Project = Reference_1(Project, CalendarEntry.cdb_project_id)

    @sig.connect(CalendarEntry, "cdb_cal_entry_multi_new", "now")
    def signal_cdb_cal_entry_multi_new(self, ctx):
        CalendarEntry._makeMultiEntryProject(ctx)

    @classmethod
    def _makeMultiEntryProject(cls, ctx):
        # Multi entry operation for calendar entries.
        if ctx.dialog.personalnummer != '':
            cls._multiEntryPersonalCalendar(ctx)
        elif ctx.dialog.cdb_project_id != '':
            cls._multiEntryProjectCalendar(ctx)
        ctx.refresh_tables(['cdb_calendar_entry'])

    @classmethod
    def _multiEntryProjectCalendar(cls, ctx):
        # Go through the date range entered in the mask and check against
        # already existing entries. Then, if the day_off_type has changed,
        # delete the old entries and enter new ones.
        cal_day_type = CalendarDayType.ByKeys(ctx.dialog.day_type_id)
        new_day_off = cal_day_type.is_day_off_type
        day_rec = sqlapi\
            .RecordSet2(sql="SELECT day, day_off "
                        "FROM   cdb_project_calendar_v "
                        "WHERE  cdb_project_id = '%s' "
                        "  AND  %s <= day AND day <= %s " %
                        (sqlapi.quote(ctx.dialog.cdb_project_id),
                         sqlapi.SQLdbms_date(ctx.dialog.day_from),
                         sqlapi.SQLdbms_date(ctx.dialog.day_until)))
        chg_ctrl = CalendarEntry.MakeChangeControlAttributes()
        for rec in day_rec:
            if rec.day_off != new_day_off:
                # Create a new one with mask attributes
                # 9711: You don't have permission to create new calendar
                #       entries.
                param = {'day': rec.day,
                         'personalnummer': '',
                         'cdb_project_id': ctx.dialog.cdb_project_id,
                         'calendar_profile_id': '',
                         'day_type_id': ctx.dialog.day_type_id,
                         'description': ctx.dialog.description,
                         'weekday': workday.date2weekday(cdbtime.Time(rec.day).date()),
                         'cdb_cpersno': chg_ctrl['cdb_cpersno'],
                         'cdb_mpersno': chg_ctrl['cdb_mpersno'],
                         'cdb_cdate': chg_ctrl['cdb_cdate'],
                         'cdb_mdate': chg_ctrl['cdb_mdate']}
                cal_entry = CalendarEntry(**param)
                if cal_entry.CheckAccess('create'):
                    # Delete the old one (if exists)
                    oldEntry = CalendarEntry\
                        .Query("cdb_project_id = '%s' AND day = %s" %
                               (sqlapi.quote(ctx.dialog.cdb_project_id),
                                sqlapi.SQLdbms_date(rec.day)))
                    if oldEntry:
                        oldEntry.Delete()
                    CalendarEntry.Create(**param)
                else:
                    raise ue.Exception("cdb_cal_entry_new")

    @sig.connect(CalendarEntry, "create", "post")
    @sig.connect(CalendarEntry, "copy", "post")
    @sig.connect(CalendarEntry, "modify", "post")
    @sig.connect(CalendarEntry, "delete", "post")
    def _checkTasksBySelf(self, ctx):
        if 'old_day' in ctx.ue_args.get_attribute_names():
            old_day = ctx.ue_args['old_day']
        else:
            old_day = None
        if self.cdb_project_id:
            Task.adjustDurations(self.cdb_project_id,
                                 self.day, self.day)
            if old_day:
                Task.adjustDurations(self.cdb_project_id,
                                     old_day, old_day)

    @sig.connect(CalendarEntry, "cdb_cal_entry_multi_new", "post")
    def signal_cdb_cal_entry_multi_post(self, ctx):
        if ctx.dialog.cdb_project_id:
            Task.adjustDurations(ctx.dialog.cdb_project_id,
                                 ctx.dialog.day_from,
                                 ctx.dialog.day_until)


@classbody
class CalendarException(object):

    @sig.connect(CalendarException, "create", "post")
    @sig.connect(CalendarException, "copy", "post")
    @sig.connect(CalendarException, "modify", "post")
    @sig.connect(CalendarException, "delete", "post")
    def _checkTasksBySelf(self, ctx=None):
        # Find the resource assignments
        # affected by this CalendarException
        # i.e. start_date <= Exception Day <= end_date
        sig.emit(CalendarException, "prepareTaskAdjustments")(self)
        daystr = sqlapi.SQLdbms_date(self.day)
        SQLQuery = ("SELECT DISTINCT cdb_project_id "
                    "FROM cdbpcs_task "
                    "WHERE cdb_project_id IN "
                    "(SELECT cdb_project_id "
                    " FROM cdbpcs_project "
                    " WHERE calendar_profile_id = '%s') "
                    " AND ((cdbpcs_task.end_time_fcast is not null and "
                    "            %s<=cdbpcs_task.end_time_fcast)"
                    "      or (cdbpcs_task.end_time_fcast is null and "
                    "            %s<=cdbpcs_task.end_time_plan))"
                    " AND ((cdbpcs_task.start_time_fcast is not null and "
                    "            cdbpcs_task.start_time_fcast<=%s)"
                    "      or (cdbpcs_task.start_time_fcast is null and "
                    "            cdbpcs_task.start_time_plan<=%s))"
                    ) % (sqlapi.quote(self.calendar_profile_id),
                         daystr, daystr,
                         daystr, daystr)
        records = sqlapi.RecordSet2(sql=SQLQuery)
        for task in records:
            Project.adjustCalenderChanges(task.cdb_project_id,
                                           self.day, self.day)
