# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
Module __init__.py

Update scripts of cs.pcs 15.4.1
"""

from cdb import ddl

import re
import urlparse
import urllib

from cdb import sqlapi
from cdb import transactions
from cdb.platform import favourite

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 165970 2017-09-27 12:55:28Z heg $"

# Exported objects
__all__ = []


class DropViews(object):

    tbd_views = [
        'cdbpcs_taskrel_parent_v',
        'cdbpcs_taskrel_cal_v',
        'cdbpcs_taskrel_cal',
        'cdbpcs_critical_path_v',
        'cdbpcs_task_calendar_v',
        'cdbpcs_taskrel_type_v'
    ]

    def run(self):

        for tbd_view in self.tbd_views:

            view = ddl.View(tbd_view)
            if not view:
                continue
            view.drop(check_existence=True)


class MigrateFavorites(object):
    """
    This script migrates the existing favorites.
    """

    def migrate_favorite(self, fav):
        # migrate search favorites
        # change search for cdbpcs_task.subject_name
        # in cdbpcs_task.mapped_subject_name_de
        # also change url build with the old operation 'query'
        kCategoryExp = re.compile(u"^.subject_name$")
        if fav and fav.fav_link:
            url = urlparse.urlparse(fav.fav_link)
            exp = (
                u"^byname/classname/"
                u"(?P<classname>cdbpcs_task|cdbpcs_issue|cdbpcs_checklst|cdbpcs_cl_item)/"
                u"(?P<operation>CDB_Search|query)/"
                u"(?P<mode>batch|interactive)"
            )
            if re.match(exp, url.path):
                query = dict(urlparse.parse_qsl(url.query))
                for attr, value in query.items():
                    if kCategoryExp.match(attr):
                        query[u".mapped_subject_name_de"] = value
                        del query[attr]
                args = (
                    url.scheme,
                    url.netloc,
                    url.path,
                    url.params,
                    urllib.unquote(urllib.urlencode(query)),
                    url.fragment
                )
                fav.fav_link = urlparse.urlunparse(args)

    def run(self):
        with transactions.Transaction():
            # migrate favorites
            for favorite in favourite.Favourite.Query():
                self.migrate_favorite(favorite)


pre = []
post = [
    DropViews
]
