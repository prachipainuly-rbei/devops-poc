# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2017 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

"""
The module provides complex database objects
"""

from cdb.platform.acs import OrgContext

from cdb.platform.mom.fields import DDField
from cdb.platform.mom.fields import DDMultiLangFieldBase

__docformat__ = "restructuredtext en"
__revision__ = "$Id: schema.py 176017 2018-04-17 09:34:48Z umu $"

# Exported objects
__all__ = []


def _generate_select(attr, prefix, classname, attrname, fallback=''):
    """
    Generates a part of a view definition for multilingual display of responsible.
    :param attr: multi language attribute of ``cdb_global_role``
    :param prefix: attribute prefix that has to be used in the view
    :param classname: used to retrieve the data
    :param attrname: used to retrieve the data
                     If it is a multi language attribute, the languages of `attrname` are mapped to the languages
                     of `attr`.
    :param fallback: used as attribute, if no target is given with `classname` and `attrname`
    :return: type unicode
    """
    result = ""
    ml_field = DDMultiLangFieldBase.ByKeys("cdb_global_role", attr)
    target_field = None
    if attrname:
        target_field = DDField.ByKeys(classname, attrname)

    for lang_def in ml_field.LangFields:
        iso_lang = lang_def.cdb_iso_language_code
        fld = fallback
        if target_field:
            if isinstance(target_field, DDMultiLangFieldBase):
                fld = "''"
                # Find the specific language
                for lang_field in target_field.LangFields:
                    if lang_field.cdb_iso_language_code == iso_lang:
                        fld = lang_field.field_name
                        break
            else:
                fld = target_field.field_name

        result += ", %s AS %s%s" % (fld, prefix, iso_lang)
    return result


def generate_sharing_subjects_all():
    """
    Creates a view of all persons, common roles and roles of organizational contexts
    Multi language support does exist for Common Roles and PCS Roles.
    Multi languages support do not apply to persons. Names are not multilingual.
    Multiple languages for other contexts cannot be supported. Role catalog is not known.
    :return: type: unicode
    """
    # Multilanguage names of persons and common roles
    select_names_for_persons = _generate_select("name", "subject_name_", "cdb_person", "name")
    select_names_for_common_roles = _generate_select("name", "subject_name_", "cdb_global_role", "name")

    # Add ID and subject type of persons and common roles
    select_for_persons = """SELECT
                                personalnummer AS subject_id,
                                'Person' AS subject_type,
                                active_account AS active
                                {}
                            FROM angestellter
                         """.format(select_names_for_persons)

    select_for_common_roles = """SELECT
                                     role_id  AS subject_id,
                                     'Common Role' AS subject_type,
                                     '1' AS active
                                     {}
                                 FROM cdb_global_role
                              """.format(select_names_for_common_roles)

    # Add organizational contexts
    all_contexts = OrgContext.Query()

    select_for_pcs_roles = ''
    # Add ID and subject type of PCS Roles, if ProjectContext exists
    if "ProjectContext" in all_contexts.context_name:
        select_names_for_pcs_roles = _generate_select("name", "subject_name_", "cdbpcs_role_def", "name_ml")
        select_for_pcs_roles = """SELECT
                                      name AS subject_id,
                                      'PCS Role' AS subject_type,
                                      '1' AS active
                                      {}
                                  FROM cdbpcs_role_def
                                """.format(select_names_for_pcs_roles)

    # Basic statement of other contexts
    select_names_for_other_context = _generate_select("name", "subject_name_", None, None, "role_id")
    select_for_other_context = """SELECT
                                      DISTINCT role_id AS subject_id,
                                      '%s' AS subject_type,
                                      '1' AS active
                                      {}
                                  FROM %s
                               """.format(select_names_for_other_context)

    # Add ID and subject type of Other Roles
    select_for_all_contexts = list()
    for context in all_contexts:
        if context.context_name in ("GlobalContext", "ProjectContext"):
            # Contexts have already been processed
            continue
        select_for_all_contexts.append(select_for_other_context % (context.role_identifier, context.role_relation))

    context_statement = ''
    if select_for_all_contexts:
        context_statement = " UNION {}".format(' UNION '.join(select_for_all_contexts))

    statement = "{} UNION {} UNION {} {}".format(
        select_for_persons,
        select_for_common_roles,
        select_for_pcs_roles,
        context_statement)

    return statement
