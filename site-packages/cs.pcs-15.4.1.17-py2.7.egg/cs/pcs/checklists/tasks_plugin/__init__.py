# -*- mode: python; coding: utf-8 -*-
#
# Copyright (C) 1990 - 2016 CONTACT Software GmbH
# All rights reserved.
# http://www.contact.de/

__docformat__ = "restructuredtext en"
__revision__ = "$Id: __init__.py 180928 2018-07-23 15:16:01Z cso $"

import os
import urllib
import sys
from collections import defaultdict
from cdb import ue
from cdb import rte
from cdb import sig
from cdb.objects import Forward
from cdb.lru_cache import lru_cache
from cs.platform.web import static
from cs.taskmanager import settings
from cs.taskmanager.mixin import WithTasksIntegration

FILE = __file__.decode(sys.getfilesystemencoding())
PLUGIN = "cs-tasks-checklist-plugin"
VERSION = "15.1.0"
APPDIR = os.path.dirname(FILE)

from cdb import ue
from cdb.objects import IconCache
from cdb.objects import _LabelValueAccessor

fRatingValue = Forward("cs.pcs.checklists.RatingValue")


@lru_cache(maxsize=50, clear_after_ue=False)
def get_rating(schema_name, rating_id):
    for rv in fRatingValue.KeywordQuery(name=schema_name, rating_id=rating_id):
        return rv


class ChecklistWithCsTasks(WithTasksIntegration):
    def getCsTasksContexts(self):
        return [self.Project]

    def csTasksDelegate_get_default(self):
        return self.csTasksDelegate_get_project_manager()

    def csTasksDelegate(self, ctx):
        prj_id = None
        for obj in ctx.objects:
            if not prj_id:
                prj_id = obj[u"cdb_project_id"]
            if prj_id and prj_id != obj[u"cdb_project_id"]:
                raise ue.Exception(u"cdbpcs_delegate")
        self.Super(ChecklistWithCsTasks).csTasksDelegate(ctx)

    def preset_csTasksDelegate(self, ctx):
        prj_id = None
        for obj in ctx.objects:
            if not prj_id:
                prj_id = obj[u"cdb_project_id"]
            if prj_id and prj_id != obj[u"cdb_project_id"]:
                raise ue.Exception(u"cdbpcs_delegate")
        ctx.set("cdb_project_id", prj_id)
        self.Super(ChecklistWithCsTasks).preset_csTasksDelegate(ctx)


class ChecklistItemWithCsTasks(WithTasksIntegration):
    def getCsTasksContexts(self):
        return [self.Project]

    def csTasksDelegate_get_default(self):
        return self.csTasksDelegate_get_project_manager()

    def csTasksDelegate(self, ctx):
        prj_id = None
        for obj in ctx.objects:
            if not prj_id:
                prj_id = obj[u"cdb_project_id"]
            if prj_id and prj_id != obj[u"cdb_project_id"]:
                raise ue.Exception(u"cdbpcs_delegate")
        self.Super(ChecklistItemWithCsTasks).csTasksDelegate(ctx)

    def preset_csTasksDelegate(self, ctx):
        prj_id = None
        for obj in ctx.objects:
            if not prj_id:
                prj_id = obj[u"cdb_project_id"]
            if prj_id and prj_id != obj[u"cdb_project_id"]:
                raise ue.Exception(u"cdbpcs_delegate")
        ctx.set("cdb_project_id", prj_id)
        self.Super(ChecklistItemWithCsTasks).preset_csTasksDelegate(ctx)

    def _getObjIcon(cls, icon_id, obj):
        return IconCache.getIcon(icon_id, None, _LabelValueAccessor(obj, True))

    def getCsTasksType(self, request=None):
        return {
            "tooltip": self.GetClassDef().getDesignation(),
            "icon": self.GetObjectIcon(),
        }

    def _getCustomRatingIcon(cls, icon_id, args_dict):
        return "/resources/icons/byname/{}?{}".format(
            urllib.quote(icon_id.encode("utf-8")), urllib.urlencode(args_dict))

    def getCsTasksStatusData(self, rating=None, request=None):
        @lru_cache(maxsize=50, clear_after_ue=False)
        def _status_data(rating_schema, rating, use_obj_icon):
            _icon_id_ = "cdbpcs_cl_item_object"
            if use_obj_icon:
                url_icon = self._getCustomRatingIcon(
                    _icon_id_,
                    {"rating_id": (
                        "" if rating.rating_id == "clear"
                        else rating.rating_id),
                     "rating_scheme": rating_schema,
                     "type": "Checklist"})
            else:
                url_icon = self._getObjIcon(_icon_id_, self)

            if rating:
                data = {
                    "label": rating.Value[""] if rating else "",
                    "rating_schema": rating_schema,
                    "icon_url": url_icon,
                    "rating_id": rating.rating_id,
                    "priority": rating.position,
                }
            else:
                # no "clear" rating defined
                data = {
                    "label": "--",
                    "rating_schema": None,
                    "icon_url": url_icon,
                    "rating_id": None,
                    "priority": None,
                }

            return {
                "custom_renderer": "{}-ChecklistItemStatusCellRenderer".format(
                    PLUGIN),
                "data": data
            }

        rating_schema = self.RatingSchema.name
        use_obj_icon = not rating is None

        if not rating:
            rating = self.Rating
            if not rating:
                rating = get_rating(
                    rating_schema,
                    self.rating_id if self.rating_id else "clear")

        return _status_data(rating_schema, rating, use_obj_icon)

    def getCsTasksProceedData(self, request=None, targets=False):
        def _proceed_data(rating_schema, rating_id, targets):
            ratings = [] if not targets else sorted(
                [self.getCsTasksStatusData(rv, request=request)
                    for rv in rating_schema.RatingValues
                    if rv.rating_id != rating_id],
                key=lambda x: (x["data"]["priority"]))
            return {
                "current": self.getCsTasksStatusData(request=request),
                "targets": ratings,
            }

        return _proceed_data(self.RatingSchema, self.rating_id, targets)

    def _csTasksProceedNow(self, proceed_to, **kwargs):
        checklist = self.Checklist
        try:
            self.change_status_of_checklist(checklist.NEW, checklist.EVALUATION)
        except Exception, error:
            return {"error": str(error)}
        try:
            result = self.tryRating(proceed_to["rating_id"], True)
            if result:
                return {
                    "error": str(ue.Exception(
                        "pcs_err_cp_rating2",
                        "{} ({})".format(checklist.checklist_name,
                                         checklist.checklist_id)))
                }
        except Exception, e:
            return {"error": str(e)}


@sig.connect(settings.REGISTER_TABLE_SETTINGS)
def register_table_settings(register_file):
    register_file(os.path.join(APPDIR, "table_settings.json"))


@sig.connect(rte.APPLICATIONS_LOADED_HOOK)
def _register_libraries():
    lib = static.Library(
        PLUGIN,
        VERSION,
        os.path.join(APPDIR, 'js', 'build'))
    lib.add_file("{}.js".format(PLUGIN))
    lib.add_file("{}.js.map".format(PLUGIN))
    static.Registry().add(lib)
