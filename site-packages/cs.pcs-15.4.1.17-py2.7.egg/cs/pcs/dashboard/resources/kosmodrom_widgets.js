/**
 * Kosmodrom Application
 * @param appContext: the selector of the context element for this
 *                application.
 */
function cdbElinkKosmodrom(appContext) {
  // Application Name
  this.appName = 'Kosmodrom';
  // Application event namespace
  this.eventNS = '.kosmodrom.cdbelink';

  this.currProject = '';
  this.popupWindow = null;
  // the selector to find the widgt block to open the details in block instead
  // of on the popup window
  // default: a collapsible block
  this.detailWidgetBlock = '.block-container.block-collapsible';
  // Should be set to '' for relative path
  this.ajaxRootURL = cdb.elink.baseURL + 'powerscript/cs.pcs.dashboard/';
  this.openCommentField = [];
};

//Inherites elinkBase
cdbElinkKosmodrom.prototype = new cdbElinkBase();

/**
 * Toggles the icon of the 'read more' button while
 * collapsing/expanding.
 * @param btn: the toggle event trigger
 */
cdbElinkKosmodrom.prototype.togglePlus = function(btn) {
  btn.find('i').each(function() {
    $(this).toggleClass($(this).data('elink-toggle-class1')).toggleClass(
        $(this).data('elink-toggle-class2'));
  });
};

/**
 * Checks whether the long object descriptions are overflowed.
 * Removes unnecessary '+' buttons.
 */
cdbElinkKosmodrom.prototype.checkDescOverflowed = function(parent) {
  $('div.detail-desc span.show-more', parent).each(function() {
    var descp = $(this).siblings('.object-desc');
    // Also checks the text.length to avoid 0-scroll width causing by
    // delayed rendering
    if ((descp.text().length <= 0 ||
          descp.get(0).scrollWidth > 0 ||
          descp.get(0).scrollHeight > 0) &&
        descp.get(0).scrollWidth<=descp.width()+1 &&
        descp.get(0).scrollHeight<=descp.height()+1) {
      $(this).remove();
    }
  });
};

/**
 * Checks whether the long object descriptions are overflowed by event.
 * Because the element may not be rendered completely on modal animation by
 * firefox - it returns scrollHeight=0
 * (Event handler)
 */
cdbElinkKosmodrom.prototype.onCheckDescOverflow = function(event) {
  this.checkDescOverflowed($(event.currentTarget));
};

/**
 * Opens the detail object list.
 * (Event handler)
 */
cdbElinkKosmodrom.prototype.openList = function(event) {
  var target = $(event.currentTarget);
  var detailWidget = target.data('elink-kosmodrom-detail-widget');
  this.currProject = target.closest(
        'div[data-elink-cdb_project_id]').attr('data-elink-cdb_project_id');
  var widgetBlock = this.context.find('div[data-elink-cdb_project_id="' +
                                      this.currProject +
                                      '"]')
                                .find(this.detailWidgetBlock)
                                .has('.kosmodrom-detail-object-list' +
                                     '[data-elink-kosmodrom-detail-widget=' +
                                     detailWidget +
                                     ']');
  if (widgetBlock.length > 0) {
    widgetBlock.data('elink-kosmodrom-detail-filters',
                     target.data('elink-kosmodrom-detail-filters'));
    widgetBlock.data('elink-kosmodrom-detail-page', 1);
    this.openWidgetBlock(widgetBlock);
  } else {
    this.popupWindow.data('elink-kosmodrom-detail-widget', detailWidget);
    this.popupWindow.data('elink-kosmodrom-detail-filters',
                          target.data('elink-kosmodrom-detail-filters'));
    this.popupWindow.data('elink-kosmodrom-detail-page', 1);
    this.popupWindow.find('div.modal-header h2').empty();
    this.popupWindow.find('div.modal-header div.filter-container').empty();
    this.popupWindow.modal('show');
  }
};

/**
 * Navigates to page No. of the detail object list on modal
 * (Event handler)
 */
cdbElinkKosmodrom.prototype.navigateModalPage = function(event) {
  event.preventDefault();
  var target = $(event.currentTarget);
  var app = this;
  this.popupWindow.data('elink-kosmodrom-detail-page',
                        target.data('elink-paginator-page'));
  this.popupWindow.modal('show');
};

/**
 * Navigates to page No. of the detail object list in widget
 * (Event handler)
 */
cdbElinkKosmodrom.prototype.navigateWidgetPage = function(event) {
  event.preventDefault();
  var target = $(event.currentTarget);
  var app = this;
  var block = target.closest(app.detailWidgetBlock);
  block.data('elink-kosmodrom-detail-page',
             target.data('elink-paginator-page'));
  block.trigger('loadlist');
};

/**
 * Prepares data to reload list.
 * - filters
 * - page No.
 */
cdbElinkKosmodrom.prototype.getReloadParameters = function(target) {
  var widgetName = target.data('elink-kosmodrom-detail-widget');
  if (!widgetName) {
    widgetName = target.find('.kosmodrom-detail-object-list' +
                             '[data-elink-kosmodrom-detail-widget]')
                       .data('elink-kosmodrom-detail-widget');
  }
  var data = {'cdb_project_id': this.currProject,
              'widget': widgetName};
  var filterStr = target.data('elink-kosmodrom-detail-filters');
  if (filterStr==undefined) {
    filterStr = this.getDetailFilters(target);
  }
  var filters = filterStr.split(',');
  for(var i=0;i<filters.length;i++) {
    var filter = $.trim(filters[i]);
    data[filter] = 1;
  }
  data['load_page_no'] = target.data('elink-kosmodrom-detail-page');
  return data;
};

/**
 * Prepares data to filter list.
 */
cdbElinkKosmodrom.prototype.getDetailFilters = function(target) {
  var container = target.is('[data-elink-filter]') ?
        target.closest('[data-elink-kosmodrom-detail-target=filters]') :
        target.find('[data-elink-kosmodrom-detail-target=filters]').first();
  return $.map(
      container.find(
        '[data-elink-filter].elink-filter-on'),
      function(n, i) {
        return $(n).data('elink-filter');
      }).join(',');
};

/**
 * Loads data into modal window.
 * (Event handler)
 */
cdbElinkKosmodrom.prototype.loadModalData = function(event) {
  var target = $(event.currentTarget);
  var app = this;
  var data = app.getReloadParameters(app.popupWindow);
  target.find('div.modal-body').first().empty().load(
      app.ajaxRootURL + 'list',
      data,
      function() {
        // LoadComplete: move filter from content to window header
        var filters = $(this).find('[data-elink-kosmodrom-detail-target=filters]').detach();

        filters.appendTo(
            $('div.modal-header div.filter-container',
              app.popupWindow).empty()).removeClass('hide');

        // moves title to modal header
        var titleDiv = $(this).find('[data-elink-kosmodrom-detail-target=title]');
        app.popupWindow.find('div.modal-header h2').empty().html(titleDiv.html());
        titleDiv.remove();
        // checks whether descriptions are overflowed
        app.checkDescOverflowed($(this));
      }
  );
  // Remark the current project to keep scroll position after page reload
  if (app.currProject) {
    window.location.hash = app.currProject;
  }
};

/**
 * Hides the modal window.
 * (Event handler)
 */
cdbElinkKosmodrom.prototype.hideModal = function(event) {

};

/**
 * Updates the modal window after changing filters.
 * (Event handler)
 */
cdbElinkKosmodrom.prototype.filterModal = function(event) {
  var target = $(event.currentTarget);
  var app = this;
  app.popupWindow.data(
      'elink-kosmodrom-detail-filters',
      app.getDetailFilters(target));
  app.popupWindow.data('elink-kosmodrom-detail-page', 1);
  app.popupWindow.trigger('show');
};

/**
 * Opens the widget block to show object list
 * @param blocks: the target block(s)
 */
cdbElinkKosmodrom.prototype.openWidgetBlock = function(blocks) {
  var block = blocks.first();
  if (!block.is(':has(.block-content.collapse.in)')) {
    block.find('div.block-action [data-toggle]').trigger('click');
  }
  block.trigger('loadlist');
};

/**
 * Loads data into widget.
 * (Event handler)
 */
cdbElinkKosmodrom.prototype.loadWidgetData = function(event) {
  var target = $(event.currentTarget);
  var app = this;
  var data = app.getReloadParameters(target);
  target.find('div.block-content').first().empty().load(
      app.ajaxRootURL + 'list',
      data,
      function() {
        $(this).find('[data-elink-kosmodrom-detail-target=filters]').removeClass('hide');

        // moves title to modal header
        var titleDiv = $(this).find('[data-elink-kosmodrom-detail-target=title]');
        target.find('div.block-title h2').empty().html(titleDiv.html());
        titleDiv.remove();

        // checks whether descriptions are overflowed
        app.checkDescOverflowed($(this));
        // scrolls to the widget if necessary
        cdb.elink.scrollTop(target.position().top);
      }
  );
};

/**
 * Updates the widget after changing filters.
 * (Event handler)
 */
cdbElinkKosmodrom.prototype.filterWidget = function(event) {
  var target = $(event.currentTarget);
  var app = this;
  var block = target.closest(app.detailWidgetBlock);
  app.currProject = target.closest('div[data-elink-cdb_project_id]')
                          .attr('data-elink-cdb_project_id');
  block.data('elink-kosmodrom-detail-filters',
             app.getDetailFilters(target));
  block.data('elink-kosmodrom-detail-page', 1);
  block.trigger('loadlist');
};

/**
 * Toggles long descriptions.
 * (EH)
 */
cdbElinkKosmodrom.prototype.toggleLongDesc = function(event) {
  var target = $(event.currentTarget);
  target.siblings('p.object-desc').toggleClass('show-all');
  this.togglePlus(target);
  // fixes IE height problem
  if ($.browser.msie) {
    target.closest('.block-content.collapse.in').height('auto');
  }
};


/**
 * The start up function which will be called once after loading document.
 */
cdbElinkKosmodrom.prototype.start = function () {
  this.setAppRefresh(false);

  this.popupWindow = $('.modal.kosmodrom-popup-modal', this.context);

  if($('div[data-elink-cdb_project_id]', this.context).length==1) {
    this.currProject = $('div[data-elink-cdb_project_id]', this.context).attr(
                            'data-elink-cdb_project_id');
  }

  // Fixes the IE problem: it dosen't jump to anchor automatically if
  // the page is reloaded by window.location.reload
  if (window.location.hash) {
    window.location.hash = window.location.hash;
  }

  // Opens modal window on click
  $('div.kosmodrom-project-overview-widget div.info-list a[data-elink-kosmodrom-detail-widget]',
    this.context).on(
      this.nsEvents('click'),
      this.appEventHandler('openList'));

  // Loads the content of pop-up window dynamically
  this.popupWindow.on(
        this.nsEvents('show'),
        this.appEventHandler('loadModalData'))
      .on(
        this.nsEvents('hide'),
        this.appEventHandler('hideModal'))
      .on(
        this.nsEvents('filter'),
        '[data-elink-filter]',
        this.appEventHandler('filterModal'))
      .on(
          this.nsEvents('click'),
          '.pagination li:not(.disabled):not(.active)' +
            '[data-elink-paginator-page]',
          this.appEventHandler('navigateModalPage'))
      .on(
        this.nsEvents('shown'),
        this.appEventHandler('onCheckDescOverflow'));

  // Listens to widget block events
  this.context
      .on(
        this.nsEvents('loadlist'),
        this.detailWidgetBlock,
        this.appEventHandler('loadWidgetData'))
      .on(
        this.nsEvents('filter'),
        this.detailWidgetBlock + ' [data-elink-filter]',
        this.appEventHandler('filterWidget'))
      .on(
        this.nsEvents('click'),
        this.detailWidgetBlock + ' .pagination ' +
          'li:not(.disabled):not(.active)[data-elink-paginator-page]',
        this.appEventHandler('navigateWidgetPage'));

  // Initiates the popovers
  $('div.kosmodrom-project-overview-widget div.timeline-milestone', this.context).popover();

  // Toggles the display of long descriptions
  this.context.on(
        this.nsEvents('click'),
        'div.detail-desc span.show-more',
        this.appEventHandler('toggleLongDesc')
      );

  // Checks text overflow
  this.checkDescOverflowed(this.context);

  // Set the paginator hyperlinks for project list
  var projPaginator = this.context.find('.projectpaginator.kosmodrom');
  if (projPaginator.length > 0) {
    var ovURL = this.makeUrl(projPaginator);
    projPaginator.find(
        '.pagination li:not(.disabled):not(.active)[data-elink-paginator-page]'
    ).each(function() {
      $(this).find('a').attr('href', ovURL + $(this).data('elink-paginator-page'));
    });
  }
};

cdbElinkKosmodrom.prototype.makeUrl = function(paginator) {
  var urlParams = this.getUrlParams();
  delete urlParams['page_no'];

  if (!('project' in urlParams)) {
    return cdb.elink.appRoot + '?page_no=';
  }

  return cdb.elink.appRoot + '?' + this.buildUrlParams(urlParams) + '&page_no=';
};

cdbElinkKosmodrom.prototype.getUrlParams = function() {
  var url = window.location.search;
  var request = {};
  var pairs = url.substring(url.indexOf('?') + 1).split('&');

  for (var i = 0; i < pairs.length; i++) {
    if(!pairs[i])
        continue;
    var pair = pairs[i].split('=');
    var key = decodeURIComponent(pair[0]);
    var value = decodeURIComponent(pair[1]);
    if (key in request) {
      if (typeof request[key] === 'string') {
        request[key] = [request[key], value];
      } else {
        request[key].push(value);
      }
    } else {
      request[key] = value;
    }
  }

  return request;
}

cdbElinkKosmodrom.prototype.buildUrlParams = function(params) {
  var pairs = [];
  for (var key in params) {
    if (typeof params[key] !== 'string') {
      pairs.push(this.buildUrlParamArray(key, params[key]))
    } else if (params.hasOwnProperty(key)) {
      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
    }
  }
  return pairs.join('&');
}

cdbElinkKosmodrom.prototype.buildUrlParamArray = function(key, array) {
  var pairs = [];
  array.forEach(function(value) {
    pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
  })
  return pairs.join('&');
}
