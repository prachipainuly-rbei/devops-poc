.. _`design_system_guidelines_design_principles`:

Design Principles
#################

Introduction
============
The Elements Design System shall reflect our values_ and connected design principles_ in order to speak a consistent and unified language. By establishing these beacons we want to bring everyone on a common understanding which qualities and characteristics we strive for in our daily work.

These values_ and principles_ enable us to discuss and evaluate problems, solutions and the status quo of our products. That's why we encourage everyone to read and adopt them.

Values
======
Values are the product attributes and qualities, which we want our customers to experience. They are the backbones of the User Experience we strive for.

Trust
-----
Our software is used on daily basis for important tasks and processes. Therefore our users should be able to rely on the product to accomplish their goals.

Connected Principles: Feedback_, Layers_

Joy
---
Rather than being merely a heavy tool, our software should be pleasant and fun to use. The user interface and interaction design is our key, for bringing users joy while working with the software.

Connected Principles: Visualize_, Responsiveness_

Efficiency
----------
Under most circumstances efficiency is the key for users to feel successful and confident. Efficient operation of the software depends on high-quality performance. Performance and usability contribute a lot if people are able to be efficient or not. If we foster both, they will greatly contribute to a good user satisfaction.


Connected Principles: Affordance_, Context_, `Building Blocks`_, Contrast_, Visualize_, Responsiveness_

------------

Principles
==========
Our design principles reflect the design values_ while giving more specific guidance for designing our product. They should help our company remain focused on a consistent and prioritized product experience, while giving enough freedom to apply them universally.


Feedback
--------
**Sufficient and accurate feedback is the key for users to feel in control. Users can proceed their tasks depending on the feedback.**

What this means
^^^^^^^^^^^^^^^
* Our Interface responds to every interaction, ensuring our users that it is alive and working. If something is not active it shouldn’t be displayed at all or be temporally disabled.
* If there is an error and we can‘t communicate in a human understandable language, we avoid doing it. We rather communicate that there is a problem and help her overcome it in a simple but direct way. Our feedback messages should always serve and recommend actions.
* We only interfere the interaction of our users if the problem is critical. When it‘s not, our feedback messages keep calm and conservative.
* We do not only communicate errors but also warnings, successes and system notifications in order to be completely transparent with our users. Just like error messages, they ensure, that our users can proceed and stay in flow.


Examples
^^^^^^^^
* Our Interface responds to every interaction, ensuring our users that it is alive and working.
* If something is not active it shouldn’t be displayed at all or be temporally disabled.
* If something is still loading, the user interface should communicate the state and inform users.

.. figure:: images/guidelines_principles_01-01.png
   :alt: Components shall communicate what they are doing or what happened. Otherwise they will be perceived as non-working elements of the interface.

Components shall communicate what they are doing or what happened. Otherwise they will be perceived as non-working elements of the interface.

------------

* We only interrupt the interaction of our users if the problem is critical. If not, our feedback messages keep calm and conservative.
* We do not only communicate critical errors but also neutral, negative and positive notifications in order to be completely transparent with our users. Just like error messages, they ensure, that our users can proceed in flow.


.. figure:: images/guidelines_principles_01-02.png
   :alt: We maintain different feedback types for different scenarios. For example we recommend using modals rarely as they interrupt a user‘s task flow. You should only use them in error or warning scenarios with critical extent.

For example we recommend using modals rarely as they interrupt a user‘s task flow. You should only use them in error or warning scenarios with critical extent.



Affordance
----------
**Possible interactions are obvious to the user. The metaphors are clear and distinct.**

What this means
^^^^^^^^^^^^^^^
* We make sure our users know what they can do in an application, by making important functions and navigational points directly visible and accessible.
* The visualization of interactivity can have several dimensions. While in many cases it is important to prominently visualize that an element is clickable, in other cases it may be sufficient to signal the interactive nature of an element only when the cursor approaches.


Examples
^^^^^^^^
.. figure:: images/guidelines_principles_02-01.png
   :alt: While important functions are clearly represented by shape and color as buttons, less important functions or functions that occur frequently on a page are less striking. Nonetheless both use cursor types to signalize their interactive nature.

While important functions are clearly represented as buttons due to their  shape and color, less important functions, functions that occur frequently on a page and functions that are well known patterns (e.g. closing a dialogue, expanding/collapsing a content block) are less striking visualized. Nonetheless all of them use specific cursors to signalize their interactivity.


Context
-------
**Similar interaction patterns should be consistent across the product. When the context requires a different approach to improve usability, consistency can be compromised.**

What this means
^^^^^^^^^^^^^^^
* In order to decrease our user‘s cognitive load, the product needs to have a consistent standardized design in order to improve usability and efficiency.
* If our consistent patterns doesn‘t provide the aspired usability and efficiency, you are free to question them and „break out“. However, you should be aware, that being non-consistent has a cost to the user as it increases the learning curve and cognitive load. If you want to disrupt or innovate, ensure and validate that your approach is actually better and not just different.

.. figure:: images/guidelines_principles_03-01.png
   :alt: In some cases it makes sense to break out of the common component usage. For tasks the table was customized to highlight important fields like the due date. Moreover rows were emphasized if the related task was not read yet.

In some cases it makes sense to break out of the common paradigms of the Elements UI. The object header of a project's object page for example was extended with a timeline giving more contextual information about the project's progress.

Layers
------
**Our system consist of three layers, shaping the overall foundation of our system. The first transports our brand by color and is the base of our interfaces.  The second is the home for our components where each color used has a specific semantic. The third is our service layer, where we communicate feedback messages.**

What this means
^^^^^^^^^^^^^^^
* The base and ribbon layer of CONTACT Elements is brandable.
* Applications represent layers on top of the base layer, incorporating individual components, layouts and interaction paradigms.
* Dialogs and feedback messages are placed on the foremost layer. It is possible to brand this layer, too.


Examples
^^^^^^^^
.. figure:: images/guidelines_principles_04-01.png

**Base layer (first):**
Transportation of the product branding

.. figure:: images/guidelines_principles_04-02.png

**Content layer (second):**
Placement of Elements UI components

.. figure:: images/guidelines_principles_04-03.png

**Ribbon layer (third):**
Transportation of the product branding

Contrast
--------
**We design for contrast between our elements by bold use of shape and color. This makes functions and containers immediately apparent in a constructive way and provides clear guidance for the user. Moreover it is meant to support our brand identity.**

What this means
^^^^^^^^^^^^^^^
* We want our applications to feel vibrant and modern in contrast to other office applications used in the industry. We strive to stand out and be bold in the product branding.
* Moreover, we use contrast in order to enable a user to distinguish between interactive and non-interactive elements as well as different types of interactive elements. Elements with which the user can interact with, should stand out from other parts of the application by using clear shapes.
* Vivid colors are used to give our components and interface elements a semantic within the application. See the chapter :doc:`design_system_styles_color` for illustrated examples.


Examples
^^^^^^^^
.. figure:: images/guidelines_principles_05-01.png
   :alt: We use contrast in order to enable a user to distinguish between interactive and non-interactive elements as well as different types of interactive elements. Elements with which the user can interact with, should stand out from other parts of the application.

We use contrast in order to enable a user to distinguish between interactive and non-interactive elements as well as different types of interactive elements. Elements with which the user can interact with, should stand out from other parts of the application.

Building Blocks
---------------
**We design the elements of user interface not as isolated components but as part of a bigger whole in which they are reusable for different contexts. This Lego® approach fosters consistency and enables a coherent and intuitive experience throughout every application.**

What this means
^^^^^^^^^^^^^^^
* By designing our elements as building blocks which can be stacked with each other, it becomes easy for users to orientate themselves. Users can easily recognize specific components/functions throughout our applications and use them accordingly.
* Nevertheless consistency never beats context. Thus we advocate to rethink the recycling of a component while designing a new application or view.

Visualize
---------
**We design our interfaces to be visual and tangible. Imagery, graphs and videos boost clarity and add meaning to otherwise raw data.**

What this means
^^^^^^^^^^^^^^^
* We use images, icons, graphs, diagrams, videos and 3D models to give our users more tangible elements to work with. Visuals like these help users to locate themselves and create virtual rooms in their mind. Moreover they provide a more joyful experience than what only tables or raw data sets deliver.
* Even though visual elements shall be important actors of the show, our users might require large data sets and tables within one view. Please be aware of that and don‘t overdo imagery. Use it as a supporting element only.


Examples
^^^^^^^^
.. figure:: images/guidelines_principles_07-01.png
   :alt: Nearly every object has something to show apart from its obligatory raw data. Provide this to our users, in order to make the interface more meaningful, vibrant and fun to use.

Nearly every object has something to show apart from its obligatory raw data. Provide this to our users, in order to make the interface more meaningful, vibrant and fun to use.

.. Motion
   ------
   **We strive for a moving and breathing interface. Motion provides attention and guides the userbetween interaction steps. Moreover it adds meaning, rhythm and energy to an otherwise static interface.**

   What this means
   ^^^^^^^^^^^^^^^

   * Our interface should behave like a living system. Moving and transitioning interfaces help to guide users and makes an interaction more pleasant as the interface will feel natural and alive.
   * Moving things around should not slow down or disrupt the user though. Animations have to be subtle and short rather than being aggressive and long.
   * We use animations for different scenarios:
   * For elements entering/exiting the screen: Creation/deletion of an object, opening/closing of a modal, …
   * For elements already on the screen, which shall be emphasized: New Notification, New Activity in Activity Stream, …
   * For elements moving from one point to another or changing in shape, color or size: Tabs are changed, Images are scaled, Sidebars/Accordions are collapsed/expanded, …
   * For elements transporting our brand via key motions: Throbber, Welcome (Login), Goodbye (Logout), …

Responsiveness
--------------
**Our product is used by people. They use it in different contexts and on different devices. We need our system to adapt and respond to it, rather than forcing our users to do so. All important functions must be usable whether the interface is served on a smaller laptop screen or a larger desktop screen.**

What this means
^^^^^^^^^^^^^^^
* For now most of our users work in desktop environments and thus have an adequate screen space. That's why our minimum supported screen resolution is 1366x768px. All features and controls should be easily available on screens of this size.

* Depending on the context, selective features should be operatable on a mobile phone (e.g. reading the Activities).


Examples
^^^^^^^^
.. figure:: images/guidelines_principles_09-01.png
   :alt: The Object Header adapts to the given space while ensuring that its content  is still readable on small screen sizes.

The Object Header adapts to the given space while ensuring that its content  is still readable on small screen sizes.

.. _`design_principle_accessibility`:

.. Accessibility
   -------------
   **Our product enables people with disabilities to perceive, understand, navigate and interact with the system. If we need to sacrifice aesthetics for it, we do so.**

   What this means
   ^^^^^^^^^^^^^^^
   * We test our color usage in order to conform with WCAG 2.0, meaning that the visual presentation of text and images of text has a contrast ratio of at least 4.5:1. You can check designs with https://marijohannessen.github.io/color-contrast-checker/ and the implementation with https://chrome.google.com/webstore/detail/color-contrast-analyzer/dagdlcijhfbmgkjokkjicnnfimlebcll.
   * We name and entitle all of our interface elements, so that screen readers are able to interpret them.


   Examples
   ^^^^^^^^
   .. figure:: images/guidelines_principles_10-01.png
   :alt: Don‘t display important text in low contrast to its background.

   Don‘t display important text in low contrast to its background.